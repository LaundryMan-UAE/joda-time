//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
//

#include "BasicChronology.h"
#include "BasicWeekyearDateTimeField.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "ImpreciseDateTimeField.h"
#include "java/lang/Math.h"

@implementation OrgJodaTimeChronoBasicWeekyearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyear] withLong:[((OrgJodaTimeChronoBasicChronology *) nil_chk(chronology)) getAverageMillisPerYear]]) {
    iChronology_ = chronology;
  }
  return self;
}

- (BOOL)isLenient {
  return NO;
}

- (int)getWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)years {
  if (years == 0) {
    return instant;
  }
  return [self setWithLong:instant withInt:[self getWithLong:instant] + years];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  return [self addWithLong:instant withInt:[OrgJodaTimeFieldFieldUtils safeToIntWithLong:value]];
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)years {
  return [self addWithLong:instant withInt:years];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[self getDifferenceWithLong:subtrahendInstant withLong:minuendInstant];
  }
  int minuendWeekyear = [self getWithLong:minuendInstant];
  int subtrahendWeekyear = [self getWithLong:subtrahendInstant];
  long long int minuendRem = [self remainderWithLong:minuendInstant];
  long long int subtrahendRem = [self remainderWithLong:subtrahendInstant];
  if (subtrahendRem >= OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 && [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:minuendWeekyear] <= 52) {
    subtrahendRem -= OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  int difference = minuendWeekyear - subtrahendWeekyear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)year {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:[JavaLangMath absWithInt:year] withInt:[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear] withInt:[iChronology_ getMaxYear]];
  int thisWeekyear = [self getWithLong:instant];
  if (thisWeekyear == year) {
    return instant;
  }
  int thisDow = [iChronology_ getDayOfWeekWithLong:instant];
  int weeksInFromYear = [iChronology_ getWeeksInYearWithInt:thisWeekyear];
  int weeksInToYear = [iChronology_ getWeeksInYearWithInt:year];
  int maxOutWeeks = (weeksInToYear < weeksInFromYear) ? weeksInToYear : weeksInFromYear;
  int setToWeek = [iChronology_ getWeekOfWeekyearWithLong:instant];
  if (setToWeek > maxOutWeeks) {
    setToWeek = maxOutWeeks;
  }
  long long int workInstant = instant;
  workInstant = [iChronology_ setYearWithLong:workInstant withInt:year];
  int workWoyYear = [self getWithLong:workInstant];
  if (workWoyYear < year) {
    workInstant += OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  else if (workWoyYear > year) {
    workInstant -= OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  int currentWoyWeek = [iChronology_ getWeekOfWeekyearWithLong:workInstant];
  workInstant = workInstant + (setToWeek - currentWoyWeek) * (long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  workInstant = [((OrgJodaTimeDateTimeField *) nil_chk([iChronology_ dayOfWeek])) setWithLong:workInstant withInt:thisDow];
  return workInstant;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return nil;
}

- (BOOL)isLeapWithLong:(long long int)instant {
  return [iChronology_ getWeeksInYearWithInt:[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant]] > 52;
}

- (int)getLeapAmountWithLong:(long long int)instant {
  return [iChronology_ getWeeksInYearWithInt:[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant]] - 52;
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weeks];
}

- (int)getMinimumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear];
}

- (int)getMaximumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMaxYear];
}

- (long long int)roundFloorWithLong:(long long int)instant {
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekOfWeekyear])) roundFloorWithLong:instant];
  int wow = [iChronology_ getWeekOfWeekyearWithLong:instant];
  if (wow > 1) {
    instant -= ((long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK) * (wow - 1);
  }
  return instant;
}

- (long long int)remainderWithLong:(long long int)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekyear];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicWeekyearDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:", "BasicWeekyearDateTimeField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_BasicWeekyearDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicWeekyearDateTimeField_serialVersionUID },
    { "WEEK_53_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.chrono.BasicChronology;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicWeekyearDateTimeField = { "BasicWeekyearDateTimeField", "org.joda.time.chrono", NULL, 0x10, 17, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicWeekyearDateTimeField;
}

@end
