//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/JulianChronology.java
//

#ifndef _OrgJodaTimeChronoJulianChronology_H_
#define _OrgJodaTimeChronoJulianChronology_H_

@class JavaUtilConcurrentConcurrentHashMap;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

#import "JreEmulation.h"
#include "BasicGJChronology.h"

#define OrgJodaTimeChronoJulianChronology_MAX_YEAR 292272992
#define OrgJodaTimeChronoJulianChronology_MILLIS_PER_MONTH 2629800000LL
#define OrgJodaTimeChronoJulianChronology_MILLIS_PER_YEAR 31557600000LL
#define OrgJodaTimeChronoJulianChronology_MIN_YEAR -292269054
#define OrgJodaTimeChronoJulianChronology_serialVersionUID -8731039522547897247LL

/**
 @brief Implements a pure proleptic Julian calendar system, which defines every fourth year as leap.
 This implementation follows the leap year rule strictly, even for dates before 8 CE, where leap years were actually irregular. In the Julian calendar, year zero does not exist: 1 BCE is followed by 1 CE. <p> Although the Julian calendar did not exist before 45 BCE, this chronology assumes it did, thus it is proleptic. This implementation also fixes the start of the year at January 1. <p> JulianChronology is thread-safe and immutable.
 @author Guy Allard
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeChronoJulianChronology : OrgJodaTimeChronoBasicGJChronology {
}

+ (int)adjustYearForSetWithInt:(int)year;

/**
 @brief Gets an instance of the JulianChronology.
 The time zone of the returned instance is UTC.
 @return a singleton UTC instance of the chronology
 */
+ (OrgJodaTimeChronoJulianChronology *)getInstanceUTC;

/**
 @brief Gets an instance of the JulianChronology in the default time zone.
 @return a chronology in the default time zone
 */
+ (OrgJodaTimeChronoJulianChronology *)getInstance;

/**
 @brief Gets an instance of the JulianChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoJulianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Gets an instance of the JulianChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @param minDaysInFirstWeek minimum number of days in first week of the year; default is 4
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoJulianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                      withInt:(int)minDaysInFirstWeek;

/**
 @brief Restricted constructor
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(int)minDaysInFirstWeek;

/**
 @brief Serialization singleton
 */
- (id)readResolve;

/**
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/**
 @brief Gets the Chronology in a specific time zone.
 @param zone the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (long long int)getDateMidnightMillisWithInt:(int)year
                                      withInt:(int)monthOfYear
                                      withInt:(int)dayOfMonth;

- (BOOL)isLeapYearWithInt:(int)year;

- (long long int)calculateFirstDayOfYearMillisWithInt:(int)year;

- (int)getMinYear;

- (int)getMaxYear;

- (long long int)getAverageMillisPerYear;

- (long long int)getAverageMillisPerYearDividedByTwo;

- (long long int)getAverageMillisPerMonth;

- (long long int)getApproxMillisAtEpochDividedByTwo;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeChronoJulianChronology_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeChronoJulianChronology)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, serialVersionUID, long long int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, MILLIS_PER_YEAR, long long int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, MILLIS_PER_MONTH, long long int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, MIN_YEAR, int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, MAX_YEAR, int)

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *OrgJodaTimeChronoJulianChronology_INSTANCE_UTC_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, INSTANCE_UTC_, OrgJodaTimeChronoJulianChronology *)

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoJulianChronology_cCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoJulianChronology, cCache_, JavaUtilConcurrentConcurrentHashMap *)

#endif // _OrgJodaTimeChronoJulianChronology_H_
