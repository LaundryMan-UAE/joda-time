//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
//

#include "DateTimeZone.h"
#include "DateTimeZoneBuilder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ZoneInfoProvider.h"
#include "java/io/DataInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

__attribute__((unused)) static id<JavaUtilMap> OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(JavaIoInputStream *inArg);
__attribute__((unused)) static void OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(JavaIoDataInputStream *din, id<JavaUtilMap> zimap);

@implementation OrgJodaTimeTzZoneInfoProvider

- (instancetype)initWithJavaIoFile:(JavaIoFile *)fileDir {
  if (self = [super init]) {
    if (fileDir == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"No file directory provided"] autorelease];
    }
    if (![((JavaIoFile *) nil_chk(fileDir)) exists]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:JreStrcat("$@", @"File directory doesn't exist: ", fileDir)] autorelease];
    }
    if (![fileDir isDirectory]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:JreStrcat("$@", @"File doesn't refer to a directory: ", fileDir)] autorelease];
    }
    OrgJodaTimeTzZoneInfoProvider_set_iFileDir_(self, fileDir);
    OrgJodaTimeTzZoneInfoProvider_set_iResourcePath_(self, nil);
    OrgJodaTimeTzZoneInfoProvider_set_iLoader_(self, nil);
    OrgJodaTimeTzZoneInfoProvider_set_iZoneInfoMap_(self, OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_([self openResourceWithNSString:@"ZoneInfoMap"]));
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)resourcePath {
  return [self initOrgJodaTimeTzZoneInfoProviderWithNSString:resourcePath withJavaLangClassLoader:nil withBoolean:NO];
}

- (instancetype)initWithNSString:(NSString *)resourcePath
         withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return [self initOrgJodaTimeTzZoneInfoProviderWithNSString:resourcePath withJavaLangClassLoader:loader withBoolean:YES];
}

- (instancetype)initOrgJodaTimeTzZoneInfoProviderWithNSString:(NSString *)resourcePath
                                      withJavaLangClassLoader:(JavaLangClassLoader *)loader
                                                  withBoolean:(jboolean)favorSystemLoader {
  if (self = [super init]) {
    if (resourcePath == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"No resource path provided"] autorelease];
    }
    if (![((NSString *) nil_chk(resourcePath)) hasSuffix:@"/"]) {
      resourcePath = JreStrcat("$C", resourcePath, '/');
    }
    OrgJodaTimeTzZoneInfoProvider_set_iFileDir_(self, nil);
    OrgJodaTimeTzZoneInfoProvider_set_iResourcePath_(self, resourcePath);
    if (loader == nil && !favorSystemLoader) {
      loader = [[self getClass] getClassLoader];
    }
    OrgJodaTimeTzZoneInfoProvider_set_iLoader_(self, loader);
    OrgJodaTimeTzZoneInfoProvider_set_iZoneInfoMap_(self, OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_([self openResourceWithNSString:@"ZoneInfoMap"]));
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)resourcePath
         withJavaLangClassLoader:(JavaLangClassLoader *)loader
                     withBoolean:(jboolean)favorSystemLoader {
  return [self initOrgJodaTimeTzZoneInfoProviderWithNSString:resourcePath withJavaLangClassLoader:loader withBoolean:favorSystemLoader];
}

- (OrgJodaTimeDateTimeZone *)getZoneWithNSString:(NSString *)id_ {
  if (id_ == nil) {
    return nil;
  }
  id obj = [((id<JavaUtilMap>) nil_chk(iZoneInfoMap_)) getWithId:id_];
  if (obj == nil) {
    return nil;
  }
  if ([obj isKindOfClass:[JavaLangRefSoftReference class]]) {
    JavaLangRefSoftReference *ref = (JavaLangRefSoftReference *) check_class_cast(obj, [JavaLangRefSoftReference class]);
    OrgJodaTimeDateTimeZone *tz = [((JavaLangRefSoftReference *) nil_chk(ref)) get];
    if (tz != nil) {
      return tz;
    }
    return [self loadZoneDataWithNSString:id_];
  }
  else if ([((NSString *) nil_chk(id_)) isEqual:obj]) {
    return [self loadZoneDataWithNSString:id_];
  }
  return [self getZoneWithNSString:(NSString *) check_class_cast(obj, [NSString class])];
}

- (id<JavaUtilSet>)getAvailableIDs {
  return [[[JavaUtilTreeSet alloc] initWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(iZoneInfoMap_)) keySet]] autorelease];
}

- (void)uncaughtExceptionWithJavaLangException:(JavaLangException *)ex {
  [((JavaLangException *) nil_chk(ex)) printStackTrace];
}

- (JavaIoInputStream *)openResourceWithNSString:(NSString *)name {
  JavaIoInputStream *in;
  if (iFileDir_ != nil) {
    in = [[[JavaIoFileInputStream alloc] initWithJavaIoFile:[[[JavaIoFile alloc] initWithJavaIoFile:iFileDir_ withNSString:name] autorelease]] autorelease];
  }
  else {
    NSString *path = [((NSString *) nil_chk(iResourcePath_)) concat:name];
    if (iLoader_ != nil) {
      in = [iLoader_ getResourceAsStreamWithNSString:path];
    }
    else {
      in = JavaLangClassLoader_getSystemResourceAsStreamWithNSString_(path);
    }
    if (in == nil) {
      JavaLangStringBuilder *buf = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [[[JavaLangStringBuilder alloc] initWithInt:40] autorelease]) appendWithNSString:@"Resource not found: \""])) appendWithNSString:path])) appendWithNSString:@"\" ClassLoader: "])) appendWithNSString:iLoader_ != nil ? [iLoader_ description] : @"system"];
      @throw [[[JavaIoIOException alloc] initWithNSString:[((JavaLangStringBuilder *) nil_chk(buf)) description]] autorelease];
    }
  }
  return in;
}

- (OrgJodaTimeDateTimeZone *)loadZoneDataWithNSString:(NSString *)id_ {
  JavaIoInputStream *in = nil;
  @try {
    in = [self openResourceWithNSString:id_];
    OrgJodaTimeDateTimeZone *tz = OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoInputStream_withNSString_(in, id_);
    [((id<JavaUtilMap>) nil_chk(iZoneInfoMap_)) putWithId:id_ withId:[[[JavaLangRefSoftReference alloc] initWithId:tz] autorelease]];
    return tz;
  }
  @catch (JavaIoIOException *ex) {
    [self uncaughtExceptionWithJavaLangException:ex];
    [((id<JavaUtilMap>) nil_chk(iZoneInfoMap_)) removeWithId:id_];
    return nil;
  }
  @finally {
    @try {
      if (in != nil) {
        [in close];
      }
    }
    @catch (JavaIoIOException *ex) {
    }
  }
}

+ (id<JavaUtilMap>)loadZoneInfoMapWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(inArg);
}

+ (void)readZoneInfoMapWithJavaIoDataInputStream:(JavaIoDataInputStream *)din
                                 withJavaUtilMap:(id<JavaUtilMap>)zimap {
  OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(din, zimap);
}

- (void)dealloc {
  OrgJodaTimeTzZoneInfoProvider_set_iFileDir_(self, nil);
  OrgJodaTimeTzZoneInfoProvider_set_iResourcePath_(self, nil);
  OrgJodaTimeTzZoneInfoProvider_set_iLoader_(self, nil);
  OrgJodaTimeTzZoneInfoProvider_set_iZoneInfoMap_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoProvider *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzZoneInfoProvider_set_iFileDir_(other, iFileDir_);
  OrgJodaTimeTzZoneInfoProvider_set_iResourcePath_(other, iResourcePath_);
  OrgJodaTimeTzZoneInfoProvider_set_iLoader_(other, iLoader_);
  OrgJodaTimeTzZoneInfoProvider_set_iZoneInfoMap_(other, iZoneInfoMap_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:", "ZoneInfoProvider", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithNSString:", "ZoneInfoProvider", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithNSString:withJavaLangClassLoader:", "ZoneInfoProvider", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithNSString:withJavaLangClassLoader:withBoolean:", "ZoneInfoProvider", NULL, 0x2, "Ljava.io.IOException;" },
    { "getZoneWithNSString:", "getZone", "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getAvailableIDs", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "uncaughtExceptionWithJavaLangException:", "uncaughtException", "V", 0x4, NULL },
    { "openResourceWithNSString:", "openResource", "Ljava.io.InputStream;", 0x2, "Ljava.io.IOException;" },
    { "loadZoneDataWithNSString:", "loadZoneData", "Lorg.joda.time.DateTimeZone;", 0x2, NULL },
    { "loadZoneInfoMapWithJavaIoInputStream:", "loadZoneInfoMap", "Ljava.util.Map;", 0xa, "Ljava.io.IOException;" },
    { "readZoneInfoMapWithJavaIoDataInputStream:withJavaUtilMap:", "readZoneInfoMap", "V", 0xa, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iFileDir_", NULL, 0x12, "Ljava.io.File;", NULL,  },
    { "iResourcePath_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iLoader_", NULL, 0x12, "Ljava.lang.ClassLoader;", NULL,  },
    { "iZoneInfoMap_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoProvider = { "ZoneInfoProvider", "org.joda.time.tz", NULL, 0x1, 11, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoProvider;
}

@end

id<JavaUtilMap> OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OrgJodaTimeTzZoneInfoProvider_init();
  id<JavaUtilMap> map = [[[JavaUtilConcurrentConcurrentHashMap alloc] init] autorelease];
  JavaIoDataInputStream *din = [[[JavaIoDataInputStream alloc] initWithJavaIoInputStream:inArg] autorelease];
  @try {
    OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(din, map);
  }
  @finally {
    @try {
      [din close];
    }
    @catch (JavaIoIOException *ex) {
    }
  }
  [map putWithId:@"UTC" withId:[[[JavaLangRefSoftReference alloc] initWithId:OrgJodaTimeDateTimeZone_get_UTC_()] autorelease]];
  return map;
}

void OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(JavaIoDataInputStream *din, id<JavaUtilMap> zimap) {
  OrgJodaTimeTzZoneInfoProvider_init();
  jint size = [((JavaIoDataInputStream *) nil_chk(din)) readUnsignedShort];
  IOSObjectArray *pool = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSString class]]];
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(pool, i, [((NSString *) nil_chk([din readUTF])) intern]);
  }
  size = [din readUnsignedShort];
  for (jint i = 0; i < size; i++) {
    @try {
      [((id<JavaUtilMap>) nil_chk(zimap)) putWithId:IOSObjectArray_Get(pool, [din readUnsignedShort]) withId:IOSObjectArray_Get(pool, [din readUnsignedShort])];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *ex) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"Corrupt zone info map"] autorelease];
    }
  }
}
