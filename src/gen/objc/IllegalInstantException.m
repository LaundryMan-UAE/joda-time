//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/IllegalInstantException.java
//

#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "IllegalInstantException.h"
#include "Instant.h"
#include "java/lang/Throwable.h"

__attribute__((unused)) static NSString *OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(jlong instantLocal, NSString *zoneId);

@implementation OrgJodaTimeIllegalInstantException

- (instancetype)initWithNSString:(NSString *)message {
  return [super initWithNSString:message];
}

- (instancetype)initWithLong:(jlong)instantLocal
                withNSString:(NSString *)zoneId {
  return [super initWithNSString:OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(instantLocal, zoneId)];
}

+ (NSString *)createMessageWithLong:(jlong)instantLocal
                       withNSString:(NSString *)zoneId {
  return OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(instantLocal, zoneId);
}

+ (jboolean)isIllegalInstantWithJavaLangThrowable:(JavaLangThrowable *)ex {
  return OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_(ex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "IllegalInstantException", NULL, 0x1, NULL },
    { "initWithLong:withNSString:", "IllegalInstantException", NULL, 0x1, NULL },
    { "createMessageWithLong:withNSString:", "createMessage", "Ljava.lang.String;", 0xa, NULL },
    { "isIllegalInstantWithJavaLangThrowable:", "isIllegalInstant", "Z", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeIllegalInstantException_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeIllegalInstantException = { "IllegalInstantException", "org.joda.time", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeIllegalInstantException;
}

@end

NSString *OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(jlong instantLocal, NSString *zoneId) {
  OrgJodaTimeIllegalInstantException_init();
  NSString *localDateTime = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSS"))) printWithOrgJodaTimeReadableInstant:[[[OrgJodaTimeInstant alloc] initWithLong:instantLocal] autorelease]];
  NSString *zone = (zoneId != nil ? JreStrcat("$$C", @" (", zoneId, ')') : @"");
  return JreStrcat("$$$", @"Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", localDateTime, zone);
}

jboolean OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_(JavaLangThrowable *ex) {
  OrgJodaTimeIllegalInstantException_init();
  if ([ex isKindOfClass:[OrgJodaTimeIllegalInstantException class]]) {
    return YES;
  }
  while ([((JavaLangThrowable *) nil_chk(ex)) getCause] != nil && [ex getCause] != ex) {
    return OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_([ex getCause]);
  }
  return NO;
}
