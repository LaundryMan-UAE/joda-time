//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/RemainderDateTimeField.java
//

#ifndef _OrgJodaTimeFieldRemainderDateTimeField_H_
#define _OrgJodaTimeFieldRemainderDateTimeField_H_

@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;
@class OrgJodaTimeFieldDividedDateTimeField;

#import "JreEmulation.h"
#include "DecoratedDateTimeField.h"

#define OrgJodaTimeFieldRemainderDateTimeField_serialVersionUID 5708241235177666790LL

/**
 @brief Counterpart remainder datetime field to DividedDateTimeField .
 The field's unit duration is unchanged, but the range duration is scaled accordingly. <p> RemainderDateTimeField is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFieldRemainderDateTimeField : OrgJodaTimeFieldDecoratedDateTimeField {
 @public
  int iDivisor_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeField_;
}

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param type the field type this field actually uses
 @param divisor divisor, such as 100 years in a century
 @throws IllegalArgumentException if divisor is less than two
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)divisor;

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param rangeField the range field
 @param type the field type this field actually uses
 @param divisor divisor, such as 100 years in a century
 @throws IllegalArgumentException if divisor is less than two
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)divisor;

/**
 @brief Construct a RemainderDateTimeField that compliments the given DividedDateTimeField.
 @param dividedField complimentary divided field, like "century()".
 */
- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField;

/**
 @brief Construct a RemainderDateTimeField that compliments the given DividedDateTimeField.
 @param dividedField complimentary divided field, like "century()".
 @param type the field type this field actually uses
 */
- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                            withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Construct a RemainderDateTimeField that compliments the given DividedDateTimeField.
 This constructor allows the duration field to be set.
 @param dividedField complimentary divided field, like "century()".
 @param durationField the duration field
 @param type the field type this field actually uses
 */
- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                                withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Get the remainder from the specified time instant.
 @param instant the time instant in millis to query.
 @return the remainder extracted from the input.
 */
- (int)getWithLong:(long long int)instant;

/**
 @brief Add the specified amount to the specified time instant, wrapping around within the remainder range if necessary.
 The amount added may be negative.
 @param instant the time instant in millis to update.
 @param amount the amount to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount;

/**
 @brief Set the specified amount of remainder units to the specified time instant.
 @param instant the time instant in millis to update.
 @param value value of remainder units to set.
 @return the updated time instant.
 @throws IllegalArgumentException if value is too large or too small.
 */
- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value;

- (OrgJodaTimeDurationField *)getDurationField;

/**
 @brief Returns a scaled version of the wrapped field's unit duration field.
 */
- (OrgJodaTimeDurationField *)getRangeDurationField;

/**
 @brief Get the minimum value for the field, which is always zero.
 @return the minimum value of zero.
 */
- (int)getMinimumValue;

/**
 @brief Get the maximum value for the field, which is always one less than the divisor.
 @return the maximum value
 */
- (int)getMaximumValue;

- (long long int)roundFloorWithLong:(long long int)instant;

- (long long int)roundCeilingWithLong:(long long int)instant;

- (long long int)roundHalfFloorWithLong:(long long int)instant;

- (long long int)roundHalfCeilingWithLong:(long long int)instant;

- (long long int)roundHalfEvenWithLong:(long long int)instant;

- (long long int)remainderWithLong:(long long int)instant;

/**
 @brief Returns the divisor applied, in the field's units.
 @return the divisor
 */
- (int)getDivisor;

- (int)getDividedWithInt:(int)value;

- (void)copyAllFieldsTo:(OrgJodaTimeFieldRemainderDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFieldRemainderDateTimeField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldRemainderDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFieldRemainderDateTimeField, iRangeField_, OrgJodaTimeDurationField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFieldRemainderDateTimeField, serialVersionUID, long long int)

#endif // _OrgJodaTimeFieldRemainderDateTimeField_H_
