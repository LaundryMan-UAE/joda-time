//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/Seconds.java
//

#include "BaseSingleFieldPeriod.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeUtils.h"
#include "Days.h"
#include "Duration.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "Hours.h"
#include "IOSClass.h"
#include "ISOPeriodFormat.h"
#include "LocalTime.h"
#include "Minutes.h"
#include "Period.h"
#include "PeriodFormatter.h"
#include "PeriodType.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "Seconds.h"
#include "ToString.h"
#include "Weeks.h"
#include "java/lang/Integer.h"

BOOL OrgJodaTimeSeconds_initialized = NO;

@implementation OrgJodaTimeSeconds

OrgJodaTimeSeconds * OrgJodaTimeSeconds_ZERO_;
OrgJodaTimeSeconds * OrgJodaTimeSeconds_ONE_;
OrgJodaTimeSeconds * OrgJodaTimeSeconds_TWO_;
OrgJodaTimeSeconds * OrgJodaTimeSeconds_THREE_;
OrgJodaTimeSeconds * OrgJodaTimeSeconds_MAX_VALUE_;
OrgJodaTimeSeconds * OrgJodaTimeSeconds_MIN_VALUE_;
OrgJodaTimeFormatPeriodFormatter * OrgJodaTimeSeconds_PARSER_;

+ (OrgJodaTimeSeconds *)secondsWithInt:(int)seconds {
  switch (seconds) {
    case 0:
    return OrgJodaTimeSeconds_ZERO_;
    case 1:
    return OrgJodaTimeSeconds_ONE_;
    case 2:
    return OrgJodaTimeSeconds_TWO_;
    case 3:
    return OrgJodaTimeSeconds_THREE_;
    case JavaLangInteger_MAX_VALUE:
    return OrgJodaTimeSeconds_MAX_VALUE_;
    case JavaLangInteger_MIN_VALUE:
    return OrgJodaTimeSeconds_MIN_VALUE_;
    default:
    return [[OrgJodaTimeSeconds alloc] initWithInt:seconds];
  }
}

+ (OrgJodaTimeSeconds *)secondsBetweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                      withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod betweenWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableInstant:end withOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds]];
  return [OrgJodaTimeSeconds secondsWithInt:amount];
}

+ (OrgJodaTimeSeconds *)secondsBetweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                      withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end {
  if ([(id) start isKindOfClass:[OrgJodaTimeLocalTime class]] && [(id) end isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:[((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getChronology]];
    int seconds = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) seconds])) getDifferenceWithLong:[((OrgJodaTimeLocalTime *) nil_chk(((OrgJodaTimeLocalTime *) check_class_cast(end, [OrgJodaTimeLocalTime class])))) getLocalMillis] withLong:[((OrgJodaTimeLocalTime *) check_class_cast(start, [OrgJodaTimeLocalTime class])) getLocalMillis]];
    return [OrgJodaTimeSeconds secondsWithInt:seconds];
  }
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod betweenWithOrgJodaTimeReadablePartial:start withOrgJodaTimeReadablePartial:end withOrgJodaTimeReadablePeriod:OrgJodaTimeSeconds_ZERO_];
  return [OrgJodaTimeSeconds secondsWithInt:amount];
}

+ (OrgJodaTimeSeconds *)secondsInWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  if (interval == nil) {
    return OrgJodaTimeSeconds_ZERO_;
  }
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod betweenWithOrgJodaTimeReadableInstant:[((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getStart] withOrgJodaTimeReadableInstant:[interval getEnd] withOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds]];
  return [OrgJodaTimeSeconds secondsWithInt:amount];
}

+ (OrgJodaTimeSeconds *)standardSecondsInWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod standardPeriodInWithOrgJodaTimeReadablePeriod:period withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND];
  return [OrgJodaTimeSeconds secondsWithInt:amount];
}

+ (OrgJodaTimeSeconds *)parseSecondsWithNSString:(NSString *)periodStr {
  if (periodStr == nil) {
    return OrgJodaTimeSeconds_ZERO_;
  }
  OrgJodaTimePeriod *p = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeSeconds_PARSER_)) parsePeriodWithNSString:periodStr];
  return [OrgJodaTimeSeconds secondsWithInt:[((OrgJodaTimePeriod *) nil_chk(p)) getSeconds]];
}

- (instancetype)initWithInt:(int)seconds {
  return [super initWithInt:seconds];
}

- (id)readResolve {
  return [OrgJodaTimeSeconds secondsWithInt:[self getValue]];
}

- (OrgJodaTimeDurationFieldType *)getFieldType {
  return [OrgJodaTimeDurationFieldType seconds];
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return [OrgJodaTimePeriodType seconds];
}

- (OrgJodaTimeWeeks *)toStandardWeeks {
  return [OrgJodaTimeWeeks weeksWithInt:[self getValue] / OrgJodaTimeDateTimeConstants_SECONDS_PER_WEEK];
}

- (OrgJodaTimeDays *)toStandardDays {
  return [OrgJodaTimeDays daysWithInt:[self getValue] / OrgJodaTimeDateTimeConstants_SECONDS_PER_DAY];
}

- (OrgJodaTimeHours *)toStandardHours {
  return [OrgJodaTimeHours hoursWithInt:[self getValue] / OrgJodaTimeDateTimeConstants_SECONDS_PER_HOUR];
}

- (OrgJodaTimeMinutes *)toStandardMinutes {
  return [OrgJodaTimeMinutes minutesWithInt:[self getValue] / OrgJodaTimeDateTimeConstants_SECONDS_PER_MINUTE];
}

- (OrgJodaTimeDuration *)toStandardDuration {
  long long int seconds = [self getValue];
  return [[OrgJodaTimeDuration alloc] initWithLong:seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND];
}

- (int)getSeconds {
  return [self getValue];
}

- (OrgJodaTimeSeconds *)plusWithInt:(int)seconds {
  if (seconds == 0) {
    return self;
  }
  return [OrgJodaTimeSeconds secondsWithInt:[OrgJodaTimeFieldFieldUtils safeAddWithInt:[self getValue] withInt:seconds]];
}

- (OrgJodaTimeSeconds *)plusWithOrgJodaTimeSeconds:(OrgJodaTimeSeconds *)seconds {
  if (seconds == nil) {
    return self;
  }
  return [self plusWithInt:[((OrgJodaTimeSeconds *) nil_chk(seconds)) getValue]];
}

- (OrgJodaTimeSeconds *)minusWithInt:(int)seconds {
  return [self plusWithInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:seconds]];
}

- (OrgJodaTimeSeconds *)minusWithOrgJodaTimeSeconds:(OrgJodaTimeSeconds *)seconds {
  if (seconds == nil) {
    return self;
  }
  return [self minusWithInt:[((OrgJodaTimeSeconds *) nil_chk(seconds)) getValue]];
}

- (OrgJodaTimeSeconds *)multipliedByWithInt:(int)scalar {
  return [OrgJodaTimeSeconds secondsWithInt:[OrgJodaTimeFieldFieldUtils safeMultiplyWithInt:[self getValue] withInt:scalar]];
}

- (OrgJodaTimeSeconds *)dividedByWithInt:(int)divisor {
  if (divisor == 1) {
    return self;
  }
  return [OrgJodaTimeSeconds secondsWithInt:[self getValue] / divisor];
}

- (OrgJodaTimeSeconds *)negated {
  return [OrgJodaTimeSeconds secondsWithInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:[self getValue]]];
}

- (BOOL)isGreaterThanWithOrgJodaTimeSeconds:(OrgJodaTimeSeconds *)other {
  if (other == nil) {
    return [self getValue] > 0;
  }
  return [self getValue] > [((OrgJodaTimeSeconds *) nil_chk(other)) getValue];
}

- (BOOL)isLessThanWithOrgJodaTimeSeconds:(OrgJodaTimeSeconds *)other {
  if (other == nil) {
    return [self getValue] < 0;
  }
  return [self getValue] < [((OrgJodaTimeSeconds *) nil_chk(other)) getValue];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"PT%@S", [NSString valueOfInt:[self getValue]]];
}

+ (void)initialize {
  if (self == [OrgJodaTimeSeconds class]) {
    OrgJodaTimeSeconds_ZERO_ = [[OrgJodaTimeSeconds alloc] initWithInt:0];
    OrgJodaTimeSeconds_ONE_ = [[OrgJodaTimeSeconds alloc] initWithInt:1];
    OrgJodaTimeSeconds_TWO_ = [[OrgJodaTimeSeconds alloc] initWithInt:2];
    OrgJodaTimeSeconds_THREE_ = [[OrgJodaTimeSeconds alloc] initWithInt:3];
    OrgJodaTimeSeconds_MAX_VALUE_ = [[OrgJodaTimeSeconds alloc] initWithInt:JavaLangInteger_MAX_VALUE];
    OrgJodaTimeSeconds_MIN_VALUE_ = [[OrgJodaTimeSeconds alloc] initWithInt:JavaLangInteger_MIN_VALUE];
    OrgJodaTimeSeconds_PARSER_ = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk([OrgJodaTimeFormatISOPeriodFormat standard])) withParseTypeWithOrgJodaTimePeriodType:[OrgJodaTimePeriodType seconds]];
    OrgJodaTimeSeconds_initialized = YES;
  }
}
+ (IOSObjectArray *)__annotations_parseSecondsWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertFromString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertToString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "secondsWithInt:", "seconds", "Lorg.joda.time.Seconds;", 0x9, NULL },
    { "secondsBetweenWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "secondsBetween", "Lorg.joda.time.Seconds;", 0x9, NULL },
    { "secondsBetweenWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:", "secondsBetween", "Lorg.joda.time.Seconds;", 0x9, NULL },
    { "secondsInWithOrgJodaTimeReadableInterval:", "secondsIn", "Lorg.joda.time.Seconds;", 0x9, NULL },
    { "standardSecondsInWithOrgJodaTimeReadablePeriod:", "standardSecondsIn", "Lorg.joda.time.Seconds;", 0x9, NULL },
    { "parseSecondsWithNSString:", "parseSeconds", "Lorg.joda.time.Seconds;", 0x9, NULL },
    { "initWithInt:", "Seconds", NULL, 0x2, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "getFieldType", NULL, "Lorg.joda.time.DurationFieldType;", 0x1, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "toStandardWeeks", NULL, "Lorg.joda.time.Weeks;", 0x1, NULL },
    { "toStandardDays", NULL, "Lorg.joda.time.Days;", 0x1, NULL },
    { "toStandardHours", NULL, "Lorg.joda.time.Hours;", 0x1, NULL },
    { "toStandardMinutes", NULL, "Lorg.joda.time.Minutes;", 0x1, NULL },
    { "toStandardDuration", NULL, "Lorg.joda.time.Duration;", 0x1, NULL },
    { "getSeconds", NULL, "I", 0x1, NULL },
    { "plusWithInt:", "plus", "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "plusWithOrgJodaTimeSeconds:", "plus", "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "minusWithInt:", "minus", "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "minusWithOrgJodaTimeSeconds:", "minus", "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "multipliedByWithInt:", "multipliedBy", "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "dividedByWithInt:", "dividedBy", "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "negated", NULL, "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "isGreaterThanWithOrgJodaTimeSeconds:", "isGreaterThan", "Z", 0x1, NULL },
    { "isLessThanWithOrgJodaTimeSeconds:", "isLessThan", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ZERO_", NULL, 0x19, "Lorg.joda.time.Seconds;", &OrgJodaTimeSeconds_ZERO_,  },
    { "ONE_", NULL, 0x19, "Lorg.joda.time.Seconds;", &OrgJodaTimeSeconds_ONE_,  },
    { "TWO_", NULL, 0x19, "Lorg.joda.time.Seconds;", &OrgJodaTimeSeconds_TWO_,  },
    { "THREE_", NULL, 0x19, "Lorg.joda.time.Seconds;", &OrgJodaTimeSeconds_THREE_,  },
    { "MAX_VALUE_", NULL, 0x19, "Lorg.joda.time.Seconds;", &OrgJodaTimeSeconds_MAX_VALUE_,  },
    { "MIN_VALUE_", NULL, 0x19, "Lorg.joda.time.Seconds;", &OrgJodaTimeSeconds_MIN_VALUE_,  },
    { "PARSER_", NULL, 0x1a, "Lorg.joda.time.format.PeriodFormatter;", &OrgJodaTimeSeconds_PARSER_,  },
    { "serialVersionUID_Seconds_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeSeconds_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeSeconds = { "Seconds", "org.joda.time", NULL, 0x11, 26, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeSeconds;
}

@end
