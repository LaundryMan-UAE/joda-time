//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/field/DecoratedDateTimeField.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DecoratedDateTimeField.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"

@implementation OrgJodaTimeFieldDecoratedDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:type]) {
    if (field == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The field must not be null"] autorelease];
    }
    if (![((OrgJodaTimeDateTimeField *) nil_chk(field)) isSupported]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The field must be supported"] autorelease];
    }
    OrgJodaTimeFieldDecoratedDateTimeField_set_iField_(self, field);
  }
  return self;
}

- (OrgJodaTimeDateTimeField *)getWrappedField {
  return iField_;
}

- (jboolean)isLenient {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLenient];
}

- (jint)getWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getWithLong:instant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:instant withInt:value];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDurationField];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getRangeDurationField];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValue];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValue];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:instant];
}

- (void)dealloc {
  OrgJodaTimeFieldDecoratedDateTimeField_set_iField_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldDecoratedDateTimeField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFieldDecoratedDateTimeField_set_iField_(other, iField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeFieldType:", "DecoratedDateTimeField", NULL, 0x4, NULL },
    { "getWrappedField", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldDecoratedDateTimeField_serialVersionUID },
    { "iField_", NULL, 0x12, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldDecoratedDateTimeField = { "DecoratedDateTimeField", "org.joda.time.field", NULL, 0x401, 10, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFieldDecoratedDateTimeField;
}

@end
