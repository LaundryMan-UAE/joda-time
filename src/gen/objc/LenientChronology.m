//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/LenientChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "LenientChronology.h"
#include "LenientDateTimeField.h"
#include "java/lang/IllegalArgumentException.h"

@implementation OrgJodaTimeChronoLenientChronology

+ (OrgJodaTimeChronoLenientChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  return OrgJodaTimeChronoLenientChronology_getInstanceWithOrgJodaTimeChronology_(base);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  return [super initWithOrgJodaTimeChronology:base withId:nil];
}

- (OrgJodaTimeChronology *)withUTC {
  if (iWithUTC_ == nil) {
    if ([self getZone] == OrgJodaTimeDateTimeZone_get_UTC_()) {
      OrgJodaTimeChronoLenientChronology_set_iWithUTC_(self, self);
    }
    else {
      OrgJodaTimeChronoLenientChronology_set_iWithUTC_(self, OrgJodaTimeChronoLenientChronology_getInstanceWithOrgJodaTimeChronology_([((OrgJodaTimeChronology *) nil_chk([self getBase])) withUTC]));
    }
  }
  return iWithUTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
    return [self withUTC];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoLenientChronology_getInstanceWithOrgJodaTimeChronology_([((OrgJodaTimeChronology *) nil_chk([self getBase])) withZoneWithOrgJodaTimeDateTimeZone:zone]);
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  OrgJodaTimeChronoAssembledChronology_Fields_set_year_(nil_chk(fields), [self convertFieldWithOrgJodaTimeDateTimeField:fields->year_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfEra_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->yearOfEra_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfCentury_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->yearOfCentury_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuryOfEra_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->centuryOfEra_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_era_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->era_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfWeek_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfWeek_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfMonth_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfYear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfYear_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_monthOfYear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->monthOfYear_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekOfWeekyear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekOfWeekyear_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekyear_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyearOfCentury_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekyearOfCentury_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->millisOfSecond_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->millisOfDay_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->secondOfMinute_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->secondOfDay_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->minuteOfHour_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->minuteOfDay_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->hourOfDay_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->hourOfHalfday_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->clockhourOfDay_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->clockhourOfHalfday_]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->halfdayOfDay_]);
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return OrgJodaTimeFieldLenientDateTimeField_getInstanceWithOrgJodaTimeDateTimeField_withOrgJodaTimeChronology_(field, [self getBase]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoLenientChronology class]] == NO) {
    return NO;
  }
  OrgJodaTimeChronoLenientChronology *chrono = (OrgJodaTimeChronoLenientChronology *) check_class_cast(obj, [OrgJodaTimeChronoLenientChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoLenientChronology *) nil_chk(chrono)) getBase]];
}

- (NSUInteger)hash {
  return 236548278 + ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
}

- (NSString *)description {
  return JreStrcat("$$C", @"LenientChronology[", [((OrgJodaTimeChronology *) nil_chk([self getBase])) description], ']');
}

- (void)dealloc {
  OrgJodaTimeChronoLenientChronology_set_iWithUTC_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLenientChronology *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoLenientChronology_set_iWithUTC_(other, iWithUTC_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeChronology:", "getInstance", "Lorg.joda.time.chrono.LenientChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:", "LenientChronology", NULL, 0x2, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "convertFieldWithOrgJodaTimeDateTimeField:", "convertField", "Lorg.joda.time.DateTimeField;", 0x12, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLenientChronology_serialVersionUID },
    { "iWithUTC_", NULL, 0x82, "Lorg.joda.time.Chronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLenientChronology = { "LenientChronology", "org.joda.time.chrono", NULL, 0x11, 9, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoLenientChronology;
}

@end

OrgJodaTimeChronoLenientChronology *OrgJodaTimeChronoLenientChronology_getInstanceWithOrgJodaTimeChronology_(OrgJodaTimeChronology *base) {
  OrgJodaTimeChronoLenientChronology_init();
  if (base == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Must supply a chronology"] autorelease];
  }
  return [[[OrgJodaTimeChronoLenientChronology alloc] initWithOrgJodaTimeChronology:base] autorelease];
}
