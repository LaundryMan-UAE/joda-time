//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/Interval.java
//

#include "AbstractInterval.h"
#include "BaseInterval.h"
#include "Chronology.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "Interval.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePeriod.h"
#include "java/lang/Math.h"

@implementation OrgJodaTimeInterval

+ (OrgJodaTimeInterval *)parseWithNSString:(NSString *)str {
  return [[OrgJodaTimeInterval alloc] initWithId:str];
}

- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant {
  return [super initWithLong:startInstant withLong:endInstant withOrgJodaTimeChronology:nil];
}

- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithLong:startInstant withLong:endInstant withOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceWithOrgJodaTimeDateTimeZone:zone]];
}

- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithLong:startInstant withLong:endInstant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return [super initWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableInstant:end];
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [super initWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableDuration:duration];
}

- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return [super initWithOrgJodaTimeReadableDuration:duration withOrgJodaTimeReadableInstant:end];
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                     withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [super initWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadablePeriod:period];
}

- (instancetype)initWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                   withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return [super initWithOrgJodaTimeReadablePeriod:period withOrgJodaTimeReadableInstant:end];
}

- (instancetype)initWithId:(id)interval {
  return [super initWithId:interval withOrgJodaTimeChronology:nil];
}

- (instancetype)initWithId:(id)interval
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithId:interval withOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeInterval *)toInterval {
  return self;
}

- (OrgJodaTimeInterval *)overlapWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  interval = [OrgJodaTimeDateTimeUtils getReadableIntervalWithOrgJodaTimeReadableInterval:interval];
  if ([self overlapsWithOrgJodaTimeReadableInterval:interval] == NO) {
    return nil;
  }
  long long int start = [JavaLangMath maxWithLong:[self getStartMillis] withLong:[((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getStartMillis]];
  long long int end = [JavaLangMath minWithLong:[self getEndMillis] withLong:[interval getEndMillis]];
  return [[OrgJodaTimeInterval alloc] initWithLong:start withLong:end withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeInterval *)gapWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  interval = [OrgJodaTimeDateTimeUtils getReadableIntervalWithOrgJodaTimeReadableInterval:interval];
  long long int otherStart = [((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getStartMillis];
  long long int otherEnd = [interval getEndMillis];
  long long int thisStart = [self getStartMillis];
  long long int thisEnd = [self getEndMillis];
  if (thisStart > otherEnd) {
    return [[OrgJodaTimeInterval alloc] initWithLong:otherEnd withLong:thisStart withOrgJodaTimeChronology:[self getChronology]];
  }
  else if (otherStart > thisEnd) {
    return [[OrgJodaTimeInterval alloc] initWithLong:thisEnd withLong:otherStart withOrgJodaTimeChronology:[self getChronology]];
  }
  else {
    return nil;
  }
}

- (BOOL)abutsWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  if (interval == nil) {
    long long int now = [OrgJodaTimeDateTimeUtils currentTimeMillis];
    return ([self getStartMillis] == now || [self getEndMillis] == now);
  }
  else {
    return ([interval getEndMillis] == [self getStartMillis] || [self getEndMillis] == [interval getStartMillis]);
  }
}

- (OrgJodaTimeInterval *)withChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if ([self getChronology] == chronology) {
    return self;
  }
  return [[OrgJodaTimeInterval alloc] initWithLong:[self getStartMillis] withLong:[self getEndMillis] withOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeInterval *)withStartMillisWithLong:(long long int)startInstant {
  if (startInstant == [self getStartMillis]) {
    return self;
  }
  return [[OrgJodaTimeInterval alloc] initWithLong:startInstant withLong:[self getEndMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeInterval *)withStartWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start {
  long long int startMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:start];
  return [self withStartMillisWithLong:startMillis];
}

- (OrgJodaTimeInterval *)withEndMillisWithLong:(long long int)endInstant {
  if (endInstant == [self getEndMillis]) {
    return self;
  }
  return [[OrgJodaTimeInterval alloc] initWithLong:[self getStartMillis] withLong:endInstant withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeInterval *)withEndWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  long long int endMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:end];
  return [self withEndMillisWithLong:endMillis];
}

- (OrgJodaTimeInterval *)withDurationAfterStartWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  long long int durationMillis = [OrgJodaTimeDateTimeUtils getDurationMillisWithOrgJodaTimeReadableDuration:duration];
  if (durationMillis == [self toDurationMillis]) {
    return self;
  }
  OrgJodaTimeChronology *chrono = [self getChronology];
  long long int startMillis = [self getStartMillis];
  long long int endMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithLong:startMillis withLong:durationMillis withInt:1];
  return [[OrgJodaTimeInterval alloc] initWithLong:startMillis withLong:endMillis withOrgJodaTimeChronology:chrono];
}

- (OrgJodaTimeInterval *)withDurationBeforeEndWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  long long int durationMillis = [OrgJodaTimeDateTimeUtils getDurationMillisWithOrgJodaTimeReadableDuration:duration];
  if (durationMillis == [self toDurationMillis]) {
    return self;
  }
  OrgJodaTimeChronology *chrono = [self getChronology];
  long long int endMillis = [self getEndMillis];
  long long int startMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithLong:endMillis withLong:durationMillis withInt:-1];
  return [[OrgJodaTimeInterval alloc] initWithLong:startMillis withLong:endMillis withOrgJodaTimeChronology:chrono];
}

- (OrgJodaTimeInterval *)withPeriodAfterStartWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period == nil) {
    return [self withDurationAfterStartWithOrgJodaTimeReadableDuration:nil];
  }
  OrgJodaTimeChronology *chrono = [self getChronology];
  long long int startMillis = [self getStartMillis];
  long long int endMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:period withLong:startMillis withInt:1];
  return [[OrgJodaTimeInterval alloc] initWithLong:startMillis withLong:endMillis withOrgJodaTimeChronology:chrono];
}

- (OrgJodaTimeInterval *)withPeriodBeforeEndWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period == nil) {
    return [self withDurationBeforeEndWithOrgJodaTimeReadableDuration:nil];
  }
  OrgJodaTimeChronology *chrono = [self getChronology];
  long long int endMillis = [self getEndMillis];
  long long int startMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:period withLong:endMillis withInt:-1];
  return [[OrgJodaTimeInterval alloc] initWithLong:startMillis withLong:endMillis withOrgJodaTimeChronology:chrono];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "parseWithNSString:", "parse", "Lorg.joda.time.Interval;", 0x9, NULL },
    { "initWithLong:withLong:", "Interval", NULL, 0x1, NULL },
    { "initWithLong:withLong:withOrgJodaTimeDateTimeZone:", "Interval", NULL, 0x1, NULL },
    { "initWithLong:withLong:withOrgJodaTimeChronology:", "Interval", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "Interval", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableDuration:", "Interval", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadableDuration:withOrgJodaTimeReadableInstant:", "Interval", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadablePeriod:", "Interval", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadablePeriod:withOrgJodaTimeReadableInstant:", "Interval", NULL, 0x1, NULL },
    { "initWithId:", "Interval", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "Interval", NULL, 0x1, NULL },
    { "toInterval", NULL, "Lorg.joda.time.Interval;", 0x1, NULL },
    { "overlapWithOrgJodaTimeReadableInterval:", "overlap", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "gapWithOrgJodaTimeReadableInterval:", "gap", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "abutsWithOrgJodaTimeReadableInterval:", "abuts", "Z", 0x1, NULL },
    { "withChronologyWithOrgJodaTimeChronology:", "withChronology", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withStartMillisWithLong:", "withStartMillis", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withStartWithOrgJodaTimeReadableInstant:", "withStart", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withEndMillisWithLong:", "withEndMillis", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withEndWithOrgJodaTimeReadableInstant:", "withEnd", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withDurationAfterStartWithOrgJodaTimeReadableDuration:", "withDurationAfterStart", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withDurationBeforeEndWithOrgJodaTimeReadableDuration:", "withDurationBeforeEnd", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withPeriodAfterStartWithOrgJodaTimeReadablePeriod:", "withPeriodAfterStart", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "withPeriodBeforeEndWithOrgJodaTimeReadablePeriod:", "withPeriodBeforeEnd", "Lorg.joda.time.Interval;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_Interval_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeInterval_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeInterval = { "Interval", "org.joda.time", NULL, 0x11, 24, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeInterval;
}

@end
