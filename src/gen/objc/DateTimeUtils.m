//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/DateTimeUtils.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOChronology.h"
#include "Interval.h"
#include "JodaTimePermission.h"
#include "PeriodType.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePartial.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

BOOL OrgJodaTimeDateTimeUtils_initialized = NO;

@implementation OrgJodaTimeDateTimeUtils

OrgJodaTimeDateTimeUtils_SystemMillisProvider * OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_;
id<OrgJodaTimeDateTimeUtils_MillisProvider> OrgJodaTimeDateTimeUtils_cMillisProvider_;
id<JavaUtilMap> OrgJodaTimeDateTimeUtils_cZoneNames_;

+ (void)putWithJavaUtilMap:(id<JavaUtilMap>)map
              withNSString:(NSString *)name
              withNSString:(NSString *)id_ {
  @try {
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:name withId:[OrgJodaTimeDateTimeZone forIDWithNSString:id_]];
  }
  @catch (JavaLangRuntimeException *ex) {
  }
}

- (instancetype)init {
  return [super init];
}

+ (long long int)currentTimeMillis {
  return [((id<OrgJodaTimeDateTimeUtils_MillisProvider>) nil_chk(OrgJodaTimeDateTimeUtils_cMillisProvider_)) getMillis];
}

+ (void)setCurrentMillisSystem {
  [OrgJodaTimeDateTimeUtils checkPermission];
  OrgJodaTimeDateTimeUtils_cMillisProvider_ = OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_;
}

+ (void)setCurrentMillisFixedWithLong:(long long int)fixedMillis {
  [OrgJodaTimeDateTimeUtils checkPermission];
  OrgJodaTimeDateTimeUtils_cMillisProvider_ = [[OrgJodaTimeDateTimeUtils_FixedMillisProvider alloc] initWithLong:fixedMillis];
}

+ (void)setCurrentMillisOffsetWithLong:(long long int)offsetMillis {
  [OrgJodaTimeDateTimeUtils checkPermission];
  if (offsetMillis == 0) {
    OrgJodaTimeDateTimeUtils_cMillisProvider_ = OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_;
  }
  else {
    OrgJodaTimeDateTimeUtils_cMillisProvider_ = [[OrgJodaTimeDateTimeUtils_OffsetMillisProvider alloc] initWithLong:offsetMillis];
  }
}

+ (void)setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider:(id<OrgJodaTimeDateTimeUtils_MillisProvider>)millisProvider {
  if (millisProvider == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The MillisProvider must not be null"];
  }
  [OrgJodaTimeDateTimeUtils checkPermission];
  OrgJodaTimeDateTimeUtils_cMillisProvider_ = millisProvider;
}

+ (void)checkPermission {
  JavaLangSecurityManager *sm = [JavaLangSystem getSecurityManager];
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:[[OrgJodaTimeJodaTimePermission alloc] initWithNSString:@"CurrentTime.setProvider"]];
  }
}

+ (long long int)getInstantMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  if (instant == nil) {
    return [OrgJodaTimeDateTimeUtils currentTimeMillis];
  }
  return [((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getMillis];
}

+ (OrgJodaTimeChronology *)getInstantChronologyWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  if (instant == nil) {
    return [OrgJodaTimeChronoISOChronology getInstance];
  }
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getChronology];
  if (chrono == nil) {
    return [OrgJodaTimeChronoISOChronology getInstance];
  }
  return chrono;
}

+ (OrgJodaTimeChronology *)getIntervalChronologyWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                                withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  OrgJodaTimeChronology *chrono = nil;
  if (start != nil) {
    chrono = [start getChronology];
  }
  else if (end != nil) {
    chrono = [end getChronology];
  }
  if (chrono == nil) {
    chrono = [OrgJodaTimeChronoISOChronology getInstance];
  }
  return chrono;
}

+ (OrgJodaTimeChronology *)getIntervalChronologyWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  if (interval == nil) {
    return [OrgJodaTimeChronoISOChronology getInstance];
  }
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getChronology];
  if (chrono == nil) {
    return [OrgJodaTimeChronoISOChronology getInstance];
  }
  return chrono;
}

+ (id<OrgJodaTimeReadableInterval>)getReadableIntervalWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  if (interval == nil) {
    long long int now = [OrgJodaTimeDateTimeUtils currentTimeMillis];
    interval = [[OrgJodaTimeInterval alloc] initWithLong:now withLong:now];
  }
  return interval;
}

+ (OrgJodaTimeChronology *)getChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (chrono == nil) {
    return [OrgJodaTimeChronoISOChronology getInstance];
  }
  return chrono;
}

+ (OrgJodaTimeDateTimeZone *)getZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    return [OrgJodaTimeDateTimeZone getDefault];
  }
  return zone;
}

+ (OrgJodaTimePeriodType *)getPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (type == nil) {
    return [OrgJodaTimePeriodType standard];
  }
  return type;
}

+ (long long int)getDurationMillisWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  if (duration == nil) {
    return 0LL;
  }
  return [((id<OrgJodaTimeReadableDuration>) nil_chk(duration)) getMillis];
}

+ (BOOL)isContiguousWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Partial must not be null"];
  }
  OrgJodaTimeDurationFieldType *lastType = nil;
  for (int i = 0; i < [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i++) {
    OrgJodaTimeDateTimeField *loopField = [partial getFieldWithInt:i];
    if (i > 0) {
      if ([((OrgJodaTimeDateTimeField *) nil_chk(loopField)) getRangeDurationField] == nil || [((OrgJodaTimeDurationField *) nil_chk([loopField getRangeDurationField])) getType] != lastType) {
        return NO;
      }
    }
    lastType = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(loopField)) getDurationField])) getType];
  }
  return YES;
}

+ (JavaTextDateFormatSymbols *)getDateFormatSymbolsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    JavaLangReflectMethod *method = [[IOSClass classWithClass:[JavaTextDateFormatSymbols class]] getMethod:@"getInstance" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[JavaUtilLocale class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
    return (JavaTextDateFormatSymbols *) check_class_cast([((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ locale } count:1 type:[IOSClass classWithClass:[NSObject class]]]], [JavaTextDateFormatSymbols class]);
  }
  @catch (JavaLangException *ex) {
    return [[JavaTextDateFormatSymbols alloc] initWithJavaUtilLocale:locale];
  }
}

+ (id<JavaUtilMap>)getDefaultTimeZoneNames {
  return OrgJodaTimeDateTimeUtils_cZoneNames_;
}

+ (void)setDefaultTimeZoneNamesWithJavaUtilMap:(id<JavaUtilMap>)names {
  OrgJodaTimeDateTimeUtils_cZoneNames_ = [JavaUtilCollections unmodifiableMapWithJavaUtilMap:[[JavaUtilHashMap alloc] initWithJavaUtilMap:names]];
}

+ (double)toJulianDayWithLong:(long long int)epochMillis {
  double epochDay = epochMillis / 86400000.0;
  return epochDay + 2440587.5;
}

+ (long long int)toJulianDayNumberWithLong:(long long int)epochMillis {
  return J2ObjCFpToLong([JavaLangMath floorWithDouble:[OrgJodaTimeDateTimeUtils toJulianDayWithLong:epochMillis] + 0.5]);
}

+ (long long int)fromJulianDayWithDouble:(double)julianDay {
  double epochDay = julianDay - 2440587.5;
  return J2ObjCFpToLong((epochDay * 86400000.0));
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeUtils class]) {
    OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_ = [[OrgJodaTimeDateTimeUtils_SystemMillisProvider alloc] init];
    OrgJodaTimeDateTimeUtils_cMillisProvider_ = OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_;
    {
      id<JavaUtilMap> map = [[JavaUtilLinkedHashMap alloc] init];
      (void) [map putWithId:@"UT" withId:OrgJodaTimeDateTimeZone_get_UTC_()];
      (void) [map putWithId:@"UTC" withId:OrgJodaTimeDateTimeZone_get_UTC_()];
      (void) [map putWithId:@"GMT" withId:OrgJodaTimeDateTimeZone_get_UTC_()];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"EST" withNSString:@"America/New_York"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"EDT" withNSString:@"America/New_York"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"CST" withNSString:@"America/Chicago"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"CDT" withNSString:@"America/Chicago"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"MST" withNSString:@"America/Denver"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"MDT" withNSString:@"America/Denver"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"PST" withNSString:@"America/Los_Angeles"];
      [OrgJodaTimeDateTimeUtils putWithJavaUtilMap:map withNSString:@"PDT" withNSString:@"America/Los_Angeles"];
      OrgJodaTimeDateTimeUtils_cZoneNames_ = [JavaUtilCollections unmodifiableMapWithJavaUtilMap:map];
    }
    OrgJodaTimeDateTimeUtils_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "putWithJavaUtilMap:withNSString:withNSString:", "put", "V", 0xa, NULL },
    { "init", "DateTimeUtils", NULL, 0x4, NULL },
    { "currentTimeMillis", NULL, "J", 0x19, NULL },
    { "setCurrentMillisSystem", NULL, "V", 0x19, "Ljava.lang.SecurityException;" },
    { "setCurrentMillisFixedWithLong:", "setCurrentMillisFixed", "V", 0x19, "Ljava.lang.SecurityException;" },
    { "setCurrentMillisOffsetWithLong:", "setCurrentMillisOffset", "V", 0x19, "Ljava.lang.SecurityException;" },
    { "setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider:", "setCurrentMillisProvider", "V", 0x19, "Ljava.lang.SecurityException;" },
    { "checkPermission", NULL, "V", 0xa, "Ljava.lang.SecurityException;" },
    { "getInstantMillisWithOrgJodaTimeReadableInstant:", "getInstantMillis", "J", 0x19, NULL },
    { "getInstantChronologyWithOrgJodaTimeReadableInstant:", "getInstantChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getIntervalChronologyWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "getIntervalChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getIntervalChronologyWithOrgJodaTimeReadableInterval:", "getIntervalChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getReadableIntervalWithOrgJodaTimeReadableInterval:", "getReadableInterval", "Lorg.joda.time.ReadableInterval;", 0x19, NULL },
    { "getChronologyWithOrgJodaTimeChronology:", "getChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getZoneWithOrgJodaTimeDateTimeZone:", "getZone", "Lorg.joda.time.DateTimeZone;", 0x19, NULL },
    { "getPeriodTypeWithOrgJodaTimePeriodType:", "getPeriodType", "Lorg.joda.time.PeriodType;", 0x19, NULL },
    { "getDurationMillisWithOrgJodaTimeReadableDuration:", "getDurationMillis", "J", 0x19, NULL },
    { "isContiguousWithOrgJodaTimeReadablePartial:", "isContiguous", "Z", 0x19, NULL },
    { "getDateFormatSymbolsWithJavaUtilLocale:", "getDateFormatSymbols", "Ljava.text.DateFormatSymbols;", 0x19, NULL },
    { "getDefaultTimeZoneNames", NULL, "Ljava.util.Map;", 0x19, NULL },
    { "setDefaultTimeZoneNamesWithJavaUtilMap:", "setDefaultTimeZoneNames", "V", 0x19, NULL },
    { "toJulianDayWithLong:", "toJulianDay", "D", 0x19, NULL },
    { "toJulianDayNumberWithLong:", "toJulianDayNumber", "J", 0x19, NULL },
    { "fromJulianDayWithDouble:", "fromJulianDay", "J", 0x19, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "SYSTEM_MILLIS_PROVIDER_", NULL, 0x1a, "Lorg.joda.time.DateTimeUtils$SystemMillisProvider;", &OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_,  },
    { "cMillisProvider_", NULL, 0x4a, "Lorg.joda.time.DateTimeUtils$MillisProvider;", &OrgJodaTimeDateTimeUtils_cMillisProvider_,  },
    { "cZoneNames_", NULL, 0x4a, "Ljava.util.Map;", &OrgJodaTimeDateTimeUtils_cZoneNames_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeUtils = { "DateTimeUtils", "org.joda.time", NULL, 0x1, 24, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils;
}

@end

@interface OrgJodaTimeDateTimeUtils_MillisProvider : NSObject
@end

@implementation OrgJodaTimeDateTimeUtils_MillisProvider

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getMillis", NULL, "J", 0x401, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_MillisProvider = { "MillisProvider", "org.joda.time", "DateTimeUtils", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_MillisProvider;
}

@end

@implementation OrgJodaTimeDateTimeUtils_SystemMillisProvider

- (long long int)getMillis {
  return [JavaLangSystem currentTimeMillis];
}

- (instancetype)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getMillis", NULL, "J", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_SystemMillisProvider = { "SystemMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_SystemMillisProvider;
}

@end

@implementation OrgJodaTimeDateTimeUtils_FixedMillisProvider

- (instancetype)initWithLong:(long long int)fixedMillis {
  if (self = [super init]) {
    iMillis_ = fixedMillis;
  }
  return self;
}

- (long long int)getMillis {
  return iMillis_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeUtils_FixedMillisProvider *)other {
  [super copyAllFieldsTo:other];
  other->iMillis_ = iMillis_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "FixedMillisProvider", NULL, 0x0, NULL },
    { "getMillis", NULL, "J", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_FixedMillisProvider = { "FixedMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_FixedMillisProvider;
}

@end

@implementation OrgJodaTimeDateTimeUtils_OffsetMillisProvider

- (instancetype)initWithLong:(long long int)offsetMillis {
  if (self = [super init]) {
    iMillis_ = offsetMillis;
  }
  return self;
}

- (long long int)getMillis {
  return [JavaLangSystem currentTimeMillis] + iMillis_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeUtils_OffsetMillisProvider *)other {
  [super copyAllFieldsTo:other];
  other->iMillis_ = iMillis_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "OffsetMillisProvider", NULL, 0x0, NULL },
    { "getMillis", NULL, "J", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_OffsetMillisProvider = { "OffsetMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_OffsetMillisProvider;
}

@end
