//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/DateTimeUtils.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOChronology.h"
#include "Interval.h"
#include "JodaTimePermission.h"
#include "PeriodType.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePartial.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

__attribute__((unused)) static void OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(id<JavaUtilMap> map, NSString *name, NSString *id_);
__attribute__((unused)) static void OrgJodaTimeDateTimeUtils_checkPermission();

BOOL OrgJodaTimeDateTimeUtils_initialized = NO;

@implementation OrgJodaTimeDateTimeUtils

OrgJodaTimeDateTimeUtils_SystemMillisProvider * OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_;
id<OrgJodaTimeDateTimeUtils_MillisProvider> OrgJodaTimeDateTimeUtils_cMillisProvider_;
id<JavaUtilMap> OrgJodaTimeDateTimeUtils_cZoneNames_;

+ (void)putWithJavaUtilMap:(id<JavaUtilMap>)map
              withNSString:(NSString *)name
              withNSString:(NSString *)id_ {
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, name, id_);
}

- (instancetype)init {
  return [super init];
}

+ (jlong)currentTimeMillis {
  return OrgJodaTimeDateTimeUtils_currentTimeMillis();
}

+ (void)setCurrentMillisSystem {
  OrgJodaTimeDateTimeUtils_setCurrentMillisSystem();
}

+ (void)setCurrentMillisFixedWithLong:(jlong)fixedMillis {
  OrgJodaTimeDateTimeUtils_setCurrentMillisFixedWithLong_(fixedMillis);
}

+ (void)setCurrentMillisOffsetWithLong:(jlong)offsetMillis {
  OrgJodaTimeDateTimeUtils_setCurrentMillisOffsetWithLong_(offsetMillis);
}

+ (void)setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider:(id<OrgJodaTimeDateTimeUtils_MillisProvider>)millisProvider {
  OrgJodaTimeDateTimeUtils_setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider_(millisProvider);
}

+ (void)checkPermission {
  OrgJodaTimeDateTimeUtils_checkPermission();
}

+ (jlong)getInstantMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  return OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
}

+ (OrgJodaTimeChronology *)getInstantChronologyWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  return OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
}

+ (OrgJodaTimeChronology *)getIntervalChronologyWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                                withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(start, end);
}

+ (OrgJodaTimeChronology *)getIntervalChronologyWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInterval_(interval);
}

+ (id<OrgJodaTimeReadableInterval>)getReadableIntervalWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeDateTimeUtils_getReadableIntervalWithOrgJodaTimeReadableInterval_(interval);
}

+ (OrgJodaTimeChronology *)getChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
}

+ (OrgJodaTimeDateTimeZone *)getZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimePeriodType *)getPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  return OrgJodaTimeDateTimeUtils_getPeriodTypeWithOrgJodaTimePeriodType_(type);
}

+ (jlong)getDurationMillisWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(duration);
}

+ (jboolean)isContiguousWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  return OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(partial);
}

+ (JavaTextDateFormatSymbols *)getDateFormatSymbolsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(locale);
}

+ (id<JavaUtilMap>)getDefaultTimeZoneNames {
  return OrgJodaTimeDateTimeUtils_getDefaultTimeZoneNames();
}

+ (void)setDefaultTimeZoneNamesWithJavaUtilMap:(id<JavaUtilMap>)names {
  OrgJodaTimeDateTimeUtils_setDefaultTimeZoneNamesWithJavaUtilMap_(names);
}

+ (jdouble)toJulianDayWithLong:(jlong)epochMillis {
  return OrgJodaTimeDateTimeUtils_toJulianDayWithLong_(epochMillis);
}

+ (jlong)toJulianDayNumberWithLong:(jlong)epochMillis {
  return OrgJodaTimeDateTimeUtils_toJulianDayNumberWithLong_(epochMillis);
}

+ (jlong)fromJulianDayWithDouble:(jdouble)julianDay {
  return OrgJodaTimeDateTimeUtils_fromJulianDayWithDouble_(julianDay);
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeUtils class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_, nil, [[OrgJodaTimeDateTimeUtils_SystemMillisProvider alloc] init]);
    JreStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider_, nil, OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_);
    {
      id<JavaUtilMap> map = [[[JavaUtilLinkedHashMap alloc] init] autorelease];
      [map putWithId:@"UT" withId:OrgJodaTimeDateTimeZone_get_UTC_()];
      [map putWithId:@"UTC" withId:OrgJodaTimeDateTimeZone_get_UTC_()];
      [map putWithId:@"GMT" withId:OrgJodaTimeDateTimeZone_get_UTC_()];
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"EST", @"America/New_York");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"EDT", @"America/New_York");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"CST", @"America/Chicago");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"CDT", @"America/Chicago");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"MST", @"America/Denver");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"MDT", @"America/Denver");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"PST", @"America/Los_Angeles");
      OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"PDT", @"America/Los_Angeles");
      JreStrongAssign(&OrgJodaTimeDateTimeUtils_cZoneNames_, nil, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDateTimeUtils)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "putWithJavaUtilMap:withNSString:withNSString:", "put", "V", 0xa, NULL },
    { "init", "DateTimeUtils", NULL, 0x4, NULL },
    { "currentTimeMillis", NULL, "J", 0x19, NULL },
    { "setCurrentMillisSystem", NULL, "V", 0x19, "Ljava.lang.SecurityException;" },
    { "setCurrentMillisFixedWithLong:", "setCurrentMillisFixed", "V", 0x19, "Ljava.lang.SecurityException;" },
    { "setCurrentMillisOffsetWithLong:", "setCurrentMillisOffset", "V", 0x19, "Ljava.lang.SecurityException;" },
    { "setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider:", "setCurrentMillisProvider", "V", 0x19, "Ljava.lang.SecurityException;" },
    { "checkPermission", NULL, "V", 0xa, "Ljava.lang.SecurityException;" },
    { "getInstantMillisWithOrgJodaTimeReadableInstant:", "getInstantMillis", "J", 0x19, NULL },
    { "getInstantChronologyWithOrgJodaTimeReadableInstant:", "getInstantChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getIntervalChronologyWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "getIntervalChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getIntervalChronologyWithOrgJodaTimeReadableInterval:", "getIntervalChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getReadableIntervalWithOrgJodaTimeReadableInterval:", "getReadableInterval", "Lorg.joda.time.ReadableInterval;", 0x19, NULL },
    { "getChronologyWithOrgJodaTimeChronology:", "getChronology", "Lorg.joda.time.Chronology;", 0x19, NULL },
    { "getZoneWithOrgJodaTimeDateTimeZone:", "getZone", "Lorg.joda.time.DateTimeZone;", 0x19, NULL },
    { "getPeriodTypeWithOrgJodaTimePeriodType:", "getPeriodType", "Lorg.joda.time.PeriodType;", 0x19, NULL },
    { "getDurationMillisWithOrgJodaTimeReadableDuration:", "getDurationMillis", "J", 0x19, NULL },
    { "isContiguousWithOrgJodaTimeReadablePartial:", "isContiguous", "Z", 0x19, NULL },
    { "getDateFormatSymbolsWithJavaUtilLocale:", "getDateFormatSymbols", "Ljava.text.DateFormatSymbols;", 0x19, NULL },
    { "getDefaultTimeZoneNames", NULL, "Ljava.util.Map;", 0x19, NULL },
    { "setDefaultTimeZoneNamesWithJavaUtilMap:", "setDefaultTimeZoneNames", "V", 0x19, NULL },
    { "toJulianDayWithLong:", "toJulianDay", "D", 0x19, NULL },
    { "toJulianDayNumberWithLong:", "toJulianDayNumber", "J", 0x19, NULL },
    { "fromJulianDayWithDouble:", "fromJulianDay", "J", 0x19, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SYSTEM_MILLIS_PROVIDER_", NULL, 0x1a, "Lorg.joda.time.DateTimeUtils$SystemMillisProvider;", &OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_,  },
    { "cMillisProvider_", NULL, 0x4a, "Lorg.joda.time.DateTimeUtils$MillisProvider;", &OrgJodaTimeDateTimeUtils_cMillisProvider_,  },
    { "cZoneNames_", NULL, 0x4a, "Ljava.util.Map;", &OrgJodaTimeDateTimeUtils_cZoneNames_,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils = { "DateTimeUtils", "org.joda.time", NULL, 0x1, 24, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils;
}

@end

void OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(id<JavaUtilMap> map, NSString *name, NSString *id_) {
  OrgJodaTimeDateTimeUtils_init();
  @try {
    [((id<JavaUtilMap>) nil_chk(map)) putWithId:name withId:OrgJodaTimeDateTimeZone_forIDWithNSString_(id_)];
  }
  @catch (JavaLangRuntimeException *ex) {
  }
}

jlong OrgJodaTimeDateTimeUtils_currentTimeMillis() {
  OrgJodaTimeDateTimeUtils_init();
  return [((id<OrgJodaTimeDateTimeUtils_MillisProvider>) nil_chk(OrgJodaTimeDateTimeUtils_cMillisProvider_)) getMillis];
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisSystem() {
  OrgJodaTimeDateTimeUtils_init();
  OrgJodaTimeDateTimeUtils_checkPermission();
  JreStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider_, nil, OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_);
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisFixedWithLong_(jlong fixedMillis) {
  OrgJodaTimeDateTimeUtils_init();
  OrgJodaTimeDateTimeUtils_checkPermission();
  JreStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_cMillisProvider_, nil, [[OrgJodaTimeDateTimeUtils_FixedMillisProvider alloc] initWithLong:fixedMillis]);
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisOffsetWithLong_(jlong offsetMillis) {
  OrgJodaTimeDateTimeUtils_init();
  OrgJodaTimeDateTimeUtils_checkPermission();
  if (offsetMillis == 0) {
    JreStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider_, nil, OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER_);
  }
  else {
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_cMillisProvider_, nil, [[OrgJodaTimeDateTimeUtils_OffsetMillisProvider alloc] initWithLong:offsetMillis]);
  }
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider_(id<OrgJodaTimeDateTimeUtils_MillisProvider> millisProvider) {
  OrgJodaTimeDateTimeUtils_init();
  if (millisProvider == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The MillisProvider must not be null"] autorelease];
  }
  OrgJodaTimeDateTimeUtils_checkPermission();
  JreStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider_, nil, millisProvider);
}

void OrgJodaTimeDateTimeUtils_checkPermission() {
  OrgJodaTimeDateTimeUtils_init();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:[[[OrgJodaTimeJodaTimePermission alloc] initWithNSString:@"CurrentTime.setProvider"] autorelease]];
  }
}

jlong OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> instant) {
  OrgJodaTimeDateTimeUtils_init();
  if (instant == nil) {
    return OrgJodaTimeDateTimeUtils_currentTimeMillis();
  }
  return [((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getMillis];
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> instant) {
  OrgJodaTimeDateTimeUtils_init();
  if (instant == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getChronology];
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end) {
  OrgJodaTimeDateTimeUtils_init();
  OrgJodaTimeChronology *chrono = nil;
  if (start != nil) {
    chrono = [start getChronology];
  }
  else if (end != nil) {
    chrono = [end getChronology];
  }
  if (chrono == nil) {
    chrono = OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeDateTimeUtils_init();
  if (interval == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getChronology];
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

id<OrgJodaTimeReadableInterval> OrgJodaTimeDateTimeUtils_getReadableIntervalWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeDateTimeUtils_init();
  if (interval == nil) {
    jlong now = OrgJodaTimeDateTimeUtils_currentTimeMillis();
    interval = [[[OrgJodaTimeInterval alloc] initWithLong:now withLong:now] autorelease];
  }
  return interval;
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) {
  OrgJodaTimeDateTimeUtils_init();
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeDateTimeUtils_init();
  if (zone == nil) {
    return OrgJodaTimeDateTimeZone_getDefault();
  }
  return zone;
}

OrgJodaTimePeriodType *OrgJodaTimeDateTimeUtils_getPeriodTypeWithOrgJodaTimePeriodType_(OrgJodaTimePeriodType *type) {
  OrgJodaTimeDateTimeUtils_init();
  if (type == nil) {
    return OrgJodaTimePeriodType_standard();
  }
  return type;
}

jlong OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(id<OrgJodaTimeReadableDuration> duration) {
  OrgJodaTimeDateTimeUtils_init();
  if (duration == nil) {
    return 0LL;
  }
  return [((id<OrgJodaTimeReadableDuration>) nil_chk(duration)) getMillis];
}

jboolean OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) {
  OrgJodaTimeDateTimeUtils_init();
  if (partial == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Partial must not be null"] autorelease];
  }
  OrgJodaTimeDurationFieldType *lastType = nil;
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i++) {
    OrgJodaTimeDateTimeField *loopField = [partial getFieldWithInt:i];
    if (i > 0) {
      if ([((OrgJodaTimeDateTimeField *) nil_chk(loopField)) getRangeDurationField] == nil || [((OrgJodaTimeDurationField *) nil_chk([loopField getRangeDurationField])) getType] != lastType) {
        return NO;
      }
    }
    lastType = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(loopField)) getDurationField])) getType];
  }
  return YES;
}

JavaTextDateFormatSymbols *OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgJodaTimeDateTimeUtils_init();
  @try {
    JavaLangReflectMethod *method = [[IOSClass classWithClass:[JavaTextDateFormatSymbols class]] getMethod:@"getInstance" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[JavaUtilLocale class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
    return (JavaTextDateFormatSymbols *) check_class_cast([((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ locale } count:1 type:[IOSClass classWithClass:[NSObject class]]]], [JavaTextDateFormatSymbols class]);
  }
  @catch (JavaLangException *ex) {
    return [[[JavaTextDateFormatSymbols alloc] initWithJavaUtilLocale:locale] autorelease];
  }
}

id<JavaUtilMap> OrgJodaTimeDateTimeUtils_getDefaultTimeZoneNames() {
  OrgJodaTimeDateTimeUtils_init();
  return OrgJodaTimeDateTimeUtils_cZoneNames_;
}

void OrgJodaTimeDateTimeUtils_setDefaultTimeZoneNamesWithJavaUtilMap_(id<JavaUtilMap> names) {
  OrgJodaTimeDateTimeUtils_init();
  JreStrongAssign(&OrgJodaTimeDateTimeUtils_cZoneNames_, nil, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_([[[JavaUtilHashMap alloc] initWithJavaUtilMap:names] autorelease]));
}

jdouble OrgJodaTimeDateTimeUtils_toJulianDayWithLong_(jlong epochMillis) {
  OrgJodaTimeDateTimeUtils_init();
  jdouble epochDay = epochMillis / 86400000.0;
  return epochDay + 2440587.5;
}

jlong OrgJodaTimeDateTimeUtils_toJulianDayNumberWithLong_(jlong epochMillis) {
  OrgJodaTimeDateTimeUtils_init();
  return J2ObjCFpToLong(JavaLangMath_floorWithDouble_(OrgJodaTimeDateTimeUtils_toJulianDayWithLong_(epochMillis) + 0.5));
}

jlong OrgJodaTimeDateTimeUtils_fromJulianDayWithDouble_(jdouble julianDay) {
  OrgJodaTimeDateTimeUtils_init();
  jdouble epochDay = julianDay - 2440587.5;
  return J2ObjCFpToLong((epochDay * 86400000.0));
}

@interface OrgJodaTimeDateTimeUtils_MillisProvider : NSObject
@end

@implementation OrgJodaTimeDateTimeUtils_MillisProvider

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMillis", NULL, "J", 0x401, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_MillisProvider = { "MillisProvider", "org.joda.time", "DateTimeUtils", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_MillisProvider;
}

@end


@implementation OrgJodaTimeDateTimeUtils_SystemMillisProvider

- (jlong)getMillis {
  return JavaLangSystem_currentTimeMillis();
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMillis", NULL, "J", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_SystemMillisProvider = { "SystemMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_SystemMillisProvider;
}

@end

@implementation OrgJodaTimeDateTimeUtils_FixedMillisProvider

- (instancetype)initWithLong:(jlong)fixedMillis {
  if (self = [super init]) {
    iMillis_ = fixedMillis;
  }
  return self;
}

- (jlong)getMillis {
  return iMillis_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeUtils_FixedMillisProvider *)other {
  [super copyAllFieldsTo:other];
  other->iMillis_ = iMillis_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "FixedMillisProvider", NULL, 0x0, NULL },
    { "getMillis", NULL, "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_FixedMillisProvider = { "FixedMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_FixedMillisProvider;
}

@end

@implementation OrgJodaTimeDateTimeUtils_OffsetMillisProvider

- (instancetype)initWithLong:(jlong)offsetMillis {
  if (self = [super init]) {
    iMillis_ = offsetMillis;
  }
  return self;
}

- (jlong)getMillis {
  return JavaLangSystem_currentTimeMillis() + iMillis_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeUtils_OffsetMillisProvider *)other {
  [super copyAllFieldsTo:other];
  other->iMillis_ = iMillis_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "OffsetMillisProvider", NULL, 0x0, NULL },
    { "getMillis", NULL, "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_OffsetMillisProvider = { "OffsetMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeUtils_OffsetMillisProvider;
}

@end
