//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/YearMonth.java
//

#ifndef _OrgJodaTimeYearMonth_H_
#define _OrgJodaTimeYearMonth_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/base/BasePartial.h"
#include "org/joda/time/field/AbstractPartialFieldProperty.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeInterval;
@class OrgJodaTimeLocalDate;
@class OrgJodaTimeYearMonth_Property;
@protocol OrgJodaTimeReadablePeriod;

#define OrgJodaTimeYearMonth_YEAR 0
#define OrgJodaTimeYearMonth_MONTH_OF_YEAR 1

/*!
 @brief YearMonth is an immutable partial supporting the year and monthOfYear fields.
 <p>
 NOTE: This class only supports the two fields listed above.
 It is impossible to query any other fields, such as dayOfWeek or centuryOfEra.
 <p>
 Calculations on YearMonth are performed using a <code>Chronology</code>.
 This chronology is set to be in the UTC time zone for all calculations.
 <p>
 One use case for this class is to store a credit card expiry date, as that only
 references the year and month.
 This class can be used as the gYearMonth type in XML Schema.
 <p>
 Each individual field can be queried in two ways:
 <ul>
 <li><code>getMonthOfYear()</code>
 <li><code>monthOfYear().get()</code>
 </ul>
 The second technique also provides access to other useful methods on the
 field:
 <ul>
 <li>numeric value - <code>monthOfYear().get()</code>
 <li>text value - <code>monthOfYear().getAsText()</code>
 <li>short text value - <code>monthOfYear().getAsShortText()</code>
 <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
 <li>add/subtract - <code>monthOfYear().addToCopy()</code>
 <li>set - <code>monthOfYear().setCopy()</code>
 </ul>
 <p>
 YearMonth is thread-safe and immutable, provided that the Chronology is as well.
 All standard Chronology classes supplied are thread-safe and immutable.
 @author Stephen Colebourne
 @since 2.0
 */
@interface OrgJodaTimeYearMonth : OrgJodaTimeBaseBasePartial < OrgJodaTimeReadablePartial, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a YearMonth with the current year-month, using ISOChronology in
 the default zone to extract the fields.
 <p>
 The constructor uses the default time zone, resulting in the local time
 being initialised. Once the constructor is complete, all further calculations
 are performed without reference to a time-zone (by switching to UTC).
 */
- (instancetype)init;

/*!
 @brief Constructs a YearMonth with the current year-month, using the specified chronology
 and zone to extract the fields.
 <p>
 The constructor uses the time zone of the chronology specified.
 Once the constructor is complete, all further calculations are performed
 without reference to a time-zone (by switching to UTC).
 @param chronology  the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs a YearMonth with the current year-month, using ISOChronology in
 the specified zone to extract the fields.
 <p>
 The constructor uses the specified time zone to obtain the current year-month.
 Once the constructor is complete, all further calculations
 are performed without reference to a time-zone (by switching to UTC).
 @param zone  the zone to use, null means default zone
 */
- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs a YearMonth with specified year and month
 using <code>ISOChronology</code>.
 <p>
 The constructor uses the no time zone initialising the fields as provided.
 Once the constructor is complete, all further calculations
 are performed without reference to a time-zone (by switching to UTC).
 @param year  the year
 @param monthOfYear  the month of the year
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear;

/*!
 @brief Constructs an instance set to the specified year and month
 using the specified chronology, whose zone is ignored.
 <p>
 If the chronology is null, <code>ISOChronology</code> is used.
 <p>
 The constructor uses the time zone of the chronology specified.
 Once the constructor is complete, all further calculations are performed
 without reference to a time-zone (by switching to UTC).
 @param year  the year
 @param monthOfYear  the month of the year
 @param chronology  the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs a YearMonth extracting the partial fields from the specified
 milliseconds using the ISOChronology in the default zone.
 <p>
 The constructor uses the default time zone, resulting in the local time
 being initialised. Once the constructor is complete, all further calculations
 are performed without reference to a time-zone (by switching to UTC).
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 */
- (instancetype)initWithLong:(jlong)instant;

/*!
 @brief Constructs a YearMonth extracting the partial fields from the specified
 milliseconds using the chronology provided.
 <p>
 The constructor uses the time zone of the chronology specified.
 Once the constructor is complete, all further calculations are performed
 without reference to a time-zone (by switching to UTC).
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param chronology  the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs a YearMonth from an Object that represents some form of time.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localDateParser()</code>.
 <p>
 The chronology used will be derived from the object, defaulting to ISO.
 @param instant  the date-time object, null means now
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant;

/*!
 @brief Constructs a YearMonth from an Object that represents some form of time,
 using the specified chronology.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localDateParser()</code>.
 <p>
 The constructor uses the time zone of the chronology specified.
 Once the constructor is complete, all further calculations are performed
 without reference to a time-zone (by switching to UTC).
 The specified chronology overrides that of the object.
 @param instant  the date-time object, null means now
 @param chronology  the chronology, null means ISO default
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs a YearMonth from a <code>java.util.Calendar</code>
 using exactly the same field values avoiding any time zone effects.
 <p>
 Each field is queried from the Calendar and assigned to the YearMonth.
 <p>
 This factory method ignores the type of the calendar and always
 creates a YearMonth with ISO chronology. It is expected that you
 will only pass in instances of <code>GregorianCalendar</code> however
 this is not validated.
 @param calendar  the Calendar to extract fields from
 @return the created YearMonth, never null
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
 */
+ (OrgJodaTimeYearMonth *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

/*!
 @brief Constructs a YearMonth from a <code>java.util.Date</code>
 using exactly the same field values avoiding any time zone effects.
 <p>
 Each field is queried from the Date and assigned to the YearMonth.
 <p>
 This factory method always creates a YearMonth with ISO chronology.
 @param date  the Date to extract fields from
 @return the created YearMonth, never null
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
 */
+ (OrgJodaTimeYearMonth *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Gets the field type at the specified index.
 @param index  the index to retrieve
 @return the field at the specified index, never null
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index;

/*!
 @brief Gets an array of the field type of each of the fields that this partial supports.
 <p>
 The fields are returned largest to smallest, Year, Month.
 @return the array of field types (cloned), largest to smallest, never null
 */
- (IOSObjectArray *)getFieldTypes;

/*!
 @brief Get the month of year field value.
 @return the month of year
 */
- (jint)getMonthOfYear;

/*!
 @brief Get the year field value.
 @return the year
 */
- (jint)getYear;

/*!
 @brief Returns a copy of this year-month with the specified period taken away.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 <p>
 This method is typically used to subtract complex period instances.
 Subtracting one field is best achieved using methods
 like <code>minusYears(int)</code>.
 @param period  the period to reduce this instant by
 @return a copy of this instance with the period taken away, never null
 @throws ArithmeticException if the new year-month exceeds the capacity
 */
- (OrgJodaTimeYearMonth *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a copy of this year-month minus the specified number of months.
 <p>
 This year-month instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  YearMonth subtracted = ym.minusMonths(6);
  YearMonth subtracted = ym.minus(Period.months(6));
  YearMonth subtracted = ym.withFieldAdded(DurationFieldType.months(), -6);
  
@endcode
 @param months  the amount of months to subtract, may be negative
 @return the new year-month minus the increased months, never null
 */
- (OrgJodaTimeYearMonth *)minusMonthsWithInt:(jint)months;

/*!
 @brief Returns a copy of this year-month minus the specified number of years.
 <p>
 This year-month instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  YearMonth subtracted = ym.minusYears(6);
  YearMonth subtracted = ym.minus(Period.years(6));
  YearMonth subtracted = ym.withFieldAdded(DurationFieldType.years(), -6);
  
@endcode
 @param years  the amount of years to subtract, may be negative
 @return the new year-month minus the increased years, never null
 */
- (OrgJodaTimeYearMonth *)minusYearsWithInt:(jint)years;

/*!
 @brief Get the month of year field property which provides access to advanced functionality.
 @return the month of year property
 */
- (OrgJodaTimeYearMonth_Property *)monthOfYear;

/*!
 @brief Obtains a <code>YearMonth</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the default time zone.
 The resulting object does not use the zone.
 @return the current year-month, not null
 @since 2.0
 */
+ (OrgJodaTimeYearMonth *)now;

/*!
 @brief Obtains a <code>YearMonth</code> set to the current system millisecond time
 using the specified chronology.
 The resulting object does not use the zone.
 @param chronology  the chronology, not null
 @return the current year-month, not null
 @since 2.0
 */
+ (OrgJodaTimeYearMonth *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Obtains a <code>YearMonth</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the specified time zone.
 The resulting object does not use the zone.
 @param zone  the time zone, not null
 @return the current year-month, not null
 @since 2.0
 */
+ (OrgJodaTimeYearMonth *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Parses a <code>YearMonth</code> from the specified string.
 <p>
 This uses <code>ISODateTimeFormat.localDateParser()</code>.
 @param str  the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeYearMonth *)parseWithNSString:(NSString *)str;

/*!
 @brief Parses a <code>YearMonth</code> from the specified string using a formatter.
 @param str  the string to parse, not null
 @param formatter  the formatter to use, not null
 @since 2.0
 */
+ (OrgJodaTimeYearMonth *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this year-month with the specified period added.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 <p>
 This method is typically used to add complex period instances.
 Adding one field is best achieved using methods
 like <code>plusYears(int)</code>.
 @param period  the duration to add to this one, null means zero
 @return a copy of this instance with the period added, never null
 @throws ArithmeticException if the new year-month exceeds the capacity
 */
- (OrgJodaTimeYearMonth *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a copy of this year-month plus the specified number of months.
 <p>
 This year-month instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  YearMonth added = ym.plusMonths(6);
  YearMonth added = ym.plus(Period.months(6));
  YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);
  
@endcode
 @param months  the amount of months to add, may be negative
 @return the new year-month plus the increased months, never null
 */
- (OrgJodaTimeYearMonth *)plusMonthsWithInt:(jint)months;

/*!
 @brief Returns a copy of this year-month plus the specified number of years.
 <p>
 This year-month instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  YearMonth added = ym.plusYears(6);
  YearMonth added = ym.plus(Period.years(6));
  YearMonth added = ym.withFieldAdded(DurationFieldType.years(), 6);
  
@endcode
 @param years  the amount of years to add, may be negative
 @return the new year-month plus the increased years, never null
 */
- (OrgJodaTimeYearMonth *)plusYearsWithInt:(jint)years;

/*!
 @brief Gets the property object for the specified type, which contains
 many useful methods.
 @param type  the field type to get the property for
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimeYearMonth_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Gets the number of fields in this partial, which is two.
 The supported fields are Year and MonthOfYear.
 Note that only these fields may be queried.
 @return the field count, two
 */
- (jint)size;

/*!
 @brief Converts this object to an Interval representing the whole month.
 <p>
 The interval will use the chronology of the year-month in the default zone.
 <p>
 This instance is immutable and unaffected by this method call.
 @return an interval over the month, never null
 */
- (OrgJodaTimeInterval *)toInterval;

/*!
 @brief Converts this object to an Interval representing the whole month.
 <p>
 The interval will use the chronology of the year-month in the specified zone.
 <p>
 This instance is immutable and unaffected by this method call.
 @param zone  the zone to get the Interval in, null means default
 @return an interval over the month, never null
 */
- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this object to a LocalDate with the same year-month and chronology.
 @param dayOfMonth the day of month to use, valid for chronology, such as 1-31 for ISO
 @return a LocalDate with the same year-month and chronology, never null
 */
- (OrgJodaTimeLocalDate *)toLocalDateWithInt:(jint)dayOfMonth;

/*!
 @brief Output the year-month in ISO8601 format (yyyy-MM).
 @return ISO8601 time formatted string.
 */
- (NSString *)description;

/*!
 @brief Output the year-month using the specified format pattern.
 @param pattern  the pattern specification, null means use <code>toString</code>
 */
- (NSString *)toStringWithNSString:(NSString *)pattern;

/*!
 @brief Output the year-month using the specified format pattern.
 @param pattern  the pattern specification, null means use <code>toString</code>
 @param locale  Locale to use, null means default
 */
- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a copy of this year-month with the specified chronology.
 This instance is immutable and unaffected by this method call.
 <p>
 This method retains the values of the fields, thus the result will
 typically refer to a different instant.
 <p>
 The time zone of the specified chronology is ignored, as YearMonth
 operates without a time zone.
 @param newChronology  the new chronology, null means ISO
 @return a copy of this year-month with a different chronology, never null
 @throws IllegalArgumentException if the values are invalid for the new chronology
 */
- (OrgJodaTimeYearMonth *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology;

/*!
 @brief Returns a copy of this year-month with the specified field set to a new value.
 <p>
 For example, if the field type is <code>monthOfYear</code> then the month
 would be changed in the returned instance.
 <p>
 These three lines are equivalent:
 @code

  YearMonth updated = ym.withField(DateTimeFieldType.monthOfYear(), 6);
  YearMonth updated = ym.monthOfYear().setCopy(6);
  YearMonth updated = ym.property(DateTimeFieldType.monthOfYear()).setCopy(6);
  
@endcode
 @param fieldType  the field type to set, not null
 @param value  the value to set
 @return a copy of this instance with the field set, never null
 @throws IllegalArgumentException if the value is null or invalid
 */
- (OrgJodaTimeYearMonth *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value;

/*!
 @brief Returns a copy of this year-month with the value of the specified field increased.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 <p>
 These three lines are equivalent:
 @code

  YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);
  YearMonth added = ym.plusMonths(6);
  YearMonth added = ym.monthOfYear().addToCopy(6);
  
@endcode
 @param fieldType  the field type to add to, not null
 @param amount  the amount to add
 @return a copy of this instance with the field updated, never null
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the new date-time exceeds the capacity
 */
- (OrgJodaTimeYearMonth *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount;

/*!
 @brief Returns a copy of this year-month with the month of year field updated.
 <p>
 YearMonth is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 month of year changed.
 @param monthOfYear  the month of year to set
 @return a copy of this object with the field set, never null
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeYearMonth *)withMonthOfYearWithInt:(jint)monthOfYear;

/*!
 @brief Returns a copy of this year-month with the specified period added.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 Fields in the period that aren't present in the partial are ignored.
 <p>
 This method is typically used to add multiple copies of complex
 period instances. Adding one field is best achieved using methods
 like <code>withFieldAdded(DurationFieldType,int)</code>
 or <code>plusYears(int)</code>.
 @param period  the period to add to this one, null means zero
 @param scalar  the amount of times to add, such as -1 to subtract once
 @return a copy of this instance with the period added, never null
 @throws ArithmeticException if the new date-time exceeds the capacity
 */
- (OrgJodaTimeYearMonth *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar;

/*!
 @brief Returns a copy of this year-month with the year field updated.
 <p>
 YearMonth is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 year changed.
 @param year  the year to set
 @return a copy of this object with the field set, never null
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeYearMonth *)withYearWithInt:(jint)year;

/*!
 @brief Get the year field property which provides access to advanced functionality.
 @return the year property
 */
- (OrgJodaTimeYearMonth_Property *)year;

#pragma mark Protected

/*!
 @brief Gets the field for a specific index in the chronology specified.
 <p>
 This method must not use any instance variables.
 @param index  the index to retrieve
 @param chrono  the chronology to use
 @return the field, never null
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

#pragma mark Package-Private

/*!
 @brief Constructs a YearMonth with values from this instance and a new chronology.
 @param partial  the partial to base this new instance on
 @param chrono  the new chronology
 */
- (instancetype)initWithOrgJodaTimeYearMonth:(OrgJodaTimeYearMonth *)partial
                   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Constructs a YearMonth with chronology from this instance and new values.
 @param partial  the partial to base this new instance on
 @param values  the new set of values
 */
- (instancetype)initWithOrgJodaTimeYearMonth:(OrgJodaTimeYearMonth *)partial
                                withIntArray:(IOSIntArray *)values;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeYearMonth)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeYearMonth, YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeYearMonth, MONTH_OF_YEAR, jint)

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_now();

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_parseWithNSString_(NSString *str);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *OrgJodaTimeYearMonth_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_init(OrgJodaTimeYearMonth *self);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeYearMonth *self, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithOrgJodaTimeChronology_(OrgJodaTimeYearMonth *self, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithLong_(OrgJodaTimeYearMonth *self, jlong instant);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithLong_(jlong instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeYearMonth *self, jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithId_(OrgJodaTimeYearMonth *self, id instant);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithId_(id instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeYearMonth *self, id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithInt_withInt_(OrgJodaTimeYearMonth *self, jint year, jint monthOfYear);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithInt_withInt_(jint year, jint monthOfYear) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeYearMonth *self, jint year, jint monthOfYear, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithOrgJodaTimeYearMonth_withIntArray_(OrgJodaTimeYearMonth *self, OrgJodaTimeYearMonth *partial, IOSIntArray *values);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithOrgJodaTimeYearMonth_withIntArray_(OrgJodaTimeYearMonth *partial, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_initWithOrgJodaTimeYearMonth_withOrgJodaTimeChronology_(OrgJodaTimeYearMonth *self, OrgJodaTimeYearMonth *partial, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimeYearMonth *new_OrgJodaTimeYearMonth_initWithOrgJodaTimeYearMonth_withOrgJodaTimeChronology_(OrgJodaTimeYearMonth *partial, OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeYearMonth)

/*!
 @brief The property class for <code>YearMonth</code>.
 <p>
 This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
 @author Stephen Colebourne
 @since 2.0
 */
@interface OrgJodaTimeYearMonth_Property : OrgJodaTimeFieldAbstractPartialFieldProperty < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Adds to the value of this field in a copy of this YearMonth.
 <p>
 The value will be added to this field. If the value is too large to be
 added solely to this field then it will affect larger fields.
 Smaller fields are unaffected.
 <p>
 If the result would be too large, beyond the maximum year, then an
 IllegalArgumentException is thrown.
 <p>
 The YearMonth attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param valueToAdd  the value to add to the field in the copy
 @return a copy of the YearMonth with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeYearMonth *)addToCopyWithInt:(jint)valueToAdd;

/*!
 @brief Adds to the value of this field in a copy of this YearMonth wrapping
 within this field if the maximum value is reached.
 <p>
 The value will be added to this field. If the value is too large to be
 added solely to this field then it wraps within this field.
 Other fields are unaffected.
 <p>
 For example,
 <code>2004-12</code> addWrapField one month returns <code>2004-01</code>.
 <p>
 The YearMonth attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param valueToAdd  the value to add to the field in the copy
 @return a copy of the YearMonth with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeYearMonth *)addWrapFieldToCopyWithInt:(jint)valueToAdd;

/*!
 @brief Gets the value of this field.
 @return the field value
 */
- (jint)get;

/*!
 @brief Gets the field that this property uses.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/*!
 @brief Gets the partial that this property belongs to.
 @return the partial
 */
- (OrgJodaTimeYearMonth *)getYearMonth;

/*!
 @brief Sets this field in a copy of the YearMonth.
 <p>
 The YearMonth attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param value  the value to set the field in the copy to
 @return a copy of the YearMonth with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeYearMonth *)setCopyWithInt:(jint)value;

/*!
 @brief Sets this field in a copy of the YearMonth to a parsed text value.
 <p>
 The YearMonth attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param text  the text value to set
 @return a copy of the YearMonth with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeYearMonth *)setCopyWithNSString:(NSString *)text;

/*!
 @brief Sets this field in a copy of the YearMonth to a parsed text value.
 <p>
 The YearMonth attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param text  the text value to set
 @param locale  optional locale to use for selecting a text symbol
 @return a copy of the YearMonth with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeYearMonth *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Protected

/*!
 @brief Gets the partial that this property belongs to.
 @return the partial
 */
- (id<OrgJodaTimeReadablePartial>)getReadablePartial;

#pragma mark Package-Private

/*!
 @brief Constructs a property.
 @param partial  the partial instance
 @param fieldIndex  the index in the partial
 */
- (instancetype)initWithOrgJodaTimeYearMonth:(OrgJodaTimeYearMonth *)partial
                                     withInt:(jint)fieldIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeYearMonth_Property)

FOUNDATION_EXPORT void OrgJodaTimeYearMonth_Property_initWithOrgJodaTimeYearMonth_withInt_(OrgJodaTimeYearMonth_Property *self, OrgJodaTimeYearMonth *partial, jint fieldIndex);

FOUNDATION_EXPORT OrgJodaTimeYearMonth_Property *new_OrgJodaTimeYearMonth_Property_initWithOrgJodaTimeYearMonth_withInt_(OrgJodaTimeYearMonth *partial, jint fieldIndex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeYearMonth_Property)

#endif // _OrgJodaTimeYearMonth_H_
