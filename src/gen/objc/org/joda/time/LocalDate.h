//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/LocalDate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeLocalDate_INCLUDE_ALL")
#ifdef OrgJodaTimeLocalDate_RESTRICT
#define OrgJodaTimeLocalDate_INCLUDE_ALL 0
#else
#define OrgJodaTimeLocalDate_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeLocalDate_RESTRICT

#if !defined (OrgJodaTimeLocalDate_) && (OrgJodaTimeLocalDate_INCLUDE_ALL || defined(OrgJodaTimeLocalDate_INCLUDE))
#define OrgJodaTimeLocalDate_

#define OrgJodaTimeBaseBaseLocal_RESTRICT 1
#define OrgJodaTimeBaseBaseLocal_INCLUDE 1
#include "org/joda/time/base/BaseLocal.h"

#define OrgJodaTimeReadablePartial_RESTRICT 1
#define OrgJodaTimeReadablePartial_INCLUDE 1
#include "org/joda/time/ReadablePartial.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateMidnight;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeInterval;
@class OrgJodaTimeLocalDateTime;
@class OrgJodaTimeLocalDate_Property;
@class OrgJodaTimeLocalTime;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief LocalDate is an immutable datetime class representing a date
 without a time zone.
 <p>
 LocalDate implements the <code>ReadablePartial</code> interface.
 To do this, the interface methods focus on the key fields -
 Year, MonthOfYear and DayOfMonth.
 However, <b>all</b> date fields may in fact be queried.
 <p>
 LocalDate differs from DateMidnight in that this class does not
 have a time zone and does not represent a single instant in time.
 <p>
 Calculations on LocalDate are performed using a <code>Chronology</code>.
 This chronology will be set internally to be in the UTC time zone
 for all calculations.
 <p>Each individual field can be queried in two ways:
 <ul>
 <li><code>getMonthOfYear()</code>
 <li><code>monthOfYear().get()</code>
 </ul>
 The second technique also provides access to other useful methods on the
 field:
 <ul>
 <li>numeric value
 <li>text value
 <li>short text value
 <li>maximum/minimum values
 <li>add/subtract
 <li>set
 <li>rounding
 </ul>
 <p>
 LocalDate is thread-safe and immutable, provided that the Chronology is as well.
 All standard Chronology classes supplied are thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.3
 */
@interface OrgJodaTimeLocalDate : OrgJodaTimeBaseBaseLocal < OrgJodaTimeReadablePartial, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs an instance set to the current local time evaluated using
 ISO chronology in the default zone.
 <p>
 Once the constructor is completed, the zone is no longer used.
 - seealso: #now()
 */
- (instancetype)init;

/*!
 @brief Constructs an instance set to the current local time evaluated using
 specified chronology.
 <p>
 If the chronology is null, ISO chronology in the default time zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param chronology  the chronology, null means ISOChronology in default zone
 - seealso: #now(Chronology)
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the current local time evaluated using
 ISO chronology in the specified zone.
 <p>
 If the specified time zone is null, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param zone  the time zone, null means default zone
 - seealso: #now(DateTimeZone)
 */
- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance set to the specified date and time
 using <code>ISOChronology</code>.
 @param year  the year
 @param monthOfYear  the month of the year, from 1 to 12
 @param dayOfMonth  the day of the month, from 1 to 31
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth;

/*!
 @brief Constructs an instance set to the specified date and time
 using the specified chronology, whose zone is ignored.
 <p>
 If the chronology is null, <code>ISOChronology</code> is used.
 @param year  the year, valid values defined by the chronology
 @param monthOfYear  the month of the year, valid values defined by the chronology
 @param dayOfMonth  the day of the month, valid values defined by the chronology
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the local time defined by the specified
 instant evaluated using ISO chronology in the default zone.
 <p>
 Once the constructor is completed, the zone is no longer used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 */
- (instancetype)initWithLong:(jlong)instant;

/*!
 @brief Constructs an instance set to the local time defined by the specified
 instant evaluated using the specified chronology.
 <p>
 If the chronology is null, ISO chronology in the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the local time defined by the specified
 instant evaluated using ISO chronology in the specified zone.
 <p>
 If the specified time zone is null, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param zone  the time zone, null means default zone
 */
- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance from an Object that represents a datetime.
 The time zone will be retrieved from the object if possible,
 otherwise the default time zone will be used.
 <p>
 If the object contains no chronology, <code>ISOChronology</code> is used.
 Once the constructor is completed, the zone is no longer used.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadablePartial, ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localDateParser()</code>.
 The default String converter ignores the zone and only parses the field values.
 @param instant  the datetime object
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant;

/*!
 @brief Constructs an instance from an Object that represents a datetime,
 using the specified chronology.
 <p>
 If the chronology is null, ISO in the default time zone is used.
 Once the constructor is completed, the zone is no longer used.
 If the instant contains a chronology, it will be ignored.
 For example, passing a <code>LocalDate</code> and a different chronology
 will return a date with the year/month/day from the date applied
 unaltered to the specified chronology.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadablePartial, ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localDateParser()</code>.
 The default String converter ignores the zone and only parses the field values.
 @param instant  the datetime object
 @param chronology  the chronology
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance from an Object that represents a datetime,
 forcing the time zone to that specified.
 <p>
 If the object contains no chronology, <code>ISOChronology</code> is used.
 If the specified time zone is null, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadablePartial, ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localDateParser()</code>.
 The default String converter ignores the zone and only parses the field values.
 @param instant  the datetime object
 @param zone  the time zone
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Get the century of era property which provides access to advanced functionality.
 @return the year of era property
 */
- (OrgJodaTimeLocalDate_Property *)centuryOfEra;

/*!
 @brief Compares this partial with another returning an integer
 indicating the order.
 <p>
 The fields are compared in order, from largest to smallest.
 The first field that is non-equal is used to determine the result.
 <p>
 The specified object must be a partial instance whose field types
 match those of this partial.
 @param partial  an object to check against
 @return negative if this is less, zero if equal, positive if greater
 @throws ClassCastException if the partial is the wrong class
 or if it has field types that don't match
 @throws NullPointerException if the partial is null
 */
- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Get the day of month property which provides access to advanced functionality.
 @return the day of month property
 */
- (OrgJodaTimeLocalDate_Property *)dayOfMonth;

/*!
 @brief Get the day of week property which provides access to advanced functionality.
 @return the day of week property
 */
- (OrgJodaTimeLocalDate_Property *)dayOfWeek;

/*!
 @brief Get the day of year property which provides access to advanced functionality.
 @return the day of year property
 */
- (OrgJodaTimeLocalDate_Property *)dayOfYear;

/*!
 @brief Compares this ReadablePartial with another returning true if the chronology,
 field types and values are equal.
 @param partial  an object to check against
 @return true if fields and values are equal
 */
- (jboolean)isEqual:(id)partial;

/*!
 @brief Get the era property which provides access to advanced functionality.
 @return the era property
 */
- (OrgJodaTimeLocalDate_Property *)era;

/*!
 @brief Constructs a LocalDate from a <code>java.util.Calendar</code>
 using exactly the same field values.
 <p>
 Each field is queried from the Calendar and assigned to the LocalDate.
 This is useful if you have been using the Calendar as a local date,
 ignoring the zone.
 <p>
 One advantage of this method is that this method is unaffected if the
 version of the time zone data differs between the JDK and Joda-Time.
 That is because the local field values are transferred, calculated using
 the JDK time zone data and without using the Joda-Time time zone data.
 <p>
 This factory method ignores the type of the calendar and always
 creates a LocalDate with ISO chronology. It is expected that you
 will only pass in instances of <code>GregorianCalendar</code> however
 this is not validated.
 @param calendar  the Calendar to extract fields from, not null
 @return the created local date, not null
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */
+ (OrgJodaTimeLocalDate *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

/*!
 @brief Constructs a LocalDate from a <code>java.util.Date</code>
 using exactly the same field values.
 <p>
 Each field is queried from the Date and assigned to the LocalDate.
 This is useful if you have been using the Date as a local date,
 ignoring the zone.
 <p>
 One advantage of this method is that this method is unaffected if the
 version of the time zone data differs between the JDK and Joda-Time.
 That is because the local field values are transferred, calculated using
 the JDK time zone data and without using the Joda-Time time zone data.
 <p>
 This factory method always creates a LocalDate with ISO chronology.
 @param date  the Date to extract fields from, not null
 @return the created local date, not null
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */
+ (OrgJodaTimeLocalDate *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Get the value of one of the fields of a datetime.
 <p>
 This method gets the value of the specified field.
 For example:
 @code

  LocalDate dt = LocalDate.nowDefaultZone();
  int year = dt.get(DateTimeFieldType.year());
  
@endcode
 @param fieldType  a field type, usually obtained from DateTimeFieldType, not null
 @return the value of that field
 @throws IllegalArgumentException if the field type is null or unsupported
 */
- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

/*!
 @brief Get the year of era field value.
 @return the year of era
 */
- (jint)getCenturyOfEra;

/*!
 @brief Gets the chronology of the date.
 @return the Chronology that the date is using
 */
- (OrgJodaTimeChronology *)getChronology;

/*!
 @brief Get the day of month field value.
 <p>
 The values for the day of month are defined in <code>org.joda.time.DateTimeConstants</code>.
 @return the day of month
 */
- (jint)getDayOfMonth;

/*!
 @brief Get the day of week field value.
 <p>
 The values for the day of week are defined in <code>org.joda.time.DateTimeConstants</code>.
 @return the day of week
 */
- (jint)getDayOfWeek;

/*!
 @brief Get the day of year field value.
 @return the day of year
 */
- (jint)getDayOfYear;

/*!
 @brief Get the era field value.
 @return the era
 */
- (jint)getEra;

/*!
 @brief Get the month of year field value.
 @return the month of year
 */
- (jint)getMonthOfYear;

/*!
 @brief Gets the value of the field at the specifed index.
 <p>
 This method is required to support the <code>ReadablePartial</code>
 interface. The supported fields are Year, MonthOfYear and DayOfMonth.
 Note that all fields from day and above may in fact be queried via
 other methods.
 @param index  the index, zero to two
 @return the value
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (jint)getValueWithInt:(jint)index;

/*!
 @brief Get the week of weekyear field value.
 <p>
 This field is associated with the "weekyear" via <code>getWeekyear()</code>.
 In the standard ISO8601 week algorithm, the first week of the year
 is that in which at least 4 days are in the year. As a result of this
 definition, day 1 of the first week may be in the previous year.
 @return the week of a week based year
 */
- (jint)getWeekOfWeekyear;

/*!
 @brief Get the weekyear field value.
 <p>
 The weekyear is the year that matches with the weekOfWeekyear field.
 In the standard ISO8601 week algorithm, the first week of the year
 is that in which at least 4 days are in the year. As a result of this
 definition, day 1 of the first week may be in the previous year.
 The weekyear allows you to query the effective year for that day.
 @return the weekyear
 */
- (jint)getWeekyear;

/*!
 @brief Get the year field value.
 @return the year
 */
- (jint)getYear;

/*!
 @brief Get the year of century field value.
 @return the year of century
 */
- (jint)getYearOfCentury;

/*!
 @brief Get the year of era field value.
 @return the year of era
 */
- (jint)getYearOfEra;

/*!
 @brief Gets a hash code for the instant as defined in <code>ReadablePartial</code>.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if the field type specified is supported by this
 local date and chronology.
 This can be used to avoid exceptions in <code>get(DateTimeFieldType)</code>.
 @param type  a field type, usually obtained from DateTimeFieldType
 @return true if the field type is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Checks if the duration type specified is supported by this
 local date and chronology.
 @param type  a duration type, usually obtained from DurationFieldType
 @return true if the field type is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

/*!
 @brief Returns a copy of this date with the specified period taken away.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 <p>
 This method is typically used to subtract complex period instances.
 Subtracting one field is best achieved using methods
 like <code>minusYears(int)</code>.
 <p>
 Unsupported time fields are ignored, thus subtracting a period of 24 hours
 will not have any effect.
 @param period  the period to reduce this instant by
 @return a copy of this LocalDate with the period taken away
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDate *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a copy of this date minus the specified number of days.
 <p>
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate subtracted = dt.minusDays(6);
  LocalDate subtracted = dt.minus(Period.days(6));
  LocalDate subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
  
@endcode
 @param days  the amount of days to subtract, may be negative
 @return the new LocalDate minus the increased days
 */
- (OrgJodaTimeLocalDate *)minusDaysWithInt:(jint)days;

/*!
 @brief Returns a copy of this date minus the specified number of months.
 <p>
 This subtracts the specified number of months from the date.
 The subtraction may change the year, but the day-of-month is normally unchanged.
 If subtracting months makes the day-of-month invalid, it is adjusted to the last valid day in the month.
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate subtracted = dt.minusMonths(6);
  LocalDate subtracted = dt.minus(Period.months(6));
  LocalDate subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
  
@endcode
 @param months  the amount of months to subtract, may be negative
 @return the new LocalDate minus the increased months
 */
- (OrgJodaTimeLocalDate *)minusMonthsWithInt:(jint)months;

/*!
 @brief Returns a copy of this date minus the specified number of weeks.
 <p>
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate subtracted = dt.minusWeeks(6);
  LocalDate subtracted = dt.minus(Period.weeks(6));
  LocalDate subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);
  
@endcode
 @param weeks  the amount of weeks to subtract, may be negative
 @return the new LocalDate minus the increased weeks
 */
- (OrgJodaTimeLocalDate *)minusWeeksWithInt:(jint)weeks;

/*!
 @brief Returns a copy of this date minus the specified number of years.
 <p>
 This subtracts the specified number of years from the date.
 If subtracting years makes the day-of-month invalid, it is adjusted to the last valid day in the month.
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate subtracted = dt.minusYears(6);
  LocalDate subtracted = dt.minus(Period.years(6));
  LocalDate subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
  
@endcode
 @param years  the amount of years to subtract, may be negative
 @return the new LocalDate minus the increased years
 */
- (OrgJodaTimeLocalDate *)minusYearsWithInt:(jint)years;

/*!
 @brief Get the month of year property which provides access to advanced functionality.
 @return the month of year property
 */
- (OrgJodaTimeLocalDate_Property *)monthOfYear;

/*!
 @brief Obtains a <code>LocalDate</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the default time zone.
 @return the current date-time, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDate *)now;

/*!
 @brief Obtains a <code>LocalDate</code> set to the current system millisecond time
 using the specified chronology.
 @param chronology  the chronology, not null
 @return the current date-time, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Obtains a <code>LocalDate</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the specified time zone.
 @param zone  the time zone, not null
 @return the current date-time, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Parses a <code>LocalDate</code> from the specified string.
 <p>
 This uses <code>ISODateTimeFormat.localDateParser()</code>.
 @param str  the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str;

/*!
 @brief Parses a <code>LocalDate</code> from the specified string using a formatter.
 @param str  the string to parse, not null
 @param formatter  the formatter to use, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this date with the specified period added.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 <p>
 This method is typically used to add complex period instances.
 Adding one field is best achieved using methods
 like <code>plusYears(int)</code>.
 <p>
 Unsupported time fields are ignored, thus adding a period of 24 hours
 will not have any effect.
 @param period  the period to add to this one, null means zero
 @return a copy of this date with the period added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDate *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a copy of this date plus the specified number of days.
 <p>
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate added = dt.plusDays(6);
  LocalDate added = dt.plus(Period.days(6));
  LocalDate added = dt.withFieldAdded(DurationFieldType.days(), 6);
  
@endcode
 @param days  the amount of days to add, may be negative
 @return the new LocalDate plus the increased days
 */
- (OrgJodaTimeLocalDate *)plusDaysWithInt:(jint)days;

/*!
 @brief Returns a copy of this date plus the specified number of months.
 <p>
 This adds the specified number of months to the date.
 The addition may change the year, but the day-of-month is normally unchanged.
 If adding months makes the day-of-month invalid, it is adjusted to the last valid day in the month.
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate added = dt.plusMonths(6);
  LocalDate added = dt.plus(Period.months(6));
  LocalDate added = dt.withFieldAdded(DurationFieldType.months(), 6);
  
@endcode
 @param months  the amount of months to add, may be negative
 @return the new LocalDate plus the increased months
 */
- (OrgJodaTimeLocalDate *)plusMonthsWithInt:(jint)months;

/*!
 @brief Returns a copy of this date plus the specified number of weeks.
 <p>
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate added = dt.plusWeeks(6);
  LocalDate added = dt.plus(Period.weeks(6));
  LocalDate added = dt.withFieldAdded(DurationFieldType.weeks(), 6);
  
@endcode
 @param weeks  the amount of weeks to add, may be negative
 @return the new LocalDate plus the increased weeks
 */
- (OrgJodaTimeLocalDate *)plusWeeksWithInt:(jint)weeks;

/*!
 @brief Returns a copy of this date plus the specified number of years.
 <p>
 This adds the specified number of years to the date.
 If adding years makes the day-of-month invalid, it is adjusted to the last valid day in the month.
 This LocalDate instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalDate added = dt.plusYears(6);
  LocalDate added = dt.plus(Period.years(6));
  LocalDate added = dt.withFieldAdded(DurationFieldType.years(), 6);
  
@endcode
 @param years  the amount of years to add, may be negative
 @return the new LocalDate plus the increased years
 */
- (OrgJodaTimeLocalDate *)plusYearsWithInt:(jint)years;

/*!
 @brief Gets the property object for the specified type, which contains many
 useful methods.
 @param fieldType  the field type to get the chronology for
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimeLocalDate_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

/*!
 @brief Gets the number of fields in this partial, which is three.
 The supported fields are Year, MonthOfYear and DayOfMonth.
 Note that all fields from day and above may in fact be queried via
 other methods.
 @return the field count, three
 */
- (jint)size;

/*!
 @brief Get the date time as a <code>java.util.Date</code>.
 <p>
 The <code>Date</code> object created has exactly the same year, month and day
 as this date. The time will be set to the earliest valid time for that date.
 <p>
 Converting to a JDK Date is full of complications as the JDK Date constructor
 doesn't behave as you might expect around DST transitions. This method works
 by taking a first guess and then adjusting the JDK date until it has the
 earliest valid instant. This also handles the situation where the JDK time
 zone data differs from the Joda-Time time zone data.
 @return a Date initialised with this date, never null
 @since 2.0
 */
- (JavaUtilDate *)toDate;

/*!
 @brief Converts this LocalDate to a DateMidnight in the default time zone.
 <p>
 As from v1.5, you are recommended to avoid DateMidnight and use
 <code>toDateTimeAtStartOfDay()</code> instead because of the exception
 detailed below.
 <p>
 This method will throw an exception if the default time zone switches
 to Daylight Savings Time at midnight and this LocalDate represents
 that switchover date. The problem is that there is no such time as
 midnight on the required date, and as such an exception is thrown.
 <p>
 This instance is immutable and unaffected by this method call.
 @return the DateMidnight instance in the default zone
 */
- (OrgJodaTimeDateMidnight *)toDateMidnight;

/*!
 @brief Converts this LocalDate to a DateMidnight.
 <p>
 As from v1.5, you are recommended to avoid DateMidnight and use
 <code>toDateTimeAtStartOfDay()</code> instead because of the exception
 detailed below.
 <p>
 This method will throw an exception if the time zone switches
 to Daylight Savings Time at midnight and this LocalDate represents
 that switchover date. The problem is that there is no such time as
 midnight on the required date, and as such an exception is thrown.
 <p>
 This instance is immutable and unaffected by this method call.
 @param zone  the zone to get the DateMidnight in, null means default zone
 @return the DateMidnight instance
 */
- (OrgJodaTimeDateMidnight *)toDateMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this object to a DateTime using a LocalTime to fill in the
 missing fields and using the default time zone.
 <p>
 The resulting chronology is determined by the chronology of this
 LocalDate. The chronology of the time must match.
 <p>
 If the time is null, this method delegates to <code>toDateTimeAtCurrentTime(DateTimeZone)</code>
 and the following documentation does not apply.
 <p>
 When the time zone is applied, the local date-time may be affected by daylight saving.
 In a daylight saving gap, when the local time does not exist,
 this method will throw an exception.
 In a daylight saving overlap, when the same local time occurs twice,
 this method returns the first occurrence of the local time.
 <p>
 This instance is immutable and unaffected by this method call.
 @param time  the time of day to use, null uses current time
 @return the DateTime instance
 @throws IllegalArgumentException if the chronology of the time does not match
 @throws IllegalInstantException if the local time does not exist when the time zone is applied
 */
- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time;

/*!
 @brief Converts this object to a DateTime using a LocalTime to fill in the
 missing fields.
 <p>
 The resulting chronology is determined by the chronology of this
 LocalDate plus the time zone. The chronology of the time must match.
 <p>
 If the time is null, this method delegates to <code>toDateTimeAtCurrentTime(DateTimeZone)</code>
 and the following documentation does not apply.
 <p>
 When the time zone is applied, the local date-time may be affected by daylight saving.
 In a daylight saving gap, when the local time does not exist,
 this method will throw an exception.
 In a daylight saving overlap, when the same local time occurs twice,
 this method returns the first occurrence of the local time.
 <p>
 This instance is immutable and unaffected by this method call.
 @param time  the time of day to use, null uses current time
 @param zone  the zone to get the DateTime in, null means default
 @return the DateTime instance
 @throws IllegalArgumentException if the chronology of the time does not match
 @throws IllegalInstantException if the local time does not exist when the time zone is applied
 */
- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time
                                withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this LocalDate to a full datetime using the default time zone
 setting the date fields from this instance and the time fields from
 the current time.
 <p>
 This method will throw an exception if the datetime that would be
 created does not exist when the time zone is taken into account.
 <p>
 This instance is immutable and unaffected by this method call.
 @return this date as a datetime with the time as the current time
 */
- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTime;

/*!
 @brief Converts this LocalDate to a full datetime using the specified time zone
 setting the date fields from this instance and the time fields from
 the current time.
 <p>
 This method uses the chronology from this instance plus the time zone
 specified.
 <p>
 This method will throw an exception if the datetime that would be
 created does not exist when the time zone is taken into account.
 <p>
 This instance is immutable and unaffected by this method call.
 @param zone  the zone to use, null means default zone
 @return this date as a datetime with the time as the current time
 */
- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this LocalDate to a full datetime at midnight using the default
 time zone.
 <p>
 This method will throw an exception if the default time zone switches
 to Daylight Savings Time at midnight and this LocalDate represents
 that switchover date. The problem is that there is no such time as
 midnight on the required date, and as such an exception is thrown.
 <p>
 This instance is immutable and unaffected by this method call.
 @return this date as a datetime at midnight
 */
- (OrgJodaTimeDateTime *)toDateTimeAtMidnight;

/*!
 @brief Converts this LocalDate to a full datetime at midnight using the
 specified time zone.
 <p>
 This method will throw an exception if the time zone switches
 to Daylight Savings Time at midnight and this LocalDate represents
 that switchover date. The problem is that there is no such time as
 midnight on the required date, and as such an exception is thrown.
 <p>
 This method uses the chronology from this instance plus the time zone
 specified.
 <p>
 This instance is immutable and unaffected by this method call.
 @param zone  the zone to use, null means default zone
 @return this date as a datetime at midnight
 */
- (OrgJodaTimeDateTime *)toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this LocalDate to a full datetime at the earliest valid time
 for the date using the default time zone.
 <p>
 The time will normally be midnight, as that is the earliest time on
 any given day. However, in some time zones when Daylight Savings Time
 starts, there is no midnight because time jumps from 11:59 to 01:00.
 This method handles that situation by returning 01:00 on that date.
 <p>
 This instance is immutable and unaffected by this method call.
 @return this date as a datetime at the start of the day
 @since 1.5
 */
- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDay;

/*!
 @brief Converts this LocalDate to a full datetime at the earliest valid time
 for the date using the specified time zone.
 <p>
 The time will normally be midnight, as that is the earliest time on
 any given day. However, in some time zones when Daylight Savings Time
 starts, there is no midnight because time jumps from 11:59 to 01:00.
 This method handles that situation by returning 01:00 on that date.
 <p>
 This method uses the chronology from this instance plus the time zone
 specified.
 <p>
 This instance is immutable and unaffected by this method call.
 @param zone  the zone to use, null means default zone
 @return this date as a datetime at the start of the day
 @since 1.5
 */
- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this object to an Interval representing the whole day
 in the default time zone.
 <p>
 The interval may have more or less than 24 hours if this is a daylight
 savings cutover date.
 <p>
 This instance is immutable and unaffected by this method call.
 @return a interval over the day
 */
- (OrgJodaTimeInterval *)toInterval;

/*!
 @brief Converts this object to an Interval representing the whole day.
 <p>
 The interval may have more or less than 24 hours if this is a daylight
 savings cutover date.
 <p>
 This instance is immutable and unaffected by this method call.
 @param zone  the zone to get the Interval in, null means default
 @return a interval over the day
 */
- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Converts this object to a LocalDateTime using a LocalTime to fill in
 the missing fields.
 <p>
 The resulting chronology is determined by the chronology of this
 LocalDate. The chronology of the time must also match.
 If the time is null an exception is thrown.
 <p>
 This instance is immutable and unaffected by this method call.
 @param time  the time of day to use, must not be null
 @return the LocalDateTime instance
 @throws IllegalArgumentException if the time is null
 @throws IllegalArgumentException if the chronology of the time does not match
 @since 1.5
 */
- (OrgJodaTimeLocalDateTime *)toLocalDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time;

/*!
 @brief Output the date time in ISO8601 format (yyyy-MM-dd).
 @return ISO8601 time formatted string.
 */
- (NSString *)description;

/*!
 @brief Output the date using the specified format pattern.
 @param pattern  the pattern specification, null means use <code>toString</code>
 - seealso: org.joda.time.format.DateTimeFormat
 */
- (NSString *)toStringWithNSString:(NSString *)pattern;

/*!
 @brief Output the date using the specified format pattern.
 @param pattern  the pattern specification, null means use <code>toString</code>
 @param locale  Locale to use, null means default
 - seealso: org.joda.time.format.DateTimeFormat
 */
- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Get the week of a week based year property which provides access to advanced functionality.
 @return the week of a week based year property
 */
- (OrgJodaTimeLocalDate_Property *)weekOfWeekyear;

/*!
 @brief Get the weekyear property which provides access to advanced functionality.
 @return the weekyear property
 */
- (OrgJodaTimeLocalDate_Property *)weekyear;

/*!
 @brief Returns a copy of this date with the century of era field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 century of era changed.
 @param centuryOfEra  the centurey of era to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withCenturyOfEraWithInt:(jint)centuryOfEra;

/*!
 @brief Returns a copy of this date with the day of month field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 day of month changed.
 @param dayOfMonth  the day of month to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withDayOfMonthWithInt:(jint)dayOfMonth;

/*!
 @brief Returns a copy of this date with the day of week field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 day of week changed.
 @param dayOfWeek  the day of week to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withDayOfWeekWithInt:(jint)dayOfWeek;

/*!
 @brief Returns a copy of this date with the day of year field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 day of year changed.
 @param dayOfYear  the day of year to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withDayOfYearWithInt:(jint)dayOfYear;

/*!
 @brief Returns a copy of this date with the era field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 era changed.
 @param era  the era to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withEraWithInt:(jint)era;

/*!
 @brief Returns a copy of this date with the specified field set to a new value.
 <p>
 For example, if the field type is <code>monthOfYear</code> then the
 month of year field will be changed in the returned instance.
 If the field type is null, then <code>this</code> is returned.
 <p>
 These two lines are equivalent:
 @code

  LocalDate updated = dt.withDayOfMonth(6);
  LocalDate updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);
  
@endcode
 @param fieldType  the field type to set, not null
 @param value  the value to set
 @return a copy of this date with the field set
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimeLocalDate *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value;

/*!
 @brief Returns a copy of this date with the value of the specified field increased.
 <p>
 If the addition is zero or the field is null, then <code>this</code> is returned.
 <p>
 These three lines are equivalent:
 @code

  LocalDate added = dt.withFieldAdded(DurationFieldType.years(), 6);
  LocalDate added = dt.plusYears(6);
  LocalDate added = dt.plus(Period.years(6));
  
@endcode
 @param fieldType  the field type to add to, not null
 @param amount  the amount to add
 @return a copy of this date with the field updated
 @throws IllegalArgumentException if the field is null or unsupported
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDate *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount;

/*!
 @brief Returns a copy of this date with the partial set of fields replacing
 those from this instance.
 <p>
 For example, if the partial contains a year and a month then those two
 fields will be changed in the returned instance.
 Unsupported fields are ignored.
 If the partial is null, then <code>this</code> is returned.
 @param partial  the partial set of fields to apply to this date, null ignored
 @return a copy of this date with a different set of fields
 @throws IllegalArgumentException if any value is invalid
 */
- (OrgJodaTimeLocalDate *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Returns a copy of this date with the month of year field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 month of year changed.
 @param monthOfYear  the month of year to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withMonthOfYearWithInt:(jint)monthOfYear;

/*!
 @brief Returns a copy of this date with the specified period added.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 <p>
 This method is typically used to add multiple copies of complex
 period instances. Adding one field is best achieved using methods
 like <code>withFieldAdded(DurationFieldType,int)</code>
 or <code>plusYears(int)</code>.
 <p>
 Unsupported time fields are ignored, thus adding a period of 24 hours
 will not have any effect.
 @param period  the period to add to this one, null means zero
 @param scalar  the amount of times to add, such as -1 to subtract once
 @return a copy of this date with the period added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDate *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar;

/*!
 @brief Returns a copy of this date with the week of weekyear field updated.
 <p>
 This field is associated with the "weekyear" via <code>withWeekyear(int)</code>.
 In the standard ISO8601 week algorithm, the first week of the year
 is that in which at least 4 days are in the year. As a result of this
 definition, day 1 of the first week may be in the previous year.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 week of weekyear changed.
 @param weekOfWeekyear  the week of weekyear to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear;

/*!
 @brief Returns a copy of this date with the weekyear field updated.
 <p>
 The weekyear is the year that matches with the weekOfWeekyear field.
 In the standard ISO8601 week algorithm, the first week of the year
 is that in which at least 4 days are in the year. As a result of this
 definition, day 1 of the first week may be in the previous year.
 The weekyear allows you to query the effective year for that day.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 weekyear changed.
 @param weekyear  the weekyear to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withWeekyearWithInt:(jint)weekyear;

/*!
 @brief Returns a copy of this date with the year field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 year changed.
 @param year  the year to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withYearWithInt:(jint)year;

/*!
 @brief Returns a copy of this date with the year of century field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 year of century changed.
 @param yearOfCentury  the year of century to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withYearOfCenturyWithInt:(jint)yearOfCentury;

/*!
 @brief Returns a copy of this date with the year of era field updated.
 <p>
 LocalDate is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 year of era changed.
 @param yearOfEra  the year of era to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDate *)withYearOfEraWithInt:(jint)yearOfEra;

/*!
 @brief Get the year property which provides access to advanced functionality.
 @return the year property
 */
- (OrgJodaTimeLocalDate_Property *)year;

/*!
 @brief Get the year of century property which provides access to advanced functionality.
 @return the year of era property
 */
- (OrgJodaTimeLocalDate_Property *)yearOfCentury;

/*!
 @brief Get the year of era property which provides access to advanced functionality.
 @return the year of era property
 */
- (OrgJodaTimeLocalDate_Property *)yearOfEra;

#pragma mark Protected

/*!
 @brief Gets the field for a specific index in the chronology specified.
 <p>
 This method must not use any instance variables.
 @param index  the index to retrieve
 @param chrono  the chronology to use
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Gets the local milliseconds from the Java epoch
 of 1970-01-01T00:00:00 (not fixed to any specific time zone).
 @return the number of milliseconds since 1970-01-01T00:00:00
 @since 1.5 (previously private)
 */
- (jlong)getLocalMillis;

#pragma mark Package-Private

/*!
 @brief Returns a copy of this date with different local millis.
 <p>
 The returned object will be a new instance of the same type.
 Only the millis will change, the chronology is kept.
 The returned object will be either be a new instance or <code>this</code>.
 @param newMillis  the new millis, from 1970-01-01T00:00:00
 @return a copy of this date with different millis
 */
- (OrgJodaTimeLocalDate *)withLocalMillisWithLong:(jlong)newMillis;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeLocalDate)

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_now();

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_(NSString *str);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_init(OrgJodaTimeLocalDate *self);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_init();

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithLong_(OrgJodaTimeLocalDate *self, jlong instant);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_(jlong instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_(jlong instant);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithId_(OrgJodaTimeLocalDate *self, id instant);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_(id instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_(id instant);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(OrgJodaTimeLocalDate *self, jint year, jint monthOfYear, jint dayOfMonth);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeLocalDate)

#endif

#if !defined (OrgJodaTimeLocalDate_Property_) && (OrgJodaTimeLocalDate_INCLUDE_ALL || defined(OrgJodaTimeLocalDate_Property_INCLUDE))
#define OrgJodaTimeLocalDate_Property_

#define OrgJodaTimeFieldAbstractReadableInstantFieldProperty_RESTRICT 1
#define OrgJodaTimeFieldAbstractReadableInstantFieldProperty_INCLUDE 1
#include "org/joda/time/field/AbstractReadableInstantFieldProperty.h"

@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeLocalDate;

/*!
 @brief LocalDate.Property binds a LocalDate to a DateTimeField allowing
 powerful datetime functionality to be easily accessed.
 <p>
 The simplest use of this class is as an alternative get method, here used to
 get the year '1972' (as an int) and the month 'December' (as a String).
 @code

  LocalDate dt = new LocalDate(1972, 12, 3, 0, 0);
  int year = dt.year().get();
  String monthStr = dt.month().getAsText();
  
@endcode
 <p>
 Methods are also provided that allow date modification. These return
 new instances of LocalDate - they do not modify the original. The example
 below yields two independent immutable date objects 20 years apart.
 @code

  LocalDate dt = new LocalDate(1972, 12, 3);
  LocalDate dt1920 = dt.year().setCopy(1920);
  
@endcode
 <p>
 LocalDate.Property itself is thread-safe and immutable, as well as the
 LocalDate being operated on.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.3
 */
@interface OrgJodaTimeLocalDate_Property : OrgJodaTimeFieldAbstractReadableInstantFieldProperty

#pragma mark Public

/*!
 @brief Adds to this field in a copy of this LocalDate.
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @param value  the value to add to the field in the copy
 @return a copy of the LocalDate with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDate *)addToCopyWithInt:(jint)value;

/*!
 @brief Adds to this field, possibly wrapped, in a copy of this LocalDate.
 A field wrapped operation only changes this field.
 Thus 31st January addWrapField one day goes to the 1st January.
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @param value  the value to add to the field in the copy
 @return a copy of the LocalDate with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDate *)addWrapFieldToCopyWithInt:(jint)value;

/*!
 @brief Gets the field being used.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/*!
 @brief Gets the LocalDate object linked to this property.
 @return the linked LocalDate
 */
- (OrgJodaTimeLocalDate *)getLocalDate;

/*!
 @brief Rounds to the highest whole unit of this field on a copy of this
 LocalDate.
 <p>
 For example, rounding floor on the hourOfDay field of a LocalDate
 where the time is 10:30 would result in new LocalDate with the
 time of 11:00.
 @return a copy of the LocalDate with the field value changed
 */
- (OrgJodaTimeLocalDate *)roundCeilingCopy;

/*!
 @brief Rounds to the lowest whole unit of this field on a copy of this
 LocalDate.
 <p>
 For example, rounding floor on the hourOfDay field of a LocalDate
 where the time is 10:30 would result in new LocalDate with the
 time of 10:00.
 @return a copy of the LocalDate with the field value changed
 */
- (OrgJodaTimeLocalDate *)roundFloorCopy;

/*!
 @brief Rounds to the nearest whole unit of this field on a copy of this
 LocalDate, favoring the ceiling if halfway.
 @return a copy of the LocalDate with the field value changed
 */
- (OrgJodaTimeLocalDate *)roundHalfCeilingCopy;

/*!
 @brief Rounds to the nearest whole unit of this field on a copy of this
 LocalDate.
 If halfway, the ceiling is favored over the floor
 only if it makes this field's value even.
 @return a copy of the LocalDate with the field value changed
 */
- (OrgJodaTimeLocalDate *)roundHalfEvenCopy;

/*!
 @brief Rounds to the nearest whole unit of this field on a copy of this
 LocalDate, favoring the floor if halfway.
 @return a copy of the LocalDate with the field value changed
 */
- (OrgJodaTimeLocalDate *)roundHalfFloorCopy;

/*!
 @brief Sets this field in a copy of the LocalDate.
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @param value  the value to set the field in the copy to
 @return a copy of the LocalDate with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDate *)setCopyWithInt:(jint)value;

/*!
 @brief Sets this field in a copy of the LocalDate to a parsed text value.
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @param text  the text value to set
 @return a copy of the LocalDate with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text;

/*!
 @brief Sets this field in a copy of the LocalDate to a parsed text value.
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @param text  the text value to set
 @param locale  optional locale to use for selecting a text symbol
 @return a copy of the LocalDate with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a new LocalDate with this field set to the maximum value
 for this field.
 <p>
 This operation is useful for obtaining a LocalDate on the last day
 of the month, as month lengths vary.
 @code

  LocalDate lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
  
@endcode
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @return a copy of the LocalDate with this field set to its maximum
 */
- (OrgJodaTimeLocalDate *)withMaximumValue;

/*!
 @brief Returns a new LocalDate with this field set to the minimum value
 for this field.
 <p>
 The LocalDate attached to this property is unchanged by this call.
 @return a copy of the LocalDate with this field set to its minimum
 */
- (OrgJodaTimeLocalDate *)withMinimumValue;

#pragma mark Protected

/*!
 @brief Gets the chronology of the datetime that this property is linked to.
 @return the chronology
 @since 1.4
 */
- (OrgJodaTimeChronology *)getChronology;

/*!
 @brief Gets the milliseconds of the date that this property is linked to.
 @return the milliseconds
 */
- (jlong)getMillis;

#pragma mark Package-Private

/*!
 @brief Constructor.
 @param instant  the instant to set
 @param field  the field to use
 */
- (instancetype)initWithOrgJodaTimeLocalDate:(OrgJodaTimeLocalDate *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeLocalDate_Property)

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate_Property *self, OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field);

FOUNDATION_EXPORT OrgJodaTimeLocalDate_Property *new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate_Property *create_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeLocalDate_Property)

#endif

#pragma pop_macro("OrgJodaTimeLocalDate_INCLUDE_ALL")
