//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/base/BasePeriod.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/Duration.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/MutablePeriod.h"
#include "org/joda/time/PeriodType.h"
#include "org/joda/time/ReadWritablePeriod.h"
#include "org/joda/time/ReadableDuration.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/base/AbstractPeriod.h"
#include "org/joda/time/base/BaseLocal.h"
#include "org/joda/time/base/BasePeriod.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/convert/ConverterManager.h"
#include "org/joda/time/convert/PeriodConverter.h"
#include "org/joda/time/field/FieldUtils.h"

__attribute__((unused)) static void OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(OrgJodaTimeBaseBasePeriod *self, OrgJodaTimeDurationFieldType *type, IOSIntArray *values, jint newValue);
__attribute__((unused)) static void OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadablePeriod> period);
__attribute__((unused)) static IOSIntArray *OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeBaseBasePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis);

@interface OrgJodaTimeBaseBasePeriod () {
 @public
  /**
   @brief The type of period
   */
  OrgJodaTimePeriodType *iType_;
  /**
   @brief The values
   */
  IOSIntArray *iValues_;
}

/**
 @brief Checks whether a field type is supported, and if so adds the new value to the relevant index in the specified array.
 @param type the field type
 @param values the array to update
 @param newValue the new value to store if successful
 */
- (void)checkAndUpdateWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                          withIntArray:(IOSIntArray *)values
                                               withInt:(jint)newValue;

/**
 @brief Private method called from constructor.
 */
- (void)setPeriodInternalWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Private method called from constructor.
 */
- (IOSIntArray *)setPeriodInternalWithInt:(jint)years
                                  withInt:(jint)months
                                  withInt:(jint)weeks
                                  withInt:(jint)days
                                  withInt:(jint)hours
                                  withInt:(jint)minutes
                                  withInt:(jint)seconds
                                  withInt:(jint)millis;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeBaseBasePeriod, iType_, OrgJodaTimePeriodType *)
J2OBJC_FIELD_SETTER(OrgJodaTimeBaseBasePeriod, iValues_, IOSIntArray *)

BOOL OrgJodaTimeBaseBasePeriod_initialized = NO;

@implementation OrgJodaTimeBaseBasePeriod

id<OrgJodaTimeReadablePeriod> OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_;

- (instancetype)initWithInt:(jint)years
                    withInt:(jint)months
                    withInt:(jint)weeks
                    withInt:(jint)days
                    withInt:(jint)hours
                    withInt:(jint)minutes
                    withInt:(jint)seconds
                    withInt:(jint)millis
  withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    OrgJodaTimeBaseBasePeriod_set_iValues_(self, OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, years, months, weeks, days, hours, minutes, seconds, millis));
  }
  return self;
}

- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startInstant withLong:endInstant]);
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    if (startInstant == nil && endInstant == nil) {
      OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
      OrgJodaTimeBaseBasePeriod_setAndConsume_iValues_(self, [IOSIntArray newArrayWithLength:[self size]]);
    }
    else {
      jlong startMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(startInstant);
      jlong endMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(endInstant);
      OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(startInstant, endInstant);
      OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
      OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
    }
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                    withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    if (start == nil || end == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must not be null"] autorelease];
    }
    if ([start isKindOfClass:[OrgJodaTimeBaseBaseLocal class]] && [end isKindOfClass:[OrgJodaTimeBaseBaseLocal class]] && [((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getClass] == [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) getClass]) {
      type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
      jlong startMillis = [((OrgJodaTimeBaseBaseLocal *) check_class_cast(start, [OrgJodaTimeBaseBaseLocal class])) getLocalMillis];
      jlong endMillis = [((OrgJodaTimeBaseBaseLocal *) check_class_cast(end, [OrgJodaTimeBaseBaseLocal class])) getLocalMillis];
      OrgJodaTimeChronology *chrono = [start getChronology];
      chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
      OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
      OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
    }
    else {
      if ([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) size] != [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) size]) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must have the same set of fields"] autorelease];
      }
      for (jint i = 0, isize = [start size]; i < isize; i++) {
        if ([start getFieldTypeWithInt:i] != [end getFieldTypeWithInt:i]) {
          @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must have the same set of fields"] autorelease];
        }
      }
      if (OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(start) == NO) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must be contiguous"] autorelease];
      }
      OrgJodaTimeBaseBasePeriod_set_iType_(self, [self checkPeriodTypeWithOrgJodaTimePeriodType:type]);
      OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([start getChronology]))) withUTC];
      OrgJodaTimeBaseBasePeriod_set_iValues_(self, [chrono getWithOrgJodaTimeReadablePeriod:self withLong:[((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:start withLong:0LL] withLong:[chrono setWithOrgJodaTimeReadablePartial:end withLong:0LL]]);
    }
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    jlong startMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(startInstant);
    jlong durationMillis = OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(duration);
    jlong endMillis = OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_(startMillis, durationMillis);
    OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(startInstant);
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                          withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    jlong durationMillis = OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(duration);
    jlong endMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(endInstant);
    jlong startMillis = OrgJodaTimeFieldFieldUtils_safeSubtractWithLong_withLong_(endMillis, durationMillis);
    OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(endInstant);
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
  }
  return self;
}

- (instancetype)initWithLong:(jlong)duration {
  if (self = [super init]) {
    OrgJodaTimeBaseBasePeriod_set_iType_(self, OrgJodaTimePeriodType_standard());
    IOSIntArray *values = [((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) getWithOrgJodaTimeReadablePeriod:OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_ withLong:duration];
    OrgJodaTimeBaseBasePeriod_setAndConsume_iValues_(self, [IOSIntArray newArrayWithLength:8]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, 0, iValues_, 4, 4);
  }
  return self;
}

- (instancetype)initWithLong:(jlong)duration
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:duration]);
  }
  return self;
}

- (instancetype)initWithId:(id)period
 withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPeriodConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPeriodConverterWithId:period];
    type = (type == nil ? [((id<OrgJodaTimeConvertPeriodConverter>) nil_chk(converter)) getPeriodTypeWithId:period] : type);
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    if ([OrgJodaTimeReadWritablePeriod_class_() isInstance:self]) {
      OrgJodaTimeBaseBasePeriod_setAndConsume_iValues_(self, [IOSIntArray newArrayWithLength:[self size]]);
      chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
      [((id<OrgJodaTimeConvertPeriodConverter>) nil_chk(converter)) setIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>) check_protocol_cast(self, @protocol(OrgJodaTimeReadWritablePeriod)) withId:period withOrgJodaTimeChronology:chrono];
    }
    else {
      OrgJodaTimeBaseBasePeriod_set_iValues_(self, [((OrgJodaTimeMutablePeriod *) [[[OrgJodaTimeMutablePeriod alloc] initWithId:period withOrgJodaTimePeriodType:type withOrgJodaTimeChronology:chrono] autorelease]) getValues]);
    }
  }
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)values
       withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    OrgJodaTimeBaseBasePeriod_set_iType_(self, type);
    OrgJodaTimeBaseBasePeriod_set_iValues_(self, values);
  }
  return self;
}

- (OrgJodaTimePeriodType *)checkPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  return OrgJodaTimeDateTimeUtils_getPeriodTypeWithOrgJodaTimePeriodType_(type);
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return iType_;
}

- (jint)getValueWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(iValues_), index);
}

- (OrgJodaTimeDuration *)toDurationFromWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant {
  jlong startMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(startInstant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(startInstant);
  jlong endMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:self withLong:startMillis withInt:1];
  return [[[OrgJodaTimeDuration alloc] initWithLong:startMillis withLong:endMillis] autorelease];
}

- (OrgJodaTimeDuration *)toDurationToWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant {
  jlong endMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(endInstant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(endInstant);
  jlong startMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:self withLong:endMillis withInt:-1];
  return [[[OrgJodaTimeDuration alloc] initWithLong:startMillis withLong:endMillis] autorelease];
}

- (void)checkAndUpdateWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                          withIntArray:(IOSIntArray *)values
                                               withInt:(jint)newValue {
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, type, values, newValue);
}

- (void)setPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period == nil) {
    [self setValuesWithIntArray:[IOSIntArray arrayWithLength:[self size]]];
  }
  else {
    OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(self, period);
  }
}

- (void)setPeriodInternalWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(self, period);
}

- (void)setPeriodWithInt:(jint)years
                 withInt:(jint)months
                 withInt:(jint)weeks
                 withInt:(jint)days
                 withInt:(jint)hours
                 withInt:(jint)minutes
                 withInt:(jint)seconds
                 withInt:(jint)millis {
  IOSIntArray *newValues = OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, years, months, weeks, days, hours, minutes, seconds, millis);
  [self setValuesWithIntArray:newValues];
}

- (IOSIntArray *)setPeriodInternalWithInt:(jint)years
                                  withInt:(jint)months
                                  withInt:(jint)weeks
                                  withInt:(jint)days
                                  withInt:(jint)hours
                                  withInt:(jint)minutes
                                  withInt:(jint)seconds
                                  withInt:(jint)millis {
  return OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, years, months, weeks, days, hours, minutes, seconds, millis);
}

- (void)setFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                         withInt:(jint)value {
  [self setFieldIntoWithIntArray:iValues_ withOrgJodaTimeDurationFieldType:field withInt:value];
}

- (void)setFieldIntoWithIntArray:(IOSIntArray *)values
withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                         withInt:(jint)value {
  jint index = [self indexOfWithOrgJodaTimeDurationFieldType:field];
  if (index == -1) {
    if (value != 0 || field == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@C", @"Period does not support field '", field, '\'')] autorelease];
    }
  }
  else {
    *IOSIntArray_GetRef(nil_chk(values), index) = value;
  }
}

- (void)addFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                         withInt:(jint)value {
  [self addFieldIntoWithIntArray:iValues_ withOrgJodaTimeDurationFieldType:field withInt:value];
}

- (void)addFieldIntoWithIntArray:(IOSIntArray *)values
withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                         withInt:(jint)value {
  jint index = [self indexOfWithOrgJodaTimeDurationFieldType:field];
  if (index == -1) {
    if (value != 0 || field == nil) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@C", @"Period does not support field '", field, '\'')] autorelease];
    }
  }
  else {
    *IOSIntArray_GetRef(nil_chk(values), index) = OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_(IOSIntArray_Get(values, index), value);
  }
}

- (void)mergePeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period != nil) {
    [self setValuesWithIntArray:[self mergePeriodIntoWithIntArray:[self getValues] withOrgJodaTimeReadablePeriod:period]];
  }
}

- (IOSIntArray *)mergePeriodIntoWithIntArray:(IOSIntArray *)values
               withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    jint value = [period getValueWithInt:i];
    OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, type, values, value);
  }
  return values;
}

- (void)addPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period != nil) {
    [self setValuesWithIntArray:[self addPeriodIntoWithIntArray:[self getValues] withOrgJodaTimeReadablePeriod:period]];
  }
}

- (IOSIntArray *)addPeriodIntoWithIntArray:(IOSIntArray *)values
             withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    jint value = [period getValueWithInt:i];
    if (value != 0) {
      jint index = [self indexOfWithOrgJodaTimeDurationFieldType:type];
      if (index == -1) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$C", @"Period does not support field '", [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getName], '\'')] autorelease];
      }
      else {
        *IOSIntArray_GetRef(nil_chk(values), index) = OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_([self getValueWithInt:index], value);
      }
    }
  }
  return values;
}

- (void)setValueWithInt:(jint)index
                withInt:(jint)value {
  *IOSIntArray_GetRef(nil_chk(iValues_), index) = value;
}

- (void)setValuesWithIntArray:(IOSIntArray *)values {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, 0, iValues_, 0, ((IOSIntArray *) nil_chk(iValues_))->size_);
}

- (void)dealloc {
  RELEASE_(iType_);
  RELEASE_(iValues_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBasePeriod *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeBaseBasePeriod_set_iType_(other, iType_);
  OrgJodaTimeBaseBasePeriod_set_iValues_(other, iValues_);
}

+ (void)initialize {
  if (self == [OrgJodaTimeBaseBasePeriod class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_, nil, [[OrgJodaTimeBaseBasePeriod_$1 alloc] init]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeBaseBasePeriod)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithLong:withLong:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableDuration:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableDuration:withOrgJodaTimeReadableInstant:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithLong:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithLong:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithId:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithIntArray:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "checkPeriodTypeWithOrgJodaTimePeriodType:", "checkPeriodType", "Lorg.joda.time.PeriodType;", 0x4, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "toDurationFromWithOrgJodaTimeReadableInstant:", "toDurationFrom", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "toDurationToWithOrgJodaTimeReadableInstant:", "toDurationTo", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "checkAndUpdateWithOrgJodaTimeDurationFieldType:withIntArray:withInt:", "checkAndUpdate", "V", 0x2, NULL },
    { "setPeriodWithOrgJodaTimeReadablePeriod:", "setPeriod", "V", 0x4, NULL },
    { "setPeriodInternalWithOrgJodaTimeReadablePeriod:", "setPeriodInternal", "V", 0x2, NULL },
    { "setPeriodWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setPeriod", "V", 0x4, NULL },
    { "setPeriodInternalWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setPeriodInternal", "[I", 0x2, NULL },
    { "setFieldWithOrgJodaTimeDurationFieldType:withInt:", "setField", "V", 0x4, NULL },
    { "setFieldIntoWithIntArray:withOrgJodaTimeDurationFieldType:withInt:", "setFieldInto", "V", 0x4, NULL },
    { "addFieldWithOrgJodaTimeDurationFieldType:withInt:", "addField", "V", 0x4, NULL },
    { "addFieldIntoWithIntArray:withOrgJodaTimeDurationFieldType:withInt:", "addFieldInto", "V", 0x4, NULL },
    { "mergePeriodWithOrgJodaTimeReadablePeriod:", "mergePeriod", "V", 0x4, NULL },
    { "mergePeriodIntoWithIntArray:withOrgJodaTimeReadablePeriod:", "mergePeriodInto", "[I", 0x4, NULL },
    { "addPeriodWithOrgJodaTimeReadablePeriod:", "addPeriod", "V", 0x4, NULL },
    { "addPeriodIntoWithIntArray:withOrgJodaTimeReadablePeriod:", "addPeriodInto", "[I", 0x4, NULL },
    { "setValueWithInt:withInt:", "setValue", "V", 0x4, NULL },
    { "setValuesWithIntArray:", "setValues", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBasePeriod_serialVersionUID },
    { "DUMMY_PERIOD_", NULL, 0x1a, "Lorg.joda.time.ReadablePeriod;", &OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_,  },
    { "iType_", NULL, 0x12, "Lorg.joda.time.PeriodType;", NULL,  },
    { "iValues_", NULL, 0x12, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseBasePeriod = { 1, "BasePeriod", "org.joda.time.base", NULL, 0x401, 30, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeBaseBasePeriod;
}

@end

void OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(OrgJodaTimeBaseBasePeriod *self, OrgJodaTimeDurationFieldType *type, IOSIntArray *values, jint newValue) {
  jint index = [self indexOfWithOrgJodaTimeDurationFieldType:type];
  if (index == -1) {
    if (newValue != 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$C", @"Period does not support field '", [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getName], '\'')] autorelease];
    }
  }
  else {
    *IOSIntArray_GetRef(nil_chk(values), index) = newValue;
  }
}

void OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadablePeriod> period) {
  IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size]];
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    jint value = [period getValueWithInt:i];
    OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, type, newValues, value);
  }
  [self setValuesWithIntArray:newValues];
}

IOSIntArray *OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeBaseBasePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis) {
  IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size]];
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_years(), newValues, years);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_months(), newValues, months);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_weeks(), newValues, weeks);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_days(), newValues, days);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_hours(), newValues, hours);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_minutes(), newValues, minutes);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_seconds(), newValues, seconds);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_millis(), newValues, millis);
  return newValues;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseBasePeriod)

@implementation OrgJodaTimeBaseBasePeriod_$1

- (jint)getValueWithInt:(jint)index {
  return 0;
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return OrgJodaTimePeriodType_time();
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseBasePeriod_$1 = { 1, "$1", "org.joda.time.base", "BasePeriod", 0x8000, 3, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeBaseBasePeriod_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseBasePeriod_$1)
