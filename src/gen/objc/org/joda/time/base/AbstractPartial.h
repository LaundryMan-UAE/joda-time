//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/base/AbstractPartial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeBaseAbstractPartial")
#ifdef RESTRICT_OrgJodaTimeBaseAbstractPartial
#define INCLUDE_ALL_OrgJodaTimeBaseAbstractPartial 0
#else
#define INCLUDE_ALL_OrgJodaTimeBaseAbstractPartial 1
#endif
#undef RESTRICT_OrgJodaTimeBaseAbstractPartial

#if !defined (OrgJodaTimeBaseAbstractPartial_) && (INCLUDE_ALL_OrgJodaTimeBaseAbstractPartial || defined(INCLUDE_OrgJodaTimeBaseAbstractPartial))
#define OrgJodaTimeBaseAbstractPartial_

#define RESTRICT_OrgJodaTimeReadablePartial 1
#define INCLUDE_OrgJodaTimeReadablePartial 1
#include "org/joda/time/ReadablePartial.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSIntArray;
@class IOSObjectArray;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@protocol OrgJodaTimeReadableInstant;

/*!
 @brief AbstractPartial provides a standard base implementation of most methods
  in the ReadablePartial interface.
 <p>
  Calculations on are performed using a <code>Chronology</code>.
  This chronology is set to be in the UTC time zone for all calculations. 
 <p>
  The methods on this class use <code>ReadablePartial.size()</code>,
  <code>Chronology)</code> and 
 <code>ReadablePartial.getValue(int)</code> to calculate their results.
  Subclasses may have a better implementation. 
 <p>
  AbstractPartial allows subclasses may be mutable and not thread-safe.
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeBaseAbstractPartial : NSObject < OrgJodaTimeReadablePartial, JavaLangComparable >

#pragma mark Public

/*!
 @brief Compares this partial with another returning an integer
  indicating the order.
 <p>
  The fields are compared in order, from largest to smallest.
  The first field that is non-equal is used to determine the result. 
 <p>
  The specified object must be a partial instance whose field types
  match those of this partial. 
 <p>
  NOTE: Prior to v2.0, the <code>Comparable</code> interface was only implemented
  in this class and not in the <code>ReadablePartial</code> interface.
 @param other an object to check against
 @return negative if this is less, zero if equal, positive if greater
 @throw ClassCastExceptionif the partial is the wrong class
   or if it has field types that don't match
 @throw NullPointerExceptionif the partial is null
 @since 1.1
 */
- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)other;

/*!
 @brief Compares this ReadablePartial with another returning true if the chronology,
  field types and values are equal.
 @param partial an object to check against
 @return true if fields and values are equal
 */
- (jboolean)isEqual:(id)partial;

/*!
 @brief Get the value of one of the fields of a datetime.
 <p>
  The field specified must be one of those that is supported by the partial.
 @param type a DateTimeFieldType instance that is supported by this partial
 @return the value of that field
 @throw IllegalArgumentExceptionif the field is null or not supported
 */
- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Gets the field at the specifed index.
 @param index the index
 @return the field
 @throw IndexOutOfBoundsExceptionif the index is invalid
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index;

/*!
 @brief Gets an array of the fields that this partial supports.
 <p>
  The fields are returned largest to smallest, for example Hour, Minute, Second.
 @return the fields supported in an array that may be altered, largest to smallest
 */
- (IOSObjectArray *)getFields;

/*!
 @brief Gets the field type at the specifed index.
 @param index the index
 @return the field type
 @throw IndexOutOfBoundsExceptionif the index is invalid
 */
- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index;

/*!
 @brief Gets an array of the field types that this partial supports.
 <p>
  The fields are returned largest to smallest, for example Hour, Minute, Second.
 @return the fields supported in an array that may be altered, largest to smallest
 */
- (IOSObjectArray *)getFieldTypes;

/*!
 @brief Gets an array of the value of each of the fields that this partial supports.
 <p>
  The fields are returned largest to smallest, for example Hour, Minute, Second.
  Each value corresponds to the same array index as <code>getFields()</code>
 @return the current values of each field in an array that may be altered, largest to smallest
 */
- (IOSIntArray *)getValues;

/*!
 @brief Gets a hash code for the ReadablePartial that is compatible with the 
  equals method.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Gets the index of the specified field, or -1 if the field is unsupported.
 @param type the type to check, may be null which returns -1
 @return the index of the field, -1 if unsupported
 */
- (jint)indexOfWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Is this partial later than the specified partial.
 <p>
  The fields are compared in order, from largest to smallest.
  The first field that is non-equal is used to determine the result. 
 <p>
  You may not pass null into this method. This is because you need
  a time zone to accurately determine the current date.
 @param partial a partial to check against, must not be null
 @return true if this date is after the date passed in
 @throw IllegalArgumentExceptionif the specified partial is null
 @throw ClassCastExceptionif the partial has field types that don't match
 @since 1.1
 */
- (jboolean)isAfterWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Is this partial earlier than the specified partial.
 <p>
  The fields are compared in order, from largest to smallest.
  The first field that is non-equal is used to determine the result. 
 <p>
  You may not pass null into this method. This is because you need
  a time zone to accurately determine the current date.
 @param partial a partial to check against, must not be null
 @return true if this date is before the date passed in
 @throw IllegalArgumentExceptionif the specified partial is null
 @throw ClassCastExceptionif the partial has field types that don't match
 @since 1.1
 */
- (jboolean)isBeforeWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Is this partial the same as the specified partial.
 <p>
  The fields are compared in order, from largest to smallest.
  If all fields are equal, the result is true. 
 <p>
  You may not pass null into this method. This is because you need
  a time zone to accurately determine the current date.
 @param partial a partial to check against, must not be null
 @return true if this date is the same as the date passed in
 @throw IllegalArgumentExceptionif the specified partial is null
 @throw ClassCastExceptionif the partial has field types that don't match
 @since 1.1
 */
- (jboolean)isEqualWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Checks whether the field specified is supported by this partial.
 @param type the type to check, may be null which returns false
 @return true if the field is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Resolves this partial against another complete instant to create a new
  full instant.The combination is performed using the chronology of the
  specified instant.
 <p>
  For example, if this partial represents a time, then the result of this
  method will be the datetime from the specified base instant plus the
  time from this partial.
 @param baseInstant the instant that provides the missing fields, null means now
 @return the combined datetime
 */
- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)baseInstant;

/*!
 @brief Uses the specified formatter to convert this partial to a String.
 @param formatter the formatter to use, null means use  <code> toString() </code>
  .
 @return the formatted string
 @since 1.1
 */
- (NSString *)toStringWithOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

#pragma mark Protected

/*!
 @brief Constructor.
 */
- (instancetype)init;

/*!
 @brief Gets the field for a specific index in the chronology specified.
 <p>
  This method must not use any instance variables.
 @param index the index to retrieve
 @param chrono the chronology to use
 @return the field
 @throw IndexOutOfBoundsExceptionif the index is invalid
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Gets the index of the first fields to have the specified duration,
  or -1 if the field is unsupported.
 @param type the type to check, may be null which returns -1
 @return the index of the field, -1 if unsupported
 */
- (jint)indexOfWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

/*!
 @brief Gets the index of the specified field, throwing an exception if the
  field is unsupported.
 @param type the type to check, not null
 @return the index of the field
 @throw IllegalArgumentExceptionif the field is null or not supported
 */
- (jint)indexOfSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Gets the index of the first fields to have the specified duration,
  throwing an exception if the field is unsupported.
 @param type the type to check, not null
 @return the index of the field
 @throw IllegalArgumentExceptionif the field is null or not supported
 */
- (jint)indexOfSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeBaseAbstractPartial)

FOUNDATION_EXPORT void OrgJodaTimeBaseAbstractPartial_init(OrgJodaTimeBaseAbstractPartial *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeBaseAbstractPartial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeBaseAbstractPartial")
