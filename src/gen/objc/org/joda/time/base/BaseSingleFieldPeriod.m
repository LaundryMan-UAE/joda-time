//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/MutablePeriod.h"
#include "org/joda/time/Period.h"
#include "org/joda/time/PeriodType.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/base/BaseSingleFieldPeriod.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/field/FieldUtils.h"

@interface OrgJodaTimeBaseBaseSingleFieldPeriod () {
 @public
  /**
   @brief The period in the units of this period.
   */
  jint iPeriod_;
}
@end

@implementation OrgJodaTimeBaseBaseSingleFieldPeriod

+ (jint)betweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
               withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end
             withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field {
  return OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_(start, end, field);
}

+ (jint)betweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
               withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end
                withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)zeroInstance {
  return OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePeriod_(start, end, zeroInstance);
}

+ (jint)standardPeriodInWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                             withLong:(jlong)millisPerUnit {
  return OrgJodaTimeBaseBaseSingleFieldPeriod_standardPeriodInWithOrgJodaTimeReadablePeriod_withLong_(period, millisPerUnit);
}

- (instancetype)initWithInt:(jint)period {
  if (self = [super init]) {
    iPeriod_ = period;
  }
  return self;
}

- (jint)getValue {
  return iPeriod_;
}

- (void)setValueWithInt:(jint)value {
  iPeriod_ = value;
}

- (OrgJodaTimeDurationFieldType *)getFieldType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimePeriodType *)getPeriodType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)size {
  return 1;
}

- (OrgJodaTimeDurationFieldType *)getFieldTypeWithInt:(jint)index {
  if (index != 0) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:NSString_valueOfWithInt_(index)] autorelease];
  }
  return [self getFieldType];
}

- (jint)getValueWithInt:(jint)index {
  if (index != 0) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:NSString_valueOfWithInt_(index)] autorelease];
  }
  return [self getValue];
}

- (jint)getWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == [self getFieldType]) {
    return [self getValue];
  }
  return 0;
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  return type == [self getFieldType];
}

- (OrgJodaTimePeriod *)toPeriod {
  return [((OrgJodaTimePeriod *) nil_chk(OrgJodaTimePeriod_get_ZERO_())) withFieldsWithOrgJodaTimeReadablePeriod:self];
}

- (OrgJodaTimeMutablePeriod *)toMutablePeriod {
  OrgJodaTimeMutablePeriod *period = [[[OrgJodaTimeMutablePeriod alloc] init] autorelease];
  [period addWithOrgJodaTimeReadablePeriod:self];
  return period;
}

- (jboolean)isEqual:(id)period {
  if (self == period) {
    return YES;
  }
  if ([OrgJodaTimeReadablePeriod_class_() isInstance:period] == NO) {
    return NO;
  }
  id<OrgJodaTimeReadablePeriod> other = (id<OrgJodaTimeReadablePeriod>) check_protocol_cast(period, @protocol(OrgJodaTimeReadablePeriod));
  return ([((id<OrgJodaTimeReadablePeriod>) nil_chk(other)) getPeriodType] == [self getPeriodType] && [other getValueWithInt:0] == [self getValue]);
}

- (NSUInteger)hash {
  jint total = 17;
  total = 27 * total + [self getValue];
  total = 27 * total + ((jint) [((OrgJodaTimeDurationFieldType *) nil_chk([self getFieldType])) hash]);
  return total;
}

- (jint)compareToWithId:(OrgJodaTimeBaseBaseSingleFieldPeriod *)other {
  check_class_cast(other, [OrgJodaTimeBaseBaseSingleFieldPeriod class]);
  if ([((OrgJodaTimeBaseBaseSingleFieldPeriod *) nil_chk(other)) getClass] != [self getClass]) {
    @throw [[[JavaLangClassCastException alloc] initWithNSString:JreStrcat("@$@", [self getClass], @" cannot be compared to ", [other getClass])] autorelease];
  }
  jint otherValue = [other getValue];
  jint thisValue = [self getValue];
  if (thisValue > otherValue) {
    return 1;
  }
  if (thisValue < otherValue) {
    return -1;
  }
  return 0;
}

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBaseSingleFieldPeriod *)other {
  [super copyAllFieldsTo:other];
  other->iPeriod_ = iPeriod_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "betweenWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:withOrgJodaTimeDurationFieldType:", "between", "I", 0xc, NULL },
    { "betweenWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePeriod:", "between", "I", 0xc, NULL },
    { "standardPeriodInWithOrgJodaTimeReadablePeriod:withLong:", "standardPeriodIn", "I", 0xc, NULL },
    { "initWithInt:", "BaseSingleFieldPeriod", NULL, 0x4, NULL },
    { "getValue", NULL, "I", 0x4, NULL },
    { "setValueWithInt:", "setValue", "V", 0x4, NULL },
    { "getFieldType", NULL, "Lorg.joda.time.DurationFieldType;", 0x401, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x401, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldTypeWithInt:", "getFieldType", "Lorg.joda.time.DurationFieldType;", 0x1, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getWithOrgJodaTimeDurationFieldType:", "get", "I", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDurationFieldType:", "isSupported", "Z", 0x1, NULL },
    { "toPeriod", NULL, "Lorg.joda.time.Period;", 0x1, NULL },
    { "toMutablePeriod", NULL, "Lorg.joda.time.MutablePeriod;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "compareToWithOrgJodaTimeBaseBaseSingleFieldPeriod:", "compareTo", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBaseSingleFieldPeriod_serialVersionUID },
    { "START_1972_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBaseSingleFieldPeriod_START_1972 },
    { "iPeriod_", NULL, 0x42, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseBaseSingleFieldPeriod = { 1, "BaseSingleFieldPeriod", "org.joda.time.base", NULL, 0x401, 18, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeBaseBaseSingleFieldPeriod;
}

@end

jint OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end, OrgJodaTimeDurationFieldType *field) {
  OrgJodaTimeBaseBaseSingleFieldPeriod_init();
  if (start == nil || end == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadableInstant objects must not be null"] autorelease];
  }
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(start);
  jint amount = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(field)) getFieldWithOrgJodaTimeChronology:chrono])) getDifferenceWithLong:[((id<OrgJodaTimeReadableInstant>) nil_chk(end)) getMillis] withLong:[((id<OrgJodaTimeReadableInstant>) nil_chk(start)) getMillis]];
  return amount;
}

jint OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePeriod_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end, id<OrgJodaTimeReadablePeriod> zeroInstance) {
  OrgJodaTimeBaseBaseSingleFieldPeriod_init();
  if (start == nil || end == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must not be null"] autorelease];
  }
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) size] != [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) size]) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must have the same set of fields"] autorelease];
  }
  for (jint i = 0, isize = [start size]; i < isize; i++) {
    if ([start getFieldTypeWithInt:i] != [end getFieldTypeWithInt:i]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must have the same set of fields"] autorelease];
    }
  }
  if (OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(start) == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must be contiguous"] autorelease];
  }
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([start getChronology]))) withUTC];
  IOSIntArray *values = [chrono getWithOrgJodaTimeReadablePeriod:zeroInstance withLong:[((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:start withLong:OrgJodaTimeBaseBaseSingleFieldPeriod_START_1972] withLong:[chrono setWithOrgJodaTimeReadablePartial:end withLong:OrgJodaTimeBaseBaseSingleFieldPeriod_START_1972]];
  return IOSIntArray_Get(nil_chk(values), 0);
}

jint OrgJodaTimeBaseBaseSingleFieldPeriod_standardPeriodInWithOrgJodaTimeReadablePeriod_withLong_(id<OrgJodaTimeReadablePeriod> period, jlong millisPerUnit) {
  OrgJodaTimeBaseBaseSingleFieldPeriod_init();
  if (period == nil) {
    return 0;
  }
  OrgJodaTimeChronology *iso = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  jlong duration = 0LL;
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    jint value = [period getValueWithInt:i];
    if (value != 0) {
      OrgJodaTimeDurationField *field = [((OrgJodaTimeDurationFieldType *) nil_chk([period getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:iso];
      if ([((OrgJodaTimeDurationField *) nil_chk(field)) isPrecise] == NO) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$@", @"Cannot convert period to duration as ", [field getName], @" is not precise in the period ", period)] autorelease];
      }
      duration = OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_(duration, OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_([field getUnitMillis], value));
    }
  }
  return OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(duration / millisPerUnit);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseBaseSingleFieldPeriod)
