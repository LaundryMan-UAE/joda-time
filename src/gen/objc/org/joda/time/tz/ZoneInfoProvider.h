//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
//

#ifndef _OrgJodaTimeTzZoneInfoProvider_H_
#define _OrgJodaTimeTzZoneInfoProvider_H_

@class JavaIoDataInputStream;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaLangClassLoader;
@class JavaLangException;
@class OrgJodaTimeDateTimeZone;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

#include "J2ObjC_header.h"
#include "org/joda/time/tz/Provider.h"

/**
 @brief ZoneInfoProvider loads compiled data files as generated by ZoneInfoCompiler .
 <p> ZoneInfoProvider is thread-safe and publicly immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTzZoneInfoProvider : NSObject < OrgJodaTimeTzProvider > {
}

/**
 @brief ZoneInfoProvider searches the given directory for compiled data files.
 @throws IOException if directory or map file cannot be read
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)fileDir;

/**
 @brief ZoneInfoProvider searches the given ClassLoader resource path for compiled data files.
 Resources are loaded from the ClassLoader that loaded this class.
 @throws IOException if directory or map file cannot be read
 */
- (instancetype)initWithNSString:(NSString *)resourcePath;

/**
 @brief ZoneInfoProvider searches the given ClassLoader resource path for compiled data files.
 @param loader ClassLoader to load compiled data files from. If null, use system ClassLoader.
 @throws IOException if directory or map file cannot be read
 */
- (instancetype)initWithNSString:(NSString *)resourcePath
         withJavaLangClassLoader:(JavaLangClassLoader *)loader;

/**
 @brief If an error is thrown while loading zone data, the exception is logged to system error and null is returned for this and all future requests.
 @param id the id to load
 @return the loaded zone
 */
- (OrgJodaTimeDateTimeZone *)getZoneWithNSString:(NSString *)id_;

/**
 @brief Gets a list of all the available zone ids.
 @return the zone ids
 */
- (id<JavaUtilSet>)getAvailableIDs;

/**
 @brief Called if an exception is thrown from getZone while loading zone data.
 @param ex the exception
 */
- (void)uncaughtExceptionWithJavaLangException:(JavaLangException *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoProvider)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoProvider)

#endif // _OrgJodaTimeTzZoneInfoProvider_H_
