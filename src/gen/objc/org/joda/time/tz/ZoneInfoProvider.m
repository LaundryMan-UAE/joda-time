//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/tz/DateTimeZoneBuilder.h"
#include "org/joda/time/tz/ZoneInfoProvider.h"

@interface OrgJodaTimeTzZoneInfoProvider () {
 @public
  /**
   @brief The directory where the files are held.
   */
  JavaIoFile *iFileDir_;
  /**
   @brief The resource path.
   */
  NSString *iResourcePath_;
  /**
   @brief The class loader to use.
   */
  JavaLangClassLoader *iLoader_;
  /**
   @brief Maps ids to strings or SoftReferences to DateTimeZones.
   */
  id<JavaUtilMap> iZoneInfoMap_;
}

/**
 @param favorSystemLoader when true, use the system class loader if loader null. When false, use the current class loader if loader is null.
 */
- (instancetype)initWithNSString:(NSString *)resourcePath
         withJavaLangClassLoader:(JavaLangClassLoader *)loader
                     withBoolean:(jboolean)favorSystemLoader;

/**
 @brief Opens a resource from file or classpath.
 @param name the name to open
 @return the input stream
 @throws IOException if an error occurs
 */
- (JavaIoInputStream *)openResourceWithNSString:(NSString *)name;

/**
 @brief Loads the time zone data for one id.
 @param id the id to load
 @return the zone
 */
- (OrgJodaTimeDateTimeZone *)loadZoneDataWithNSString:(NSString *)id_;

/**
 @brief Loads the zone info map.
 @param in the input stream
 @return the map
 */
+ (id<JavaUtilMap>)loadZoneInfoMapWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/**
 @brief Reads the zone info map from file.
 @param din the input stream
 @param zimap gets filled with string id to string id mappings
 */
+ (void)readZoneInfoMapWithJavaIoDataInputStream:(JavaIoDataInputStream *)din
                                 withJavaUtilMap:(id<JavaUtilMap>)zimap;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoProvider, iFileDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoProvider, iResourcePath_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoProvider, iLoader_, JavaLangClassLoader *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoProvider, iZoneInfoMap_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(OrgJodaTimeTzZoneInfoProvider *self, NSString *resourcePath, JavaLangClassLoader *loader, jboolean favorSystemLoader);

__attribute__((unused)) static OrgJodaTimeTzZoneInfoProvider *new_OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(NSString *resourcePath, JavaLangClassLoader *loader, jboolean favorSystemLoader) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaIoInputStream *OrgJodaTimeTzZoneInfoProvider_openResourceWithNSString_(OrgJodaTimeTzZoneInfoProvider *self, NSString *name);

__attribute__((unused)) static OrgJodaTimeDateTimeZone *OrgJodaTimeTzZoneInfoProvider_loadZoneDataWithNSString_(OrgJodaTimeTzZoneInfoProvider *self, NSString *id_);

__attribute__((unused)) static id<JavaUtilMap> OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(JavaIoInputStream *inArg);

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(JavaIoDataInputStream *din, id<JavaUtilMap> zimap);

@implementation OrgJodaTimeTzZoneInfoProvider

- (instancetype)initWithJavaIoFile:(JavaIoFile *)fileDir {
  OrgJodaTimeTzZoneInfoProvider_initWithJavaIoFile_(self, fileDir);
  return self;
}

- (instancetype)initWithNSString:(NSString *)resourcePath {
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_(self, resourcePath);
  return self;
}

- (instancetype)initWithNSString:(NSString *)resourcePath
         withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_(self, resourcePath, loader);
  return self;
}

- (instancetype)initWithNSString:(NSString *)resourcePath
         withJavaLangClassLoader:(JavaLangClassLoader *)loader
                     withBoolean:(jboolean)favorSystemLoader {
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(self, resourcePath, loader, favorSystemLoader);
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZoneWithNSString:(NSString *)id_ {
  if (id_ == nil) {
    return nil;
  }
  id obj = [((id<JavaUtilMap>) nil_chk(iZoneInfoMap_)) getWithId:id_];
  if (obj == nil) {
    return nil;
  }
  if ([obj isKindOfClass:[JavaLangRefSoftReference class]]) {
    JavaLangRefSoftReference *ref = (JavaLangRefSoftReference *) check_class_cast(obj, [JavaLangRefSoftReference class]);
    OrgJodaTimeDateTimeZone *tz = [((JavaLangRefSoftReference *) nil_chk(ref)) get];
    if (tz != nil) {
      return tz;
    }
    return OrgJodaTimeTzZoneInfoProvider_loadZoneDataWithNSString_(self, id_);
  }
  else if ([((NSString *) nil_chk(id_)) isEqual:obj]) {
    return OrgJodaTimeTzZoneInfoProvider_loadZoneDataWithNSString_(self, id_);
  }
  return [self getZoneWithNSString:(NSString *) check_class_cast(obj, [NSString class])];
}

- (id<JavaUtilSet>)getAvailableIDs {
  return [new_JavaUtilTreeSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(iZoneInfoMap_)) keySet]) autorelease];
}

- (void)uncaughtExceptionWithJavaLangException:(JavaLangException *)ex {
  [((JavaLangException *) nil_chk(ex)) printStackTrace];
}

- (JavaIoInputStream *)openResourceWithNSString:(NSString *)name {
  return OrgJodaTimeTzZoneInfoProvider_openResourceWithNSString_(self, name);
}

- (OrgJodaTimeDateTimeZone *)loadZoneDataWithNSString:(NSString *)id_ {
  return OrgJodaTimeTzZoneInfoProvider_loadZoneDataWithNSString_(self, id_);
}

+ (id<JavaUtilMap>)loadZoneInfoMapWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(inArg);
}

+ (void)readZoneInfoMapWithJavaIoDataInputStream:(JavaIoDataInputStream *)din
                                 withJavaUtilMap:(id<JavaUtilMap>)zimap {
  OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(din, zimap);
}

- (void)dealloc {
  RELEASE_(iFileDir_);
  RELEASE_(iResourcePath_);
  RELEASE_(iLoader_);
  RELEASE_(iZoneInfoMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:", "ZoneInfoProvider", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:", "ZoneInfoProvider", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withJavaLangClassLoader:", "ZoneInfoProvider", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withJavaLangClassLoader:withBoolean:", "ZoneInfoProvider", NULL, 0x2, "Ljava.io.IOException;", NULL },
    { "getZoneWithNSString:", "getZone", "Lorg.joda.time.DateTimeZone;", 0x1, NULL, NULL },
    { "getAvailableIDs", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "uncaughtExceptionWithJavaLangException:", "uncaughtException", "V", 0x4, NULL, NULL },
    { "openResourceWithNSString:", "openResource", "Ljava.io.InputStream;", 0x2, "Ljava.io.IOException;", NULL },
    { "loadZoneDataWithNSString:", "loadZoneData", "Lorg.joda.time.DateTimeZone;", 0x2, NULL, NULL },
    { "loadZoneInfoMapWithJavaIoInputStream:", "loadZoneInfoMap", "Ljava.util.Map;", 0xa, "Ljava.io.IOException;", NULL },
    { "readZoneInfoMapWithJavaIoDataInputStream:withJavaUtilMap:", "readZoneInfoMap", "V", 0xa, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iFileDir_", NULL, 0x12, "Ljava.io.File;", NULL, NULL,  },
    { "iResourcePath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "iLoader_", NULL, 0x12, "Ljava.lang.ClassLoader;", NULL, NULL,  },
    { "iZoneInfoMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;",  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoProvider = { 2, "ZoneInfoProvider", "org.joda.time.tz", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeTzZoneInfoProvider;
}

@end

void OrgJodaTimeTzZoneInfoProvider_initWithJavaIoFile_(OrgJodaTimeTzZoneInfoProvider *self, JavaIoFile *fileDir) {
  NSObject_init(self);
  if (fileDir == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"No file directory provided") autorelease];
  }
  if (![((JavaIoFile *) nil_chk(fileDir)) exists]) {
    @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"File directory doesn't exist: ", fileDir)) autorelease];
  }
  if (![fileDir isDirectory]) {
    @throw [new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"File doesn't refer to a directory: ", fileDir)) autorelease];
  }
  OrgJodaTimeTzZoneInfoProvider_set_iFileDir_(self, fileDir);
  OrgJodaTimeTzZoneInfoProvider_set_iResourcePath_(self, nil);
  OrgJodaTimeTzZoneInfoProvider_set_iLoader_(self, nil);
  OrgJodaTimeTzZoneInfoProvider_set_iZoneInfoMap_(self, OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(OrgJodaTimeTzZoneInfoProvider_openResourceWithNSString_(self, @"ZoneInfoMap")));
}

OrgJodaTimeTzZoneInfoProvider *new_OrgJodaTimeTzZoneInfoProvider_initWithJavaIoFile_(JavaIoFile *fileDir) {
  OrgJodaTimeTzZoneInfoProvider *self = [OrgJodaTimeTzZoneInfoProvider alloc];
  OrgJodaTimeTzZoneInfoProvider_initWithJavaIoFile_(self, fileDir);
  return self;
}

void OrgJodaTimeTzZoneInfoProvider_initWithNSString_(OrgJodaTimeTzZoneInfoProvider *self, NSString *resourcePath) {
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(self, resourcePath, nil, NO);
}

OrgJodaTimeTzZoneInfoProvider *new_OrgJodaTimeTzZoneInfoProvider_initWithNSString_(NSString *resourcePath) {
  OrgJodaTimeTzZoneInfoProvider *self = [OrgJodaTimeTzZoneInfoProvider alloc];
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_(self, resourcePath);
  return self;
}

void OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_(OrgJodaTimeTzZoneInfoProvider *self, NSString *resourcePath, JavaLangClassLoader *loader) {
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(self, resourcePath, loader, YES);
}

OrgJodaTimeTzZoneInfoProvider *new_OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_(NSString *resourcePath, JavaLangClassLoader *loader) {
  OrgJodaTimeTzZoneInfoProvider *self = [OrgJodaTimeTzZoneInfoProvider alloc];
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_(self, resourcePath, loader);
  return self;
}

void OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(OrgJodaTimeTzZoneInfoProvider *self, NSString *resourcePath, JavaLangClassLoader *loader, jboolean favorSystemLoader) {
  NSObject_init(self);
  if (resourcePath == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"No resource path provided") autorelease];
  }
  if (![((NSString *) nil_chk(resourcePath)) hasSuffix:@"/"]) {
    resourcePath = JreStrcat("$C", resourcePath, '/');
  }
  OrgJodaTimeTzZoneInfoProvider_set_iFileDir_(self, nil);
  OrgJodaTimeTzZoneInfoProvider_set_iResourcePath_(self, resourcePath);
  if (loader == nil && !favorSystemLoader) {
    loader = [[self getClass] getClassLoader];
  }
  OrgJodaTimeTzZoneInfoProvider_set_iLoader_(self, loader);
  OrgJodaTimeTzZoneInfoProvider_set_iZoneInfoMap_(self, OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(OrgJodaTimeTzZoneInfoProvider_openResourceWithNSString_(self, @"ZoneInfoMap")));
}

OrgJodaTimeTzZoneInfoProvider *new_OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(NSString *resourcePath, JavaLangClassLoader *loader, jboolean favorSystemLoader) {
  OrgJodaTimeTzZoneInfoProvider *self = [OrgJodaTimeTzZoneInfoProvider alloc];
  OrgJodaTimeTzZoneInfoProvider_initWithNSString_withJavaLangClassLoader_withBoolean_(self, resourcePath, loader, favorSystemLoader);
  return self;
}

JavaIoInputStream *OrgJodaTimeTzZoneInfoProvider_openResourceWithNSString_(OrgJodaTimeTzZoneInfoProvider *self, NSString *name) {
  JavaIoInputStream *in;
  if (self->iFileDir_ != nil) {
    in = [new_JavaIoFileInputStream_initWithJavaIoFile_([new_JavaIoFile_initWithJavaIoFile_withNSString_(self->iFileDir_, name) autorelease]) autorelease];
  }
  else {
    NSString *path = [((NSString *) nil_chk(self->iResourcePath_)) concat:name];
    if (self->iLoader_ != nil) {
      in = [self->iLoader_ getResourceAsStreamWithNSString:path];
    }
    else {
      in = JavaLangClassLoader_getSystemResourceAsStreamWithNSString_(path);
    }
    if (in == nil) {
      JavaLangStringBuilder *buf = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithInt_(40) autorelease]) appendWithNSString:@"Resource not found: \""])) appendWithNSString:path])) appendWithNSString:@"\" ClassLoader: "])) appendWithNSString:self->iLoader_ != nil ? [self->iLoader_ description] : @"system"];
      @throw [new_JavaIoIOException_initWithNSString_([((JavaLangStringBuilder *) nil_chk(buf)) description]) autorelease];
    }
  }
  return in;
}

OrgJodaTimeDateTimeZone *OrgJodaTimeTzZoneInfoProvider_loadZoneDataWithNSString_(OrgJodaTimeTzZoneInfoProvider *self, NSString *id_) {
  JavaIoInputStream *in = nil;
  @try {
    in = OrgJodaTimeTzZoneInfoProvider_openResourceWithNSString_(self, id_);
    OrgJodaTimeDateTimeZone *tz = OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoInputStream_withNSString_(in, id_);
    [((id<JavaUtilMap>) nil_chk(self->iZoneInfoMap_)) putWithId:id_ withId:[new_JavaLangRefSoftReference_initWithId_(tz) autorelease]];
    return tz;
  }
  @catch (JavaIoIOException *ex) {
    [self uncaughtExceptionWithJavaLangException:ex];
    [((id<JavaUtilMap>) nil_chk(self->iZoneInfoMap_)) removeWithId:id_];
    return nil;
  }
  @finally {
    @try {
      if (in != nil) {
        [in close];
      }
    }
    @catch (JavaIoIOException *ex) {
    }
  }
}

id<JavaUtilMap> OrgJodaTimeTzZoneInfoProvider_loadZoneInfoMapWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OrgJodaTimeTzZoneInfoProvider_initialize();
  id<JavaUtilMap> map = [new_JavaUtilConcurrentConcurrentHashMap_init() autorelease];
  JavaIoDataInputStream *din = [new_JavaIoDataInputStream_initWithJavaIoInputStream_(inArg) autorelease];
  @try {
    OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(din, map);
  }
  @finally {
    @try {
      [din close];
    }
    @catch (JavaIoIOException *ex) {
    }
  }
  [map putWithId:@"UTC" withId:[new_JavaLangRefSoftReference_initWithId_(OrgJodaTimeDateTimeZone_get_UTC_()) autorelease]];
  return map;
}

void OrgJodaTimeTzZoneInfoProvider_readZoneInfoMapWithJavaIoDataInputStream_withJavaUtilMap_(JavaIoDataInputStream *din, id<JavaUtilMap> zimap) {
  OrgJodaTimeTzZoneInfoProvider_initialize();
  jint size = [((JavaIoDataInputStream *) nil_chk(din)) readUnsignedShort];
  IOSObjectArray *pool = [IOSObjectArray arrayWithLength:size type:NSString_class_()];
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(pool, i, [((NSString *) nil_chk([din readUTF])) intern]);
  }
  size = [din readUnsignedShort];
  for (jint i = 0; i < size; i++) {
    @try {
      [((id<JavaUtilMap>) nil_chk(zimap)) putWithId:IOSObjectArray_Get(pool, [din readUnsignedShort]) withId:IOSObjectArray_Get(pool, [din readUnsignedShort])];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *ex) {
      @throw [new_JavaIoIOException_initWithNSString_(@"Corrupt zone info map") autorelease];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoProvider)
