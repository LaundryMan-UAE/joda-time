//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/DataOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/TreeMap.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/MutableDateTime.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/chrono/LenientChronology.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"
#include "org/joda/time/tz/DateTimeZoneBuilder.h"
#include "org/joda/time/tz/ZoneInfoCompiler.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgJodaTimeTzZoneInfoCompiler () {
 @public
  id<JavaUtilMap> iRuleSets_;
  id<JavaUtilList> iZones_;
  id<JavaUtilList> iLinks_;
}

+ (void)printUsage;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, iRuleSets_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, iZones_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, iLinks_, id<JavaUtilList>)

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_printUsage(void);

@interface OrgJodaTimeTzZoneInfoCompiler_1 : JavaLangThreadLocal

- (instancetype)init;

- (JavaLangBoolean *)initialValue OBJC_METHOD_FAMILY_NONE;

- (JavaLangBoolean *)get;

- (JavaLangBoolean *)childValueWithId:(JavaLangBoolean *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_1)

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_1_init(OrgJodaTimeTzZoneInfoCompiler_1 *self);

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_1 *new_OrgJodaTimeTzZoneInfoCompiler_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_1 *create_OrgJodaTimeTzZoneInfoCompiler_1_init(void);

@interface OrgJodaTimeTzZoneInfoCompiler_Rule : NSObject {
 @public
  NSString *iName_;
  jint iFromYear_;
  jint iToYear_;
  NSString *iType_;
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *iDateTimeOfYear_;
  jint iSaveMillis_;
  NSString *iLetterS_;
}

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

/*!
 @brief Adds a recurring savings rule to the builder.
 */
- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat;

- (NSString *)formatNameWithNSString:(NSString *)nameFormat;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_Rule)

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iName_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iType_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iDateTimeOfYear_, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iLetterS_, NSString *)

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_Rule *self, JavaUtilStringTokenizer *st);

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_Rule *new_OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_Rule *create_OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st);

__attribute__((unused)) static NSString *OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(OrgJodaTimeTzZoneInfoCompiler_Rule *self, NSString *nameFormat);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_Rule)

@interface OrgJodaTimeTzZoneInfoCompiler_RuleSet : NSObject {
 @public
  id<JavaUtilList> iRules_;
}

- (instancetype)initWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule;

- (void)addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule;

/*!
 @brief Adds recurring savings rules to the builder.
 */
- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_RuleSet)

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_RuleSet, iRules_, id<JavaUtilList>)

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(OrgJodaTimeTzZoneInfoCompiler_RuleSet *self, OrgJodaTimeTzZoneInfoCompiler_Rule *rule);

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_RuleSet *new_OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(OrgJodaTimeTzZoneInfoCompiler_Rule *rule) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_RuleSet *create_OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(OrgJodaTimeTzZoneInfoCompiler_Rule *rule);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_RuleSet)

@interface OrgJodaTimeTzZoneInfoCompiler_Zone : NSObject {
 @public
  NSString *iName_;
  jint iOffsetMillis_;
  NSString *iRules_;
  NSString *iFormat_;
  jint iUntilYear_;
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *iUntilDateTimeOfYear_;
  OrgJodaTimeTzZoneInfoCompiler_Zone *iNext_;
}

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

- (instancetype)initWithNSString:(NSString *)name
     withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

- (void)chainWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

/*!
 @brief Adds zone info to the builder.
 */
- (void)addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                         withJavaUtilMap:(id<JavaUtilMap>)ruleSets;

+ (void)addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:(OrgJodaTimeTzZoneInfoCompiler_Zone *)zone
                      withOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                           withJavaUtilMap:(id<JavaUtilMap>)ruleSets;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_Zone)

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iName_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iRules_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iFormat_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iUntilDateTimeOfYear_, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iNext_, OrgJodaTimeTzZoneInfoCompiler_Zone *)

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_Zone *self, JavaUtilStringTokenizer *st);

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_Zone *new_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_Zone *create_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st);

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_Zone *self, NSString *name, JavaUtilStringTokenizer *st);

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_Zone *new_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(NSString *name, JavaUtilStringTokenizer *st) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeTzZoneInfoCompiler_Zone *create_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(NSString *name, JavaUtilStringTokenizer *st);

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(OrgJodaTimeTzZoneInfoCompiler_Zone *zone, OrgJodaTimeTzDateTimeZoneBuilder *builder, id<JavaUtilMap> ruleSets);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_Zone)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeTzZoneInfoCompiler)

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_cStartOfYear;
OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_cLenientISO;
JavaLangThreadLocal *OrgJodaTimeTzZoneInfoCompiler_cVerbose;

@implementation OrgJodaTimeTzZoneInfoCompiler

+ (jboolean)verbose {
  return OrgJodaTimeTzZoneInfoCompiler_verbose();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgJodaTimeTzZoneInfoCompiler_mainWithNSStringArray_(args);
}

+ (void)printUsage {
  OrgJodaTimeTzZoneInfoCompiler_printUsage();
}

+ (OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)getStartOfYear {
  return OrgJodaTimeTzZoneInfoCompiler_getStartOfYear();
}

+ (OrgJodaTimeChronology *)getLenientISOChronology {
  return OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology();
}

+ (void)writeZoneInfoMapWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout
                                   withJavaUtilMap:(id<JavaUtilMap>)zimap {
  OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(dout, zimap);
}

+ (jint)parseYearWithNSString:(NSString *)str
                      withInt:(jint)def {
  return OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_(str, def);
}

+ (jint)parseMonthWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_(str);
}

+ (jint)parseDayOfWeekWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_(str);
}

+ (NSString *)parseOptionalWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_(str);
}

+ (jint)parseTimeWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(str);
}

+ (jchar)parseZoneCharWithChar:(jchar)c {
  return OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_(c);
}

+ (jboolean)testWithNSString:(NSString *)id_
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)tz {
  return OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_(id_, tz);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeTzZoneInfoCompiler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)compileWithJavaIoFile:(JavaIoFile *)outputDir
                     withJavaIoFileArray:(IOSObjectArray *)sources {
  if (sources != nil) {
    for (jint i = 0; i < sources->size_; i++) {
      JavaIoBufferedReader *in = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoFileReader_initWithJavaIoFile_(IOSObjectArray_Get(sources, i)));
      [self parseDataFileWithJavaIoBufferedReader:in];
      [in close];
    }
  }
  if (outputDir != nil) {
    if (![outputDir exists]) {
      if (![outputDir mkdirs]) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Destination directory doesn't exist and cannot be created: ", outputDir));
      }
    }
    if (![outputDir isDirectory]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Destination is not a directory: ", outputDir));
    }
  }
  id<JavaUtilMap> map = create_JavaUtilTreeMap_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Writing zoneinfo files"];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(iZones_)) size]; i++) {
    OrgJodaTimeTzZoneInfoCompiler_Zone *zone = [((id<JavaUtilList>) nil_chk(iZones_)) getWithInt:i];
    OrgJodaTimeTzDateTimeZoneBuilder *builder = create_OrgJodaTimeTzDateTimeZoneBuilder_init();
    [((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(zone)) addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:builder withJavaUtilMap:iRuleSets_];
    OrgJodaTimeDateTimeZone *original = [builder toDateTimeZoneWithNSString:zone->iName_ withBoolean:true];
    OrgJodaTimeDateTimeZone *tz = original;
    if (OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_([((OrgJodaTimeDateTimeZone *) nil_chk(tz)) getID], tz)) {
      [map putWithId:[tz getID] withId:tz];
      if (outputDir != nil) {
        if (OrgJodaTimeTzZoneInfoCompiler_verbose()) {
          [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Writing ", [tz getID])];
        }
        JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_(outputDir, [tz getID]);
        if (![((JavaIoFile *) nil_chk([file getParentFile])) exists]) {
          [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs];
        }
        JavaIoOutputStream *out = create_JavaIoFileOutputStream_initWithJavaIoFile_(file);
        @try {
          [builder writeToWithNSString:zone->iName_ withJavaIoOutputStream:out];
        }
        @finally {
          [out close];
        }
        JavaIoInputStream *in = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
        OrgJodaTimeDateTimeZone *tz2 = OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoInputStream_withNSString_(in, [tz getID]);
        [in close];
        if (![((OrgJodaTimeDateTimeZone *) nil_chk(original)) isEqual:tz2]) {
          [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$", @"*e* Error in ", [tz getID], @": Didn't read properly from file")];
        }
      }
    }
  }
  for (jint pass = 0; pass < 2; pass++) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(iLinks_)) size]; i += 2) {
      NSString *id_ = [((id<JavaUtilList>) nil_chk(iLinks_)) getWithInt:i];
      NSString *alias = [((id<JavaUtilList>) nil_chk(iLinks_)) getWithInt:i + 1];
      OrgJodaTimeDateTimeZone *tz = [map getWithId:id_];
      if (tz == nil) {
        if (pass > 0) {
          [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$", @"Cannot find time zone '", id_, @"' to link alias '", alias, @"' to")];
        }
      }
      else {
        [map putWithId:alias withId:tz];
      }
    }
  }
  if (outputDir != nil) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Writing ZoneInfoMap"];
    JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_(outputDir, @"ZoneInfoMap");
    if (![((JavaIoFile *) nil_chk([file getParentFile])) exists]) {
      [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs];
    }
    JavaIoOutputStream *out = create_JavaIoFileOutputStream_initWithJavaIoFile_(file);
    JavaIoDataOutputStream *dout = create_JavaIoDataOutputStream_initWithJavaIoOutputStream_(out);
    @try {
      id<JavaUtilMap> zimap = create_JavaUtilTreeMap_initWithJavaUtilComparator_(JreLoadStatic(NSString, CASE_INSENSITIVE_ORDER));
      [zimap putAllWithJavaUtilMap:map];
      OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(dout, zimap);
    }
    @finally {
      [dout close];
    }
  }
  return map;
}

- (void)parseDataFileWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  OrgJodaTimeTzZoneInfoCompiler_Zone *zone = nil;
  NSString *line;
  while ((line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine]) != nil) {
    NSString *trimmed = [((NSString *) nil_chk(line)) java_trim];
    if ([((NSString *) nil_chk(trimmed)) java_length] == 0 || [trimmed charAtWithInt:0] == '#') {
      continue;
    }
    jint index = [line java_indexOf:'#'];
    if (index >= 0) {
      line = [line java_substring:0 endIndex:index];
    }
    JavaUtilStringTokenizer *st = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(line, @" \t");
    if (JavaLangCharacter_isWhitespaceWithChar_([((NSString *) nil_chk(line)) charAtWithInt:0]) && [st hasMoreTokens]) {
      if (zone != nil) {
        [zone chainWithJavaUtilStringTokenizer:st];
      }
      continue;
    }
    else {
      if (zone != nil) {
        [((id<JavaUtilList>) nil_chk(iZones_)) addWithId:zone];
      }
      zone = nil;
    }
    if ([st hasMoreTokens]) {
      NSString *token = [st nextToken];
      if ([((NSString *) nil_chk(token)) java_equalsIgnoreCase:@"Rule"]) {
        OrgJodaTimeTzZoneInfoCompiler_Rule *r = create_OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(st);
        OrgJodaTimeTzZoneInfoCompiler_RuleSet *rs = [((id<JavaUtilMap>) nil_chk(iRuleSets_)) getWithId:r->iName_];
        if (rs == nil) {
          rs = create_OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(r);
          [((id<JavaUtilMap>) nil_chk(iRuleSets_)) putWithId:r->iName_ withId:rs];
        }
        else {
          [rs addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:r];
        }
      }
      else if ([token java_equalsIgnoreCase:@"Zone"]) {
        zone = create_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(st);
      }
      else if ([token java_equalsIgnoreCase:@"Link"]) {
        [((id<JavaUtilList>) nil_chk(iLinks_)) addWithId:[st nextToken]];
        [((id<JavaUtilList>) nil_chk(iLinks_)) addWithId:[st nextToken]];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Unknown line: ", line)];
      }
    }
  }
  if (zone != nil) {
    [((id<JavaUtilList>) nil_chk(iZones_)) addWithId:zone];
  }
}

- (void)dealloc {
  RELEASE_(iRuleSets_);
  RELEASE_(iZones_);
  RELEASE_(iLinks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, 5, 6, -1, -1 },
    { NULL, "I", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 11, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 12, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 13, 10, -1, -1, -1, -1 },
    { NULL, "C", 0x8, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 16, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 18, 19, 5, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verbose);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(printUsage);
  methods[3].selector = @selector(getStartOfYear);
  methods[4].selector = @selector(getLenientISOChronology);
  methods[5].selector = @selector(writeZoneInfoMapWithJavaIoDataOutputStream:withJavaUtilMap:);
  methods[6].selector = @selector(parseYearWithNSString:withInt:);
  methods[7].selector = @selector(parseMonthWithNSString:);
  methods[8].selector = @selector(parseDayOfWeekWithNSString:);
  methods[9].selector = @selector(parseOptionalWithNSString:);
  methods[10].selector = @selector(parseTimeWithNSString:);
  methods[11].selector = @selector(parseZoneCharWithChar:);
  methods[12].selector = @selector(testWithNSString:withOrgJodaTimeDateTimeZone:);
  methods[13].selector = @selector(init);
  methods[14].selector = @selector(compileWithJavaIoFile:withJavaIoFileArray:);
  methods[15].selector = @selector(parseDataFileWithJavaIoBufferedReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cStartOfYear", "LOrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;", .constantValue.asLong = 0, 0x8, -1, 23, -1, -1 },
    { "cLenientISO", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x8, -1, 24, -1, -1 },
    { "cVerbose", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x8, -1, 25, 26, -1 },
    { "iRuleSets_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 27, -1 },
    { "iZones_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 28, -1 },
    { "iLinks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;", "writeZoneInfoMap", "LJavaIoDataOutputStream;LJavaUtilMap;", "LJavaIoIOException;", "(Ljava/io/DataOutputStream;Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;)V", "parseYear", "LNSString;I", "parseMonth", "LNSString;", "parseDayOfWeek", "parseOptional", "parseTime", "parseZoneChar", "C", "test", "LNSString;LOrgJodaTimeDateTimeZone;", "compile", "LJavaIoFile;[LJavaIoFile;", "(Ljava/io/File;[Ljava/io/File;)Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;", "parseDataFile", "LJavaIoBufferedReader;", &OrgJodaTimeTzZoneInfoCompiler_cStartOfYear, &OrgJodaTimeTzZoneInfoCompiler_cLenientISO, &OrgJodaTimeTzZoneInfoCompiler_cVerbose, "Ljava/lang/ThreadLocal<Ljava/lang/Boolean;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/tz/ZoneInfoCompiler$RuleSet;>;", "Ljava/util/List<Lorg/joda/time/tz/ZoneInfoCompiler$Zone;>;", "Ljava/util/List<Ljava/lang/String;>;", "LOrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;LOrgJodaTimeTzZoneInfoCompiler_Rule;LOrgJodaTimeTzZoneInfoCompiler_RuleSet;LOrgJodaTimeTzZoneInfoCompiler_Zone;" };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler = { "ZoneInfoCompiler", "org.joda.time.tz", ptrTable, methods, fields, 7, 0x1, 16, 6, -1, 30, -1, -1, -1 };
  return &_OrgJodaTimeTzZoneInfoCompiler;
}

+ (void)initialize {
  if (self == [OrgJodaTimeTzZoneInfoCompiler class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeTzZoneInfoCompiler_cVerbose, new_OrgJodaTimeTzZoneInfoCompiler_1_init());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeTzZoneInfoCompiler)
  }
}

@end

jboolean OrgJodaTimeTzZoneInfoCompiler_verbose() {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  return [((JavaLangBoolean *) nil_chk([((JavaLangThreadLocal *) nil_chk(OrgJodaTimeTzZoneInfoCompiler_cVerbose)) get])) booleanValue];
}

void OrgJodaTimeTzZoneInfoCompiler_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    OrgJodaTimeTzZoneInfoCompiler_printUsage();
    return;
  }
  JavaIoFile *inputDir = nil;
  JavaIoFile *outputDir = nil;
  jboolean verbose = false;
  jint i;
  for (i = 0; i < args->size_; i++) {
    @try {
      if ([@"-src" isEqual:IOSObjectArray_Get(args, i)]) {
        inputDir = create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, ++i));
      }
      else if ([@"-dst" isEqual:IOSObjectArray_Get(args, i)]) {
        outputDir = create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, ++i));
      }
      else if ([@"-verbose" isEqual:IOSObjectArray_Get(args, i)]) {
        verbose = true;
      }
      else if ([@"-?" isEqual:IOSObjectArray_Get(args, i)]) {
        OrgJodaTimeTzZoneInfoCompiler_printUsage();
        return;
      }
      else {
        break;
      }
    }
    @catch (JavaLangIndexOutOfBoundsException *e) {
      OrgJodaTimeTzZoneInfoCompiler_printUsage();
      return;
    }
  }
  if (i >= args->size_) {
    OrgJodaTimeTzZoneInfoCompiler_printUsage();
    return;
  }
  IOSObjectArray *sources = [IOSObjectArray arrayWithLength:args->size_ - i type:JavaIoFile_class_()];
  for (jint j = 0; i < args->size_; i++, j++) {
    IOSObjectArray_Set(sources, j, inputDir == nil ? create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, i)) : create_JavaIoFile_initWithJavaIoFile_withNSString_(inputDir, IOSObjectArray_Get(args, i)));
  }
  [((JavaLangThreadLocal *) nil_chk(OrgJodaTimeTzZoneInfoCompiler_cVerbose)) setWithId:JavaLangBoolean_valueOfWithBoolean_(verbose)];
  OrgJodaTimeTzZoneInfoCompiler *zic = create_OrgJodaTimeTzZoneInfoCompiler_init();
  [zic compileWithJavaIoFile:outputDir withJavaIoFileArray:sources];
}

void OrgJodaTimeTzZoneInfoCompiler_printUsage() {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"where possible options include:"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"  -src <directory>    Specify where to read source files"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"  -dst <directory>    Specify where to write generated files"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"  -verbose            Output verbosely (default false)"];
}

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_getStartOfYear() {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  if (OrgJodaTimeTzZoneInfoCompiler_cStartOfYear == nil) {
    JreStrongAssignAndConsume(&OrgJodaTimeTzZoneInfoCompiler_cStartOfYear, new_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init());
  }
  return OrgJodaTimeTzZoneInfoCompiler_cStartOfYear;
}

OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology() {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  if (OrgJodaTimeTzZoneInfoCompiler_cLenientISO == nil) {
    JreStrongAssign(&OrgJodaTimeTzZoneInfoCompiler_cLenientISO, OrgJodaTimeChronoLenientChronology_getInstanceWithOrgJodaTimeChronology_(OrgJodaTimeChronoISOChronology_getInstanceUTC()));
  }
  return OrgJodaTimeTzZoneInfoCompiler_cLenientISO;
}

void OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(JavaIoDataOutputStream *dout, id<JavaUtilMap> zimap) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  id<JavaUtilMap> idToIndex = create_JavaUtilHashMap_initWithInt_([((id<JavaUtilMap>) nil_chk(zimap)) size]);
  JavaUtilTreeMap *indexToId = create_JavaUtilTreeMap_init();
  jshort count = 0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([zimap entrySet])) {
    NSString *id_ = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if (![idToIndex containsKeyWithId:id_]) {
      JavaLangShort *index = JavaLangShort_valueOfWithShort_(count);
      [idToIndex putWithId:id_ withId:index];
      [indexToId putWithId:index withId:id_];
      if (++count == 0) {
        @throw create_JavaLangInternalError_initWithNSString_(@"Too many time zone ids");
      }
    }
    id_ = [((OrgJodaTimeDateTimeZone *) nil_chk(([entry_ getValue]))) getID];
    if (![idToIndex containsKeyWithId:id_]) {
      JavaLangShort *index = JavaLangShort_valueOfWithShort_(count);
      [idToIndex putWithId:id_ withId:index];
      [indexToId putWithId:index withId:id_];
      if (++count == 0) {
        @throw create_JavaLangInternalError_initWithNSString_(@"Too many time zone ids");
      }
    }
  }
  [((JavaIoDataOutputStream *) nil_chk(dout)) writeShortWithInt:[indexToId size]];
  for (NSString * __strong id_ in nil_chk([indexToId values])) {
    [dout writeUTFWithNSString:id_];
  }
  [dout writeShortWithInt:[zimap size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([zimap entrySet])) {
    NSString *id_ = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    [dout writeShortWithInt:[((JavaLangShort *) nil_chk([idToIndex getWithId:id_])) shortValue]];
    id_ = [((OrgJodaTimeDateTimeZone *) nil_chk([entry_ getValue])) getID];
    [dout writeShortWithInt:[((JavaLangShort *) nil_chk([idToIndex getWithId:id_])) shortValue]];
  }
}

jint OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_(NSString *str, jint def) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  str = [((NSString *) nil_chk(str)) lowercaseString];
  if ([((NSString *) nil_chk(str)) isEqual:@"minimum"] || [str isEqual:@"min"]) {
    return JavaLangInteger_MIN_VALUE;
  }
  else if ([str isEqual:@"maximum"] || [str isEqual:@"max"]) {
    return JavaLangInteger_MAX_VALUE;
  }
  else if ([str isEqual:@"only"]) {
    return def;
  }
  return JavaLangInteger_parseIntWithNSString_(str);
}

jint OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) monthOfYear];
  return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:[field setWithLong:0 withNSString:str withJavaUtilLocale:JreLoadStatic(JavaUtilLocale, ENGLISH)]];
}

jint OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) dayOfWeek];
  return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:[field setWithLong:0 withNSString:str withJavaUtilLocale:JreLoadStatic(JavaUtilLocale, ENGLISH)]];
}

NSString *OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  return ([((NSString *) nil_chk(str)) isEqual:@"-"]) ? nil : str;
}

jint OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  OrgJodaTimeFormatDateTimeFormatter *p = OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondFraction();
  OrgJodaTimeMutableDateTime *mdt = create_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(0, OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology());
  jint pos = 0;
  if ([((NSString *) nil_chk(str)) java_hasPrefix:@"-"]) {
    pos = 1;
  }
  jint newPos = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) parseIntoWithOrgJodaTimeReadWritableInstant:mdt withNSString:str withInt:pos];
  if (newPos == ~pos) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(str);
  }
  jint millis = (jint) [mdt getMillis];
  if (pos == 1) {
    millis = -millis;
  }
  return millis;
}

jchar OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_(jchar c) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  switch (c) {
    case 's':
    case 'S':
    return 's';
    case 'u':
    case 'U':
    case 'g':
    case 'G':
    case 'z':
    case 'Z':
    return 'u';
    case 'w':
    case 'W':
    default:
    return 'w';
  }
}

jboolean OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_(NSString *id_, OrgJodaTimeDateTimeZone *tz) {
  OrgJodaTimeTzZoneInfoCompiler_initialize();
  if (![((NSString *) nil_chk(id_)) isEqual:[((OrgJodaTimeDateTimeZone *) nil_chk(tz)) getID]]) {
    return true;
  }
  jlong millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:1850];
  jlong end = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:2050];
  jint offset = [tz getOffsetWithLong:millis];
  NSString *key = [tz getNameKeyWithLong:millis];
  id<JavaUtilList> transitions = create_JavaUtilArrayList_init();
  while (true) {
    jlong next = [tz nextTransitionWithLong:millis];
    if (next == millis || next > end) {
      break;
    }
    millis = next;
    jint nextOffset = [tz getOffsetWithLong:millis];
    NSString *nextKey = [tz getNameKeyWithLong:millis];
    if (offset == nextOffset && [((NSString *) nil_chk(key)) isEqual:nextKey]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C@", @"*d* Error in ", [tz getID], ' ', create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(millis, OrgJodaTimeChronoISOChronology_getInstanceUTC()))];
      return false;
    }
    if (nextKey == nil || ([nextKey java_length] < 3 && ![@"??" isEqual:nextKey])) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C@$$", @"*s* Error in ", [tz getID], ' ', create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(millis, OrgJodaTimeChronoISOChronology_getInstanceUTC()), @", nameKey=", nextKey)];
      return false;
    }
    [transitions addWithId:JavaLangLong_valueOfWithLong_(millis)];
    offset = nextOffset;
    key = nextKey;
  }
  millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:2050];
  end = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:1850];
  for (jint i = [transitions size]; --i >= 0; ) {
    jlong prev = [tz previousTransitionWithLong:millis];
    if (prev == millis || prev < end) {
      break;
    }
    millis = prev;
    jlong trans = [((JavaLangLong *) nil_chk([transitions getWithInt:i])) longLongValue];
    if (trans - 1 != millis) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C@$@", @"*r* Error in ", [tz getID], ' ', create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(millis, OrgJodaTimeChronoISOChronology_getInstanceUTC()), @" != ", create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(trans - 1, OrgJodaTimeChronoISOChronology_getInstanceUTC()))];
      return false;
    }
  }
  return true;
}

void OrgJodaTimeTzZoneInfoCompiler_init(OrgJodaTimeTzZoneInfoCompiler *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->iRuleSets_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->iZones_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->iLinks_, new_JavaUtilArrayList_init());
}

OrgJodaTimeTzZoneInfoCompiler *new_OrgJodaTimeTzZoneInfoCompiler_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler, init)
}

OrgJodaTimeTzZoneInfoCompiler *create_OrgJodaTimeTzZoneInfoCompiler_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler)

@implementation OrgJodaTimeTzZoneInfoCompiler_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeTzZoneInfoCompiler_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangBoolean *)initialValue {
  return JreLoadStatic(JavaLangBoolean, FALSE);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgJodaTimeTzZoneInfoCompiler;", "Ljava/lang/ThreadLocal<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_1 = { "", "org.joda.time.tz", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_OrgJodaTimeTzZoneInfoCompiler_1;
}

@end

void OrgJodaTimeTzZoneInfoCompiler_1_init(OrgJodaTimeTzZoneInfoCompiler_1 *self) {
  JavaLangThreadLocal_init(self);
}

OrgJodaTimeTzZoneInfoCompiler_1 *new_OrgJodaTimeTzZoneInfoCompiler_1_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_1, init)
}

OrgJodaTimeTzZoneInfoCompiler_1 *create_OrgJodaTimeTzZoneInfoCompiler_1_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_1, init)
}

@implementation OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(self, st);
  return self;
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameKey
                                                 withInt:(jint)saveMillis
                                                 withInt:(jint)fromYear
                                                 withInt:(jint)toYear {
  [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) addRecurringSavingsWithNSString:nameKey withInt:saveMillis withInt:fromYear withInt:toYear withChar:iZoneChar_ withInt:iMonthOfYear_ withInt:iDayOfMonth_ withInt:iDayOfWeek_ withBoolean:iAdvanceDayOfWeek_ withInt:iMillisOfDay_];
}

- (void)addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                               withInt:(jint)year {
  [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) addCutoverWithInt:year withChar:iZoneChar_ withInt:iMonthOfYear_ withInt:iDayOfMonth_ withInt:iDayOfWeek_ withBoolean:iAdvanceDayOfWeek_ withInt:iMillisOfDay_];
}

- (NSString *)description {
  return JreStrcat("$I$I$I$Z$I$CC", @"MonthOfYear: ", iMonthOfYear_, @"\nDayOfMonth: ", iDayOfMonth_, @"\nDayOfWeek: ", iDayOfWeek_, @"\nAdvanceDayOfWeek: ", iAdvanceDayOfWeek_, @"\nMillisOfDay: ", iMillisOfDay_, @"\nZoneChar: ", iZoneChar_, 0x000a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilStringTokenizer:);
  methods[2].selector = @selector(addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:withInt:withInt:withInt:);
  methods[3].selector = @selector(addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:withInt:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iMonthOfYear_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iDayOfMonth_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iDayOfWeek_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iAdvanceDayOfWeek_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iMillisOfDay_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iZoneChar_", "C", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilStringTokenizer;", "addRecurring", "LOrgJodaTimeTzDateTimeZoneBuilder;LNSString;III", "addCutover", "LOrgJodaTimeTzDateTimeZoneBuilder;I", "toString", "LOrgJodaTimeTzZoneInfoCompiler;" };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear = { "DateTimeOfYear", "org.joda.time.tz", ptrTable, methods, fields, 7, 0x8, 5, 6, 6, -1, -1, -1, -1 };
  return &_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;
}

@end

void OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *self) {
  NSObject_init(self);
  self->iMonthOfYear_ = 1;
  self->iDayOfMonth_ = 1;
  self->iDayOfWeek_ = 0;
  self->iAdvanceDayOfWeek_ = false;
  self->iMillisOfDay_ = 0;
  self->iZoneChar_ = 'w';
}

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *new_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear, init)
}

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *create_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear, init)
}

void OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *self, JavaUtilStringTokenizer *st) {
  NSObject_init(self);
  jint month = 1;
  jint day = 1;
  jint dayOfWeek = 0;
  jint millis = 0;
  jboolean advance = false;
  jchar zoneChar = 'w';
  if ([((JavaUtilStringTokenizer *) nil_chk(st)) hasMoreTokens]) {
    month = OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_([st nextToken]);
    if ([st hasMoreTokens]) {
      NSString *str = [st nextToken];
      if ([((NSString *) nil_chk(str)) java_hasPrefix:@"last"]) {
        day = -1;
        dayOfWeek = OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_([str java_substring:4]);
        advance = false;
      }
      else {
        @try {
          day = JavaLangInteger_parseIntWithNSString_(str);
          dayOfWeek = 0;
          advance = false;
        }
        @catch (JavaLangNumberFormatException *e) {
          jint index = [str java_indexOfString:@">="];
          if (index > 0) {
            day = JavaLangInteger_parseIntWithNSString_([str java_substring:index + 2]);
            dayOfWeek = OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_([str java_substring:0 endIndex:index]);
            advance = true;
          }
          else {
            index = [str java_indexOfString:@"<="];
            if (index > 0) {
              day = JavaLangInteger_parseIntWithNSString_([str java_substring:index + 2]);
              dayOfWeek = OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_([str java_substring:0 endIndex:index]);
              advance = false;
            }
            else {
              @throw create_JavaLangIllegalArgumentException_initWithNSString_(str);
            }
          }
        }
      }
      if ([st hasMoreTokens]) {
        str = [st nextToken];
        zoneChar = OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_([((NSString *) nil_chk(str)) charAtWithInt:[str java_length] - 1]);
        if ([str isEqual:@"24:00"]) {
          OrgJodaTimeLocalDate *date = (day == -1 ? [create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(2001, month, 1) plusMonthsWithInt:1] : [create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(2001, month, day) plusDaysWithInt:1]);
          advance = (day != -1 && dayOfWeek != 0);
          month = [date getMonthOfYear];
          day = [date getDayOfMonth];
          if (dayOfWeek != 0) {
            dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;
          }
        }
        else {
          millis = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(str);
        }
      }
    }
  }
  self->iMonthOfYear_ = month;
  self->iDayOfMonth_ = day;
  self->iDayOfWeek_ = dayOfWeek;
  self->iAdvanceDayOfWeek_ = advance;
  self->iMillisOfDay_ = millis;
  self->iZoneChar_ = zoneChar;
}

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *new_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear, initWithJavaUtilStringTokenizer_, st)
}

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *create_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear, initWithJavaUtilStringTokenizer_, st)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear)

@implementation OrgJodaTimeTzZoneInfoCompiler_Rule

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(self, st);
  return self;
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat {
  NSString *nameKey = OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(self, nameFormat);
  [((OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *) nil_chk(iDateTimeOfYear_)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:nameKey withInt:iSaveMillis_ withInt:iFromYear_ withInt:iToYear_];
}

- (NSString *)formatNameWithNSString:(NSString *)nameFormat {
  return OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(self, nameFormat);
}

- (NSString *)description {
  return JreStrcat("$$$I$I$$C@$I$$C", @"[Rule]\nName: ", iName_, @"\nFromYear: ", iFromYear_, @"\nToYear: ", iToYear_, @"\nType: ", iType_, 0x000a, iDateTimeOfYear_, @"SaveMillis: ", iSaveMillis_, @"\nLetterS: ", iLetterS_, 0x000a);
}

- (void)dealloc {
  RELEASE_(iName_);
  RELEASE_(iType_);
  RELEASE_(iDateTimeOfYear_);
  RELEASE_(iLetterS_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilStringTokenizer:);
  methods[1].selector = @selector(addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:);
  methods[2].selector = @selector(formatNameWithNSString:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iName_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iFromYear_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iToYear_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iType_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iDateTimeOfYear_", "LOrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iSaveMillis_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iLetterS_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilStringTokenizer;", "addRecurring", "LOrgJodaTimeTzDateTimeZoneBuilder;LNSString;", "formatName", "LNSString;", "toString", "LOrgJodaTimeTzZoneInfoCompiler;" };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_Rule = { "Rule", "org.joda.time.tz", ptrTable, methods, fields, 7, 0xa, 4, 7, 6, -1, -1, -1, -1 };
  return &_OrgJodaTimeTzZoneInfoCompiler_Rule;
}

@end

void OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_Rule *self, JavaUtilStringTokenizer *st) {
  NSObject_init(self);
  JreStrongAssign(&self->iName_, [((NSString *) nil_chk([((JavaUtilStringTokenizer *) nil_chk(st)) nextToken])) java_intern]);
  self->iFromYear_ = OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_([st nextToken], 0);
  self->iToYear_ = OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_([st nextToken], self->iFromYear_);
  if (self->iToYear_ < self->iFromYear_) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  JreStrongAssign(&self->iType_, OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_([st nextToken]));
  JreStrongAssignAndConsume(&self->iDateTimeOfYear_, new_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(st));
  self->iSaveMillis_ = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_([st nextToken]);
  JreStrongAssign(&self->iLetterS_, OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_([st nextToken]));
}

OrgJodaTimeTzZoneInfoCompiler_Rule *new_OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_Rule, initWithJavaUtilStringTokenizer_, st)
}

OrgJodaTimeTzZoneInfoCompiler_Rule *create_OrgJodaTimeTzZoneInfoCompiler_Rule_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_Rule, initWithJavaUtilStringTokenizer_, st)
}

NSString *OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(OrgJodaTimeTzZoneInfoCompiler_Rule *self, NSString *nameFormat) {
  jint index = [((NSString *) nil_chk(nameFormat)) java_indexOf:'/'];
  if (index > 0) {
    if (self->iSaveMillis_ == 0) {
      return [((NSString *) nil_chk([nameFormat java_substring:0 endIndex:index])) java_intern];
    }
    else {
      return [((NSString *) nil_chk([nameFormat java_substring:index + 1])) java_intern];
    }
  }
  index = [nameFormat java_indexOfString:@"%s"];
  if (index < 0) {
    return nameFormat;
  }
  NSString *left = [nameFormat java_substring:0 endIndex:index];
  NSString *right = [nameFormat java_substring:index + 2];
  NSString *name;
  if (self->iLetterS_ == nil) {
    name = [((NSString *) nil_chk(left)) java_concat:right];
  }
  else {
    name = JreStrcat("$$$", left, self->iLetterS_, right);
  }
  return [((NSString *) nil_chk(name)) java_intern];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_Rule)

@implementation OrgJodaTimeTzZoneInfoCompiler_RuleSet

- (instancetype)initWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule {
  OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(self, rule);
  return self;
}

- (void)addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule {
  if (!([((NSString *) nil_chk(((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk(rule))->iName_)) isEqual:((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk([((id<JavaUtilList>) nil_chk(iRules_)) getWithInt:0]))->iName_])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Rule name mismatch");
  }
  [((id<JavaUtilList>) nil_chk(iRules_)) addWithId:rule];
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(iRules_)) size]; i++) {
    OrgJodaTimeTzZoneInfoCompiler_Rule *rule = [((id<JavaUtilList>) nil_chk(iRules_)) getWithInt:i];
    [((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk(rule)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:nameFormat];
  }
}

- (void)dealloc {
  RELEASE_(iRules_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeTzZoneInfoCompiler_Rule:);
  methods[1].selector = @selector(addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:);
  methods[2].selector = @selector(addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iRules_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeTzZoneInfoCompiler_Rule;", "addRule", "addRecurring", "LOrgJodaTimeTzDateTimeZoneBuilder;LNSString;", "Ljava/util/List<Lorg/joda/time/tz/ZoneInfoCompiler$Rule;>;", "LOrgJodaTimeTzZoneInfoCompiler;" };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_RuleSet = { "RuleSet", "org.joda.time.tz", ptrTable, methods, fields, 7, 0xa, 3, 1, 5, -1, -1, -1, -1 };
  return &_OrgJodaTimeTzZoneInfoCompiler_RuleSet;
}

@end

void OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(OrgJodaTimeTzZoneInfoCompiler_RuleSet *self, OrgJodaTimeTzZoneInfoCompiler_Rule *rule) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->iRules_, new_JavaUtilArrayList_init());
  [self->iRules_ addWithId:rule];
}

OrgJodaTimeTzZoneInfoCompiler_RuleSet *new_OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(OrgJodaTimeTzZoneInfoCompiler_Rule *rule) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_RuleSet, initWithOrgJodaTimeTzZoneInfoCompiler_Rule_, rule)
}

OrgJodaTimeTzZoneInfoCompiler_RuleSet *create_OrgJodaTimeTzZoneInfoCompiler_RuleSet_initWithOrgJodaTimeTzZoneInfoCompiler_Rule_(OrgJodaTimeTzZoneInfoCompiler_Rule *rule) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_RuleSet, initWithOrgJodaTimeTzZoneInfoCompiler_Rule_, rule)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_RuleSet)

@implementation OrgJodaTimeTzZoneInfoCompiler_Zone

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(self, st);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
     withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(self, name, st);
  return self;
}

- (void)chainWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (iNext_ != nil) {
    [iNext_ chainWithJavaUtilStringTokenizer:st];
  }
  else {
    JreStrongAssignAndConsume(&iNext_, new_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(iName_, st));
  }
}

- (void)addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                         withJavaUtilMap:(id<JavaUtilMap>)ruleSets {
  OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(self, builder, ruleSets);
}

+ (void)addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:(OrgJodaTimeTzZoneInfoCompiler_Zone *)zone
                      withOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                           withJavaUtilMap:(id<JavaUtilMap>)ruleSets {
  OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(zone, builder, ruleSets);
}

- (NSString *)description {
  NSString *str = JreStrcat("$$$I$$$$$IC@", @"[Zone]\nName: ", iName_, @"\nOffsetMillis: ", iOffsetMillis_, @"\nRules: ", iRules_, @"\nFormat: ", iFormat_, @"\nUntilYear: ", iUntilYear_, 0x000a, iUntilDateTimeOfYear_);
  if (iNext_ == nil) {
    return str;
  }
  return JreStrcat("$$$", str, @"...\n", [iNext_ description]);
}

- (void)dealloc {
  RELEASE_(iName_);
  RELEASE_(iRules_);
  RELEASE_(iFormat_);
  RELEASE_(iUntilDateTimeOfYear_);
  RELEASE_(iNext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0xa, 3, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilStringTokenizer:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilStringTokenizer:);
  methods[2].selector = @selector(chainWithJavaUtilStringTokenizer:);
  methods[3].selector = @selector(addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:withJavaUtilMap:);
  methods[4].selector = @selector(addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:withOrgJodaTimeTzDateTimeZoneBuilder:withJavaUtilMap:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iName_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iOffsetMillis_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iRules_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iFormat_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iUntilYear_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iUntilDateTimeOfYear_", "LOrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iNext_", "LOrgJodaTimeTzZoneInfoCompiler_Zone;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilStringTokenizer;", "LNSString;LJavaUtilStringTokenizer;", "chain", "addToBuilder", "LOrgJodaTimeTzDateTimeZoneBuilder;LJavaUtilMap;", "(Lorg/joda/time/tz/DateTimeZoneBuilder;Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/tz/ZoneInfoCompiler$RuleSet;>;)V", "LOrgJodaTimeTzZoneInfoCompiler_Zone;LOrgJodaTimeTzDateTimeZoneBuilder;LJavaUtilMap;", "(Lorg/joda/time/tz/ZoneInfoCompiler$Zone;Lorg/joda/time/tz/DateTimeZoneBuilder;Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/tz/ZoneInfoCompiler$RuleSet;>;)V", "toString", "LOrgJodaTimeTzZoneInfoCompiler;" };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_Zone = { "Zone", "org.joda.time.tz", ptrTable, methods, fields, 7, 0xa, 6, 7, 9, -1, -1, -1, -1 };
  return &_OrgJodaTimeTzZoneInfoCompiler_Zone;
}

@end

void OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_Zone *self, JavaUtilStringTokenizer *st) {
  OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(self, [((JavaUtilStringTokenizer *) nil_chk(st)) nextToken], st);
}

OrgJodaTimeTzZoneInfoCompiler_Zone *new_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_Zone, initWithJavaUtilStringTokenizer_, st)
}

OrgJodaTimeTzZoneInfoCompiler_Zone *create_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_Zone, initWithJavaUtilStringTokenizer_, st)
}

void OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_Zone *self, NSString *name, JavaUtilStringTokenizer *st) {
  NSObject_init(self);
  JreStrongAssign(&self->iName_, [((NSString *) nil_chk(name)) java_intern]);
  self->iOffsetMillis_ = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_([((JavaUtilStringTokenizer *) nil_chk(st)) nextToken]);
  JreStrongAssign(&self->iRules_, OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_([st nextToken]));
  JreStrongAssign(&self->iFormat_, [((NSString *) nil_chk([st nextToken])) java_intern]);
  jint year = JavaLangInteger_MAX_VALUE;
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *dtOfYear = OrgJodaTimeTzZoneInfoCompiler_getStartOfYear();
  if ([st hasMoreTokens]) {
    year = JavaLangInteger_parseIntWithNSString_([st nextToken]);
    if ([st hasMoreTokens]) {
      dtOfYear = create_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(st);
    }
  }
  self->iUntilYear_ = year;
  JreStrongAssign(&self->iUntilDateTimeOfYear_, dtOfYear);
}

OrgJodaTimeTzZoneInfoCompiler_Zone *new_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(NSString *name, JavaUtilStringTokenizer *st) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTzZoneInfoCompiler_Zone, initWithNSString_withJavaUtilStringTokenizer_, name, st)
}

OrgJodaTimeTzZoneInfoCompiler_Zone *create_OrgJodaTimeTzZoneInfoCompiler_Zone_initWithNSString_withJavaUtilStringTokenizer_(NSString *name, JavaUtilStringTokenizer *st) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTzZoneInfoCompiler_Zone, initWithNSString_withJavaUtilStringTokenizer_, name, st)
}

void OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(OrgJodaTimeTzZoneInfoCompiler_Zone *zone, OrgJodaTimeTzDateTimeZoneBuilder *builder, id<JavaUtilMap> ruleSets) {
  OrgJodaTimeTzZoneInfoCompiler_Zone_initialize();
  for (; zone != nil; zone = zone->iNext_) {
    [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) setStandardOffsetWithInt:zone->iOffsetMillis_];
    if (zone->iRules_ == nil) {
      [builder setFixedSavingsWithNSString:zone->iFormat_ withInt:0];
    }
    else {
      @try {
        jint saveMillis = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(zone->iRules_);
        [builder setFixedSavingsWithNSString:zone->iFormat_ withInt:saveMillis];
      }
      @catch (JavaLangException *e) {
        OrgJodaTimeTzZoneInfoCompiler_RuleSet *rs = [((id<JavaUtilMap>) nil_chk(ruleSets)) getWithId:zone->iRules_];
        if (rs == nil) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Rules not found: ", zone->iRules_));
        }
        [rs addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:zone->iFormat_];
      }
    }
    if (zone->iUntilYear_ == JavaLangInteger_MAX_VALUE) {
      break;
    }
    [((OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *) nil_chk(zone->iUntilDateTimeOfYear_)) addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:builder withInt:zone->iUntilYear_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_Zone)
