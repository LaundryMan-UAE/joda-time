//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeTzZoneInfoCompiler_INCLUDE_ALL")
#ifdef OrgJodaTimeTzZoneInfoCompiler_RESTRICT
#define OrgJodaTimeTzZoneInfoCompiler_INCLUDE_ALL 0
#else
#define OrgJodaTimeTzZoneInfoCompiler_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeTzZoneInfoCompiler_RESTRICT

#if !defined (OrgJodaTimeTzZoneInfoCompiler_) && (OrgJodaTimeTzZoneInfoCompiler_INCLUDE_ALL || defined(OrgJodaTimeTzZoneInfoCompiler_INCLUDE))
#define OrgJodaTimeTzZoneInfoCompiler_

@class IOSObjectArray;
@class JavaIoBufferedReader;
@class JavaIoDataOutputStream;
@class JavaIoFile;
@class JavaLangThreadLocal;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;
@protocol JavaUtilMap;

/*!
 @brief Compiles IANA ZoneInfo database files into binary files for each time zone
 in the database.
 <code>DateTimeZoneBuilder</code> is used to construct and encode
 compiled data files. <code>ZoneInfoProvider</code> loads the encoded files and
 converts them back into <code>DateTimeZone</code> objects.
 <p>
 Although this tool is similar to zic, the binary formats are not
 compatible. The latest IANA time zone database files may be obtained
 <a href="http://www.iana.org/time-zones">here</a>.
 <p>
 ZoneInfoCompiler is mutable and not thread-safe, although the main method
 may be safely invoked by multiple threads.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTzZoneInfoCompiler : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Returns a map of ids to DateTimeZones.
 @param outputDir optional directory to write compiled data files to
 @param sources optional list of source files to parse
 */
- (id<JavaUtilMap>)compileWithJavaIoFile:(JavaIoFile *)outputDir
                     withJavaIoFileArray:(IOSObjectArray *)sources;

/*!
 @brief Launches the ZoneInfoCompiler tool.
 @code

  Usage: java org.joda.time.tz.ZoneInfoCompiler &lt;options&gt; &lt;source files&gt;
  where possible options include:
   -src &lt;directory&gt;    Specify where to read source files
   -dst &lt;directory&gt;    Specify where to write generated files
   -verbose            Output verbosely (default false)
  
@endcode
 */
+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (void)parseDataFileWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg;

/*!
 @brief Gets a flag indicating that verbose logging is required.
 @return true to log verbosely
 */
+ (jboolean)verbose;

#pragma mark Package-Private

+ (OrgJodaTimeChronology *)getLenientISOChronology;

+ (OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)getStartOfYear;

+ (jint)parseDayOfWeekWithNSString:(NSString *)str;

+ (jint)parseMonthWithNSString:(NSString *)str;

+ (NSString *)parseOptionalWithNSString:(NSString *)str;

+ (jint)parseTimeWithNSString:(NSString *)str;

+ (jint)parseYearWithNSString:(NSString *)str
                      withInt:(jint)def;

+ (jchar)parseZoneCharWithChar:(jchar)c;

/*!
 @return false if error.
 */
+ (jboolean)testWithNSString:(NSString *)id_
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)tz;

/*!
 @param zimap maps string ids to DateTimeZone objects.
 */
+ (void)writeZoneInfoMapWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout
                                   withJavaUtilMap:(id<JavaUtilMap>)zimap;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler)

inline OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_get_cStartOfYear();
inline OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_set_cStartOfYear(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_cStartOfYear;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeTzZoneInfoCompiler, cStartOfYear, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)

inline OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_get_cLenientISO();
inline OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_set_cLenientISO(OrgJodaTimeChronology *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_cLenientISO;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeTzZoneInfoCompiler, cLenientISO, OrgJodaTimeChronology *)

inline JavaLangThreadLocal *OrgJodaTimeTzZoneInfoCompiler_get_cVerbose();
inline JavaLangThreadLocal *OrgJodaTimeTzZoneInfoCompiler_set_cVerbose(JavaLangThreadLocal *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangThreadLocal *OrgJodaTimeTzZoneInfoCompiler_cVerbose;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeTzZoneInfoCompiler, cVerbose, JavaLangThreadLocal *)

FOUNDATION_EXPORT jboolean OrgJodaTimeTzZoneInfoCompiler_verbose();

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_mainWithNSStringArray_(IOSObjectArray *args);

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_getStartOfYear();

FOUNDATION_EXPORT OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology();

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(JavaIoDataOutputStream *dout, id<JavaUtilMap> zimap);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_(NSString *str, jint def);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_(NSString *str);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_(NSString *str);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(NSString *str);

FOUNDATION_EXPORT jchar OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_(jchar c);

FOUNDATION_EXPORT jboolean OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_(NSString *id_, OrgJodaTimeDateTimeZone *tz);

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_init(OrgJodaTimeTzZoneInfoCompiler *self);

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler *new_OrgJodaTimeTzZoneInfoCompiler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler *create_OrgJodaTimeTzZoneInfoCompiler_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler)

#endif

#if !defined (OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_) && (OrgJodaTimeTzZoneInfoCompiler_INCLUDE_ALL || defined(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_INCLUDE))
#define OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_

@class JavaUtilStringTokenizer;
@class OrgJodaTimeTzDateTimeZoneBuilder;

@interface OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear : NSObject {
 @public
  jint iMonthOfYear_;
  jint iDayOfMonth_;
  jint iDayOfWeek_;
  jboolean iAdvanceDayOfWeek_;
  jint iMillisOfDay_;
  jchar iZoneChar_;
}

#pragma mark Public

/*!
 @brief Adds a cutover to the builder.
 */
- (void)addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                               withInt:(jint)year;

/*!
 @brief Adds a recurring savings rule to the builder.
 */
- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameKey
                                                 withInt:(jint)saveMillis
                                                 withInt:(jint)fromYear
                                                 withInt:(jint)toYear;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear)

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *self);

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *new_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *create_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_init();

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *self, JavaUtilStringTokenizer *st);

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *new_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *create_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear_initWithJavaUtilStringTokenizer_(JavaUtilStringTokenizer *st);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear)

#endif

#pragma pop_macro("OrgJodaTimeTzZoneInfoCompiler_INCLUDE_ALL")
