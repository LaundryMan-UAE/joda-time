//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
//

#ifndef _OrgJodaTimeTzCachedDateTimeZone_H_
#define _OrgJodaTimeTzCachedDateTimeZone_H_

#include "J2ObjC_header.h"
#include "org/joda/time/DateTimeZone.h"

/*!
 @brief Improves the performance of requesting time zone offsets and name keys by
 caching the results.
 Time zones that have simple rules or are fixed should
 not be cached, as it is unlikely to improve performance.
 <p>
 CachedDateTimeZone is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTzCachedDateTimeZone : OrgJodaTimeDateTimeZone

#pragma mark Public

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns a new CachedDateTimeZone unless given zone is already cached.
 */
+ (OrgJodaTimeTzCachedDateTimeZone *)forZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (NSString *)getNameKeyWithLong:(jlong)instant;

- (jint)getOffsetWithLong:(jlong)instant;

- (jint)getStandardOffsetWithLong:(jlong)instant;

/*!
 @brief Returns the DateTimeZone being wrapped.
 */
- (OrgJodaTimeDateTimeZone *)getUncachedZone;

- (NSUInteger)hash;

- (jboolean)isFixed;

- (jlong)nextTransitionWithLong:(jlong)instant;

- (jlong)previousTransitionWithLong:(jlong)instant;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeTzCachedDateTimeZone)

FOUNDATION_EXPORT OrgJodaTimeTzCachedDateTimeZone *OrgJodaTimeTzCachedDateTimeZone_forZoneWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzCachedDateTimeZone)

#endif // _OrgJodaTimeTzCachedDateTimeZone_H_
