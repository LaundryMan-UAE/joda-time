//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeTzCachedDateTimeZone_INCLUDE_ALL")
#ifdef OrgJodaTimeTzCachedDateTimeZone_RESTRICT
#define OrgJodaTimeTzCachedDateTimeZone_INCLUDE_ALL 0
#else
#define OrgJodaTimeTzCachedDateTimeZone_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeTzCachedDateTimeZone_RESTRICT

#if !defined (OrgJodaTimeTzCachedDateTimeZone_) && (OrgJodaTimeTzCachedDateTimeZone_INCLUDE_ALL || defined(OrgJodaTimeTzCachedDateTimeZone_INCLUDE))
#define OrgJodaTimeTzCachedDateTimeZone_

#define OrgJodaTimeDateTimeZone_RESTRICT 1
#define OrgJodaTimeDateTimeZone_INCLUDE 1
#include "org/joda/time/DateTimeZone.h"

/*!
 @brief Improves the performance of requesting time zone offsets and name keys by
 caching the results.
 Time zones that have simple rules or are fixed should
 not be cached, as it is unlikely to improve performance.
 <p>
 CachedDateTimeZone is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTzCachedDateTimeZone : OrgJodaTimeDateTimeZone

#pragma mark Public

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns a new CachedDateTimeZone unless given zone is already cached.
 */
+ (OrgJodaTimeTzCachedDateTimeZone *)forZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (NSString *)getNameKeyWithLong:(jlong)instant;

- (jint)getOffsetWithLong:(jlong)instant;

- (jint)getStandardOffsetWithLong:(jlong)instant;

/*!
 @brief Returns the DateTimeZone being wrapped.
 */
- (OrgJodaTimeDateTimeZone *)getUncachedZone;

- (NSUInteger)hash;

- (jboolean)isFixed;

- (jlong)nextTransitionWithLong:(jlong)instant;

- (jlong)previousTransitionWithLong:(jlong)instant;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeTzCachedDateTimeZone)

FOUNDATION_EXPORT OrgJodaTimeTzCachedDateTimeZone *OrgJodaTimeTzCachedDateTimeZone_forZoneWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzCachedDateTimeZone)

#endif

#pragma pop_macro("OrgJodaTimeTzCachedDateTimeZone_INCLUDE_ALL")
