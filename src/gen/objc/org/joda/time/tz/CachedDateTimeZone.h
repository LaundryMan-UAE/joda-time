//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeTzCachedDateTimeZone")
#ifdef RESTRICT_OrgJodaTimeTzCachedDateTimeZone
#define INCLUDE_ALL_OrgJodaTimeTzCachedDateTimeZone 0
#else
#define INCLUDE_ALL_OrgJodaTimeTzCachedDateTimeZone 1
#endif
#undef RESTRICT_OrgJodaTimeTzCachedDateTimeZone

#if !defined (OrgJodaTimeTzCachedDateTimeZone_) && (INCLUDE_ALL_OrgJodaTimeTzCachedDateTimeZone || defined(INCLUDE_OrgJodaTimeTzCachedDateTimeZone))
#define OrgJodaTimeTzCachedDateTimeZone_

#define RESTRICT_OrgJodaTimeDateTimeZone 1
#define INCLUDE_OrgJodaTimeDateTimeZone 1
#include "org/joda/time/DateTimeZone.h"

/*!
 @brief Improves the performance of requesting time zone offsets and name keys by
  caching the results.Time zones that have simple rules or are fixed should
  not be cached, as it is unlikely to improve performance.
 <p>
  CachedDateTimeZone is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTzCachedDateTimeZone : OrgJodaTimeDateTimeZone

#pragma mark Public

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns a new CachedDateTimeZone unless given zone is already cached.
 */
+ (OrgJodaTimeTzCachedDateTimeZone *)forZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (NSString *)getNameKeyWithLong:(jlong)instant;

- (jint)getOffsetWithLong:(jlong)instant;

- (jint)getStandardOffsetWithLong:(jlong)instant;

/*!
 @brief Returns the DateTimeZone being wrapped.
 */
- (OrgJodaTimeDateTimeZone *)getUncachedZone;

- (NSUInteger)hash;

- (jboolean)isFixed;

- (jlong)nextTransitionWithLong:(jlong)instant;

- (jlong)previousTransitionWithLong:(jlong)instant;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeTzCachedDateTimeZone)

FOUNDATION_EXPORT OrgJodaTimeTzCachedDateTimeZone *OrgJodaTimeTzCachedDateTimeZone_forZoneWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzCachedDateTimeZone)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeTzCachedDateTimeZone")
