//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/Days.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeDays")
#ifdef RESTRICT_OrgJodaTimeDays
#define INCLUDE_ALL_OrgJodaTimeDays 0
#else
#define INCLUDE_ALL_OrgJodaTimeDays 1
#endif
#undef RESTRICT_OrgJodaTimeDays

#if !defined (OrgJodaTimeDays_) && (INCLUDE_ALL_OrgJodaTimeDays || defined(INCLUDE_OrgJodaTimeDays))
#define OrgJodaTimeDays_

#define RESTRICT_OrgJodaTimeBaseBaseSingleFieldPeriod 1
#define INCLUDE_OrgJodaTimeBaseBaseSingleFieldPeriod 1
#include "org/joda/time/base/BaseSingleFieldPeriod.h"

@class OrgJodaTimeDuration;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeHours;
@class OrgJodaTimeMinutes;
@class OrgJodaTimePeriodType;
@class OrgJodaTimeSeconds;
@class OrgJodaTimeWeeks;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadableInterval;
@protocol OrgJodaTimeReadablePartial;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief An immutable time period representing a number of days.
 <p>
  <code>Days</code> is an immutable period that can only store days.
  It does not store years, months or hours for example. As such it is a
  type-safe way of representing a number of days in an application. 
 <p>
  The number of days is set in the constructor, and may be queried using 
 <code>getDays()</code>. Basic mathematical operations are provided - 
 <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and 
 <code>dividedBy()</code>.
  <p>
  <code>Days</code> is thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.4
 */
@interface OrgJodaTimeDays : OrgJodaTimeBaseBaseSingleFieldPeriod

#pragma mark Public

/*!
 @brief Obtains an instance of <code>Days</code> that may be cached.
 <code>Days</code> is immutable, so instances can be cached and shared.
  This factory method provides access to shared instances.
 @param days the number of days to obtain an instance for
 @return the instance of Days
 */
+ (OrgJodaTimeDays *)daysWithInt:(jint)days;

/*!
 @brief Creates a <code>Days</code> representing the number of whole days
  between the two specified datetimes.This method corectly handles
  any daylight savings time changes that may occur during the interval.
 @param start the start instant, must not be null
 @param end the end instant, must not be null
 @return the period in days
 @throw IllegalArgumentExceptionif the instants are null or invalid
 */
+ (OrgJodaTimeDays *)daysBetweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/*!
 @brief Creates a <code>Days</code> representing the number of whole days
  between the two specified partial datetimes.
 <p>
  The two partials must contain the same fields, for example you can specify two 
 <code>LocalDate</code> objects.
 @param start the start partial date, must not be null
 @param end the end partial date, must not be null
 @return the period in days
 @throw IllegalArgumentExceptionif the partials are null or invalid
 */
+ (OrgJodaTimeDays *)daysBetweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end;

/*!
 @brief Creates a <code>Days</code> representing the number of whole days
  in the specified interval.This method corectly handles any daylight
  savings time changes that may occur during the interval.
 @param interval the interval to extract days from, null returns zero
 @return the period in days
 @throw IllegalArgumentExceptionif the partials are null or invalid
 */
+ (OrgJodaTimeDays *)daysInWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval;

/*!
 @brief Returns a new instance with the days divided by the specified divisor.
 The calculation uses integer division, thus 3 divided by 2 is 1. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param divisor the amount to divide by, may be negative
 @return the new period divided by the specified divisor
 @throw ArithmeticExceptionif the divisor is zero
 */
- (OrgJodaTimeDays *)dividedByWithInt:(jint)divisor;

/*!
 @brief Gets the number of days that this period represents.
 @return the number of days in the period
 */
- (jint)getDays;

/*!
 @brief Gets the duration field type, which is <code>days</code>.
 @return the period type
 */
- (OrgJodaTimeDurationFieldType *)getFieldType;

/*!
 @brief Gets the period type, which is <code>days</code>.
 @return the period type
 */
- (OrgJodaTimePeriodType *)getPeriodType;

/*!
 @brief Is this days instance greater than the specified number of days.
 @param other the other period, null means zero
 @return true if this days instance is greater than the specified one
 */
- (jboolean)isGreaterThanWithOrgJodaTimeDays:(OrgJodaTimeDays *)other;

/*!
 @brief Is this days instance less than the specified number of days.
 @param other the other period, null means zero
 @return true if this days instance is less than the specified one
 */
- (jboolean)isLessThanWithOrgJodaTimeDays:(OrgJodaTimeDays *)other;

/*!
 @brief Returns a new instance with the specified number of days taken away.
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the amount of days to take away, may be negative, null means zero
 @return the new period minus the specified number of days
 @throw ArithmeticExceptionif the result overflows an int
 */
- (OrgJodaTimeDays *)minusWithOrgJodaTimeDays:(OrgJodaTimeDays *)days;

/*!
 @brief Returns a new instance with the specified number of days taken away.
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the amount of days to take away, may be negative
 @return the new period minus the specified number of days
 @throw ArithmeticExceptionif the result overflows an int
 */
- (OrgJodaTimeDays *)minusWithInt:(jint)days;

/*!
 @brief Returns a new instance with the days multiplied by the specified scalar.
 <p>
  This instance is immutable and unaffected by this method call.
 @param scalar the amount to multiply by, may be negative
 @return the new period multiplied by the specified scalar
 @throw ArithmeticExceptionif the result overflows an int
 */
- (OrgJodaTimeDays *)multipliedByWithInt:(jint)scalar;

/*!
 @brief Returns a new instance with the days value negated.
 @return the new period with a negated value
 @throw ArithmeticExceptionif the result overflows an int
 */
- (OrgJodaTimeDays *)negated;

/*!
 @brief Creates a new <code>Days</code> by parsing a string in the ISO8601 format 'PnD'.
 <p>
  The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
  days component may be non-zero. If any other component is non-zero, an exception
  will be thrown.
 @param periodStr the period string, null returns zero
 @return the period in days
 @throw IllegalArgumentExceptionif the string format is invalid
 */
+ (OrgJodaTimeDays *)parseDaysWithNSString:(NSString *)periodStr;

/*!
 @brief Returns a new instance with the specified number of days added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the amount of days to add, may be negative, null means zero
 @return the new period plus the specified number of days
 @throw ArithmeticExceptionif the result overflows an int
 */
- (OrgJodaTimeDays *)plusWithOrgJodaTimeDays:(OrgJodaTimeDays *)days;

/*!
 @brief Returns a new instance with the specified number of days added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the amount of days to add, may be negative
 @return the new period plus the specified number of days
 @throw ArithmeticExceptionif the result overflows an int
 */
- (OrgJodaTimeDays *)plusWithInt:(jint)days;

/*!
 @brief Creates a new <code>Days</code> representing the number of complete
  standard length days in the specified period.
 <p>
  This factory method converts all fields from the period to hours using standardised
  durations for each field. Only those fields which have a precise duration in
  the ISO UTC chronology can be converted. 
 <ul>
  <li>One week consists of 7 days. 
 <li>One day consists of 24 hours. 
 <li>One hour consists of 60 minutes. 
 <li>One minute consists of 60 seconds. 
 <li>One second consists of 1000 milliseconds. 
 </ul>
  Months and Years are imprecise and periods containing these values cannot be converted.
 @param period the period to get the number of hours from, null returns zero
 @return the period in days
 @throw IllegalArgumentExceptionif the period contains imprecise duration values
 */
+ (OrgJodaTimeDays *)standardDaysInWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Converts this period in days to a duration in milliseconds assuming a
  24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert from a period to a duration.
  However to achieve this it makes the assumption that all days are 24 hours
  long, all hours are 60 minutes and all minutes are 60 seconds.
  This is not true when daylight savings time is considered, and may also
  not be true for some unusual chronologies. However, it is included as it
  is a useful operation for many applications and business rules.
 @return a duration equivalent to this number of days
 */
- (OrgJodaTimeDuration *)toStandardDuration;

/*!
 @brief Converts this period in days to a period in hours assuming a
  24 hour day.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all days are 24 hours long.
  This is not true when daylight savings is considered and may also not
  be true for some unusual chronologies. However, it is included
  as it is a useful operation for many applications and business rules.
 @return a period representing the number of hours for this number of days
 @throw ArithmeticExceptionif the number of hours is too large to be represented
 */
- (OrgJodaTimeHours *)toStandardHours;

/*!
 @brief Converts this period in days to a period in minutes assuming a
  24 hour day and 60 minute hour.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all days are 24 hours
  long and all hours are 60 minutes long.
  This is not true when daylight savings is considered and may also not
  be true for some unusual chronologies. However, it is included
  as it is a useful operation for many applications and business rules.
 @return a period representing the number of minutes for this number of days
 @throw ArithmeticExceptionif the number of minutes is too large to be represented
 */
- (OrgJodaTimeMinutes *)toStandardMinutes;

/*!
 @brief Converts this period in days to a period in seconds assuming a
  24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all days are 24 hours
  long, all hours are 60 minutes long and all minutes are 60 seconds long.
  This is not true when daylight savings is considered and may also not
  be true for some unusual chronologies. However, it is included
  as it is a useful operation for many applications and business rules.
 @return a period representing the number of seconds for this number of days
 @throw ArithmeticExceptionif the number of seconds is too large to be represented
 */
- (OrgJodaTimeSeconds *)toStandardSeconds;

/*!
 @brief Converts this period in days to a period in weeks assuming a
  7 day week.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all weeks are
  7 days long.
  This may not be true for some unusual chronologies. However, it is included
  as it is a useful operation for many applications and business rules.
 @return a period representing the number of weeks for this number of days
 */
- (OrgJodaTimeWeeks *)toStandardWeeks;

/*!
 @brief Gets this instance as a String in the ISO8601 duration format.
 <p>
  For example, "P4D" represents 4 days.
 @return the value as an ISO8601 string
 */
- (NSString *)description;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeDays)

/*!
 @brief Constant representing zero days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, ZERO, OrgJodaTimeDays *)

/*!
 @brief Constant representing one day.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, ONE, OrgJodaTimeDays *)

/*!
 @brief Constant representing two days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_TWO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, TWO, OrgJodaTimeDays *)

/*!
 @brief Constant representing three days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_THREE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, THREE, OrgJodaTimeDays *)

/*!
 @brief Constant representing four days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_FOUR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_FOUR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, FOUR, OrgJodaTimeDays *)

/*!
 @brief Constant representing five days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_FIVE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_FIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, FIVE, OrgJodaTimeDays *)

/*!
 @brief Constant representing six days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_SIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_SIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, SIX, OrgJodaTimeDays *)

/*!
 @brief Constant representing seven days.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_SEVEN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_SEVEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, SEVEN, OrgJodaTimeDays *)

/*!
 @brief Constant representing the maximum number of days that can be stored in this object.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_MAX_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_MAX_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, MAX_VALUE, OrgJodaTimeDays *)

/*!
 @brief Constant representing the minimum number of days that can be stored in this object.
 */
inline OrgJodaTimeDays *OrgJodaTimeDays_get_MIN_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_MIN_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDays, MIN_VALUE, OrgJodaTimeDays *)

FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_daysWithInt_(jint days);

FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_daysBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end);

FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_daysBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end);

FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_daysInWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval);

FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_standardDaysInWithOrgJodaTimeReadablePeriod_(id<OrgJodaTimeReadablePeriod> period);

FOUNDATION_EXPORT OrgJodaTimeDays *OrgJodaTimeDays_parseDaysWithNSString_(NSString *periodStr);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDays)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeDays")
