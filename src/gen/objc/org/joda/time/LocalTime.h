//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/LocalTime.java
//

#ifndef _OrgJodaTimeLocalTime_H_
#define _OrgJodaTimeLocalTime_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/base/BaseLocal.h"
#include "org/joda/time/field/AbstractReadableInstantFieldProperty.h"

@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeLocalTime_Property;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief LocalTime is an immutable time class representing a time
 without a time zone.
 <p>
 LocalTime implements the <code>ReadablePartial</code> interface.
 To do this, the interface methods focus on the key fields -
 HourOfDay, MinuteOfHour, SecondOfMinute and MillisOfSecond.
 However, <b>all</b> time fields may in fact be queried.
 <p>
 Calculations on LocalTime are performed using a <code>Chronology</code>.
 This chronology will be set internally to be in the UTC time zone
 for all calculations.
 <p>Each individual field can be queried in two ways:
 <ul>
 <li><code>getHourOfDay()</code>
 <li><code>hourOfDay().get()</code>
 </ul>
 The second technique also provides access to other useful methods on the
 field:
 <ul>
 <li>numeric value
 <li>text value
 <li>short text value
 <li>maximum/minimum values
 <li>add/subtract
 <li>set
 <li>rounding
 </ul>
 <p>
 LocalTime is thread-safe and immutable, provided that the Chronology is as well.
 All standard Chronology classes supplied are thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.3
 */
@interface OrgJodaTimeLocalTime : OrgJodaTimeBaseBaseLocal < OrgJodaTimeReadablePartial, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs an instance set to the current local time evaluated using
 ISO chronology in the default zone.
 <p>
 Once the constructor is completed, the zone is no longer used.
 */
- (instancetype)init;

/*!
 @brief Constructs an instance set to the current local time evaluated using
 specified chronology and zone.
 <p>
 If the chronology is null, ISO chronology in the default time zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the current local time evaluated using
 ISO chronology in the specified zone.
 <p>
 If the specified time zone is null, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param zone  the time zone, null means default zone
 */
- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance set to the specified time
 using <code>ISOChronology</code>.
 @param hourOfDay  the hour of the day, from 0 to 23
 @param minuteOfHour  the minute of the hour, from 0 to 59
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour;

/*!
 @brief Constructs an instance set to the specified time
 using <code>ISOChronology</code>.
 @param hourOfDay  the hour of the day, from 0 to 23
 @param minuteOfHour  the minute of the hour, from 0 to 59
 @param secondOfMinute  the second of the minute, from 0 to 59
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute;

/*!
 @brief Constructs an instance set to the specified time
 using <code>ISOChronology</code>.
 @param hourOfDay  the hour of the day, from 0 to 23
 @param minuteOfHour  the minute of the hour, from 0 to 59
 @param secondOfMinute  the second of the minute, from 0 to 59
 @param millisOfSecond  the millisecond of the second, from 0 to 999
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond;

/*!
 @brief Constructs an instance set to the specified time
 using the specified chronology, whose zone is ignored.
 <p>
 If the chronology is null, <code>ISOChronology</code> is used.
 @param hourOfDay  the hour of the day, valid values defined by the chronology
 @param minuteOfHour  the minute of the hour, valid values defined by the chronology
 @param secondOfMinute  the second of the minute, valid values defined by the chronology
 @param millisOfSecond  the millisecond of the second, valid values defined by the chronology
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the local time defined by the specified
 instant evaluated using ISO chronology in the default zone.
 <p>
 Once the constructor is completed, the zone is no longer used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 */
- (instancetype)initWithLong:(jlong)instant;

/*!
 @brief Constructs an instance set to the local time defined by the specified
 instant evaluated using the specified chronology.
 <p>
 If the chronology is null, ISO chronology in the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the local time defined by the specified
 instant evaluated using ISO chronology in the specified zone.
 <p>
 If the specified time zone is null, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param zone  the time zone, null means default zone
 */
- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance from an Object that represents a datetime.
 <p>
 If the object contains no chronology, <code>ISOChronology</code> is used.
 If the object contains no time zone, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadablePartial, ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localTimeParser()</code>.
 The default String converter ignores the zone and only parses the field values.
 @param instant  the datetime object
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant;

/*!
 @brief Constructs an instance from an Object that represents a datetime,
 using the specified chronology.
 <p>
 If the chronology is null, ISO in the default time zone is used.
 Once the constructor is completed, the zone is no longer used.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadablePartial, ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localTimeParser()</code>.
 The default String converter ignores the zone and only parses the field values.
 @param instant  the datetime object
 @param chronology  the chronology
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance from an Object that represents a datetime,
 forcing the time zone to that specified.
 <p>
 If the object contains no chronology, <code>ISOChronology</code> is used.
 If the specified time zone is null, the default zone is used.
 Once the constructor is completed, the zone is no longer used.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadablePartial, ReadableInstant, String, Calendar and Date.
 The String formats are described by <code>ISODateTimeFormat.localTimeParser()</code>.
 The default String converter ignores the zone and only parses the field values.
 @param instant  the datetime object
 @param zone  the time zone
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Compares this partial with another returning an integer
 indicating the order.
 <p>
 The fields are compared in order, from largest to smallest.
 The first field that is non-equal is used to determine the result.
 <p>
 The specified object must be a partial instance whose field types
 match those of this partial.
 @param partial  an object to check against
 @return negative if this is less, zero if equal, positive if greater
 @throws ClassCastException if the partial is the wrong class
 or if it has field types that don't match
 @throws NullPointerException if the partial is null
 */
- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Compares this ReadablePartial with another returning true if the chronology,
 field types and values are equal.
 @param partial  an object to check against
 @return true if fields and values are equal
 */
- (jboolean)isEqual:(id)partial;

/*!
 @brief Constructs a LocalTime from a <code>java.util.Calendar</code>
 using exactly the same field values.
 <p>
 Each field is queried from the Calendar and assigned to the LocalTime.
 This is useful if you have been using the Calendar as a local time,
 ignoring the zone.
 <p>
 One advantage of this method is that this method is unaffected if the
 version of the time zone data differs between the JDK and Joda-Time.
 That is because the local field values are transferred, calculated using
 the JDK time zone data and without using the Joda-Time time zone data.
 <p>
 This factory method ignores the type of the calendar and always
 creates a LocalTime with ISO chronology. It is expected that you
 will only pass in instances of <code>GregorianCalendar</code> however
 this is not validated.
 @param calendar  the Calendar to extract fields from
 @return the created LocalTime
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */
+ (OrgJodaTimeLocalTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

/*!
 @brief Constructs a LocalTime from a <code>java.util.Date</code>
 using exactly the same field values.
 <p>
 Each field is queried from the Date and assigned to the LocalTime.
 This is useful if you have been using the Date as a local time,
 ignoring the zone.
 <p>
 One advantage of this method is that this method is unaffected if the
 version of the time zone data differs between the JDK and Joda-Time.
 That is because the local field values are transferred, calculated using
 the JDK time zone data and without using the Joda-Time time zone data.
 <p>
 This factory method always creates a LocalTime with ISO chronology.
 @param date  the Date to extract fields from
 @return the created LocalTime
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */
+ (OrgJodaTimeLocalTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Constructs a LocalTime from the specified millis of day using the
 ISO chronology.
 <p>
 The millisOfDay value may exceed the number of millis in one day,
 but additional days will be ignored.
 This method uses the UTC time zone internally.
 @param millisOfDay  the number of milliseconds into a day to convert
 */
+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay;

/*!
 @brief Constructs a LocalTime from the specified millis of day using the
 specified chronology.
 <p>
 The millisOfDay value may exceed the number of millis in one day,
 but additional days will be ignored.
 This method uses the UTC time zone internally.
 @param millisOfDay  the number of milliseconds into a day to convert
 @param chrono  the chronology, null means ISO chronology
 */
+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Get the value of one of the fields of time.
 <p>
 This method gets the value of the specified field.
 For example:
 @code

  DateTime dt = new DateTime();
  int hourOfDay = dt.get(DateTimeFieldType.hourOfDay());
  
@endcode
 @param fieldType  a field type, usually obtained from DateTimeFieldType, not null
 @return the value of that field
 @throws IllegalArgumentException if the field type is null
 */
- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

/*!
 @brief Gets the chronology of the time.
 @return the Chronology that the time is using
 */
- (OrgJodaTimeChronology *)getChronology;

/*!
 @brief Get the hour of day field value.
 @return the hour of day
 */
- (jint)getHourOfDay;

/*!
 @brief Get the millis of day field value.
 @return the millis of day
 */
- (jint)getMillisOfDay;

/*!
 @brief Get the millis of second field value.
 @return the millis of second
 */
- (jint)getMillisOfSecond;

/*!
 @brief Get the minute of hour field value.
 @return the minute of hour
 */
- (jint)getMinuteOfHour;

/*!
 @brief Get the second of minute field value.
 @return the second of minute
 */
- (jint)getSecondOfMinute;

/*!
 @brief Gets the value of the field at the specifed index.
 <p>
 This method is required to support the <code>ReadablePartial</code>
 interface. The supported fields are HourOfDay, MinuteOfHour,
 SecondOfMinute and MillisOfSecond.
 @param index  the index, zero to three
 @return the value
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (jint)getValueWithInt:(jint)index;

/*!
 @brief Get the hour of day field property which provides access to advanced functionality.
 @return the hour of day property
 */
- (OrgJodaTimeLocalTime_Property *)hourOfDay;

/*!
 @brief Checks if the field type specified is supported by this
 local time and chronology.
 This can be used to avoid exceptions in <code>get(DateTimeFieldType)</code>.
 @param type  a field type, usually obtained from DateTimeFieldType
 @return true if the field type is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Checks if the duration type specified is supported by this
 local time and chronology.
 @param type  a duration type, usually obtained from DurationFieldType
 @return true if the field type is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

/*!
 @brief Get the millis of day property which provides access to advanced functionality.
 @return the millis of day property
 */
- (OrgJodaTimeLocalTime_Property *)millisOfDay;

/*!
 @brief Get the millis of second property which provides access to advanced functionality.
 @return the millis of second property
 */
- (OrgJodaTimeLocalTime_Property *)millisOfSecond;

/*!
 @brief Returns a copy of this time with the specified period taken away.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 <p>
 This method is typically used to subtract complex period instances.
 Subtracting one field is best achieved using methods
 like <code>minusHours(int)</code>.
 @param period  the period to reduce this instant by
 @return a copy of this time with the period taken away
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a copy of this time minus the specified number of hours.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime subtracted = dt.minusHours(6);
  LocalTime subtracted = dt.minus(Period.hours(6));
  LocalTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);
  
@endcode
 @param hours  the amount of hours to subtract, may be negative
 @return the new LocalTime minus the increased hours
 */
- (OrgJodaTimeLocalTime *)minusHoursWithInt:(jint)hours;

/*!
 @brief Returns a copy of this time minus the specified number of millis.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime subtracted = dt.minusMillis(6);
  LocalTime subtracted = dt.minus(Period.millis(6));
  LocalTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);
  
@endcode
 @param millis  the amount of millis to subtract, may be negative
 @return the new LocalTime minus the increased millis
 */
- (OrgJodaTimeLocalTime *)minusMillisWithInt:(jint)millis;

/*!
 @brief Returns a copy of this time minus the specified number of minutes.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime subtracted = dt.minusMinutes(6);
  LocalTime subtracted = dt.minus(Period.minutes(6));
  LocalTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);
  
@endcode
 @param minutes  the amount of minutes to subtract, may be negative
 @return the new LocalTime minus the increased minutes
 */
- (OrgJodaTimeLocalTime *)minusMinutesWithInt:(jint)minutes;

/*!
 @brief Returns a copy of this time minus the specified number of seconds.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime subtracted = dt.minusSeconds(6);
  LocalTime subtracted = dt.minus(Period.seconds(6));
  LocalTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);
  
@endcode
 @param seconds  the amount of seconds to subtract, may be negative
 @return the new LocalTime minus the increased seconds
 */
- (OrgJodaTimeLocalTime *)minusSecondsWithInt:(jint)seconds;

/*!
 @brief Get the minute of hour field property which provides access to advanced functionality.
 @return the minute of hour property
 */
- (OrgJodaTimeLocalTime_Property *)minuteOfHour;

/*!
 @brief Obtains a <code>LocalTime</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the default time zone.
 The resulting object does not use the zone.
 @return the current time, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalTime *)now;

/*!
 @brief Obtains a <code>LocalTime</code> set to the current system millisecond time
 using the specified chronology.
 The resulting object does not use the zone.
 @param chronology  the chronology, not null
 @return the current time, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Obtains a <code>LocalTime</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the specified time zone.
 The resulting object does not use the zone.
 @param zone  the time zone, not null
 @return the current time, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Parses a <code>LocalTime</code> from the specified string.
 <p>
 This uses <code>ISODateTimeFormat.localTimeParser()</code>.
 @param str  the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str;

/*!
 @brief Parses a <code>LocalTime</code> from the specified string using a formatter.
 @param str  the string to parse, not null
 @param formatter  the formatter to use, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this time with the specified period added.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 <p>
 This method is typically used to add complex period instances.
 Adding one field is best achieved using methods
 like <code>plusHours(int)</code>.
 @param period  the period to add to this one, null means zero
 @return a copy of this time with the period added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a copy of this time plus the specified number of hours.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime added = dt.plusHours(6);
  LocalTime added = dt.plus(Period.hours(6));
  LocalTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
  
@endcode
 @param hours  the amount of hours to add, may be negative
 @return the new LocalTime plus the increased hours
 */
- (OrgJodaTimeLocalTime *)plusHoursWithInt:(jint)hours;

/*!
 @brief Returns a copy of this time plus the specified number of millis.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime added = dt.plusMillis(6);
  LocalTime added = dt.plus(Period.millis(6));
  LocalTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);
  
@endcode
 @param millis  the amount of millis to add, may be negative
 @return the new LocalTime plus the increased millis
 */
- (OrgJodaTimeLocalTime *)plusMillisWithInt:(jint)millis;

/*!
 @brief Returns a copy of this time plus the specified number of minutes.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime added = dt.plusMinutes(6);
  LocalTime added = dt.plus(Period.minutes(6));
  LocalTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);
  
@endcode
 @param minutes  the amount of minutes to add, may be negative
 @return the new LocalTime plus the increased minutes
 */
- (OrgJodaTimeLocalTime *)plusMinutesWithInt:(jint)minutes;

/*!
 @brief Returns a copy of this time plus the specified number of seconds.
 <p>
 This LocalTime instance is immutable and unaffected by this method call.
 <p>
 The following three lines are identical in effect:
 @code

  LocalTime added = dt.plusSeconds(6);
  LocalTime added = dt.plus(Period.seconds(6));
  LocalTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);
  
@endcode
 @param seconds  the amount of seconds to add, may be negative
 @return the new LocalTime plus the increased seconds
 */
- (OrgJodaTimeLocalTime *)plusSecondsWithInt:(jint)seconds;

/*!
 @brief Gets the property object for the specified type, which contains
 many useful methods.
 @param fieldType  the field type to get the chronology for
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimeLocalTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

/*!
 @brief Get the second of minute field property which provides access to advanced functionality.
 @return the second of minute property
 */
- (OrgJodaTimeLocalTime_Property *)secondOfMinute;

/*!
 @brief Gets the number of fields in this partial, which is four.
 The supported fields are HourOfDay, MinuteOfHour, SecondOfMinute
 and MillisOfSecond.
 @return the field count, four
 */
- (jint)size;

/*!
 @brief Converts this LocalTime to a full datetime using the default time zone
 setting the time fields from this instance and the date fields from
 the current date.
 @return this time as a datetime using todays date
 */
- (OrgJodaTimeDateTime *)toDateTimeToday;

/*!
 @brief Converts this LocalTime to a full datetime using the specified time zone
 setting the time fields from this instance and the date fields from
 the current time.
 <p>
 This method uses the chronology from this instance plus the time zone
 specified.
 @param zone  the zone to use, null means default
 @return this time as a datetime using todays date
 */
- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Output the time in ISO8601 format (HH:mm:ss.SSS).
 @return ISO8601 time formatted string.
 */
- (NSString *)description;

/*!
 @brief Output the time using the specified format pattern.
 @param pattern  the pattern specification, null means use <code>toString</code>
 */
- (NSString *)toStringWithNSString:(NSString *)pattern;

/*!
 @brief Output the time using the specified format pattern.
 @param pattern  the pattern specification, null means use <code>toString</code>
 @param locale  Locale to use, null means default
 */
- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a copy of this time with the specified field set
 to a new value.
 <p>
 For example, if the field type is <code>hourOfDay</code> then the hour of day
 field would be changed in the returned instance.
 If the field type is null, then <code>this</code> is returned.
 <p>
 These lines are equivalent:
 @code

  LocalTime updated = dt.withHourOfDay(6);
  LocalTime updated = dt.withField(DateTimeFieldType.hourOfDay(), 6);
  
@endcode
 @param fieldType  the field type to set, not null
 @param value  the value to set
 @return a copy of this time with the field set
 @throws IllegalArgumentException if the value is null or invalid
 */
- (OrgJodaTimeLocalTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value;

/*!
 @brief Returns a copy of this time with the value of the specified
 field increased.
 <p>
 If the addition is zero or the field is null, then <code>this</code>
 is returned.
 <p>
 If the addition causes the maximum value of the field to be exceeded,
 then the value will wrap. Thus 23:59 plus two minutes yields 00:01.
 <p>
 These lines are equivalent:
 @code

  LocalTime added = dt.plusHours(6);
  LocalTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
  
@endcode
 @param fieldType  the field type to add to, not null
 @param amount  the amount to add
 @return a copy of this time with the field updated
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount;

/*!
 @brief Returns a copy of this time with the partial set of fields replacing
 those from this instance.
 <p>
 For example, if the partial contains an hour and minute then those two
 fields will be changed in the returned instance.
 Unsupported fields are ignored.
 If the partial is null, then <code>this</code> is returned.
 @param partial  the partial set of fields to apply to this time, null ignored
 @return a copy of this time with a different set of fields
 @throws IllegalArgumentException if any value is invalid
 */
- (OrgJodaTimeLocalTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Returns a copy of this time with the hour of day field updated.
 <p>
 LocalTime is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 hour of day changed.
 @param hour  the hour of day to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalTime *)withHourOfDayWithInt:(jint)hour;

/*!
 @brief Returns a copy of this time with the millis of day field updated.
 <p>
 LocalTime is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 millis of day changed.
 @param millis  the millis of day to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalTime *)withMillisOfDayWithInt:(jint)millis;

/*!
 @brief Returns a copy of this time with the millis of second field updated.
 <p>
 LocalTime is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 millis of second changed.
 @param millis  the millis of second to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalTime *)withMillisOfSecondWithInt:(jint)millis;

/*!
 @brief Returns a copy of this time with the minute of hour field updated.
 <p>
 LocalTime is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 minute of hour changed.
 @param minute  the minute of hour to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalTime *)withMinuteOfHourWithInt:(jint)minute;

/*!
 @brief Returns a copy of this time with the specified period added.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 <p>
 This method is typically used to add multiple copies of complex
 period instances. Adding one field is best achieved using methods
 like <code>withFieldAdded(DurationFieldType,int)</code>
 or <code>plusHours(int)</code>.
 @param period  the period to add to this one, null means zero
 @param scalar  the amount of times to add, such as -1 to subtract once
 @return a copy of this time with the period added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar;

/*!
 @brief Returns a copy of this time with the second of minute field updated.
 <p>
 LocalTime is immutable, so there are no set methods.
 Instead, this method returns a new instance with the value of
 second of minute changed.
 @param second  the second of minute to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalTime *)withSecondOfMinuteWithInt:(jint)second;

#pragma mark Protected

/*!
 @brief Gets the field for a specific index in the chronology specified.
 <p>
 This method must not use any instance variables.
 @param index  the index to retrieve
 @param chrono  the chronology to use
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Gets the local milliseconds from the Java epoch
 of 1970-01-01T00:00:00 (not fixed to any specific time zone).
 @return the number of milliseconds since 1970-01-01T00:00:00
 @since 1.5 (previously private)
 */
- (jlong)getLocalMillis;

#pragma mark Package-Private

/*!
 @brief Returns a copy of this time with different local millis.
 <p>
 The returned object will be a new instance of the same type.
 Only the millis will change, the chronology is kept.
 The returned object will be either be a new instance or <code>this</code>.
 @param newMillis  the new millis, from 1970-01-01T00:00:00
 @return a copy of this time with different millis
 */
- (OrgJodaTimeLocalTime *)withLocalMillisWithLong:(jlong)newMillis;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeLocalTime)

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_MIDNIGHT_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalTime, MIDNIGHT_, OrgJodaTimeLocalTime *)

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_now();

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_(NSString *str);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(jlong millisOfDay);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(jlong millisOfDay, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_init(OrgJodaTimeLocalTime *self);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithLong_(OrgJodaTimeLocalTime *self, jlong instant);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_(jlong instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithId_(OrgJodaTimeLocalTime *self, id instant);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_(id instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeLocalTime)

/*!
 @brief LocalTime.Property binds a LocalTime to a DateTimeField allowing
 powerful datetime functionality to be easily accessed.
 <p>
 The simplest use of this class is as an alternative get method, here used to
 get the minute '30'.
 @code

  LocalTime dt = new LocalTime(12, 30);
  int year = dt.minuteOfHour().get();
  
@endcode
 <p>
 Methods are also provided that allow time modification. These return
 new instances of LocalTime - they do not modify the original. The example
 below yields two independent immutable date objects 2 hours apart.
 @code

  LocalTime dt1230 = new LocalTime(12, 30);
  LocalTime dt1430 = dt1230.hourOfDay().setCopy(14);
  
@endcode
 <p>
 LocalTime.Property itself is thread-safe and immutable, as well as the
 LocalTime being operated on.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.3
 */
@interface OrgJodaTimeLocalTime_Property : OrgJodaTimeFieldAbstractReadableInstantFieldProperty

#pragma mark Public

/*!
 @brief Adds to this field in a copy of this LocalTime.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param value  the value to add to the field in the copy
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)addCopyWithInt:(jint)value;

/*!
 @brief Adds to this field in a copy of this LocalTime.
 If the addition exceeds the maximum value (eg. 23:59) it will
 wrap to the minimum value (eg. 00:00).
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param value  the value to add to the field in the copy
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)addCopyWithLong:(jlong)value;

/*!
 @brief Adds to this field in a copy of this LocalTime.
 If the addition exceeds the maximum value (eg. 23:59) then
 an exception will be thrown.
 Contrast this behaviour to <code>addCopy(int)</code>.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param value  the value to add to the field in the copy
 @return a copy of the LocalTime with the field value changed
 @throws IllegalArgumentException if the result is invalid
 */
- (OrgJodaTimeLocalTime *)addNoWrapToCopyWithInt:(jint)value;

/*!
 @brief Adds to this field, possibly wrapped, in a copy of this LocalTime.
 A field wrapped operation only changes this field.
 Thus 10:59 plusWrapField one minute goes to 10:00.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param value  the value to add to the field in the copy
 @return a copy of the LocalTime with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalTime *)addWrapFieldToCopyWithInt:(jint)value;

/*!
 @brief Gets the field being used.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/*!
 @brief Gets the LocalTime object linked to this property.
 @return the linked LocalTime
 */
- (OrgJodaTimeLocalTime *)getLocalTime;

/*!
 @brief Rounds to the highest whole unit of this field on a copy of this
 LocalTime.
 <p>
 For example, rounding floor on the hourOfDay field of a LocalTime
 where the time is 10:30 would result in new LocalTime with the
 time of 11:00.
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)roundCeilingCopy;

/*!
 @brief Rounds to the lowest whole unit of this field on a copy of this
 LocalTime.
 <p>
 For example, rounding floor on the hourOfDay field of a LocalTime
 where the time is 10:30 would result in new LocalTime with the
 time of 10:00.
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)roundFloorCopy;

/*!
 @brief Rounds to the nearest whole unit of this field on a copy of this
 LocalTime, favoring the ceiling if halfway.
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)roundHalfCeilingCopy;

/*!
 @brief Rounds to the nearest whole unit of this field on a copy of this
 LocalTime.
 If halfway, the ceiling is favored over the floor
 only if it makes this field's value even.
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)roundHalfEvenCopy;

/*!
 @brief Rounds to the nearest whole unit of this field on a copy of this
 LocalTime, favoring the floor if halfway.
 @return a copy of the LocalTime with the field value changed
 */
- (OrgJodaTimeLocalTime *)roundHalfFloorCopy;

/*!
 @brief Sets this field in a copy of the LocalTime.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param value  the value to set the field in the copy to
 @return a copy of the LocalTime with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalTime *)setCopyWithInt:(jint)value;

/*!
 @brief Sets this field in a copy of the LocalTime to a parsed text value.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param text  the text value to set
 @return a copy of the LocalTime with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text;

/*!
 @brief Sets this field in a copy of the LocalTime to a parsed text value.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @param text  the text value to set
 @param locale  optional locale to use for selecting a text symbol
 @return a copy of the LocalTime with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a new LocalTime with this field set to the maximum value
 for this field.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @return a copy of the LocalTime with this field set to its maximum
 */
- (OrgJodaTimeLocalTime *)withMaximumValue;

/*!
 @brief Returns a new LocalTime with this field set to the minimum value
 for this field.
 <p>
 The LocalTime attached to this property is unchanged by this call.
 @return a copy of the LocalTime with this field set to its minimum
 */
- (OrgJodaTimeLocalTime *)withMinimumValue;

#pragma mark Protected

/*!
 @brief Gets the chronology of the datetime that this property is linked to.
 @return the chronology
 @since 1.4
 */
- (OrgJodaTimeChronology *)getChronology;

/*!
 @brief Gets the milliseconds of the time that this property is linked to.
 @return the milliseconds
 */
- (jlong)getMillis;

#pragma mark Package-Private

/*!
 @brief Constructor.
 @param instant  the instant to set
 @param field  the field to use
 */
- (instancetype)initWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeLocalTime_Property)

FOUNDATION_EXPORT void OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime_Property *self, OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field);

FOUNDATION_EXPORT OrgJodaTimeLocalTime_Property *new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeLocalTime_Property)

#endif // _OrgJodaTimeLocalTime_H_
