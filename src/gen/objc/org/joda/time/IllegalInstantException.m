//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/joda-time/src/main/java/org/joda/time/IllegalInstantException.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "org/joda/time/IllegalInstantException.h"
#include "org/joda/time/Instant.h"
#include "org/joda/time/format/DateTimeFormat.h"
#include "org/joda/time/format/DateTimeFormatter.h"

@interface OrgJodaTimeIllegalInstantException ()

+ (NSString *)createMessageWithLong:(jlong)instantLocal
                       withNSString:(NSString *)zoneId;

@end

inline jlong OrgJodaTimeIllegalInstantException_get_serialVersionUID(void);
#define OrgJodaTimeIllegalInstantException_serialVersionUID 2858712538216LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeIllegalInstantException, serialVersionUID, jlong)

__attribute__((unused)) static NSString *OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(jlong instantLocal, NSString *zoneId);

@implementation OrgJodaTimeIllegalInstantException

- (instancetype)initWithNSString:(NSString *)message {
  OrgJodaTimeIllegalInstantException_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithLong:(jlong)instantLocal
                withNSString:(NSString *)zoneId {
  OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(self, instantLocal, zoneId);
  return self;
}

+ (NSString *)createMessageWithLong:(jlong)instantLocal
                       withNSString:(NSString *)zoneId {
  return OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(instantLocal, zoneId);
}

+ (jboolean)isIllegalInstantWithJavaLangThrowable:(JavaLangThrowable *)ex {
  return OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_(ex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithLong:withNSString:);
  methods[2].selector = @selector(createMessageWithLong:withNSString:);
  methods[3].selector = @selector(isIllegalInstantWithJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeIllegalInstantException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "JLNSString;", "createMessage", "isIllegalInstant", "LJavaLangThrowable;" };
  static const J2ObjcClassInfo _OrgJodaTimeIllegalInstantException = { "IllegalInstantException", "org.joda.time", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeIllegalInstantException;
}

@end

void OrgJodaTimeIllegalInstantException_initWithNSString_(OrgJodaTimeIllegalInstantException *self, NSString *message) {
  JavaLangIllegalArgumentException_initWithNSString_(self, message);
}

OrgJodaTimeIllegalInstantException *new_OrgJodaTimeIllegalInstantException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalInstantException, initWithNSString_, message)
}

OrgJodaTimeIllegalInstantException *create_OrgJodaTimeIllegalInstantException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalInstantException, initWithNSString_, message)
}

void OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(OrgJodaTimeIllegalInstantException *self, jlong instantLocal, NSString *zoneId) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(instantLocal, zoneId));
}

OrgJodaTimeIllegalInstantException *new_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(jlong instantLocal, NSString *zoneId) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalInstantException, initWithLong_withNSString_, instantLocal, zoneId)
}

OrgJodaTimeIllegalInstantException *create_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(jlong instantLocal, NSString *zoneId) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalInstantException, initWithLong_withNSString_, instantLocal, zoneId)
}

NSString *OrgJodaTimeIllegalInstantException_createMessageWithLong_withNSString_(jlong instantLocal, NSString *zoneId) {
  OrgJodaTimeIllegalInstantException_initialize();
  NSString *localDateTime = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSS"))) printWithOrgJodaTimeReadableInstant:create_OrgJodaTimeInstant_initWithLong_(instantLocal)];
  NSString *zone = (zoneId != nil ? JreStrcat("$$C", @" (", zoneId, ')') : @"");
  return JreStrcat("$$$", @"Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", localDateTime, zone);
}

jboolean OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_(JavaLangThrowable *ex) {
  OrgJodaTimeIllegalInstantException_initialize();
  if ([ex isKindOfClass:[OrgJodaTimeIllegalInstantException class]]) {
    return true;
  }
  while ([((JavaLangThrowable *) nil_chk(ex)) getCause] != nil && [ex getCause] != ex) {
    return OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_([ex getCause]);
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeIllegalInstantException)
