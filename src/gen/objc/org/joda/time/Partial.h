//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/Partial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimePartial_INCLUDE_ALL")
#ifdef OrgJodaTimePartial_RESTRICT
#define OrgJodaTimePartial_INCLUDE_ALL 0
#else
#define OrgJodaTimePartial_INCLUDE_ALL 1
#endif
#undef OrgJodaTimePartial_RESTRICT

#if !defined (OrgJodaTimePartial_) && (OrgJodaTimePartial_INCLUDE_ALL || defined(OrgJodaTimePartial_INCLUDE))
#define OrgJodaTimePartial_

#define OrgJodaTimeBaseAbstractPartial_RESTRICT 1
#define OrgJodaTimeBaseAbstractPartial_INCLUDE 1
#include "org/joda/time/base/AbstractPartial.h"

#define OrgJodaTimeReadablePartial_RESTRICT 1
#define OrgJodaTimeReadablePartial_INCLUDE 1
#include "org/joda/time/ReadablePartial.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimePartial_Property;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief Partial is an immutable partial datetime supporting any set of datetime fields.
 <p>
 A Partial instance can be used to hold any combination of fields.
 The instance does not contain a time zone, so any datetime is local.
 <p>
 A Partial can be matched against an instant using <code>isMatch(ReadableInstant)</code>.
 This method compares each field on this partial with those of the instant
 and determines if the partial matches the instant.
 Given this definition, an empty Partial instance represents any datetime
 and always matches.
 <p>
 Calculations on Partial are performed using a <code>Chronology</code>.
 This chronology is set to be in the UTC time zone for all calculations.
 <p>
 Each individual field can be queried in two ways:
 <ul>
 <li><code>get(DateTimeFieldType.monthOfYear())</code>
 <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>
 </ul>
 The second technique also provides access to other useful methods on the
 field:
 <ul>
 <li>numeric value - <code>monthOfYear().get()</code>
 <li>text value - <code>monthOfYear().getAsText()</code>
 <li>short text value - <code>monthOfYear().getAsShortText()</code>
 <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
 <li>add/subtract - <code>monthOfYear().addToCopy()</code>
 <li>set - <code>monthOfYear().setCopy()</code>
 </ul>
 <p>
 Partial is thread-safe and immutable, provided that the Chronology is as well.
 All standard Chronology classes supplied are thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.1
 */
@interface OrgJodaTimePartial : OrgJodaTimeBaseAbstractPartial < OrgJodaTimeReadablePartial, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a Partial with no fields or values, which can be considered
 to represent any date.
 <p>
 This is most useful when constructing partials, for example:
 @code

  Partial p = new Partial()
     .with(DateTimeFieldType.dayOfWeek(), 5)
     .with(DateTimeFieldType.hourOfDay(), 12)
     .with(DateTimeFieldType.minuteOfHour(), 20);
  
@endcode
 Note that, although this is a clean way to write code, it is fairly
 inefficient internally.
 <p>
 The constructor uses the default ISO chronology.
 */
- (instancetype)init;

/*!
 @brief Constructs a Partial with no fields or values, which can be considered
 to represent any date.
 <p>
 This is most useful when constructing partials, for example:
 @code

  Partial p = new Partial(chrono)
     .with(DateTimeFieldType.dayOfWeek(), 5)
     .with(DateTimeFieldType.hourOfDay(), 12)
     .with(DateTimeFieldType.minuteOfHour(), 20);
  
@endcode
 Note that, although this is a clean way to write code, it is fairly
 inefficient internally.
 @param chrono  the chronology, null means ISO
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Constructs a Partial with the specified field and value.
 <p>
 The constructor uses the default ISO chronology.
 @param type  the single type to create the partial from, not null
 @param value  the value to store
 @throws IllegalArgumentException if the type or value is invalid
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)value;

/*!
 @brief Constructs a Partial with the specified field and value.
 <p>
 The constructor uses the specified chronology.
 @param type  the single type to create the partial from, not null
 @param value  the value to store
 @param chronology  the chronology, null means ISO
 @throws IllegalArgumentException if the type or value is invalid
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)value
                           withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs a Partial with the specified fields and values.
 The fields must be specified in the order largest to smallest.
 For year and weekyear fields with equal duration, year is defined
 as being larger than weekyear.
 <p>
 The constructor uses the specified chronology.
 @param types  the types to create the partial from, not null
 @param values  the values to store, not null
 @throws IllegalArgumentException if the types or values are invalid
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                             withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs a Partial with the specified fields and values.
 The fields must be specified in the order largest to smallest.
 For year and weekyear fields with equal duration, year is defined
 as being larger than weekyear.
 <p>
 The constructor uses the specified chronology.
 @param types  the types to create the partial from, not null
 @param values  the values to store, not null
 @param chronology  the chronology, null means ISO
 @throws IllegalArgumentException if the types or values are invalid
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                             withIntArray:(IOSIntArray *)values
                                withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs a Partial by copying all the fields and types from
 another partial.
 <p>
 This is most useful when copying from a YearMonthDay or TimeOfDay.
 */
- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Gets the chronology of the partial which is never null.
 <p>
 The <code>Chronology</code> is the calculation engine behind the partial and
 provides conversion and validation of the fields in a particular calendar system.
 @return the chronology, never null
 */
- (OrgJodaTimeChronology *)getChronology;

/*!
 @brief Gets the field type at the specified index.
 @param index  the index to retrieve
 @return the field at the specified index
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index;

/*!
 @brief Gets an array of the field type of each of the fields that
 this partial supports.
 <p>
 The fields are returned largest to smallest.
 @return the array of field types (cloned), largest to smallest
 */
- (IOSObjectArray *)getFieldTypes;

/*!
 @brief Gets a formatter suitable for the fields in this partial.
 <p>
 If there is no appropriate ISO format, null is returned.
 This method may return a formatter that does not display all the
 fields of the partial. This might occur when you have overlapping
 fields, such as dayOfWeek and dayOfMonth.
 @return a formatter suitable for the fields in this partial, null
 if none is suitable
 */
- (OrgJodaTimeFormatDateTimeFormatter *)getFormatter;

/*!
 @brief Gets the value of the field at the specified index.
 @param index  the index
 @return the value
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (jint)getValueWithInt:(jint)index;

/*!
 @brief Gets an array of the value of each of the fields that
 this partial supports.
 <p>
 The fields are returned largest to smallest.
 Each value corresponds to the same array index as <code>getFieldTypes()</code>
 @return the current values of each field (cloned), largest to smallest
 */
- (IOSIntArray *)getValues;

/*!
 @brief Does this partial match the specified instant.
 <p>
 A match occurs when all the fields of this partial are the same as the
 corresponding fields on the specified instant.
 @param instant  an instant to check against, null means now in default zone
 @return true if this partial matches the specified instant
 */
- (jboolean)isMatchWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/*!
 @brief Does this partial match the specified partial.
 <p>
 A match occurs when all the fields of this partial are the same as the
 corresponding fields on the specified partial.
 @param partial  a partial to check against, must not be null
 @return true if this partial matches the specified partial
 @throws IllegalArgumentException if the partial is null
 @throws IllegalArgumentException if the fields of the two partials do not match
 @since 1.5
 */
- (jboolean)isMatchWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/*!
 @brief Gets a copy of this instance with the specified period take away.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 @param period  the period to reduce this instant by
 @return a copy of this instance with the period taken away
 @throws ArithmeticException if the new datetime exceeds the capacity of a long
 */
- (OrgJodaTimePartial *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Gets a copy of this instance with the specified period added.
 <p>
 If the amount is zero or null, then <code>this</code> is returned.
 @param period  the duration to add to this one, null means zero
 @return a copy of this instance with the period added
 @throws ArithmeticException if the new datetime exceeds the capacity of a long
 */
- (OrgJodaTimePartial *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Gets the property object for the specified type, which contains
 many useful methods for getting and manipulating the partial.
 <p>
 See also <code>ReadablePartial.get(DateTimeFieldType)</code>.
 @param type  the field type to get the property for, not null
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimePartial_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Gets the number of fields in this partial.
 @return the field count
 */
- (jint)size;

/*!
 @brief Output the date in an appropriate ISO8601 format.
 <p>
 This method will output the partial in one of two ways.
 If <code>getFormatter()</code>
 <p>
 If there is no appropriate ISO format a dump of the fields is output
 via <code>toStringList()</code>.
 @return ISO8601 formatted string
 */
- (NSString *)description;

/*!
 @brief Output the date using the specified format pattern.
 Unsupported fields will appear as special unicode characters.
 @param pattern  the pattern specification, null means use <code>toString</code>
 - seealso: org.joda.time.format.DateTimeFormat
 */
- (NSString *)toStringWithNSString:(NSString *)pattern;

/*!
 @brief Output the date using the specified format pattern.
 Unsupported fields will appear as special unicode characters.
 @param pattern  the pattern specification, null means use <code>toString</code>
 @param locale  Locale to use, null means default
 - seealso: org.joda.time.format.DateTimeFormat
 */
- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets a string version of the partial that lists all the fields.
 <p>
 This method exists to provide a better debugging toString than
 the standard toString. This method lists all the fields and their
 values in a style similar to the collections framework.
 @return a toString format that lists all the fields
 */
- (NSString *)toStringList;

/*!
 @brief Gets a copy of this date with the specified field set to a new value.
 <p>
 If this partial did not previously support the field, the new one will.
 Contrast this behaviour with <code>withField(DateTimeFieldType,int)</code>.
 <p>
 For example, if the field type is <code>dayOfMonth</code> then the day
 would be changed/added in the returned instance.
 @param fieldType  the field type to set, not null
 @param value  the value to set
 @return a copy of this instance with the field set
 @throws IllegalArgumentException if the value is null or invalid
 */
- (OrgJodaTimePartial *)withWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                     withInt:(jint)value;

/*!
 @brief Creates a new Partial instance with the specified chronology.
 This instance is immutable and unaffected by this method call.
 <p>
 This method retains the values of the fields, thus the result will
 typically refer to a different instant.
 <p>
 The time zone of the specified chronology is ignored, as Partial
 operates without a time zone.
 @param newChronology  the new chronology, null means ISO
 @return a copy of this datetime with a different chronology
 @throws IllegalArgumentException if the values are invalid for the new chronology
 */
- (OrgJodaTimePartial *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology;

/*!
 @brief Gets a copy of this Partial with the specified field set to a new value.
 <p>
 If this partial does not support the field, an exception is thrown.
 Contrast this behaviour with <code>with(DateTimeFieldType,int)</code>.
 <p>
 For example, if the field type is <code>dayOfMonth</code> then the day
 would be changed in the returned instance if supported.
 @param fieldType  the field type to set, not null
 @param value  the value to set
 @return a copy of this instance with the field set
 @throws IllegalArgumentException if the value is null or invalid
 */
- (OrgJodaTimePartial *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                          withInt:(jint)value;

/*!
 @brief Gets a copy of this Partial with the value of the specified field increased.
 If this partial does not support the field, an exception is thrown.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 The addition will overflow into larger fields (eg. minute to hour).
 However, it will not wrap around if the top maximum is reached.
 @param fieldType  the field type to add to, not null
 @param amount  the amount to add
 @return a copy of this instance with the field updated
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the new datetime exceeds the capacity
 */
- (OrgJodaTimePartial *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                               withInt:(jint)amount;

/*!
 @brief Gets a copy of this Partial with the value of the specified field increased.
 If this partial does not support the field, an exception is thrown.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 The addition will overflow into larger fields (eg. minute to hour).
 If the maximum is reached, the addition will wra.
 @param fieldType  the field type to add to, not null
 @param amount  the amount to add
 @return a copy of this instance with the field updated
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the new datetime exceeds the capacity
 */
- (OrgJodaTimePartial *)withFieldAddWrappedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                    withInt:(jint)amount;

/*!
 @brief Gets a copy of this date with the specified field removed.
 <p>
 If this partial did not previously support the field, no error occurs.
 @param fieldType  the field type to remove, may be null
 @return a copy of this instance with the field removed
 */
- (OrgJodaTimePartial *)withoutWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

/*!
 @brief Gets a copy of this Partial with the specified period added.
 <p>
 If the addition is zero, then <code>this</code> is returned.
 Fields in the period that aren't present in the partial are ignored.
 <p>
 This method is typically used to add multiple copies of complex
 period instances. Adding one field is best achieved using the method
 <code>withFieldAdded(DurationFieldType,int)</code>.
 @param period  the period to add to this one, null means zero
 @param scalar  the amount of times to add, such as -1 to subtract once
 @return a copy of this instance with the period added
 @throws ArithmeticException if the new datetime exceeds the capacity
 */
- (OrgJodaTimePartial *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                             withInt:(jint)scalar;

#pragma mark Protected

/*!
 @brief Gets the field for a specific index in the chronology specified.
 @param index  the index to retrieve
 @param chrono  the chronology to use
 @return the field
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

#pragma mark Package-Private

/*!
 @brief Constructs a Partial with the specified chronology, fields and values.
 This constructor assigns and performs no validation.
 @param chronology  the chronology
 @param types  the types to create the partial from
 @param values  the values to store
 @throws IllegalArgumentException if the types or values are invalid
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
        withOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                 withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs a Partial with the specified values.
 This constructor assigns and performs no validation.
 @param partial  the partial to copy
 @param values  the values to store
 @throws IllegalArgumentException if the types or values are invalid
 */
- (instancetype)initWithOrgJodaTimePartial:(OrgJodaTimePartial *)partial
                              withIntArray:(IOSIntArray *)values;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimePartial)

FOUNDATION_EXPORT void OrgJodaTimePartial_init(OrgJodaTimePartial *self);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_init();

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimePartial *self, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimePartial *self, OrgJodaTimeDateTimeFieldType *type, jint value);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeFieldType *type, jint value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeFieldType *type, jint value);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimePartial *self, OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimePartial *self, IOSObjectArray *types, IOSIntArray *values);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(IOSObjectArray *types, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(IOSObjectArray *types, IOSIntArray *values);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(OrgJodaTimePartial *self, IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(OrgJodaTimePartial *self, id<OrgJodaTimeReadablePartial> partial);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *self, OrgJodaTimePartial *partial, IOSIntArray *values);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *partial, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *partial, IOSIntArray *values);

FOUNDATION_EXPORT void OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimePartial *self, OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values);

FOUNDATION_EXPORT OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimePartial)

#endif

#if !defined (OrgJodaTimePartial_Property_) && (OrgJodaTimePartial_INCLUDE_ALL || defined(OrgJodaTimePartial_Property_INCLUDE))
#define OrgJodaTimePartial_Property_

#define OrgJodaTimeFieldAbstractPartialFieldProperty_RESTRICT 1
#define OrgJodaTimeFieldAbstractPartialFieldProperty_INCLUDE 1
#include "org/joda/time/field/AbstractPartialFieldProperty.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class JavaUtilLocale;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimePartial;
@protocol OrgJodaTimeReadablePartial;

/*!
 @brief The property class for <code>Partial</code>.
 <p>
 This class binds a <code>Partial</code> to a <code>DateTimeField</code>.
 @author Stephen Colebourne
 @since 1.1
 */
@interface OrgJodaTimePartial_Property : OrgJodaTimeFieldAbstractPartialFieldProperty < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Adds to the value of this field in a copy of this Partial.
 <p>
 The value will be added to this field. If the value is too large to be
 added solely to this field then it will affect larger fields.
 Smaller fields are unaffected.
 <p>
 If the result would be too large, beyond the maximum year, then an
 IllegalArgumentException is thrown.
 <p>
 The Partial attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param valueToAdd  the value to add to the field in the copy
 @return a copy of the Partial with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimePartial *)addToCopyWithInt:(jint)valueToAdd;

/*!
 @brief Adds to the value of this field in a copy of this Partial wrapping
 within this field if the maximum value is reached.
 <p>
 The value will be added to this field. If the value is too large to be
 added solely to this field then it wraps within this field.
 Other fields are unaffected.
 <p>
 For example,
 <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.
 <p>
 The Partial attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param valueToAdd  the value to add to the field in the copy
 @return a copy of the Partial with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimePartial *)addWrapFieldToCopyWithInt:(jint)valueToAdd;

/*!
 @brief Gets the value of this field.
 @return the field value
 */
- (jint)get;

/*!
 @brief Gets the field that this property uses.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/*!
 @brief Gets the partial that this property belongs to.
 @return the partial
 */
- (OrgJodaTimePartial *)getPartial;

/*!
 @brief Sets this field in a copy of the Partial.
 <p>
 The Partial attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param value  the value to set the field in the copy to
 @return a copy of the Partial with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimePartial *)setCopyWithInt:(jint)value;

/*!
 @brief Sets this field in a copy of the Partial to a parsed text value.
 <p>
 The Partial attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param text  the text value to set
 @return a copy of the Partial with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimePartial *)setCopyWithNSString:(NSString *)text;

/*!
 @brief Sets this field in a copy of the Partial to a parsed text value.
 <p>
 The Partial attached to this property is unchanged by this call.
 Instead, a new instance is returned.
 @param text  the text value to set
 @param locale  optional locale to use for selecting a text symbol
 @return a copy of the Partial with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimePartial *)setCopyWithNSString:(NSString *)text
                         withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a new Partial with this field set to the maximum value
 for this field.
 <p>
 The Partial attached to this property is unchanged by this call.
 @return a copy of the Partial with this field set to its maximum
 @since 1.2
 */
- (OrgJodaTimePartial *)withMaximumValue;

/*!
 @brief Returns a new Partial with this field set to the minimum value
 for this field.
 <p>
 The Partial attached to this property is unchanged by this call.
 @return a copy of the Partial with this field set to its minimum
 @since 1.2
 */
- (OrgJodaTimePartial *)withMinimumValue;

#pragma mark Protected

/*!
 @brief Gets the partial that this property belongs to.
 @return the partial
 */
- (id<OrgJodaTimeReadablePartial>)getReadablePartial;

#pragma mark Package-Private

/*!
 @brief Constructs a property.
 @param partial  the partial instance
 @param fieldIndex  the index in the partial
 */
- (instancetype)initWithOrgJodaTimePartial:(OrgJodaTimePartial *)partial
                                   withInt:(jint)fieldIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimePartial_Property)

FOUNDATION_EXPORT void OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial_Property *self, OrgJodaTimePartial *partial, jint fieldIndex);

FOUNDATION_EXPORT OrgJodaTimePartial_Property *new_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial *partial, jint fieldIndex) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePartial_Property *create_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial *partial, jint fieldIndex);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimePartial_Property)

#endif

#pragma pop_macro("OrgJodaTimePartial_INCLUDE_ALL")
