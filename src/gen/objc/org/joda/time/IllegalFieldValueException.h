//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/IllegalFieldValueException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeIllegalFieldValueException")
#ifdef RESTRICT_OrgJodaTimeIllegalFieldValueException
#define INCLUDE_ALL_OrgJodaTimeIllegalFieldValueException 0
#else
#define INCLUDE_ALL_OrgJodaTimeIllegalFieldValueException 1
#endif
#undef RESTRICT_OrgJodaTimeIllegalFieldValueException

#if !defined (OrgJodaTimeIllegalFieldValueException_) && (INCLUDE_ALL_OrgJodaTimeIllegalFieldValueException || defined(INCLUDE_OrgJodaTimeIllegalFieldValueException))
#define OrgJodaTimeIllegalFieldValueException_

#define RESTRICT_JavaLangIllegalArgumentException 1
#define INCLUDE_JavaLangIllegalArgumentException 1
#include "java/lang/IllegalArgumentException.h"

@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationFieldType;

/*!
 @brief Exception thrown when attempting to set a field outside its supported range.
 @author Brian S O'Neill
 @since 1.1
 */
@interface OrgJodaTimeIllegalFieldValueException : JavaLangIllegalArgumentException

#pragma mark Public

/*!
 @brief Constructor.
 @param fieldType  type of field being set
 @param value  illegal value being set
 @param lowerBound  lower legal field value, or null if not applicable
 @param upperBound  upper legal field value, or null if not applicable
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSNumber:(NSNumber *)lowerBound
                                        withNSNumber:(NSNumber *)upperBound;

/*!
 @brief Constructor.
 @param fieldType  type of field being set
 @param value  illegal value being set
 @param explain  an explanation
 @since 1.5
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSString:(NSString *)explain;

/*!
 @brief Constructor.
 @param fieldType  type of field being set
 @param value  illegal value being set
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSString:(NSString *)value;

/*!
 @brief Constructor.
 @param fieldType  type of field being set
 @param value  illegal value being set
 @param lowerBound  lower legal field value, or null if not applicable
 @param upperBound  upper legal field value, or null if not applicable
 */
- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSNumber:(NSNumber *)lowerBound
                                        withNSNumber:(NSNumber *)upperBound;

/*!
 @brief Constructor.
 @param fieldType  type of field being set
 @param value  illegal value being set
 */
- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                        withNSString:(NSString *)value;

/*!
 @brief Constructor.
 @param fieldName  name of field being set
 @param value  illegal value being set
 @param lowerBound  lower legal field value, or null if not applicable
 @param upperBound  upper legal field value, or null if not applicable
 */
- (instancetype)initWithNSString:(NSString *)fieldName
                    withNSNumber:(NSNumber *)value
                    withNSNumber:(NSNumber *)lowerBound
                    withNSNumber:(NSNumber *)upperBound;

/*!
 @brief Constructor.
 @param fieldName  name of field being set
 @param value  illegal value being set
 */
- (instancetype)initWithNSString:(NSString *)fieldName
                    withNSString:(NSString *)value;

/*!
 @brief Returns the DateTimeFieldType whose value was invalid, or null if not applicable.
 @return the datetime field type
 */
- (OrgJodaTimeDateTimeFieldType *)getDateTimeFieldType;

/*!
 @brief Returns the DurationFieldType whose value was invalid, or null if not applicable.
 @return the duration field type
 */
- (OrgJodaTimeDurationFieldType *)getDurationFieldType;

/*!
 @brief Returns the name of the field whose value was invalid.
 @return the field name
 */
- (NSString *)getFieldName;

/*!
 @brief Returns the illegal integer value assigned to the field, or null if not applicable.
 @return the value
 */
- (NSNumber *)getIllegalNumberValue;

/*!
 @brief Returns the illegal string value assigned to the field, or null if not applicable.
 @return the value
 */
- (NSString *)getIllegalStringValue;

/*!
 @brief Returns the illegal value assigned to the field as a non-null string.
 @return the value
 */
- (NSString *)getIllegalValueAsString;

/*!
 @brief Returns the lower bound of the legal value range, or null if not applicable.
 @return the lower bound
 */
- (NSNumber *)getLowerBound;

- (NSString *)getMessage;

/*!
 @brief Returns the upper bound of the legal value range, or null if not applicable.
 @return the upper bound
 */
- (NSNumber *)getUpperBound;

/*!
 @brief Provide additional detail by prepending a message to the existing message.
 A colon is separator is automatically inserted between the messages.
 @since 1.3
 */
- (void)prependMessageWithNSString:(NSString *)message;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeIllegalFieldValueException)

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound);

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSString *explain);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSString *explain) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSString *explain);

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDurationFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDurationFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDurationFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound);

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeIllegalFieldValueException *self, NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound);

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDateTimeFieldType *fieldType, NSString *value);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSString *value);

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDurationFieldType *fieldType, NSString *value);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(OrgJodaTimeDurationFieldType *fieldType, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(OrgJodaTimeDurationFieldType *fieldType, NSString *value);

FOUNDATION_EXPORT void OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(OrgJodaTimeIllegalFieldValueException *self, NSString *fieldName, NSString *value);

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(NSString *fieldName, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(NSString *fieldName, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeIllegalFieldValueException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeIllegalFieldValueException")
