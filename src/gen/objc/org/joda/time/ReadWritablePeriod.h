//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/ReadWritablePeriod.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeReadWritablePeriod")
#ifdef RESTRICT_OrgJodaTimeReadWritablePeriod
#define INCLUDE_ALL_OrgJodaTimeReadWritablePeriod 0
#else
#define INCLUDE_ALL_OrgJodaTimeReadWritablePeriod 1
#endif
#undef RESTRICT_OrgJodaTimeReadWritablePeriod

#if !defined (OrgJodaTimeReadWritablePeriod_) && (INCLUDE_ALL_OrgJodaTimeReadWritablePeriod || defined(INCLUDE_OrgJodaTimeReadWritablePeriod))
#define OrgJodaTimeReadWritablePeriod_

#define RESTRICT_OrgJodaTimeReadablePeriod 1
#define INCLUDE_OrgJodaTimeReadablePeriod 1
#include "org/joda/time/ReadablePeriod.h"

@class OrgJodaTimeDurationFieldType;
@protocol OrgJodaTimeReadableInterval;

/*!
 @brief Defines a duration of time that can be queried and modified using datetime fields.
 <p>
  The implementation of this interface will be mutable.
  It may provide more advanced methods than those in the interface.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@protocol OrgJodaTimeReadWritablePeriod < OrgJodaTimeReadablePeriod, JavaObject >

/*!
 @brief Clears the period, setting all values back to zero.
 */
- (void)clear;

/*!
 @brief Sets the value of one of the fields by index.
 @param index the field index
 @param value the new value for the field
 @throw IndexOutOfBoundsExceptionif the index is invalid
 */
- (void)setValueWithInt:(jint)index
                withInt:(jint)value;

/*!
 @brief Sets the value of one of the fields.
 <p>
  The field type specified must be one of those that is supported by the period.
 @param field a DurationFieldType instance that is supported by this period
 @param value the new value for the field
 @throw IllegalArgumentExceptionif the field is null or not supported
 */
- (void)setWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                    withInt:(jint)value;

/*!
 @brief Sets all the fields in one go from another ReadablePeriod.
 @param period the period to set, null means zero length period
 @throw IllegalArgumentExceptionif an unsupported field's value is non-zero
 */
- (void)setPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Sets all the fields in one go.
 @param years amount of years in this period, which must be zero if unsupported
 @param months amount of months in this period, which must be zero if unsupported
 @param weeks amount of weeks in this period, which must be zero if unsupported
 @param days amount of days in this period, which must be zero if unsupported
 @param hours amount of hours in this period, which must be zero if unsupported
 @param minutes amount of minutes in this period, which must be zero if unsupported
 @param seconds amount of seconds in this period, which must be zero if unsupported
 @param millis amount of milliseconds in this period, which must be zero if unsupported
 @throw IllegalArgumentExceptionif an unsupported field's value is non-zero
 */
- (void)setPeriodWithInt:(jint)years
                 withInt:(jint)months
                 withInt:(jint)weeks
                 withInt:(jint)days
                 withInt:(jint)hours
                 withInt:(jint)minutes
                 withInt:(jint)seconds
                 withInt:(jint)millis;

/*!
 @brief Sets all the fields in one go from an interval dividing the
  fields using the period type.
 @param interval the interval to set, null means zero length
 */
- (void)setPeriodWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval;

/*!
 @brief Adds to the value of one of the fields.
 <p>
  The field type specified must be one of those that is supported by the period.
 @param field a DurationFieldType instance that is supported by this period
 @param value the value to add to the field
 @throw IllegalArgumentExceptionif the field is null or not supported
 */
- (void)addWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                    withInt:(jint)value;

/*!
 @brief Adds a period to this one by adding each field in turn.
 @param period the period to add, null means add nothing
 @throw IllegalArgumentExceptionif the period being added contains a field
  not supported by this period
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Adds to each field of this period.
 @param years amount of years to add to this period, which must be zero if unsupported
 @param months amount of months to add to this period, which must be zero if unsupported
 @param weeks amount of weeks to add to this period, which must be zero if unsupported
 @param days amount of days to add to this period, which must be zero if unsupported
 @param hours amount of hours to add to this period, which must be zero if unsupported
 @param minutes amount of minutes to add to this period, which must be zero if unsupported
 @param seconds amount of seconds to add to this period, which must be zero if unsupported
 @param millis amount of milliseconds to add to this period, which must be zero if unsupported
 @throw IllegalArgumentExceptionif the period being added contains a field
  not supported by this period
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addWithInt:(jint)years
           withInt:(jint)months
           withInt:(jint)weeks
           withInt:(jint)days
           withInt:(jint)hours
           withInt:(jint)minutes
           withInt:(jint)seconds
           withInt:(jint)millis;

/*!
 @brief Adds an interval to this one by dividing the interval into
  fields and then adding each field in turn.
 @param interval the interval to add, null means add nothing
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval;

/*!
 @brief Sets the number of years of the period.
 @param years the number of years
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setYearsWithInt:(jint)years;

/*!
 @brief Adds the specified years to the number of years in the period.
 @param years the number of years
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addYearsWithInt:(jint)years;

/*!
 @brief Sets the number of months of the period.
 @param months the number of months
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setMonthsWithInt:(jint)months;

/*!
 @brief Adds the specified months to the number of months in the period.
 @param months the number of months
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addMonthsWithInt:(jint)months;

/*!
 @brief Sets the number of weeks of the period.
 @param weeks the number of weeks
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setWeeksWithInt:(jint)weeks;

/*!
 @brief Adds the specified weeks to the number of weeks in the period.
 @param weeks the number of weeks
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addWeeksWithInt:(jint)weeks;

/*!
 @brief Sets the number of days of the period.
 @param days the number of days
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setDaysWithInt:(jint)days;

/*!
 @brief Adds the specified days to the number of days in the period.
 @param days the number of days
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addDaysWithInt:(jint)days;

/*!
 @brief Sets the number of hours of the period.
 @param hours the number of hours
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setHoursWithInt:(jint)hours;

/*!
 @brief Adds the specified hours to the number of hours in the period.
 @param hours the number of hours
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addHoursWithInt:(jint)hours;

/*!
 @brief Sets the number of minutes of the period.
 @param minutes the number of minutes
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setMinutesWithInt:(jint)minutes;

/*!
 @brief Adds the specified minutes to the number of minutes in the period.
 @param minutes the number of minutes
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addMinutesWithInt:(jint)minutes;

/*!
 @brief Sets the number of seconds of the period.
 @param seconds the number of seconds
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setSecondsWithInt:(jint)seconds;

/*!
 @brief Adds the specified seconds to the number of seconds in the period.
 @param seconds the number of seconds
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addSecondsWithInt:(jint)seconds;

/*!
 @brief Sets the number of millis of the period.
 @param millis the number of millis
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 */
- (void)setMillisWithInt:(jint)millis;

/*!
 @brief Adds the specified millis to the number of millis in the period.
 @param millis the number of millis
 @throw IllegalArgumentExceptionif field is not supported and the value is non-zero
 @throw ArithmeticExceptionif the addition exceeds the capacity of the period
 */
- (void)addMillisWithInt:(jint)millis;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeReadWritablePeriod)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeReadWritablePeriod)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeReadWritablePeriod")
