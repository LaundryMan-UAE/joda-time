//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/Period.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimePeriod")
#ifdef RESTRICT_OrgJodaTimePeriod
#define INCLUDE_ALL_OrgJodaTimePeriod 0
#else
#define INCLUDE_ALL_OrgJodaTimePeriod 1
#endif
#undef RESTRICT_OrgJodaTimePeriod

#if !defined (OrgJodaTimePeriod_) && (INCLUDE_ALL_OrgJodaTimePeriod || defined(INCLUDE_OrgJodaTimePeriod))
#define OrgJodaTimePeriod_

#define RESTRICT_OrgJodaTimeBaseBasePeriod 1
#define INCLUDE_OrgJodaTimeBaseBasePeriod 1
#include "org/joda/time/base/BasePeriod.h"

#define RESTRICT_OrgJodaTimeReadablePeriod 1
#define INCLUDE_OrgJodaTimeReadablePeriod 1
#include "org/joda/time/ReadablePeriod.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class OrgJodaTimeChronology;
@class OrgJodaTimeDays;
@class OrgJodaTimeDuration;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatPeriodFormatter;
@class OrgJodaTimeHours;
@class OrgJodaTimeMinutes;
@class OrgJodaTimePeriodType;
@class OrgJodaTimeSeconds;
@class OrgJodaTimeWeeks;
@protocol OrgJodaTimeReadableDuration;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadablePartial;

/*!
 @brief An immutable time period specifying a set of duration field values.
 <p>
  A time period is divided into a number of fields, such as hours and seconds.
  Which fields are supported is defined by the PeriodType class.
  The default is the standard period type, which supports years, months, weeks, days,
  hours, minutes, seconds and millis. 
 <p>
  When this time period is added to an instant, the effect is of adding each field in turn.
  As a result, this takes into account daylight savings time.
  Adding a time period of 1 day to the day before daylight savings starts will only add
  23 hours rather than 24 to ensure that the time remains the same.
  If this is not the behaviour you want, then see <code>Duration</code>.
  <p>
  The definition of a period also affects the equals method. A period of 1
  day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.
  This is because periods represent an abstracted definition of a time period
  (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight
  savings boundary). To compare the actual duration of two periods, convert
  both to durations using toDuration, an operation that emphasises that the
  result may differ according to the date you choose. 
 <p>
  Period is thread-safe and immutable, provided that the PeriodType is as well.
  All standard PeriodType classes supplied are thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 - seealso: MutablePeriod
 */
@interface OrgJodaTimePeriod : OrgJodaTimeBaseBasePeriod < OrgJodaTimeReadablePeriod, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates a new empty period with the standard set of fields.
 <p>
  One way to initialise a period is as follows: 
 @code

  Period = new Period().withYears(6).withMonths(3).withSeconds(23); 
  
@endcode
  Bear in mind that this creates four period instances in total, three of
  which are immediately discarded.
  The alterative is more efficient, but less readable: 
 @code

  Period = new Period(6, 3, 0, 0, 0, 0, 23, 0); 
  
@endcode
  The following is also slightly less wasteful: 
 @code

  Period = Period.years(6).withMonths(3).withSeconds(23); 
  
@endcode
 */
- (instancetype)init;

/*!
 @brief Create a period from a set of field values using the standard set of fields.
 Note that the parameters specify the time fields hours, minutes,
  seconds and millis, not the date fields.
 @param hours amount of hours in this period
 @param minutes amount of minutes in this period
 @param seconds amount of seconds in this period
 @param millis amount of milliseconds in this period
 */
- (instancetype)initWithInt:(jint)hours
                    withInt:(jint)minutes
                    withInt:(jint)seconds
                    withInt:(jint)millis;

/*!
 @brief Create a period from a set of field values using the standard set of fields.
 @param years amount of years in this period
 @param months amount of months in this period
 @param weeks amount of weeks in this period
 @param days amount of days in this period
 @param hours amount of hours in this period
 @param minutes amount of minutes in this period
 @param seconds amount of seconds in this period
 @param millis amount of milliseconds in this period
 */
- (instancetype)initWithInt:(jint)years
                    withInt:(jint)months
                    withInt:(jint)weeks
                    withInt:(jint)days
                    withInt:(jint)hours
                    withInt:(jint)minutes
                    withInt:(jint)seconds
                    withInt:(jint)millis;

/*!
 @brief Create a period from a set of field values.
 <p>
  There is usually little need to use this constructor.
  The period type is used primarily to define how to split an interval into a period.
  As this constructor already is split, the period type does no real work.
 @param years amount of years in this period, which must be zero if unsupported
 @param months amount of months in this period, which must be zero if unsupported
 @param weeks amount of weeks in this period, which must be zero if unsupported
 @param days amount of days in this period, which must be zero if unsupported
 @param hours amount of hours in this period, which must be zero if unsupported
 @param minutes amount of minutes in this period, which must be zero if unsupported
 @param seconds amount of seconds in this period, which must be zero if unsupported
 @param millis amount of milliseconds in this period, which must be zero if unsupported
 @param type which set of fields this period supports, null means AllType
 @throw IllegalArgumentExceptionif an unsupported field's value is non-zero
 */
- (instancetype)initWithInt:(jint)years
                    withInt:(jint)months
                    withInt:(jint)weeks
                    withInt:(jint)days
                    withInt:(jint)hours
                    withInt:(jint)minutes
                    withInt:(jint)seconds
                    withInt:(jint)millis
  withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period from the given millisecond duration using the standard
  set of fields.
 <p>
  Only precise fields in the period type will be used.
  For the standard period type this is the time fields only.
  Thus the year, month, week and day fields will not be populated. 
 <p>
  If the duration is small, less than one day, then this method will perform
  as you might expect and split the fields evenly. 
 <p>
  If the duration is larger than one day then all the remaining duration will
  be stored in the largest available precise field, hours in this case. 
 <p>
  For example, a duration equal to (365 + 60 + 5) days will be converted to
  ((365 + 60 + 5) * 24) hours by this constructor. 
 <p>
  For more control over the conversion process, you have two options: 
 <ul>
  <li>convert the duration to an <code>Interval</code>, and from there obtain the period 
 <li>specify a period type that contains precise definitions of the day and larger
  fields, such as UTC 
 </ul>
 @param duration the duration, in milliseconds
 */
- (instancetype)initWithLong:(jlong)duration;

/*!
 @brief Creates a period from the given millisecond duration using the standard
  set of fields.
 <p>
  Only precise fields in the period type will be used.
  Imprecise fields will not be populated. 
 <p>
  If the duration is small then this method will perform
  as you might expect and split the fields evenly. 
 <p>
  If the duration is large then all the remaining duration will
  be stored in the largest available precise field.
  For details as to which fields are precise, review the period type javadoc.
 @param duration the duration, in milliseconds
 @param chronology the chronology to use to split the duration, null means ISO default
 */
- (instancetype)initWithLong:(jlong)duration
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Creates a period from the given interval endpoints using the standard
  set of fields.
 @param startInstant interval start, in milliseconds
 @param endInstant interval end, in milliseconds
 */
- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant;

/*!
 @brief Creates a period from the given interval endpoints using the standard
  set of fields.
 @param startInstant interval start, in milliseconds
 @param endInstant interval end, in milliseconds
 @param chrono the chronology to use, null means ISO in default zone
 */
- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Creates a period from the given interval endpoints.
 @param startInstant interval start, in milliseconds
 @param endInstant interval end, in milliseconds
 @param type which set of fields this period supports, null means standard
 */
- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period from the given interval endpoints.
 @param startInstant interval start, in milliseconds
 @param endInstant interval end, in milliseconds
 @param type which set of fields this period supports, null means standard
 @param chrono the chronology to use, null means ISO in default zone
 */
- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Creates a period from the given millisecond duration.
 <p>
  Only precise fields in the period type will be used.
  Imprecise fields will not be populated. 
 <p>
  If the duration is small then this method will perform
  as you might expect and split the fields evenly. 
 <p>
  If the duration is large then all the remaining duration will
  be stored in the largest available precise field.
  For details as to which fields are precise, review the period type javadoc.
 @param duration the duration, in milliseconds
 @param type which set of fields this period supports, null means standard
 */
- (instancetype)initWithLong:(jlong)duration
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period from the given millisecond duration.
 <p>
  Only precise fields in the period type will be used.
  Imprecise fields will not be populated. 
 <p>
  If the duration is small then this method will perform
  as you might expect and split the fields evenly. 
 <p>
  If the duration is large then all the remaining duration will
  be stored in the largest available precise field.
  For details as to which fields are precise, review the period type javadoc.
 @param duration the duration, in milliseconds
 @param type which set of fields this period supports, null means standard
 @param chronology the chronology to use to split the duration, null means ISO default
 */
- (instancetype)initWithLong:(jlong)duration
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Creates a period by converting or copying from another object.
 <p>
  The recognised object types are defined in 
 <code>ConverterManager</code> and
  include ReadablePeriod, ReadableInterval and String.
  The String formats are described by <code>ISOPeriodFormat.standard()</code>.
 @param period period to convert
 @throw IllegalArgumentExceptionif period is invalid
 @throw UnsupportedOperationExceptionif an unsupported field's value is non-zero
 */
- (instancetype)initWithId:(id)period;

/*!
 @brief Creates a period by converting or copying from another object.
 <p>
  The recognised object types are defined in 
 <code>ConverterManager</code> and
  include ReadablePeriod, ReadableInterval and String.
  The String formats are described by <code>ISOPeriodFormat.standard()</code>.
 @param period period to convert
 @param chrono the chronology to use, null means ISO in default zone
 @throw IllegalArgumentExceptionif period is invalid
 @throw UnsupportedOperationExceptionif an unsupported field's value is non-zero
 */
- (instancetype)initWithId:(id)period
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Creates a period by converting or copying from another object.
 <p>
  The recognised object types are defined in 
 <code>ConverterManager</code> and
  include ReadablePeriod, ReadableInterval and String.
  The String formats are described by <code>ISOPeriodFormat.standard()</code>.
 @param period period to convert
 @param type which set of fields this period supports, null means use converter
 @throw IllegalArgumentExceptionif period is invalid
 @throw UnsupportedOperationExceptionif an unsupported field's value is non-zero
 */
- (instancetype)initWithId:(id)period
 withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period by converting or copying from another object.
 <p>
  The recognised object types are defined in 
 <code>ConverterManager</code> and
  include ReadablePeriod, ReadableInterval and String.
  The String formats are described by <code>ISOPeriodFormat.standard()</code>.
 @param period period to convert
 @param type which set of fields this period supports, null means use converter
 @param chrono the chronology to use, null means ISO in default zone
 @throw IllegalArgumentExceptionif period is invalid
 @throw UnsupportedOperationExceptionif an unsupported field's value is non-zero
 */
- (instancetype)initWithId:(id)period
 withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Creates a period from the given duration and end point.
 @param duration the duration of the interval, null means zero-length
 @param endInstant the interval end, null means now
 */
- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant;

/*!
 @brief Creates a period from the given duration and end point.
 @param duration the duration of the interval, null means zero-length
 @param endInstant the interval end, null means now
 @param type which set of fields this period supports, null means standard
 */
- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                          withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period from the given start point and the duration.
 @param startInstant the interval start, null means now
 @param duration the duration of the interval, null means zero-length
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/*!
 @brief Creates a period from the given start point and the duration.
 @param startInstant the interval start, null means now
 @param duration the duration of the interval, null means zero-length
 @param type which set of fields this period supports, null means standard
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period between the given instants using the standard set of fields.
 <p>
  Most calculations performed by this method have obvious results.
  The special case is where the calculation is from a "long" month to a "short" month.
  Here, the result favours increasing the months field rather than the days.
  For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
  By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days
  (exposed as 4 weeks and 2 days).
  The results are explained by considering that the start date plus the
  calculated period result in the end date.
 @param startInstant interval start, null means now
 @param endInstant interval end, null means now
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant;

/*!
 @brief Creates a period between the given instants.
 <p>
  Most calculations performed by this method have obvious results.
  The special case is where the calculation is from a "long" month to a "short" month.
  Here, the result favours increasing the months field rather than the days.
  For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
  By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.
  The results are explained by considering that the start date plus the
  calculated period result in the end date.
 @param startInstant interval start, null means now
 @param endInstant interval end, null means now
 @param type which set of fields this period supports, null means standard
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Creates a period from two partially specified times.
 <p>
  The two partials must contain the same fields, thus you can specify two 
 <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,
  but not one of each.
  As these are Partial objects, time zones have no effect on the result. 
 <p>
  The two partials must also both be contiguous - see 
 <code>DateTimeUtils.isContiguous(ReadablePartial)</code> for a definition.
  Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous. 
 <p>
  Most calculations performed by this method have obvious results.
  The special case is where the calculation is from a "long" month to a "short" month.
  Here, the result favours increasing the months field rather than the days.
  For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
  By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days
  (exposed as 4 weeks and 2 days).
  The results are explained by considering that the start date plus the
  calculated period result in the end date. 
 <p>
  An alternative way of constructing a Period from two Partials
  is <code>ReadablePartial)</code>.
  That method handles all kinds of partials.
 @param start the start of the period, must not be null
 @param end the end of the period, must not be null
 @throw IllegalArgumentExceptionif the partials are null or invalid
 @since 1.1
 */
- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                    withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end;

/*!
 @brief Creates a period from two partially specified times.
 <p>
  The two partials must contain the same fields, thus you can specify two 
 <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,
  but not one of each.
  As these are Partial objects, time zones have no effect on the result. 
 <p>
  The two partials must also both be contiguous - see 
 <code>DateTimeUtils.isContiguous(ReadablePartial)</code> for a definition.
  Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous. 
 <p>
  Most calculations performed by this method have obvious results.
  The special case is where the calculation is from a "long" month to a "short" month.
  Here, the result favours increasing the months field rather than the days.
  For example, 2013-01-31 to 2013-02-28 is treated as one whole month.
  By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.
  The results are explained by considering that the start date plus the
  calculated period result in the end date. 
 <p>
  An alternative way of constructing a Period from two Partials
  is <code>ReadablePartial)</code>.
  That method handles all kinds of partials.
 @param start the start of the period, must not be null
 @param end the end of the period, must not be null
 @param type which set of fields this period supports, null means standard
 @throw IllegalArgumentExceptionif the partials are null or invalid
 @since 1.1
 */
- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                    withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Create a period with a specified number of days.
 <p>
  The standard period type is used, thus you can add other fields such
  as months or weeks using the <code>withXxx()</code> methods.
  For example, <code>Period.days(2).withHours(6);</code>
  <p>
  If you want a day-based period that cannot have other fields added,
  then you should consider using <code>Days</code>.
 @param days the amount of days in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)daysWithInt:(jint)days;

/*!
 @brief Creates a period from two partially specified times, calculating
  by field difference.
 <p>
  The two partials must contain the same fields, thus you can specify two 
 <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,
  but not one of each. Also, the partial may not contain overlapping
  fields, such as dayOfWeek and dayOfMonth. 
 <p>
  Calculation by field difference works by extracting the difference
  one field at a time and not wrapping into other fields.
  Thus 2005-06-09/2007-04-12 will yield P1Y-2M3D. 
 <p>
  For example, you have an event that always runs from the 27th of
  each month to the 2nd of the next month. If you calculate this
  period using a standard constructor, then you will get between
  P3D and P6D depending on the month. If you use this method, then
  you will get P1M-25D. This field-difference based period can
  be successfully applied to each month of the year to obtain the
  correct end date for a given start date.
 @param start the start of the period, must not be null
 @param end the end of the period, must not be null
 @throw IllegalArgumentExceptionif the partials are null or invalid
 @since 1.1
 */
+ (OrgJodaTimePeriod *)fieldDifferenceWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                      withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end;

/*!
 @brief Gets the days field part of the period.
 @return the number of days in the period, zero if unsupported
 */
- (jint)getDays;

/*!
 @brief Gets the hours field part of the period.
 @return the number of hours in the period, zero if unsupported
 */
- (jint)getHours;

/*!
 @brief Gets the millis field part of the period.
 @return the number of millis in the period, zero if unsupported
 */
- (jint)getMillis;

/*!
 @brief Gets the minutes field part of the period.
 @return the number of minutes in the period, zero if unsupported
 */
- (jint)getMinutes;

/*!
 @brief Gets the months field part of the period.
 @return the number of months in the period, zero if unsupported
 */
- (jint)getMonths;

/*!
 @brief Gets the seconds field part of the period.
 @return the number of seconds in the period, zero if unsupported
 */
- (jint)getSeconds;

/*!
 @brief Gets the weeks field part of the period.
 @return the number of weeks in the period, zero if unsupported
 */
- (jint)getWeeks;

/*!
 @brief Gets the years field part of the period.
 @return the number of years in the period, zero if unsupported
 */
- (jint)getYears;

/*!
 @brief Create a period with a specified number of hours.
 <p>
  The standard period type is used, thus you can add other fields such
  as months or days using the <code>withXxx()</code> methods.
  For example, <code>Period.hours(2).withMinutes(30);</code>
  <p>
  If you want a hour-based period that cannot have other fields added,
  then you should consider using <code>Hours</code>.
 @param hours the amount of hours in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)hoursWithInt:(jint)hours;

/*!
 @brief Create a period with a specified number of millis.
 <p>
  The standard period type is used, thus you can add other fields such
  as days or hours using the <code>withXxx()</code> methods.
  For example, <code>Period.millis(20).withSeconds(30);</code>
 @param millis the amount of millis in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)millisWithInt:(jint)millis;

/*!
 @brief Returns a new period with the specified period subtracted.
 <p>
  Each field of the period is subtracted separately. Thus a period of
  3 hours 30 minutes minus 2 hours 40 minutes will produce a result
  of 1 hour and -10 minutes - see <code>normalizedStandard()</code>.
  <p>
  If the period being added contains a non-zero amount for a field that
  is not supported in this period then an exception is thrown. 
 <p>
  This period instance is immutable and unaffected by this method call.
 @param period the period to add, null adds zero and returns this
 @return the new updated period
 @throw UnsupportedOperationExceptionif any field is not supported
 @since 1.5
 */
- (OrgJodaTimePeriod *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a new period minus the specified number of days taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param days the amount of days to take away, may be negative
 @return the new period minus the increased days
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusDaysWithInt:(jint)days;

/*!
 @brief Returns a new period minus the specified number of hours taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param hours the amount of hours to take away, may be negative
 @return the new period minus the increased hours
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusHoursWithInt:(jint)hours;

/*!
 @brief Returns a new period minus the specified number of millis taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param millis the amount of millis to take away, may be negative
 @return the new period minus the increased millis
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusMillisWithInt:(jint)millis;

/*!
 @brief Returns a new period minus the specified number of minutes taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param minutes the amount of minutes to take away, may be negative
 @return the new period minus the increased minutes
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusMinutesWithInt:(jint)minutes;

/*!
 @brief Returns a new period minus the specified number of months taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param months the amount of months to take away, may be negative
 @return the new period minus the increased months
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusMonthsWithInt:(jint)months;

/*!
 @brief Returns a new period minus the specified number of seconds taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param seconds the amount of seconds to take away, may be negative
 @return the new period minus the increased seconds
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusSecondsWithInt:(jint)seconds;

/*!
 @brief Returns a new period minus the specified number of weeks taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param weeks the amount of weeks to take away, may be negative
 @return the new period minus the increased weeks
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusWeeksWithInt:(jint)weeks;

/*!
 @brief Returns a new period with the specified number of years taken away.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param years the amount of years to take away, may be negative
 @return the new period with the increased years
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)minusYearsWithInt:(jint)years;

/*!
 @brief Create a period with a specified number of minutes.
 <p>
  The standard period type is used, thus you can add other fields such
  as days or hours using the <code>withXxx()</code> methods.
  For example, <code>Period.minutes(2).withSeconds(30);</code>
  <p>
  If you want a minute-based period that cannot have other fields added,
  then you should consider using <code>Minutes</code>.
 @param minutes the amount of minutes in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)minutesWithInt:(jint)minutes;

/*!
 @brief Create a period with a specified number of months.
 <p>
  The standard period type is used, thus you can add other fields such
  as years or days using the <code>withXxx()</code> methods.
  For example, <code>Period.months(2).withDays(6);</code>
  <p>
  If you want a month-based period that cannot have other fields added,
  then you should consider using <code>Months</code>.
 @param months the amount of months in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)monthsWithInt:(jint)months;

/*!
 @brief Returns a new instance with each element in this period multiplied
  by the specified scalar.
 @param scalar the scalar to multiply by, not null
 @return a <code>Period</code> based on this period with the amounts multiplied by the scalar, never null
 @throw ArithmeticExceptionif the capacity of any field is exceeded
 @since 2.1
 */
- (OrgJodaTimePeriod *)multipliedByWithInt:(jint)scalar;

/*!
 @brief Returns a new instance with each amount in this period negated.
 @return a <code>Period</code> based on this period with the amounts negated, never null
 @throw ArithmeticExceptionif any field has the minimum value
 @since 2.1
 */
- (OrgJodaTimePeriod *)negated;

/*!
 @brief Normalizes this period using standard rules, assuming a 12 month year,
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to normalize a period.
  However to achieve this it makes the assumption that all years are
  12 months, all weeks are 7 days, all days are 24 hours,
  all hours are 60 minutes and all minutes are 60 seconds. This is not
  true when daylight savings time is considered, and may also not be true
  for some chronologies. However, it is included as it is a useful operation
  for many applications and business rules. 
 <p>
  If the period contains years or months, then the months will be
  normalized to be between 0 and 11. The days field and below will be
  normalized as necessary, however this will not overflow into the months
  field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
  But a period of 1 month 40 days will remain as 1 month 40 days. 
 <p>
  The result will always have a <code>PeriodType</code> of standard, thus
  days will be grouped into weeks.
 @return a normalized period equivalent to this period
 @throw ArithmeticExceptionif any field is too large to be represented
 @since 1.5
 */
- (OrgJodaTimePeriod *)normalizedStandard;

/*!
 @brief Normalizes this period using standard rules, assuming a 12 month year,
  7 day week, 24 hour day, 60 minute hour and 60 second minute,
  providing control over how the result is split into fields.
 <p>
  This method allows you to normalize a period.
  However to achieve this it makes the assumption that all years are
  12 months, all weeks are 7 days, all days are 24 hours,
  all hours are 60 minutes and all minutes are 60 seconds. This is not
  true when daylight savings time is considered, and may also not be true
  for some chronologies. However, it is included as it is a useful operation
  for many applications and business rules. 
 <p>
  If the period contains years or months, then the months will be
  normalized to be between 0 and 11. The days field and below will be
  normalized as necessary, however this will not overflow into the months
  field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
  But a period of 1 month 40 days will remain as 1 month 40 days. 
 <p>
  The PeriodType parameter controls how the result is created. It allows
  you to omit certain fields from the result if desired. For example,
  you may not want the result to include weeks, in which case you pass in 
 <code>PeriodType.yearMonthDayTime()</code>.
 @param type the period type of the new period, null means standard type
 @return a normalized period equivalent to this period
 @throw ArithmeticExceptionif any field is too large to be represented
 @throw UnsupportedOperationExceptionif this period contains non-zero
   years or months but the specified period type does not support them
 @since 1.5
 */
- (OrgJodaTimePeriod *)normalizedStandardWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Parses a <code>Period</code> from the specified string.
 <p>
  This uses <code>ISOPeriodFormat.standard()</code>.
 @param str the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimePeriod *)parseWithNSString:(NSString *)str;

/*!
 @brief Parses a <code>Period</code> from the specified string using a formatter.
 @param str the string to parse, not null
 @param formatter the formatter to use, not null
 @since 2.0
 */
+ (OrgJodaTimePeriod *)parseWithNSString:(NSString *)str
    withOrgJodaTimeFormatPeriodFormatter:(OrgJodaTimeFormatPeriodFormatter *)formatter;

/*!
 @brief Returns a new period with the specified period added.
 <p>
  Each field of the period is added separately. Thus a period of
  2 hours 30 minutes plus 3 hours 40 minutes will produce a result
  of 5 hours 70 minutes - see <code>normalizedStandard()</code>.
  <p>
  If the period being added contains a non-zero amount for a field that
  is not supported in this period then an exception is thrown. 
 <p>
  This period instance is immutable and unaffected by this method call.
 @param period the period to add, null adds zero and returns this
 @return the new updated period
 @throw UnsupportedOperationExceptionif any field is not supported
 @since 1.5
 */
- (OrgJodaTimePeriod *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a new period plus the specified number of days added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param days the amount of days to add, may be negative
 @return the new period plus the increased days
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusDaysWithInt:(jint)days;

/*!
 @brief Returns a new period plus the specified number of hours added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param hours the amount of hours to add, may be negative
 @return the new period plus the increased hours
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusHoursWithInt:(jint)hours;

/*!
 @brief Returns a new period plus the specified number of millis added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param millis the amount of millis to add, may be negative
 @return the new period plus the increased millis
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusMillisWithInt:(jint)millis;

/*!
 @brief Returns a new period plus the specified number of minutes added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param minutes the amount of minutes to add, may be negative
 @return the new period plus the increased minutes
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusMinutesWithInt:(jint)minutes;

/*!
 @brief Returns a new period plus the specified number of months added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param months the amount of months to add, may be negative
 @return the new period plus the increased months
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusMonthsWithInt:(jint)months;

/*!
 @brief Returns a new period plus the specified number of seconds added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param seconds the amount of seconds to add, may be negative
 @return the new period plus the increased seconds
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusSecondsWithInt:(jint)seconds;

/*!
 @brief Returns a new period plus the specified number of weeks added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param weeks the amount of weeks to add, may be negative
 @return the new period plus the increased weeks
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusWeeksWithInt:(jint)weeks;

/*!
 @brief Returns a new period with the specified number of years added.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param years the amount of years to add, may be negative
 @return the new period with the increased years
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)plusYearsWithInt:(jint)years;

/*!
 @brief Create a period with a specified number of seconds.
 <p>
  The standard period type is used, thus you can add other fields such
  as days or hours using the <code>withXxx()</code> methods.
  For example, <code>Period.seconds(2).withMillis(30);</code>
  <p>
  If you want a second-based period that cannot have other fields added,
  then you should consider using <code>Seconds</code>.
 @param seconds the amount of seconds in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)secondsWithInt:(jint)seconds;

/*!
 @brief Get this period as an immutable <code>Period</code> object
  by returning <code>this</code>.
 @return <code>this</code>
 */
- (OrgJodaTimePeriod *)toPeriod;

/*!
 @brief Converts this period to a period in days assuming a
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all
  weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
  all minutes are 60 seconds. This is not true when daylight savings time
  is considered, and may also not be true for some unusual chronologies.
  However, it is included as it is a useful operation for many
  applications and business rules. 
 <p>
  If the period contains years or months, an exception will be thrown.
 @return a period representing the number of standard days in this period
 @throw UnsupportedOperationExceptionif the period contains years or months
 @throw ArithmeticExceptionif the number of days is too large to be represented
 @since 1.5
 */
- (OrgJodaTimeDays *)toStandardDays;

/*!
 @brief Converts this period to a duration assuming a
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert from a period to a duration.
  However to achieve this it makes the assumption that all
  weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
  all minutes are 60 seconds. This is not true when daylight savings time
  is considered, and may also not be true for some unusual chronologies.
  However, it is included as it is a useful operation for many
  applications and business rules. 
 <p>
  If the period contains years or months, an exception will be thrown.
 @return a duration equivalent to this period
 @throw UnsupportedOperationExceptionif the period contains years or months
 @since 1.5
 */
- (OrgJodaTimeDuration *)toStandardDuration;

/*!
 @brief Converts this period to a period in hours assuming a
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all
  weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
  all minutes are 60 seconds. This is not true when daylight savings time
  is considered, and may also not be true for some unusual chronologies.
  However, it is included as it is a useful operation for many
  applications and business rules. 
 <p>
  If the period contains years or months, an exception will be thrown.
 @return a period representing the number of standard hours in this period
 @throw UnsupportedOperationExceptionif the period contains years or months
 @throw ArithmeticExceptionif the number of hours is too large to be represented
 @since 1.5
 */
- (OrgJodaTimeHours *)toStandardHours;

/*!
 @brief Converts this period to a period in minutes assuming a
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all
  weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
  all minutes are 60 seconds. This is not true when daylight savings time
  is considered, and may also not be true for some unusual chronologies.
  However, it is included as it is a useful operation for many
  applications and business rules. 
 <p>
  If the period contains years or months, an exception will be thrown.
 @return a period representing the number of standard minutes in this period
 @throw UnsupportedOperationExceptionif the period contains years or months
 @throw ArithmeticExceptionif the number of minutes is too large to be represented
 @since 1.5
 */
- (OrgJodaTimeMinutes *)toStandardMinutes;

/*!
 @brief Converts this period to a period in seconds assuming a
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all
  weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
  all minutes are 60 seconds. This is not true when daylight savings time
  is considered, and may also not be true for some unusual chronologies.
  However, it is included as it is a useful operation for many
  applications and business rules. 
 <p>
  If the period contains years or months, an exception will be thrown.
 @return a period representing the number of standard seconds in this period
 @throw UnsupportedOperationExceptionif the period contains years or months
 @throw ArithmeticExceptionif the number of seconds is too large to be represented
 @since 1.5
 */
- (OrgJodaTimeSeconds *)toStandardSeconds;

/*!
 @brief Converts this period to a period in weeks assuming a
  7 day week, 24 hour day, 60 minute hour and 60 second minute.
 <p>
  This method allows you to convert between different types of period.
  However to achieve this it makes the assumption that all
  weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
  all minutes are 60 seconds. This is not true when daylight savings time
  is considered, and may also not be true for some unusual chronologies.
  However, it is included as it is a useful operation for many
  applications and business rules. 
 <p>
  If the period contains years or months, an exception will be thrown.
 @return a period representing the number of standard weeks in this period
 @throw UnsupportedOperationExceptionif the period contains years or months
 @throw ArithmeticExceptionif the number of weeks is too large to be represented
 @since 1.5
 */
- (OrgJodaTimeWeeks *)toStandardWeeks;

/*!
 @brief Create a period with a specified number of weeks.
 <p>
  The standard period type is used, thus you can add other fields such
  as months or days using the <code>withXxx()</code> methods.
  For example, <code>Period.weeks(2).withDays(6);</code>
  <p>
  If you want a week-based period that cannot have other fields added,
  then you should consider using <code>Weeks</code>.
 @param weeks the amount of weeks in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)weeksWithInt:(jint)weeks;

/*!
 @brief Returns a new period with the specified number of days.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param days the amount of days to add, may be negative
 @return the new period with the increased days
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withDaysWithInt:(jint)days;

/*!
 @brief Creates a new Period instance with the specified field set to a new value.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param field the field to set, not null
 @param value the value to set to
 @return the new period instance
 @throw IllegalArgumentExceptionif the field type is null or unsupported
 */
- (OrgJodaTimePeriod *)withFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                                         withInt:(jint)value;

/*!
 @brief Creates a new Period instance with the valueToAdd added to the specified field.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param field the field to set, not null
 @param value the value to add
 @return the new period instance
 @throw IllegalArgumentExceptionif the field type is null or unsupported
 */
- (OrgJodaTimePeriod *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                                              withInt:(jint)value;

/*!
 @brief Creates a new Period instance with the fields from the specified period
  copied on top of those from this period.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param period the period to copy from, null ignored
 @return the new period instance
 @throw IllegalArgumentExceptionif a field type is unsupported
 */
- (OrgJodaTimePeriod *)withFieldsWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Returns a new period with the specified number of hours.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param hours the amount of hours to add, may be negative
 @return the new period with the increased hours
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withHoursWithInt:(jint)hours;

/*!
 @brief Returns a new period with the specified number of millis.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param millis the amount of millis to add, may be negative
 @return the new period with the increased millis
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withMillisWithInt:(jint)millis;

/*!
 @brief Returns a new period with the specified number of minutes.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param minutes the amount of minutes to add, may be negative
 @return the new period with the increased minutes
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withMinutesWithInt:(jint)minutes;

/*!
 @brief Returns a new period with the specified number of months.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param months the amount of months to add, may be negative
 @return the new period with the increased months
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withMonthsWithInt:(jint)months;

/*!
 @brief Creates a new Period instance with the same field values but
  different PeriodType.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param type the period type to use, null means standard
 @return the new period instance
 @throw IllegalArgumentExceptionif the new period won't accept all of the current fields
 */
- (OrgJodaTimePeriod *)withPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type;

/*!
 @brief Returns a new period with the specified number of seconds.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param seconds the amount of seconds to add, may be negative
 @return the new period with the increased seconds
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withSecondsWithInt:(jint)seconds;

/*!
 @brief Returns a new period with the specified number of weeks.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param weeks the amount of weeks to add, may be negative
 @return the new period with the increased weeks
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withWeeksWithInt:(jint)weeks;

/*!
 @brief Returns a new period with the specified number of years.
 <p>
  This period instance is immutable and unaffected by this method call.
 @param years the amount of years to add, may be negative
 @return the new period with the increased years
 @throw UnsupportedOperationExceptionif the field is not supported
 */
- (OrgJodaTimePeriod *)withYearsWithInt:(jint)years;

/*!
 @brief Create a period with a specified number of years.
 <p>
  The standard period type is used, thus you can add other fields such
  as months or days using the <code>withXxx()</code> methods.
  For example, <code>Period.years(2).withMonths(6);</code>
  <p>
  If you want a year-based period that cannot have other fields added,
  then you should consider using <code>Years</code>.
 @param years the amount of years in this period
 @return the period
 */
+ (OrgJodaTimePeriod *)yearsWithInt:(jint)years;

@end

J2OBJC_STATIC_INIT(OrgJodaTimePeriod)

/*!
 @brief A period of zero length and standard period type.
 @since 1.4
 */
inline OrgJodaTimePeriod *OrgJodaTimePeriod_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimePeriod, ZERO, OrgJodaTimePeriod *)

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_parseWithNSString_(NSString *str);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_parseWithNSString_withOrgJodaTimeFormatPeriodFormatter_(NSString *str, OrgJodaTimeFormatPeriodFormatter *formatter);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_yearsWithInt_(jint years);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_monthsWithInt_(jint months);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_weeksWithInt_(jint weeks);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_daysWithInt_(jint days);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_hoursWithInt_(jint hours);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_minutesWithInt_(jint minutes);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_secondsWithInt_(jint seconds);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_millisWithInt_(jint millis);

FOUNDATION_EXPORT OrgJodaTimePeriod *OrgJodaTimePeriod_fieldDifferenceWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end);

FOUNDATION_EXPORT void OrgJodaTimePeriod_init(OrgJodaTimePeriod *self);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_init(void);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_(OrgJodaTimePeriod *self, jint hours, jint minutes, jint seconds, jint millis);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_(jint hours, jint minutes, jint seconds, jint millis) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_(jint hours, jint minutes, jint seconds, jint millis);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimePeriodType_(jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimePeriodType_(jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_(OrgJodaTimePeriod *self, jlong duration);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_(jlong duration) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_(jlong duration);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, jlong duration, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withOrgJodaTimePeriodType_(jlong duration, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withOrgJodaTimePeriodType_(jlong duration, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimePeriod *self, jlong duration, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withOrgJodaTimeChronology_(jlong duration, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withOrgJodaTimeChronology_(jlong duration, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(OrgJodaTimePeriod *self, jlong duration, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(jlong duration, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(jlong duration, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withLong_(OrgJodaTimePeriod *self, jlong startInstant, jlong endInstant);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withLong_(jlong startInstant, jlong endInstant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withLong_(jlong startInstant, jlong endInstant);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_(jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_(jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimeChronology_(OrgJodaTimePeriod *self, jlong startInstant, jlong endInstant, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimeChronology_(jlong startInstant, jlong endInstant, OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimeChronology_(jlong startInstant, jlong endInstant, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(OrgJodaTimePeriod *self, jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithId_(OrgJodaTimePeriod *self, id period);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithId_(id period) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithId_(id period);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithId_withOrgJodaTimePeriodType_(OrgJodaTimePeriod *self, id period, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithId_withOrgJodaTimePeriodType_(id period, OrgJodaTimePeriodType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithId_withOrgJodaTimePeriodType_(id period, OrgJodaTimePeriodType *type);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithId_withOrgJodaTimeChronology_(OrgJodaTimePeriod *self, id period, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithId_withOrgJodaTimeChronology_(id period, OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithId_withOrgJodaTimeChronology_(id period, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT void OrgJodaTimePeriod_initWithId_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(OrgJodaTimePeriod *self, id period, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimePeriod *new_OrgJodaTimePeriod_initWithId_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(id period, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimePeriod *create_OrgJodaTimePeriod_initWithId_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(id period, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimePeriod)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimePeriod")
