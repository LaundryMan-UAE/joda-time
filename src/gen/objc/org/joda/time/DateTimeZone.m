//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/DateTimeZone.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/Serializable.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/IllegalInstantException.h"
#include "org/joda/time/JodaTimePermission.h"
#include "org/joda/time/LocalDateTime.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/UTCDateTimeZone.h"
#include "org/joda/time/chrono/BaseChronology.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/DateTimeFormatterBuilder.h"
#include "org/joda/time/format/FormatUtils.h"
#include "org/joda/time/tz/DefaultNameProvider.h"
#include "org/joda/time/tz/FixedDateTimeZone.h"
#include "org/joda/time/tz/NameProvider.h"
#include "org/joda/time/tz/Provider.h"
#include "org/joda/time/tz/UTCProvider.h"
#include "org/joda/time/tz/ZoneInfoProvider.h"

@interface OrgJodaTimeDateTimeZone () {
 @public
  NSString *iID_;
}

/*!
 @brief Gets the zone using a fixed offset amount.
 @param id_ the zone id
 @param offset the offset in millis
 @return the zone
 */
+ (OrgJodaTimeDateTimeZone *)fixedOffsetZoneWithNSString:(NSString *)id_
                                                 withInt:(jint)offset;

/*!
 @brief Sets the zone provider factory without performing the security check.
 @param provider provider to use, or null for default
 @throw IllegalArgumentExceptionif the provider is invalid
 */
+ (void)setProvider0WithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider;

/*!
 @brief Gets the default zone provider.
 <p>
  Tries the system property <code>org.joda.time.DateTimeZone.Provider</code>.
  Then tries a <code>ZoneInfoProvider</code> using the data in <code>org/joda/time/tz/data</code>.
  Then uses <code>UTCProvider</code>.
 @return the default name provider
 */
+ (id<OrgJodaTimeTzProvider>)getDefaultProvider;

/*!
 @brief Sets the name provider factory without performing the security check.
 @param nameProvider provider to use, or null for default
 @throw IllegalArgumentExceptionif the provider is invalid
 */
+ (void)setNameProvider0WithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider;

/*!
 @brief Gets the default name provider.
 <p>
  Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.
  Then uses <code>DefaultNameProvider</code>.
 @return the default name provider
 */
+ (id<OrgJodaTimeTzNameProvider>)getDefaultNameProvider;

/*!
 @brief Converts an old style id to a new style id.
 @param id_ the old style id
 @return the new style id, null if not found
 */
+ (NSString *)getConvertedIdWithNSString:(NSString *)id_;

+ (jint)parseOffsetWithNSString:(NSString *)str;

/*!
 @brief Formats a timezone offset string.
 <p>
  This method is kept separate from the formatting classes to speed and
  simplify startup and classloading.
 @param offset the offset in milliseconds
 @return the time zone string
 */
+ (NSString *)printOffsetWithInt:(jint)offset;

/*!
 @brief Gets a printer/parser for managing the offset id formatting.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)offsetFormatter;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeDateTimeZone, iID_, NSString *)

/*!
 @brief Serialization version.
 */
inline jlong OrgJodaTimeDateTimeZone_get_serialVersionUID(void);
#define OrgJodaTimeDateTimeZone_serialVersionUID 5546345482340108586LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone, serialVersionUID, jlong)

/*!
 @brief Maximum offset.
 */
inline jint OrgJodaTimeDateTimeZone_get_MAX_MILLIS(void);
#define OrgJodaTimeDateTimeZone_MAX_MILLIS 86399999
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone, MAX_MILLIS, jint)

/*!
 @brief The instance that is providing time zones.
 */
inline id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_get_cProvider(void);
inline id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_set_cProvider(id<OrgJodaTimeTzProvider> value);
static id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_cProvider;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeDateTimeZone, cProvider, id<OrgJodaTimeTzProvider>)

/*!
 @brief The instance that is providing time zone names.
 */
inline id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_get_cNameProvider(void);
inline id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_set_cNameProvider(id<OrgJodaTimeTzNameProvider> value);
static id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_cNameProvider;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeDateTimeZone, cNameProvider, id<OrgJodaTimeTzNameProvider>)

/*!
 @brief The set of ID strings.
 */
inline id<JavaUtilSet> OrgJodaTimeDateTimeZone_get_cAvailableIDs(void);
inline id<JavaUtilSet> OrgJodaTimeDateTimeZone_set_cAvailableIDs(id<JavaUtilSet> value);
static id<JavaUtilSet> OrgJodaTimeDateTimeZone_cAvailableIDs;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeDateTimeZone, cAvailableIDs, id<JavaUtilSet>)

/*!
 @brief The default time zone.
 */
inline OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_get_cDefault(void);
inline OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_set_cDefault(OrgJodaTimeDateTimeZone *value);
static volatile_id OrgJodaTimeDateTimeZone_cDefault;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(OrgJodaTimeDateTimeZone, cDefault, OrgJodaTimeDateTimeZone *)

/*!
 @brief A formatter for printing and parsing zones.
 */
inline OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_get_cOffsetFormatter(void);
inline OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_set_cOffsetFormatter(OrgJodaTimeFormatDateTimeFormatter *value);
static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_cOffsetFormatter;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeDateTimeZone, cOffsetFormatter, OrgJodaTimeFormatDateTimeFormatter *)

/*!
 @brief Cache that maps fixed offset strings to softly referenced DateTimeZones
 */
inline id<JavaUtilMap> OrgJodaTimeDateTimeZone_get_iFixedOffsetCache(void);
inline id<JavaUtilMap> OrgJodaTimeDateTimeZone_set_iFixedOffsetCache(id<JavaUtilMap> value);
static id<JavaUtilMap> OrgJodaTimeDateTimeZone_iFixedOffsetCache;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeDateTimeZone, iFixedOffsetCache, id<JavaUtilMap>)

/*!
 @brief Cache of old zone IDs to new zone IDs
 */
inline id<JavaUtilMap> OrgJodaTimeDateTimeZone_get_cZoneIdConversion(void);
inline id<JavaUtilMap> OrgJodaTimeDateTimeZone_set_cZoneIdConversion(id<JavaUtilMap> value);
static id<JavaUtilMap> OrgJodaTimeDateTimeZone_cZoneIdConversion;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeDateTimeZone, cZoneIdConversion, id<JavaUtilMap>)

__attribute__((unused)) static OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(NSString *id_, jint offset);

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_setProvider0WithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider);

__attribute__((unused)) static id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getDefaultProvider(void);

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_setNameProvider0WithOrgJodaTimeTzNameProvider_(id<OrgJodaTimeTzNameProvider> nameProvider);

__attribute__((unused)) static id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getDefaultNameProvider(void);

__attribute__((unused)) static NSString *OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(NSString *id_);

__attribute__((unused)) static jint OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(NSString *str);

__attribute__((unused)) static NSString *OrgJodaTimeDateTimeZone_printOffsetWithInt_(jint offset);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_offsetFormatter(void);

__attribute__((unused)) static NSString *OrgJodaTimeDateTimeZone_getID(OrgJodaTimeDateTimeZone *self);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeDateTimeZone__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeDateTimeZone__Annotations$1(void);

@interface OrgJodaTimeDateTimeZone_1 : OrgJodaTimeChronoBaseChronology

- (instancetype)init;

- (OrgJodaTimeDateTimeZone *)getZone;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeDateTimeZone_1)

inline jlong OrgJodaTimeDateTimeZone_1_get_serialVersionUID(void);
#define OrgJodaTimeDateTimeZone_1_serialVersionUID -3128740902654445468LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone_1, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_1_init(OrgJodaTimeDateTimeZone_1 *self);

__attribute__((unused)) static OrgJodaTimeDateTimeZone_1 *new_OrgJodaTimeDateTimeZone_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeDateTimeZone_1 *create_OrgJodaTimeDateTimeZone_1_init(void);

/*!
 @brief Used to serialize DateTimeZones by id.
 */
@interface OrgJodaTimeDateTimeZone_Stub : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief The ID of the zone.
   */
  NSString *iID_;
}

/*!
 @brief Constructor.
 @param id_ the id of the zone
 */
- (instancetype)initWithNSString:(NSString *)id_;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (id)readResolve;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeDateTimeZone_Stub)

J2OBJC_FIELD_SETTER(OrgJodaTimeDateTimeZone_Stub, iID_, NSString *)

/*!
 @brief Serialization lock.
 */
inline jlong OrgJodaTimeDateTimeZone_Stub_get_serialVersionUID(void);
#define OrgJodaTimeDateTimeZone_Stub_serialVersionUID -6471952376487863581LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone_Stub, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_Stub_initWithNSString_(OrgJodaTimeDateTimeZone_Stub *self, NSString *id_);

__attribute__((unused)) static OrgJodaTimeDateTimeZone_Stub *new_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeDateTimeZone_Stub *create_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_);

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_Stub_writeObjectWithJavaIoObjectOutputStream_(OrgJodaTimeDateTimeZone_Stub *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_Stub_readObjectWithJavaIoObjectInputStream_(OrgJodaTimeDateTimeZone_Stub *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static id OrgJodaTimeDateTimeZone_Stub_readResolve(OrgJodaTimeDateTimeZone_Stub *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDateTimeZone_Stub)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeDateTimeZone)

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_UTC;

@implementation OrgJodaTimeDateTimeZone

+ (OrgJodaTimeDateTimeZone *)getDefault {
  return OrgJodaTimeDateTimeZone_getDefault();
}

+ (void)setDefaultWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTimeZone_setDefaultWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeDateTimeZone *)forIDWithNSString:(NSString *)id_ {
  return OrgJodaTimeDateTimeZone_forIDWithNSString_(id_);
}

+ (OrgJodaTimeDateTimeZone *)forOffsetHoursWithInt:(jint)hoursOffset {
  return OrgJodaTimeDateTimeZone_forOffsetHoursWithInt_(hoursOffset);
}

+ (OrgJodaTimeDateTimeZone *)forOffsetHoursMinutesWithInt:(jint)hoursOffset
                                                  withInt:(jint)minutesOffset {
  return OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(hoursOffset, minutesOffset);
}

+ (OrgJodaTimeDateTimeZone *)forOffsetMillisWithInt:(jint)millisOffset {
  return OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(millisOffset);
}

+ (OrgJodaTimeDateTimeZone *)forTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone {
  return OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(zone);
}

+ (OrgJodaTimeDateTimeZone *)fixedOffsetZoneWithNSString:(NSString *)id_
                                                 withInt:(jint)offset {
  return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(id_, offset);
}

+ (id<JavaUtilSet>)getAvailableIDs {
  return OrgJodaTimeDateTimeZone_getAvailableIDs();
}

+ (id<OrgJodaTimeTzProvider>)getProvider {
  return OrgJodaTimeDateTimeZone_getProvider();
}

+ (void)setProviderWithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider {
  OrgJodaTimeDateTimeZone_setProviderWithOrgJodaTimeTzProvider_(provider);
}

+ (void)setProvider0WithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider {
  OrgJodaTimeDateTimeZone_setProvider0WithOrgJodaTimeTzProvider_(provider);
}

+ (id<OrgJodaTimeTzProvider>)getDefaultProvider {
  return OrgJodaTimeDateTimeZone_getDefaultProvider();
}

+ (id<OrgJodaTimeTzNameProvider>)getNameProvider {
  return OrgJodaTimeDateTimeZone_getNameProvider();
}

+ (void)setNameProviderWithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider {
  OrgJodaTimeDateTimeZone_setNameProviderWithOrgJodaTimeTzNameProvider_(nameProvider);
}

+ (void)setNameProvider0WithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider {
  OrgJodaTimeDateTimeZone_setNameProvider0WithOrgJodaTimeTzNameProvider_(nameProvider);
}

+ (id<OrgJodaTimeTzNameProvider>)getDefaultNameProvider {
  return OrgJodaTimeDateTimeZone_getDefaultNameProvider();
}

+ (NSString *)getConvertedIdWithNSString:(NSString *)id_ {
  return OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(id_);
}

+ (jint)parseOffsetWithNSString:(NSString *)str {
  return OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(str);
}

+ (NSString *)printOffsetWithInt:(jint)offset {
  return OrgJodaTimeDateTimeZone_printOffsetWithInt_(offset);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)offsetFormatter {
  return OrgJodaTimeDateTimeZone_offsetFormatter();
}

- (instancetype)initWithNSString:(NSString *)id_ {
  OrgJodaTimeDateTimeZone_initWithNSString_(self, id_);
  return self;
}

- (NSString *)getID {
  return OrgJodaTimeDateTimeZone_getID(self);
}

- (NSString *)getNameKeyWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getShortNameWithLong:(jlong)instant {
  return [self getShortNameWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getShortNameWithLong:(jlong)instant
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  NSString *nameKey = [self getNameKeyWithLong:instant];
  if (nameKey == nil) {
    return iID_;
  }
  NSString *name = [((id<OrgJodaTimeTzNameProvider>) nil_chk(OrgJodaTimeDateTimeZone_cNameProvider)) getShortNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey];
  if (name != nil) {
    return name;
  }
  return OrgJodaTimeDateTimeZone_printOffsetWithInt_([self getOffsetWithLong:instant]);
}

- (NSString *)getNameWithLong:(jlong)instant {
  return [self getNameWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getNameWithLong:(jlong)instant
           withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  NSString *nameKey = [self getNameKeyWithLong:instant];
  if (nameKey == nil) {
    return iID_;
  }
  NSString *name = [((id<OrgJodaTimeTzNameProvider>) nil_chk(OrgJodaTimeDateTimeZone_cNameProvider)) getNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey];
  if (name != nil) {
    return name;
  }
  return OrgJodaTimeDateTimeZone_printOffsetWithInt_([self getOffsetWithLong:instant]);
}

- (jint)getOffsetWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getOffsetWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  if (instant == nil) {
    return [self getOffsetWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis()];
  }
  return [self getOffsetWithLong:[instant getMillis]];
}

- (jint)getStandardOffsetWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isStandardOffsetWithLong:(jlong)instant {
  return [self getOffsetWithLong:instant] == [self getStandardOffsetWithLong:instant];
}

- (jint)getOffsetFromLocalWithLong:(jlong)instantLocal {
  jint offsetLocal = [self getOffsetWithLong:instantLocal];
  jlong instantAdjusted = instantLocal - offsetLocal;
  jint offsetAdjusted = [self getOffsetWithLong:instantAdjusted];
  if (offsetLocal != offsetAdjusted) {
    if ((offsetLocal - offsetAdjusted) < 0) {
      jlong nextLocal = [self nextTransitionWithLong:instantAdjusted];
      if (nextLocal == (instantLocal - offsetLocal)) {
        nextLocal = JavaLangLong_MAX_VALUE;
      }
      jlong nextAdjusted = [self nextTransitionWithLong:instantLocal - offsetAdjusted];
      if (nextAdjusted == (instantLocal - offsetAdjusted)) {
        nextAdjusted = JavaLangLong_MAX_VALUE;
      }
      if (nextLocal != nextAdjusted) {
        return offsetLocal;
      }
    }
  }
  else if (offsetLocal >= 0) {
    jlong prev = [self previousTransitionWithLong:instantAdjusted];
    if (prev < instantAdjusted) {
      jint offsetPrev = [self getOffsetWithLong:prev];
      jint diff = offsetPrev - offsetLocal;
      if (instantAdjusted - prev <= diff) {
        return offsetPrev;
      }
    }
  }
  return offsetAdjusted;
}

- (jlong)convertUTCToLocalWithLong:(jlong)instantUTC {
  jint offset = [self getOffsetWithLong:instantUTC];
  jlong instantLocal = instantUTC + offset;
  if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Adding time zone offset caused overflow");
  }
  return instantLocal;
}

- (jlong)convertLocalToUTCWithLong:(jlong)instantLocal
                       withBoolean:(jboolean)strict
                          withLong:(jlong)originalInstantUTC {
  jint offsetOriginal = [self getOffsetWithLong:originalInstantUTC];
  jlong instantUTC = instantLocal - offsetOriginal;
  jint offsetLocalFromOriginal = [self getOffsetWithLong:instantUTC];
  if (offsetLocalFromOriginal == offsetOriginal) {
    return instantUTC;
  }
  return [self convertLocalToUTCWithLong:instantLocal withBoolean:strict];
}

- (jlong)convertLocalToUTCWithLong:(jlong)instantLocal
                       withBoolean:(jboolean)strict {
  jint offsetLocal = [self getOffsetWithLong:instantLocal];
  jint offset = [self getOffsetWithLong:instantLocal - offsetLocal];
  if (offsetLocal != offset) {
    if (strict || offsetLocal < 0) {
      jlong nextLocal = [self nextTransitionWithLong:instantLocal - offsetLocal];
      if (nextLocal == (instantLocal - offsetLocal)) {
        nextLocal = JavaLangLong_MAX_VALUE;
      }
      jlong nextAdjusted = [self nextTransitionWithLong:instantLocal - offset];
      if (nextAdjusted == (instantLocal - offset)) {
        nextAdjusted = JavaLangLong_MAX_VALUE;
      }
      if (nextLocal != nextAdjusted) {
        if (strict) {
          @throw create_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(instantLocal, OrgJodaTimeDateTimeZone_getID(self));
        }
        else {
          offset = offsetLocal;
        }
      }
    }
  }
  jlong instantUTC = instantLocal - offset;
  if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Subtracting time zone offset caused overflow");
  }
  return instantUTC;
}

- (jlong)getMillisKeepLocalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone
                                              withLong:(jlong)oldInstant {
  if (newZone == nil) {
    newZone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (newZone == self) {
    return oldInstant;
  }
  jlong instantLocal = [self convertUTCToLocalWithLong:oldInstant];
  return [((OrgJodaTimeDateTimeZone *) nil_chk(newZone)) convertLocalToUTCWithLong:instantLocal withBoolean:false withLong:oldInstant];
}

- (jboolean)isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)localDateTime {
  if ([self isFixed]) {
    return false;
  }
  @try {
    [((OrgJodaTimeLocalDateTime *) nil_chk(localDateTime)) toDateTimeWithOrgJodaTimeDateTimeZone:self];
    return false;
  }
  @catch (OrgJodaTimeIllegalInstantException *ex) {
    return true;
  }
}

- (jlong)adjustOffsetWithLong:(jlong)instant
                  withBoolean:(jboolean)earlierOrLater {
  jlong instantBefore = instant - 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jlong instantAfter = instant + 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jlong offsetBefore = [self getOffsetWithLong:instantBefore];
  jlong offsetAfter = [self getOffsetWithLong:instantAfter];
  if (offsetBefore <= offsetAfter) {
    return instant;
  }
  jlong diff = offsetBefore - offsetAfter;
  jlong transition = [self nextTransitionWithLong:instantBefore];
  jlong overlapStart = transition - diff;
  jlong overlapEnd = transition + diff;
  if (instant < overlapStart || instant >= overlapEnd) {
    return instant;
  }
  jlong afterStart = instant - overlapStart;
  if (afterStart >= diff) {
    return earlierOrLater ? instant : instant - diff;
  }
  else {
    return earlierOrLater ? instant + diff : instant;
  }
}

- (jboolean)isFixed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)nextTransitionWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)previousTransitionWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilTimeZone *)toTimeZone {
  return JavaUtilTimeZone_getTimeZoneWithNSString_(iID_);
}

- (jboolean)isEqual:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  return 57 + ((jint) [((NSString *) nil_chk(OrgJodaTimeDateTimeZone_getID(self))) hash]);
}

- (NSString *)description {
  return OrgJodaTimeDateTimeZone_getID(self);
}

- (id)writeReplace {
  return create_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(iID_);
}

- (void)dealloc {
  RELEASE_(iID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x9, 3, 4, -1, -1, 5, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x9, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x9, 9, 10, 8, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x2a, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, -1, -1, -1, 16, -1, -1 },
    { NULL, "LOrgJodaTimeTzProvider;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 18, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTzProvider;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTzNameProvider;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 20, 21, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 22, 21, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTzNameProvider;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2a, 23, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 24, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 25, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x2a, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, 26, -1 },
    { NULL, "LNSString;", 0x401, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 31, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 32, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 34, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 36, 28, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 37, 28, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 38, 40, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 45, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 46, 28, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 47, 28, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 48, 49, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 50, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 51, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 52, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getDefault);
  methods[1].selector = @selector(setDefaultWithOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(forIDWithNSString:);
  methods[3].selector = @selector(forOffsetHoursWithInt:);
  methods[4].selector = @selector(forOffsetHoursMinutesWithInt:withInt:);
  methods[5].selector = @selector(forOffsetMillisWithInt:);
  methods[6].selector = @selector(forTimeZoneWithJavaUtilTimeZone:);
  methods[7].selector = @selector(fixedOffsetZoneWithNSString:withInt:);
  methods[8].selector = @selector(getAvailableIDs);
  methods[9].selector = @selector(getProvider);
  methods[10].selector = @selector(setProviderWithOrgJodaTimeTzProvider:);
  methods[11].selector = @selector(setProvider0WithOrgJodaTimeTzProvider:);
  methods[12].selector = @selector(getDefaultProvider);
  methods[13].selector = @selector(getNameProvider);
  methods[14].selector = @selector(setNameProviderWithOrgJodaTimeTzNameProvider:);
  methods[15].selector = @selector(setNameProvider0WithOrgJodaTimeTzNameProvider:);
  methods[16].selector = @selector(getDefaultNameProvider);
  methods[17].selector = @selector(getConvertedIdWithNSString:);
  methods[18].selector = @selector(parseOffsetWithNSString:);
  methods[19].selector = @selector(printOffsetWithInt:);
  methods[20].selector = @selector(offsetFormatter);
  methods[21].selector = @selector(initWithNSString:);
  methods[22].selector = @selector(getID);
  methods[23].selector = @selector(getNameKeyWithLong:);
  methods[24].selector = @selector(getShortNameWithLong:);
  methods[25].selector = @selector(getShortNameWithLong:withJavaUtilLocale:);
  methods[26].selector = @selector(getNameWithLong:);
  methods[27].selector = @selector(getNameWithLong:withJavaUtilLocale:);
  methods[28].selector = @selector(getOffsetWithLong:);
  methods[29].selector = @selector(getOffsetWithOrgJodaTimeReadableInstant:);
  methods[30].selector = @selector(getStandardOffsetWithLong:);
  methods[31].selector = @selector(isStandardOffsetWithLong:);
  methods[32].selector = @selector(getOffsetFromLocalWithLong:);
  methods[33].selector = @selector(convertUTCToLocalWithLong:);
  methods[34].selector = @selector(convertLocalToUTCWithLong:withBoolean:withLong:);
  methods[35].selector = @selector(convertLocalToUTCWithLong:withBoolean:);
  methods[36].selector = @selector(getMillisKeepLocalWithOrgJodaTimeDateTimeZone:withLong:);
  methods[37].selector = @selector(isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:);
  methods[38].selector = @selector(adjustOffsetWithLong:withBoolean:);
  methods[39].selector = @selector(isFixed);
  methods[40].selector = @selector(nextTransitionWithLong:);
  methods[41].selector = @selector(previousTransitionWithLong:);
  methods[42].selector = @selector(toTimeZone);
  methods[43].selector = @selector(isEqual:);
  methods[44].selector = @selector(hash);
  methods[45].selector = @selector(description);
  methods[46].selector = @selector(writeReplace);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeDateTimeZone_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "UTC", "LOrgJodaTimeDateTimeZone;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "MAX_MILLIS", "I", .constantValue.asInt = OrgJodaTimeDateTimeZone_MAX_MILLIS, 0x1a, -1, -1, -1, -1 },
    { "cProvider", "LOrgJodaTimeTzProvider;", .constantValue.asLong = 0, 0xa, -1, 54, -1, -1 },
    { "cNameProvider", "LOrgJodaTimeTzNameProvider;", .constantValue.asLong = 0, 0xa, -1, 55, -1, -1 },
    { "cAvailableIDs", "LJavaUtilSet;", .constantValue.asLong = 0, 0xa, -1, 56, 57, -1 },
    { "cDefault", "LOrgJodaTimeDateTimeZone;", .constantValue.asLong = 0, 0x4a, -1, 58, -1, -1 },
    { "cOffsetFormatter", "LOrgJodaTimeFormatDateTimeFormatter;", .constantValue.asLong = 0, 0xa, -1, 59, -1, -1 },
    { "iFixedOffsetCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 60, 61, -1 },
    { "cZoneIdConversion", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 62, 63, -1 },
    { "iID_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDefault", "LOrgJodaTimeDateTimeZone;", "LJavaLangSecurityException;", "forID", "LNSString;", (void *)&OrgJodaTimeDateTimeZone__Annotations$0, "forOffsetHours", "I", "LJavaLangIllegalArgumentException;", "forOffsetHoursMinutes", "II", "forOffsetMillis", "forTimeZone", "LJavaUtilTimeZone;", "fixedOffsetZone", "LNSString;I", "()Ljava/util/Set<Ljava/lang/String;>;", "setProvider", "LOrgJodaTimeTzProvider;", "setProvider0", "setNameProvider", "LOrgJodaTimeTzNameProvider;", "setNameProvider0", "getConvertedId", "parseOffset", "printOffset", (void *)&OrgJodaTimeDateTimeZone__Annotations$1, "getNameKey", "J", "getShortName", "JLJavaUtilLocale;", "getName", "getOffset", "LOrgJodaTimeReadableInstant;", "getStandardOffset", "isStandardOffset", "getOffsetFromLocal", "convertUTCToLocal", "convertLocalToUTC", "JZJ", "JZ", "getMillisKeepLocal", "LOrgJodaTimeDateTimeZone;J", "isLocalDateTimeGap", "LOrgJodaTimeLocalDateTime;", "adjustOffset", "nextTransition", "previousTransition", "equals", "LNSObject;", "hashCode", "toString", "LJavaIoObjectStreamException;", &OrgJodaTimeDateTimeZone_UTC, &OrgJodaTimeDateTimeZone_cProvider, &OrgJodaTimeDateTimeZone_cNameProvider, &OrgJodaTimeDateTimeZone_cAvailableIDs, "Ljava/util/Set<Ljava/lang/String;>;", &OrgJodaTimeDateTimeZone_cDefault, &OrgJodaTimeDateTimeZone_cOffsetFormatter, &OrgJodaTimeDateTimeZone_iFixedOffsetCache, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/ref/SoftReference<Lorg/joda/time/DateTimeZone;>;>;", &OrgJodaTimeDateTimeZone_cZoneIdConversion, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgJodaTimeDateTimeZone_Stub;" };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone = { "DateTimeZone", "org.joda.time", ptrTable, methods, fields, 7, 0x401, 47, 11, -1, 64, -1, -1, -1 };
  return &_OrgJodaTimeDateTimeZone;
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeZone class]) {
    JreStrongAssign(&OrgJodaTimeDateTimeZone_UTC, JreLoadStatic(OrgJodaTimeUTCDateTimeZone, INSTANCE));
    {
      OrgJodaTimeDateTimeZone_setProvider0WithOrgJodaTimeTzProvider_(nil);
      OrgJodaTimeDateTimeZone_setNameProvider0WithOrgJodaTimeTzNameProvider_(nil);
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDateTimeZone)
  }
}

@end

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_getDefault() {
  OrgJodaTimeDateTimeZone_initialize();
  OrgJodaTimeDateTimeZone *zone = JreLoadVolatileId(&OrgJodaTimeDateTimeZone_cDefault);
  if (zone == nil) {
    @synchronized(OrgJodaTimeDateTimeZone_class_()) {
      zone = JreRetainedLocalValue(JreLoadVolatileId(&OrgJodaTimeDateTimeZone_cDefault));
      if (zone == nil) {
        OrgJodaTimeDateTimeZone *temp = nil;
        @try {
          @try {
            NSString *id_ = JavaLangSystem_getPropertyWithNSString_(@"user.timezone");
            if (id_ != nil) {
              temp = OrgJodaTimeDateTimeZone_forIDWithNSString_(id_);
            }
          }
          @catch (JavaLangRuntimeException *ex) {
          }
          if (temp == nil) {
            temp = OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(JavaUtilTimeZone_getDefault());
          }
        }
        @catch (JavaLangIllegalArgumentException *ex) {
        }
        if (temp == nil) {
          temp = OrgJodaTimeDateTimeZone_UTC;
        }
        JreVolatileStrongAssign(&OrgJodaTimeDateTimeZone_cDefault, zone = JreRetainedLocalValue(temp));
      }
    }
  }
  return zone;
}

void OrgJodaTimeDateTimeZone_setDefaultWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"DateTimeZone.setDefault")];
  }
  if (zone == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The datetime zone must not be null");
  }
  @synchronized(OrgJodaTimeDateTimeZone_class_()) {
    JreVolatileStrongAssign(&OrgJodaTimeDateTimeZone_cDefault, zone);
  }
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forIDWithNSString_(NSString *id_) {
  OrgJodaTimeDateTimeZone_initialize();
  if (id_ == nil) {
    return OrgJodaTimeDateTimeZone_getDefault();
  }
  if ([id_ isEqual:@"UTC"]) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  OrgJodaTimeDateTimeZone *zone = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_cProvider)) getZoneWithNSString:id_];
  if (zone != nil) {
    return zone;
  }
  if ([id_ java_hasPrefix:@"+"] || [id_ java_hasPrefix:@"-"]) {
    jint offset = OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(id_);
    if (offset == 0LL) {
      return OrgJodaTimeDateTimeZone_UTC;
    }
    else {
      id_ = OrgJodaTimeDateTimeZone_printOffsetWithInt_(offset);
      return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(id_, offset);
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The datetime zone id '", id_, @"' is not recognised"));
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetHoursWithInt_(jint hoursOffset) {
  OrgJodaTimeDateTimeZone_initialize();
  return OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(hoursOffset, 0);
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(jint hoursOffset, jint minutesOffset) {
  OrgJodaTimeDateTimeZone_initialize();
  if (hoursOffset == 0 && minutesOffset == 0) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  if (hoursOffset < -23 || hoursOffset > 23) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Hours out of range: ", hoursOffset));
  }
  if (minutesOffset < -59 || minutesOffset > 59) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Minutes out of range: ", minutesOffset));
  }
  if (hoursOffset > 0 && minutesOffset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positive hours must not have negative minutes: ", minutesOffset));
  }
  jint offset = 0;
  @try {
    jint hoursInMinutes = hoursOffset * 60;
    if (hoursInMinutes < 0) {
      minutesOffset = hoursInMinutes - JavaLangMath_absWithInt_(minutesOffset);
    }
    else {
      minutesOffset = hoursInMinutes + minutesOffset;
    }
    offset = OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_(minutesOffset, OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE);
  }
  @catch (JavaLangArithmeticException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Offset is too large");
  }
  return OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(offset);
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(jint millisOffset) {
  OrgJodaTimeDateTimeZone_initialize();
  if (millisOffset < -OrgJodaTimeDateTimeZone_MAX_MILLIS || millisOffset > OrgJodaTimeDateTimeZone_MAX_MILLIS) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Millis out of range: ", millisOffset));
  }
  NSString *id_ = OrgJodaTimeDateTimeZone_printOffsetWithInt_(millisOffset);
  return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(id_, millisOffset);
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(JavaUtilTimeZone *zone) {
  OrgJodaTimeDateTimeZone_initialize();
  if (zone == nil) {
    return OrgJodaTimeDateTimeZone_getDefault();
  }
  NSString *id_ = [zone getID];
  if (id_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The TimeZone id must not be null");
  }
  if ([id_ isEqual:@"UTC"]) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  OrgJodaTimeDateTimeZone *dtz = nil;
  NSString *convId = OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(id_);
  if (convId != nil) {
    dtz = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_cProvider)) getZoneWithNSString:convId];
  }
  if (dtz == nil) {
    dtz = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_cProvider)) getZoneWithNSString:id_];
  }
  if (dtz != nil) {
    return dtz;
  }
  if (convId == nil) {
    convId = id_;
    if ([convId java_hasPrefix:@"GMT+"] || [convId java_hasPrefix:@"GMT-"]) {
      convId = [convId java_substring:3];
      jint offset = OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(convId);
      if (offset == 0LL) {
        return OrgJodaTimeDateTimeZone_UTC;
      }
      else {
        convId = OrgJodaTimeDateTimeZone_printOffsetWithInt_(offset);
        return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(convId, offset);
      }
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The datetime zone id '", id_, @"' is not recognised"));
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(NSString *id_, jint offset) {
  OrgJodaTimeDateTimeZone_initialize();
  @synchronized(OrgJodaTimeDateTimeZone_class_()) {
    if (offset == 0) {
      return JreRetainedLocalValue(OrgJodaTimeDateTimeZone_UTC);
    }
    if (OrgJodaTimeDateTimeZone_iFixedOffsetCache == nil) {
      JreStrongAssignAndConsume(&OrgJodaTimeDateTimeZone_iFixedOffsetCache, new_JavaUtilHashMap_init());
    }
    OrgJodaTimeDateTimeZone *zone;
    JavaLangRefReference *ref = [OrgJodaTimeDateTimeZone_iFixedOffsetCache getWithId:id_];
    if (ref != nil) {
      zone = [ref get];
      if (zone != nil) {
        return JreRetainedLocalValue(zone);
      }
    }
    zone = create_OrgJodaTimeTzFixedDateTimeZone_initWithNSString_withNSString_withInt_withInt_(id_, nil, offset, offset);
    [((id<JavaUtilMap>) nil_chk(OrgJodaTimeDateTimeZone_iFixedOffsetCache)) putWithId:id_ withId:create_JavaLangRefSoftReference_initWithId_(zone)];
    return JreRetainedLocalValue(zone);
  }
}

id<JavaUtilSet> OrgJodaTimeDateTimeZone_getAvailableIDs() {
  OrgJodaTimeDateTimeZone_initialize();
  return OrgJodaTimeDateTimeZone_cAvailableIDs;
}

id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  return OrgJodaTimeDateTimeZone_cProvider;
}

void OrgJodaTimeDateTimeZone_setProviderWithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"DateTimeZone.setProvider")];
  }
  OrgJodaTimeDateTimeZone_setProvider0WithOrgJodaTimeTzProvider_(provider);
}

void OrgJodaTimeDateTimeZone_setProvider0WithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider) {
  OrgJodaTimeDateTimeZone_initialize();
  if (provider == nil) {
    provider = OrgJodaTimeDateTimeZone_getDefaultProvider();
  }
  id<JavaUtilSet> ids = [((id<OrgJodaTimeTzProvider>) nil_chk(provider)) getAvailableIDs];
  if (ids == nil || [ids size] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The provider doesn't have any available ids");
  }
  if (![ids containsWithId:@"UTC"]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The provider doesn't support UTC");
  }
  if (![((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_UTC)) isEqual:[provider getZoneWithNSString:@"UTC"]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid UTC zone provided");
  }
  JreStrongAssign(&OrgJodaTimeDateTimeZone_cProvider, provider);
  JreStrongAssign(&OrgJodaTimeDateTimeZone_cAvailableIDs, ids);
}

id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getDefaultProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  id<OrgJodaTimeTzProvider> provider = nil;
  @try {
    NSString *providerClass = JavaLangSystem_getPropertyWithNSString_(@"org.joda.time.DateTimeZone.Provider");
    if (providerClass != nil) {
      @try {
        provider = (id<OrgJodaTimeTzProvider>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(providerClass))) newInstance], OrgJodaTimeTzProvider_class_());
      }
      @catch (JavaLangException *ex) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(ex);
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  if (provider == nil) {
    @try {
      provider = create_OrgJodaTimeTzZoneInfoProvider_initWithNSString_(@"");
    }
    @catch (JavaLangException *ex) {
      [ex printStackTrace];
    }
  }
  if (provider == nil) {
    provider = create_OrgJodaTimeTzUTCProvider_init();
  }
  return provider;
}

id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getNameProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  return OrgJodaTimeDateTimeZone_cNameProvider;
}

void OrgJodaTimeDateTimeZone_setNameProviderWithOrgJodaTimeTzNameProvider_(id<OrgJodaTimeTzNameProvider> nameProvider) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"DateTimeZone.setNameProvider")];
  }
  OrgJodaTimeDateTimeZone_setNameProvider0WithOrgJodaTimeTzNameProvider_(nameProvider);
}

void OrgJodaTimeDateTimeZone_setNameProvider0WithOrgJodaTimeTzNameProvider_(id<OrgJodaTimeTzNameProvider> nameProvider) {
  OrgJodaTimeDateTimeZone_initialize();
  if (nameProvider == nil) {
    nameProvider = OrgJodaTimeDateTimeZone_getDefaultNameProvider();
  }
  JreStrongAssign(&OrgJodaTimeDateTimeZone_cNameProvider, nameProvider);
}

id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getDefaultNameProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  id<OrgJodaTimeTzNameProvider> nameProvider = nil;
  @try {
    NSString *providerClass = JavaLangSystem_getPropertyWithNSString_(@"org.joda.time.DateTimeZone.NameProvider");
    if (providerClass != nil) {
      @try {
        nameProvider = (id<OrgJodaTimeTzNameProvider>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(providerClass))) newInstance], OrgJodaTimeTzNameProvider_class_());
      }
      @catch (JavaLangException *ex) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(ex);
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  if (nameProvider == nil) {
    nameProvider = create_OrgJodaTimeTzDefaultNameProvider_init();
  }
  return nameProvider;
}

NSString *OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(NSString *id_) {
  OrgJodaTimeDateTimeZone_initialize();
  @synchronized(OrgJodaTimeDateTimeZone_class_()) {
    id<JavaUtilMap> map = OrgJodaTimeDateTimeZone_cZoneIdConversion;
    if (map == nil) {
      map = create_JavaUtilHashMap_init();
      [map putWithId:@"GMT" withId:@"UTC"];
      [map putWithId:@"WET" withId:@"WET"];
      [map putWithId:@"CET" withId:@"CET"];
      [map putWithId:@"MET" withId:@"CET"];
      [map putWithId:@"ECT" withId:@"CET"];
      [map putWithId:@"EET" withId:@"EET"];
      [map putWithId:@"MIT" withId:@"Pacific/Apia"];
      [map putWithId:@"HST" withId:@"Pacific/Honolulu"];
      [map putWithId:@"AST" withId:@"America/Anchorage"];
      [map putWithId:@"PST" withId:@"America/Los_Angeles"];
      [map putWithId:@"MST" withId:@"America/Denver"];
      [map putWithId:@"PNT" withId:@"America/Phoenix"];
      [map putWithId:@"CST" withId:@"America/Chicago"];
      [map putWithId:@"EST" withId:@"America/New_York"];
      [map putWithId:@"IET" withId:@"America/Indiana/Indianapolis"];
      [map putWithId:@"PRT" withId:@"America/Puerto_Rico"];
      [map putWithId:@"CNT" withId:@"America/St_Johns"];
      [map putWithId:@"AGT" withId:@"America/Argentina/Buenos_Aires"];
      [map putWithId:@"BET" withId:@"America/Sao_Paulo"];
      [map putWithId:@"ART" withId:@"Africa/Cairo"];
      [map putWithId:@"CAT" withId:@"Africa/Harare"];
      [map putWithId:@"EAT" withId:@"Africa/Addis_Ababa"];
      [map putWithId:@"NET" withId:@"Asia/Yerevan"];
      [map putWithId:@"PLT" withId:@"Asia/Karachi"];
      [map putWithId:@"IST" withId:@"Asia/Kolkata"];
      [map putWithId:@"BST" withId:@"Asia/Dhaka"];
      [map putWithId:@"VST" withId:@"Asia/Ho_Chi_Minh"];
      [map putWithId:@"CTT" withId:@"Asia/Shanghai"];
      [map putWithId:@"JST" withId:@"Asia/Tokyo"];
      [map putWithId:@"ACT" withId:@"Australia/Darwin"];
      [map putWithId:@"AET" withId:@"Australia/Sydney"];
      [map putWithId:@"SST" withId:@"Pacific/Guadalcanal"];
      [map putWithId:@"NST" withId:@"Pacific/Auckland"];
      JreStrongAssign(&OrgJodaTimeDateTimeZone_cZoneIdConversion, map);
    }
    return JreRetainedLocalValue([map getWithId:id_]);
  }
}

jint OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(NSString *str) {
  OrgJodaTimeDateTimeZone_initialize();
  OrgJodaTimeChronology *chrono = create_OrgJodaTimeDateTimeZone_1_init();
  return -(jint) [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeDateTimeZone_offsetFormatter())) withChronologyWithOrgJodaTimeChronology:chrono])) parseMillisWithNSString:str];
}

NSString *OrgJodaTimeDateTimeZone_printOffsetWithInt_(jint offset) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangStringBuffer *buf = create_JavaLangStringBuffer_init();
  if (offset >= 0) {
    [buf appendWithChar:'+'];
  }
  else {
    [buf appendWithChar:'-'];
    offset = -offset;
  }
  jint hours = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, hours, 2);
  offset -= hours * (jint) OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jint minutes = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  [buf appendWithChar:':'];
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, minutes, 2);
  offset -= minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (offset == 0) {
    return [buf description];
  }
  jint seconds = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  [buf appendWithChar:':'];
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, seconds, 2);
  offset -= seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (offset == 0) {
    return [buf description];
  }
  [buf appendWithChar:'.'];
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, offset, 3);
  return [buf description];
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_offsetFormatter() {
  OrgJodaTimeDateTimeZone_initialize();
  @synchronized(OrgJodaTimeDateTimeZone_class_()) {
    if (OrgJodaTimeDateTimeZone_cOffsetFormatter == nil) {
      JreStrongAssign(&OrgJodaTimeDateTimeZone_cOffsetFormatter, [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([create_OrgJodaTimeFormatDateTimeFormatterBuilder_init() appendTimeZoneOffsetWithNSString:nil withBoolean:true withInt:2 withInt:4])) toFormatter]);
    }
    return JreRetainedLocalValue(OrgJodaTimeDateTimeZone_cOffsetFormatter);
  }
}

void OrgJodaTimeDateTimeZone_initWithNSString_(OrgJodaTimeDateTimeZone *self, NSString *id_) {
  NSObject_init(self);
  if (id_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Id must not be null");
  }
  JreStrongAssign(&self->iID_, id_);
}

NSString *OrgJodaTimeDateTimeZone_getID(OrgJodaTimeDateTimeZone *self) {
  return self->iID_;
}

IOSObjectArray *OrgJodaTimeDateTimeZone__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeDateTimeZone__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJodaConvertToString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeZone)

@implementation OrgJodaTimeDateTimeZone_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeDateTimeZone_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeDateTimeZone *)getZone {
  return nil;
}

- (OrgJodaTimeChronology *)withUTC {
  return self;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return self;
}

- (NSString *)description {
  return [[self java_getClass] getName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getZone);
  methods[2].selector = @selector(withUTC);
  methods[3].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeDateTimeZone_1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withZone", "LOrgJodaTimeDateTimeZone;", "toString", "parseOffsetWithNSString:" };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone_1 = { "", "org.joda.time", ptrTable, methods, fields, 7, 0x8018, 5, 1, 1, -1, 3, -1, -1 };
  return &_OrgJodaTimeDateTimeZone_1;
}

@end

void OrgJodaTimeDateTimeZone_1_init(OrgJodaTimeDateTimeZone_1 *self) {
  OrgJodaTimeChronoBaseChronology_init(self);
}

OrgJodaTimeDateTimeZone_1 *new_OrgJodaTimeDateTimeZone_1_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTimeZone_1, init)
}

OrgJodaTimeDateTimeZone_1 *create_OrgJodaTimeDateTimeZone_1_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTimeZone_1, init)
}

@implementation OrgJodaTimeDateTimeZone_Stub

- (instancetype)initWithNSString:(NSString *)id_ {
  OrgJodaTimeDateTimeZone_Stub_initWithNSString_(self, id_);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgJodaTimeDateTimeZone_Stub_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgJodaTimeDateTimeZone_Stub_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (id)readResolve {
  return OrgJodaTimeDateTimeZone_Stub_readResolve(self);
}

- (void)dealloc {
  RELEASE_(iID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[2].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[3].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeDateTimeZone_Stub_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iID_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoObjectStreamException;", "LOrgJodaTimeDateTimeZone;" };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone_Stub = { "Stub", "org.joda.time", ptrTable, methods, fields, 7, 0x1a, 4, 2, 7, -1, -1, -1, -1 };
  return &_OrgJodaTimeDateTimeZone_Stub;
}

@end

void OrgJodaTimeDateTimeZone_Stub_initWithNSString_(OrgJodaTimeDateTimeZone_Stub *self, NSString *id_) {
  NSObject_init(self);
  JreStrongAssign(&self->iID_, id_);
}

OrgJodaTimeDateTimeZone_Stub *new_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTimeZone_Stub, initWithNSString_, id_)
}

OrgJodaTimeDateTimeZone_Stub *create_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTimeZone_Stub, initWithNSString_, id_)
}

void OrgJodaTimeDateTimeZone_Stub_writeObjectWithJavaIoObjectOutputStream_(OrgJodaTimeDateTimeZone_Stub *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeUTFWithNSString:self->iID_];
}

void OrgJodaTimeDateTimeZone_Stub_readObjectWithJavaIoObjectInputStream_(OrgJodaTimeDateTimeZone_Stub *self, JavaIoObjectInputStream *inArg) {
  JreStrongAssign(&self->iID_, [((JavaIoObjectInputStream *) nil_chk(inArg)) readUTF]);
}

id OrgJodaTimeDateTimeZone_Stub_readResolve(OrgJodaTimeDateTimeZone_Stub *self) {
  return OrgJodaTimeDateTimeZone_forIDWithNSString_(self->iID_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeZone_Stub)
