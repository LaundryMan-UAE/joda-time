//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/LocalDateTime.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/LocalDateTime.h"
#include "org/joda/time/LocalTime.h"
#include "org/joda/time/ReadableDuration.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/convert/ConverterManager.h"
#include "org/joda/time/convert/PartialConverter.h"
#include "org/joda/time/field/AbstractReadableInstantFieldProperty.h"
#include "org/joda/time/format/DateTimeFormat.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

__attribute__((unused)) static JavaUtilDate *OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(OrgJodaTimeLocalDateTime *self, JavaUtilDate *date, JavaUtilTimeZone *timeZone);

@interface OrgJodaTimeLocalDateTime () {
 @public
  /**
   @brief The local millis from 1970-01-01T00:00:00
   */
  jlong iLocalMillis_;
  /**
   @brief The chronology to use in UTC
   */
  OrgJodaTimeChronology *iChronology_;
}

/**
 @brief Handle broken serialization from other tools.
 @return the resolved object, not null
 */
- (id)readResolve;

/**
 @brief Correct <code>date</code> in case of DST overlap.
 <p> The <code>Date</code> object created has exactly the same fields as this date-time, except when the time would be invalid due to a daylight savings gap. In that case, the time will be set to the earliest valid time after the gap. <p> In the case of a daylight savings overlap, the earlier instant is selected. <p> Converting to a JDK Date is full of complications as the JDK Date constructor doesn't behave as you might expect around DST transitions. This method works by taking a first guess and then adjusting. This also handles the situation where the JDK time zone data differs from the Joda-Time time zone data.
 */
- (JavaUtilDate *)correctDstTransitionWithJavaUtilDate:(JavaUtilDate *)date
                                  withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime, iChronology_, OrgJodaTimeChronology *)

@interface OrgJodaTimeLocalDateTime_Property () {
 @public
  /**
   @brief The instant this property is working against
   */
  OrgJodaTimeLocalDateTime *iInstant_;
  /**
   @brief The field this property is working against
   */
  OrgJodaTimeDateTimeField *iField_;
}

/**
 @brief Writes the property in a safe serialization format.
 */
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

/**
 @brief Reads the property from a safe serialization format.
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime_Property, iInstant_, OrgJodaTimeLocalDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime_Property, iField_, OrgJodaTimeDateTimeField *)

@implementation OrgJodaTimeLocalDateTime

+ (OrgJodaTimeLocalDateTime *)now {
  return OrgJodaTimeLocalDateTime_now();
}

+ (OrgJodaTimeLocalDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalDateTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalDateTime_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalDateTime *)parseWithNSString:(NSString *)str
         withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalDateTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalDateTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalDateTime_fromDateFieldsWithJavaUtilDate_(date);
}

- (instancetype)init {
  return [self initOrgJodaTimeLocalDateTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeLocalDateTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(jlong)instant {
  return [self initOrgJodaTimeLocalDateTimeWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeLocalDateTimeWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initOrgJodaTimeLocalDateTimeWithLong:(jlong)instant
                           withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withLong:instant];
    iLocalMillis_ = localMillis;
    OrgJodaTimeLocalDateTime_set_iChronology_(self, [chronology withUTC]);
  }
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateTimeWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [self initOrgJodaTimeLocalDateTimeWithId:instant withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
    OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    OrgJodaTimeLocalDateTime_set_iChronology_(self, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
    IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser()];
    iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
  }
  return self;
}

- (instancetype)initOrgJodaTimeLocalDateTimeWithId:(id)instant
                         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
    chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    OrgJodaTimeLocalDateTime_set_iChronology_(self, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
    IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser()];
    iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
  }
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateTimeWithId:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  return [self initOrgJodaTimeLocalDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0 withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  return [self initOrgJodaTimeLocalDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0 withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  return [self initOrgJodaTimeLocalDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initOrgJodaTimeLocalDateTimeWithInt:(jint)year
                                            withInt:(jint)monthOfYear
                                            withInt:(jint)dayOfMonth
                                            withInt:(jint)hourOfDay
                                            withInt:(jint)minuteOfHour
                                            withInt:(jint)secondOfMinute
                                            withInt:(jint)millisOfSecond
                          withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
    jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    OrgJodaTimeLocalDateTime_set_iChronology_(self, chronology);
    iLocalMillis_ = instant;
  }
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:chronology];
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return [[[OrgJodaTimeLocalDateTime alloc] initWithLong:iLocalMillis_ withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease];
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_get_UTC_())) isEqual:[((OrgJodaTimeChronology *) nil_chk(iChronology_)) getZone]] == NO) {
    return [[[OrgJodaTimeLocalDateTime alloc] initWithLong:iLocalMillis_ withOrgJodaTimeChronology:[iChronology_ withUTC]] autorelease];
  }
  return self;
}

- (jint)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalDateTime_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) year];
    case OrgJodaTimeLocalDateTime_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeLocalDateTime_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    case OrgJodaTimeLocalDateTime_MILLIS_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfDay];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalDateTime_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDateTime_MONTH_OF_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDateTime_DAY_OF_MONTH:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDateTime_MILLIS_OF_DAY:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return NO;
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return NO;
  }
  return [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return YES;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDateTime class]]) {
    OrgJodaTimeLocalDateTime *other = (OrgJodaTimeLocalDateTime *) check_class_cast(partial, [OrgJodaTimeLocalDateTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDateTime *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  check_protocol_cast(partial, @protocol(OrgJodaTimeReadablePartial));
  if (self == partial) {
    return 0;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDateTime class]]) {
    OrgJodaTimeLocalDateTime *other = (OrgJodaTimeLocalDateTime *) check_class_cast(partial, [OrgJodaTimeLocalDateTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDateTime *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeDateTime *)toDateTime {
  return [self toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *) check_class_cast(nil, [OrgJodaTimeDateTimeZone class])];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateTime alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withInt:[self getHourOfDay] withInt:[self getMinuteOfHour] withInt:[self getSecondOfMinute] withInt:[self getMillisOfSecond] withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeLocalDate *)toLocalDate {
  return [[[OrgJodaTimeLocalDate alloc] initWithLong:[self getLocalMillis] withOrgJodaTimeChronology:[self getChronology]] autorelease];
}

- (OrgJodaTimeLocalTime *)toLocalTime {
  return [[[OrgJodaTimeLocalTime alloc] initWithLong:[self getLocalMillis] withOrgJodaTimeChronology:[self getChronology]] autorelease];
}

- (JavaUtilDate *)toDate {
  jint dom = [self getDayOfMonth];
  JavaUtilDate *date = [[[JavaUtilDate alloc] initWithInt:[self getYear] - 1900 withInt:[self getMonthOfYear] - 1 withInt:dom withInt:[self getHourOfDay] withInt:[self getMinuteOfHour] withInt:[self getSecondOfMinute]] autorelease];
  [date setTimeWithLong:[date getTime] + [self getMillisOfSecond]];
  return OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(self, date, JavaUtilTimeZone_getDefault());
}

- (JavaUtilDate *)toDateWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JavaUtilCalendar *calendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(timeZone);
  [((JavaUtilCalendar *) nil_chk(calendar)) clear];
  [calendar setWithInt:[self getYear] withInt:[self getMonthOfYear] - 1 withInt:[self getDayOfMonth] withInt:[self getHourOfDay] withInt:[self getMinuteOfHour] withInt:[self getSecondOfMinute]];
  JavaUtilDate *date = [calendar getTime];
  [date setTimeWithLong:[((JavaUtilDate *) nil_chk(date)) getTime] + [self getMillisOfSecond]];
  return OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(self, date, timeZone);
}

- (JavaUtilDate *)correctDstTransitionWithJavaUtilDate:(JavaUtilDate *)date
                                  withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  return OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(self, date, timeZone);
}

- (OrgJodaTimeLocalDateTime *)withLocalMillisWithLong:(jlong)newMillis {
  return (newMillis == [self getLocalMillis] ? self : [[[OrgJodaTimeLocalDateTime alloc] initWithLong:newMillis withOrgJodaTimeChronology:[self getChronology]] autorelease]);
}

- (OrgJodaTimeLocalDateTime *)withDateWithInt:(jint)year
                                      withInt:(jint)monthOfYear
                                      withInt:(jint)dayOfMonth {
  OrgJodaTimeChronology *chrono = [self getChronology];
  jlong instant = [self getLocalMillis];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) setWithLong:instant withInt:year];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) setWithLong:instant withInt:monthOfYear];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono dayOfMonth])) setWithLong:instant withInt:dayOfMonth];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withTimeWithInt:(jint)hourOfDay
                                      withInt:(jint)minuteOfHour
                                      withInt:(jint)secondOfMinute
                                      withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *chrono = [self getChronology];
  jlong instant = [self getLocalMillis];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay])) setWithLong:instant withInt:hourOfDay];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono minuteOfHour])) setWithLong:instant withInt:minuteOfHour];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono secondOfMinute])) setWithLong:instant withInt:secondOfMinute];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfSecond])) setWithLong:instant withInt:millisOfSecond];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                withInt:(jint)value {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                     withInt:(jint)amount {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                       withInt:(jint)scalar {
  if (durationToAdd == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithLong:[self getLocalMillis] withLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(durationToAdd)) getMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                                   withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getLocalMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:1];
}

- (OrgJodaTimeLocalDateTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalDateTime *)plusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:-1];
}

- (OrgJodaTimeLocalDateTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalDateTime *)minusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) subtractWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) subtractWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) subtractWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) subtractWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]]] autorelease];
}

- (jint)getEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) getWithLong:[self getLocalMillis]];
}

- (jint)getCenturyOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfCentury {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) getWithLong:[self getLocalMillis]];
}

- (jint)getYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getMonthOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekOfWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfMonth {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfWeek {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) getWithLong:[self getLocalMillis]];
}

- (jint)getHourOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
}

- (jint)getMinuteOfHour {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
}

- (jint)getSecondOfMinute {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfSecond {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalDateTime *)withEraWithInt:(jint)era {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) setWithLong:[self getLocalMillis] withInt:era]];
}

- (OrgJodaTimeLocalDateTime *)withCenturyOfEraWithInt:(jint)centuryOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) setWithLong:[self getLocalMillis] withInt:centuryOfEra]];
}

- (OrgJodaTimeLocalDateTime *)withYearOfEraWithInt:(jint)yearOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) setWithLong:[self getLocalMillis] withInt:yearOfEra]];
}

- (OrgJodaTimeLocalDateTime *)withYearOfCenturyWithInt:(jint)yearOfCentury {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) setWithLong:[self getLocalMillis] withInt:yearOfCentury]];
}

- (OrgJodaTimeLocalDateTime *)withYearWithInt:(jint)year {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getLocalMillis] withInt:year]];
}

- (OrgJodaTimeLocalDateTime *)withWeekyearWithInt:(jint)weekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getLocalMillis] withInt:weekyear]];
}

- (OrgJodaTimeLocalDateTime *)withMonthOfYearWithInt:(jint)monthOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getLocalMillis] withInt:monthOfYear]];
}

- (OrgJodaTimeLocalDateTime *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getLocalMillis] withInt:weekOfWeekyear]];
}

- (OrgJodaTimeLocalDateTime *)withDayOfYearWithInt:(jint)dayOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getLocalMillis] withInt:dayOfYear]];
}

- (OrgJodaTimeLocalDateTime *)withDayOfMonthWithInt:(jint)dayOfMonth {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getLocalMillis] withInt:dayOfMonth]];
}

- (OrgJodaTimeLocalDateTime *)withDayOfWeekWithInt:(jint)dayOfWeek {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getLocalMillis] withInt:dayOfWeek]];
}

- (OrgJodaTimeLocalDateTime *)withHourOfDayWithInt:(jint)hour {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getLocalMillis] withInt:hour]];
}

- (OrgJodaTimeLocalDateTime *)withMinuteOfHourWithInt:(jint)minute {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getLocalMillis] withInt:minute]];
}

- (OrgJodaTimeLocalDateTime *)withSecondOfMinuteWithInt:(jint)second {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getLocalMillis] withInt:second]];
}

- (OrgJodaTimeLocalDateTime *)withMillisOfSecondWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalDateTime *)withMillisOfDayWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalDateTime_Property *)era {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)centuryOfEra {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)yearOfCentury {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)yearOfEra {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)year {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)weekyear {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)monthOfYear {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)weekOfWeekyear {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)dayOfYear {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)dayOfMonth {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)dayOfWeek {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)hourOfDay {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)minuteOfHour {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)secondOfMinute {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)millisOfSecond {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]] autorelease];
}

- (OrgJodaTimeLocalDateTime_Property *)millisOfDay {
  return [[[OrgJodaTimeLocalDateTime_Property alloc] initWithOrgJodaTimeLocalDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]] autorelease];
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_dateTime())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeLocalDateTime *)other {
  [super copyAllFieldsTo:other];
  other->iLocalMillis_ = iLocalMillis_;
  OrgJodaTimeLocalDateTime_set_iChronology_(other, iChronology_);
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.LocalDateTime;", 0x9, NULL },
    { "init", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithLong:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithId:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "LocalDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "LocalDateTime", NULL, 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getWithOrgJodaTimeDateTimeFieldType:", "get", "I", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeFieldType:", "isSupported", "Z", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDurationFieldType:", "isSupported", "Z", 0x1, NULL },
    { "getLocalMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "compareToWithOrgJodaTimeReadablePartial:", "compareTo", "I", 0x1, NULL },
    { "toDateTime", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeDateTimeZone:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toLocalDate", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "toLocalTime", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "toDate", NULL, "Ljava.util.Date;", 0x1, NULL },
    { "toDateWithJavaUtilTimeZone:", "toDate", "Ljava.util.Date;", 0x1, NULL },
    { "correctDstTransitionWithJavaUtilDate:withJavaUtilTimeZone:", "correctDstTransition", "Ljava.util.Date;", 0x2, NULL },
    { "withLocalMillisWithLong:", "withLocalMillis", "Lorg.joda.time.LocalDateTime;", 0x0, NULL },
    { "withDateWithInt:withInt:withInt:", "withDate", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withTimeWithInt:withInt:withInt:withInt:", "withTime", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withFieldsWithOrgJodaTimeReadablePartial:", "withFields", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withDurationAddedWithOrgJodaTimeReadableDuration:withInt:", "withDurationAdded", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadableDuration:", "plus", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusYearsWithInt:", "plusYears", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusMonthsWithInt:", "plusMonths", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusWeeksWithInt:", "plusWeeks", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusDaysWithInt:", "plusDays", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusHoursWithInt:", "plusHours", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusMinutesWithInt:", "plusMinutes", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusSecondsWithInt:", "plusSeconds", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "plusMillisWithInt:", "plusMillis", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadableDuration:", "minus", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusYearsWithInt:", "minusYears", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusMonthsWithInt:", "minusMonths", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusWeeksWithInt:", "minusWeeks", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusDaysWithInt:", "minusDays", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusHoursWithInt:", "minusHours", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusMinutesWithInt:", "minusMinutes", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusSecondsWithInt:", "minusSeconds", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "minusMillisWithInt:", "minusMillis", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "getEra", NULL, "I", 0x1, NULL },
    { "getCenturyOfEra", NULL, "I", 0x1, NULL },
    { "getYearOfEra", NULL, "I", 0x1, NULL },
    { "getYearOfCentury", NULL, "I", 0x1, NULL },
    { "getYear", NULL, "I", 0x1, NULL },
    { "getWeekyear", NULL, "I", 0x1, NULL },
    { "getMonthOfYear", NULL, "I", 0x1, NULL },
    { "getWeekOfWeekyear", NULL, "I", 0x1, NULL },
    { "getDayOfYear", NULL, "I", 0x1, NULL },
    { "getDayOfMonth", NULL, "I", 0x1, NULL },
    { "getDayOfWeek", NULL, "I", 0x1, NULL },
    { "getHourOfDay", NULL, "I", 0x1, NULL },
    { "getMinuteOfHour", NULL, "I", 0x1, NULL },
    { "getSecondOfMinute", NULL, "I", 0x1, NULL },
    { "getMillisOfSecond", NULL, "I", 0x1, NULL },
    { "getMillisOfDay", NULL, "I", 0x1, NULL },
    { "withEraWithInt:", "withEra", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withCenturyOfEraWithInt:", "withCenturyOfEra", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withYearOfEraWithInt:", "withYearOfEra", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withYearOfCenturyWithInt:", "withYearOfCentury", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withYearWithInt:", "withYear", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withWeekyearWithInt:", "withWeekyear", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withMonthOfYearWithInt:", "withMonthOfYear", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withWeekOfWeekyearWithInt:", "withWeekOfWeekyear", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withDayOfYearWithInt:", "withDayOfYear", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withDayOfMonthWithInt:", "withDayOfMonth", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withDayOfWeekWithInt:", "withDayOfWeek", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withHourOfDayWithInt:", "withHourOfDay", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withMinuteOfHourWithInt:", "withMinuteOfHour", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withSecondOfMinuteWithInt:", "withSecondOfMinute", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withMillisOfSecondWithInt:", "withMillisOfSecond", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withMillisOfDayWithInt:", "withMillisOfDay", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "era", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "year", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "weekyear", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.LocalDateTime$Property;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeLocalDateTime_serialVersionUID },
    { "YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDateTime_YEAR },
    { "MONTH_OF_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDateTime_MONTH_OF_YEAR },
    { "DAY_OF_MONTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDateTime_DAY_OF_MONTH },
    { "MILLIS_OF_DAY_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDateTime_MILLIS_OF_DAY },
    { "iLocalMillis_", NULL, 0x12, "J", NULL,  },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDateTime = { 1, "LocalDateTime", "org.joda.time", NULL, 0x11, 118, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeLocalDateTime;
}

@end

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_now() {
  OrgJodaTimeLocalDateTime_init();
  return [[[OrgJodaTimeLocalDateTime alloc] init] autorelease];
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDateTime_init();
  if (zone == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Zone must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalDateTime alloc] initWithOrgJodaTimeDateTimeZone:zone] autorelease];
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalDateTime_init();
  if (chronology == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Chronology must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalDateTime alloc] initWithOrgJodaTimeChronology:chronology] autorelease];
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalDateTime_init();
  return OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser());
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalDateTime_init();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalDateTimeWithNSString:str];
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalDateTime_init();
  if (calendar == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The calendar must not be null"] autorelease];
  }
  jint era = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_ERA];
  jint yearOfEra = [calendar getWithInt:JavaUtilCalendar_YEAR];
  return [[[OrgJodaTimeLocalDateTime alloc] initWithInt:(era == JavaUtilGregorianCalendar_AD ? yearOfEra : 1 - yearOfEra) withInt:[calendar getWithInt:JavaUtilCalendar_MONTH] + 1 withInt:[calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH] withInt:[calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY] withInt:[calendar getWithInt:JavaUtilCalendar_MINUTE] withInt:[calendar getWithInt:JavaUtilCalendar_SECOND] withInt:[calendar getWithInt:JavaUtilCalendar_MILLISECOND]] autorelease];
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalDateTime_init();
  if (date == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The date must not be null"] autorelease];
  }
  if ([((JavaUtilDate *) nil_chk(date)) getTime] < 0) {
    JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] init] autorelease];
    [cal setTimeWithJavaUtilDate:date];
    return OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(cal);
  }
  return [[[OrgJodaTimeLocalDateTime alloc] initWithInt:[date getYear] + 1900 withInt:[date getMonth] + 1 withInt:[date getDate] withInt:[date getHours] withInt:[date getMinutes] withInt:[date getSeconds] withInt:(((jint) ([date getTime] % 1000)) + 1000) % 1000] autorelease];
}

JavaUtilDate *OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(OrgJodaTimeLocalDateTime *self, JavaUtilDate *date, JavaUtilTimeZone *timeZone) {
  JavaUtilCalendar *calendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(timeZone);
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:date];
  OrgJodaTimeLocalDateTime *check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
  if ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self]) {
    while ([check isBeforeWithOrgJodaTimeReadablePartial:self]) {
      [calendar setTimeInMillisWithLong:[calendar getTimeInMillis] + 60000];
      check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
    }
    while ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self] == NO) {
      [calendar setTimeInMillisWithLong:[calendar getTimeInMillis] - 1000];
      check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
    }
    [calendar setTimeInMillisWithLong:[calendar getTimeInMillis] + 1000];
  }
  else if ([check isEqual:self]) {
    JavaUtilCalendar *earlier = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(timeZone);
    [((JavaUtilCalendar *) nil_chk(earlier)) setTimeInMillisWithLong:[calendar getTimeInMillis] - [((JavaUtilTimeZone *) nil_chk(timeZone)) getDSTSavings]];
    check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(earlier);
    if ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isEqual:self]) {
      calendar = earlier;
    }
  }
  return [calendar getTime];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalDateTime)

@implementation OrgJodaTimeLocalDateTime_Property

- (instancetype)initWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)instant
                    withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  if (self = [super init]) {
    OrgJodaTimeLocalDateTime_Property_set_iInstant_(self, instant);
    OrgJodaTimeLocalDateTime_Property_set_iField_(self, field);
  }
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  OrgJodaTimeLocalDateTime_Property_set_iInstant_(self, (OrgJodaTimeLocalDateTime *) check_class_cast([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalDateTime class]));
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) check_class_cast([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  OrgJodaTimeLocalDateTime_Property_set_iField_(self, [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getChronology]]);
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalDateTime *)getLocalDateTime {
  return iInstant_;
}

- (OrgJodaTimeLocalDateTime *)addToCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDateTime *)addToCopyWithLong:(jlong)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis] withLong:value]];
}

- (OrgJodaTimeLocalDateTime *)addWrapFieldToCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDateTime *)setCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDateTime *)setCopyWithNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalDateTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalDateTime *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalDateTime *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalDateTime *)roundFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundHalfFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundHalfCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundHalfEvenCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (void)dealloc {
  RELEASE_(iInstant_);
  RELEASE_(iField_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeLocalDateTime_Property *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeLocalDateTime_Property_set_iInstant_(other, iInstant_);
  OrgJodaTimeLocalDateTime_Property_set_iField_(other, iField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeLocalDateTime:withOrgJodaTimeDateTimeField:", "Property", NULL, 0x0, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x4, NULL },
    { "getLocalDateTime", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "addToCopyWithLong:", "addToCopy", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "roundFloorCopy", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "roundCeilingCopy", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "roundHalfFloorCopy", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "roundHalfCeilingCopy", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "roundHalfEvenCopy", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeLocalDateTime_Property_serialVersionUID },
    { "iInstant_", NULL, 0x82, "Lorg.joda.time.LocalDateTime;", NULL,  },
    { "iField_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDateTime_Property = { 1, "Property", "org.joda.time", "LocalDateTime", 0x19, 20, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeLocalDateTime_Property;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalDateTime_Property)
