//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/convert/ReadablePartialConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeConvertReadablePartialConverter")
#ifdef RESTRICT_OrgJodaTimeConvertReadablePartialConverter
#define INCLUDE_ALL_OrgJodaTimeConvertReadablePartialConverter 0
#else
#define INCLUDE_ALL_OrgJodaTimeConvertReadablePartialConverter 1
#endif
#undef RESTRICT_OrgJodaTimeConvertReadablePartialConverter

#if !defined (OrgJodaTimeConvertReadablePartialConverter_) && (INCLUDE_ALL_OrgJodaTimeConvertReadablePartialConverter || defined(INCLUDE_OrgJodaTimeConvertReadablePartialConverter))
#define OrgJodaTimeConvertReadablePartialConverter_

#define RESTRICT_OrgJodaTimeConvertAbstractConverter 1
#define INCLUDE_OrgJodaTimeConvertAbstractConverter 1
#include "org/joda/time/convert/AbstractConverter.h"

#define RESTRICT_OrgJodaTimeConvertPartialConverter 1
#define INCLUDE_OrgJodaTimeConvertPartialConverter 1
#include "org/joda/time/convert/PartialConverter.h"

@class IOSClass;
@class IOSIntArray;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@protocol OrgJodaTimeReadablePartial;

/*!
 @brief ReadablePartialConverter extracts partial fields and chronology from a ReadablePartial.
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeConvertReadablePartialConverter : OrgJodaTimeConvertAbstractConverter < OrgJodaTimeConvertPartialConverter >

#pragma mark Public

/*!
 @brief Gets the chronology, which is taken from the ReadableInstant.
 <p>
  If the passed in chronology is non-null, it is used.
  Otherwise the chronology from the instant is used.
 @param object the ReadablePartial to convert, must not be null
 @param chrono the chronology to use, null means use that from object
 @return the chronology, never null
 */
- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Gets the chronology, which is taken from the ReadablePartial.
 @param object the ReadablePartial to convert, must not be null
 @param zone the specified zone to use, null means default zone
 @return the chronology, never null
 */
- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                   withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Extracts the values of the partial from an object of this converter's type.
 The chrono parameter is a hint to the converter, should it require a
  chronology to aid in conversion.
 @param fieldSource a partial that provides access to the fields.   This partial may be incomplete and only getFieldType(int) should be used
 @param object the object to convert
 @param chrono the chronology to use, which is the non-null result of getChronology()
 @return the array of field values that match the fieldSource, must be non-null valid
 @throw ClassCastExceptionif the object is invalid
 */
- (IOSIntArray *)getPartialValuesWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)fieldSource
                                                         withId:(id)object
                                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Returns ReadableInstant.class.
 @return ReadableInstant.class
 */
- (IOSClass *)getSupportedType;

#pragma mark Protected

/*!
 @brief Restricted constructor.
 */
- (instancetype)init;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeConvertReadablePartialConverter)

/*!
 @brief Singleton instance.
 */
inline OrgJodaTimeConvertReadablePartialConverter *OrgJodaTimeConvertReadablePartialConverter_get_INSTANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeConvertReadablePartialConverter *OrgJodaTimeConvertReadablePartialConverter_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeConvertReadablePartialConverter, INSTANCE, OrgJodaTimeConvertReadablePartialConverter *)

FOUNDATION_EXPORT void OrgJodaTimeConvertReadablePartialConverter_init(OrgJodaTimeConvertReadablePartialConverter *self);

FOUNDATION_EXPORT OrgJodaTimeConvertReadablePartialConverter *new_OrgJodaTimeConvertReadablePartialConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeConvertReadablePartialConverter *create_OrgJodaTimeConvertReadablePartialConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeConvertReadablePartialConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeConvertReadablePartialConverter")
