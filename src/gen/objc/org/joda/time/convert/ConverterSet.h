//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/joda-time/src/main/java/org/joda/time/convert/ConverterSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeConvertConverterSet")
#ifdef RESTRICT_OrgJodaTimeConvertConverterSet
#define INCLUDE_ALL_OrgJodaTimeConvertConverterSet 0
#else
#define INCLUDE_ALL_OrgJodaTimeConvertConverterSet 1
#endif
#undef RESTRICT_OrgJodaTimeConvertConverterSet

#if !defined (OrgJodaTimeConvertConverterSet_) && (INCLUDE_ALL_OrgJodaTimeConvertConverterSet || defined(INCLUDE_OrgJodaTimeConvertConverterSet))
#define OrgJodaTimeConvertConverterSet_

@class IOSClass;
@class IOSObjectArray;
@protocol OrgJodaTimeConvertConverter;

/*!
 @brief A set of converters, which allows exact converters to be quickly
 selected.
 This class is threadsafe because it is (essentially) immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeConvertConverterSet : NSObject

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeConvertConverterArray:(IOSObjectArray *)converters;

/*!
 @brief Returns a copy of this set, with the given converter added.
 If a
 matching converter is already in the set, the given converter replaces
 it. If the converter is exactly the same as one already in the set, the
 original set is returned.
 @param converter  converter to add, must not be null
 @param removed  if not null, element 0 is set to the removed converter
 @throws NullPointerException if converter is null
 */
- (OrgJodaTimeConvertConverterSet *)addWithOrgJodaTimeConvertConverter:(id<OrgJodaTimeConvertConverter>)converter
                                  withOrgJodaTimeConvertConverterArray:(IOSObjectArray *)removed;

/*!
 @brief Copies all the converters in the set to the given array.
 */
- (void)copyIntoWithOrgJodaTimeConvertConverterArray:(IOSObjectArray *)converters OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a copy of this set, with the given converter removed.
 If the
 converter was not in the set, the original set is returned.
 @param converter  converter to remove, must not be null
 @param removed  if not null, element 0 is set to the removed converter
 @throws NullPointerException if converter is null
 */
- (OrgJodaTimeConvertConverterSet *)removeWithOrgJodaTimeConvertConverter:(id<OrgJodaTimeConvertConverter>)converter
                                     withOrgJodaTimeConvertConverterArray:(IOSObjectArray *)removed;

/*!
 @brief Returns a copy of this set, with the converter at the given index
 removed.
 @param index index of converter to remove
 @param removed if not null, element 0 is set to the removed converter
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (OrgJodaTimeConvertConverterSet *)removeWithInt:(jint)index
             withOrgJodaTimeConvertConverterArray:(IOSObjectArray *)removed;

/*!
 @brief Returns the closest matching converter for the given type, or null if
 none found.
 @param type type to select, which may be null
 @throws IllegalStateException if multiple converters match the type
 equally well
 */
- (id<OrgJodaTimeConvertConverter>)selectWithIOSClass:(IOSClass *)type;

/*!
 @brief Returns the amount of converters in the set.
 */
- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeConvertConverterSet)

FOUNDATION_EXPORT void OrgJodaTimeConvertConverterSet_initWithOrgJodaTimeConvertConverterArray_(OrgJodaTimeConvertConverterSet *self, IOSObjectArray *converters);

FOUNDATION_EXPORT OrgJodaTimeConvertConverterSet *new_OrgJodaTimeConvertConverterSet_initWithOrgJodaTimeConvertConverterArray_(IOSObjectArray *converters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeConvertConverterSet *create_OrgJodaTimeConvertConverterSet_initWithOrgJodaTimeConvertConverterArray_(IOSObjectArray *converters);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeConvertConverterSet)

#endif

#if !defined (OrgJodaTimeConvertConverterSet_Entry_) && (INCLUDE_ALL_OrgJodaTimeConvertConverterSet || defined(INCLUDE_OrgJodaTimeConvertConverterSet_Entry))
#define OrgJodaTimeConvertConverterSet_Entry_

@class IOSClass;
@protocol OrgJodaTimeConvertConverter;

@interface OrgJodaTimeConvertConverterSet_Entry : NSObject {
 @public
  IOSClass *iType_;
  id<OrgJodaTimeConvertConverter> iConverter_;
}

#pragma mark Package-Private

- (instancetype)initWithIOSClass:(IOSClass *)type
 withOrgJodaTimeConvertConverter:(id<OrgJodaTimeConvertConverter>)converter;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeConvertConverterSet_Entry)

J2OBJC_FIELD_SETTER(OrgJodaTimeConvertConverterSet_Entry, iType_, IOSClass *)
J2OBJC_FIELD_SETTER(OrgJodaTimeConvertConverterSet_Entry, iConverter_, id<OrgJodaTimeConvertConverter>)

FOUNDATION_EXPORT void OrgJodaTimeConvertConverterSet_Entry_initWithIOSClass_withOrgJodaTimeConvertConverter_(OrgJodaTimeConvertConverterSet_Entry *self, IOSClass *type, id<OrgJodaTimeConvertConverter> converter);

FOUNDATION_EXPORT OrgJodaTimeConvertConverterSet_Entry *new_OrgJodaTimeConvertConverterSet_Entry_initWithIOSClass_withOrgJodaTimeConvertConverter_(IOSClass *type, id<OrgJodaTimeConvertConverter> converter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeConvertConverterSet_Entry *create_OrgJodaTimeConvertConverterSet_Entry_initWithIOSClass_withOrgJodaTimeConvertConverter_(IOSClass *type, id<OrgJodaTimeConvertConverter> converter);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeConvertConverterSet_Entry)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeConvertConverterSet")
