//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/Years.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/Period.h"
#include "org/joda/time/PeriodType.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadableInterval.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/Years.h"
#include "org/joda/time/base/BaseSingleFieldPeriod.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/ISOPeriodFormat.h"
#include "org/joda/time/format/PeriodFormatter.h"

@interface OrgJodaTimeYears ()

/*!
 @brief Creates a new instance representing a number of years.
 You should consider using the factory method <code>years(int)</code>
  instead of the constructor.
 @param years the number of years to represent
 */
- (instancetype)initWithInt:(jint)years;

/*!
 @brief Resolves singletons.
 @return the singleton instance
 */
- (id)readResolve;

@end

/*!
 @brief The paser to use for this class.
 */
inline OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeYears_get_PARSER(void);
static OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeYears_PARSER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeYears, PARSER, OrgJodaTimeFormatPeriodFormatter *)

/*!
 @brief Serialization version.
 */
inline jlong OrgJodaTimeYears_get_serialVersionUID(void);
#define OrgJodaTimeYears_serialVersionUID 87525275727380868LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeYears, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeYears_initWithInt_(OrgJodaTimeYears *self, jint years);

__attribute__((unused)) static OrgJodaTimeYears *new_OrgJodaTimeYears_initWithInt_(jint years) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeYears *create_OrgJodaTimeYears_initWithInt_(jint years);

__attribute__((unused)) static id OrgJodaTimeYears_readResolve(OrgJodaTimeYears *self);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeYears__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeYears__Annotations$1(void);

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeYears)

OrgJodaTimeYears *OrgJodaTimeYears_ZERO;
OrgJodaTimeYears *OrgJodaTimeYears_ONE;
OrgJodaTimeYears *OrgJodaTimeYears_TWO;
OrgJodaTimeYears *OrgJodaTimeYears_THREE;
OrgJodaTimeYears *OrgJodaTimeYears_MAX_VALUE;
OrgJodaTimeYears *OrgJodaTimeYears_MIN_VALUE;

@implementation OrgJodaTimeYears

+ (OrgJodaTimeYears *)yearsWithInt:(jint)years {
  return OrgJodaTimeYears_yearsWithInt_(years);
}

+ (OrgJodaTimeYears *)yearsBetweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                  withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(start, end);
}

+ (OrgJodaTimeYears *)yearsBetweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                  withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end {
  return OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(start, end);
}

+ (OrgJodaTimeYears *)yearsInWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeYears_yearsInWithOrgJodaTimeReadableInterval_(interval);
}

+ (OrgJodaTimeYears *)parseYearsWithNSString:(NSString *)periodStr {
  return OrgJodaTimeYears_parseYearsWithNSString_(periodStr);
}

- (instancetype)initWithInt:(jint)years {
  OrgJodaTimeYears_initWithInt_(self, years);
  return self;
}

- (id)readResolve {
  return OrgJodaTimeYears_readResolve(self);
}

- (OrgJodaTimeDurationFieldType *)getFieldType {
  return OrgJodaTimeDurationFieldType_years();
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return OrgJodaTimePeriodType_years();
}

- (jint)getYears {
  return [self getValue];
}

- (OrgJodaTimeYears *)plusWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  return OrgJodaTimeYears_yearsWithInt_(OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_([self getValue], years));
}

- (OrgJodaTimeYears *)plusWithOrgJodaTimeYears:(OrgJodaTimeYears *)years {
  if (years == nil) {
    return self;
  }
  return [self plusWithInt:[years getValue]];
}

- (OrgJodaTimeYears *)minusWithInt:(jint)years {
  return [self plusWithInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(years)];
}

- (OrgJodaTimeYears *)minusWithOrgJodaTimeYears:(OrgJodaTimeYears *)years {
  if (years == nil) {
    return self;
  }
  return [self minusWithInt:[years getValue]];
}

- (OrgJodaTimeYears *)multipliedByWithInt:(jint)scalar {
  return OrgJodaTimeYears_yearsWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], scalar));
}

- (OrgJodaTimeYears *)dividedByWithInt:(jint)divisor {
  if (divisor == 1) {
    return self;
  }
  return OrgJodaTimeYears_yearsWithInt_([self getValue] / divisor);
}

- (OrgJodaTimeYears *)negated {
  return OrgJodaTimeYears_yearsWithInt_(OrgJodaTimeFieldFieldUtils_safeNegateWithInt_([self getValue]));
}

- (jboolean)isGreaterThanWithOrgJodaTimeYears:(OrgJodaTimeYears *)other {
  if (other == nil) {
    return [self getValue] > 0;
  }
  return [self getValue] > [other getValue];
}

- (jboolean)isLessThanWithOrgJodaTimeYears:(OrgJodaTimeYears *)other {
  if (other == nil) {
    return [self getValue] < 0;
  }
  return [self getValue] < [other getValue];
}

- (NSString *)description {
  return JreStrcat("C$C", 'P', NSString_java_valueOfInt_([self getValue]), 'Y');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeYears;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x9, 7, 8, -1, -1, 9, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePeriodType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYears;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, 18, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(yearsWithInt:);
  methods[1].selector = @selector(yearsBetweenWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:);
  methods[2].selector = @selector(yearsBetweenWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:);
  methods[3].selector = @selector(yearsInWithOrgJodaTimeReadableInterval:);
  methods[4].selector = @selector(parseYearsWithNSString:);
  methods[5].selector = @selector(initWithInt:);
  methods[6].selector = @selector(readResolve);
  methods[7].selector = @selector(getFieldType);
  methods[8].selector = @selector(getPeriodType);
  methods[9].selector = @selector(getYears);
  methods[10].selector = @selector(plusWithInt:);
  methods[11].selector = @selector(plusWithOrgJodaTimeYears:);
  methods[12].selector = @selector(minusWithInt:);
  methods[13].selector = @selector(minusWithOrgJodaTimeYears:);
  methods[14].selector = @selector(multipliedByWithInt:);
  methods[15].selector = @selector(dividedByWithInt:);
  methods[16].selector = @selector(negated);
  methods[17].selector = @selector(isGreaterThanWithOrgJodaTimeYears:);
  methods[18].selector = @selector(isLessThanWithOrgJodaTimeYears:);
  methods[19].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LOrgJodaTimeYears;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "ONE", "LOrgJodaTimeYears;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "TWO", "LOrgJodaTimeYears;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "THREE", "LOrgJodaTimeYears;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "MAX_VALUE", "LOrgJodaTimeYears;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "MIN_VALUE", "LOrgJodaTimeYears;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "PARSER", "LOrgJodaTimeFormatPeriodFormatter;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeYears_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "years", "I", "yearsBetween", "LOrgJodaTimeReadableInstant;LOrgJodaTimeReadableInstant;", "LOrgJodaTimeReadablePartial;LOrgJodaTimeReadablePartial;", "yearsIn", "LOrgJodaTimeReadableInterval;", "parseYears", "LNSString;", (void *)&OrgJodaTimeYears__Annotations$0, "plus", "LOrgJodaTimeYears;", "minus", "multipliedBy", "dividedBy", "isGreaterThan", "isLessThan", "toString", (void *)&OrgJodaTimeYears__Annotations$1, &OrgJodaTimeYears_ZERO, &OrgJodaTimeYears_ONE, &OrgJodaTimeYears_TWO, &OrgJodaTimeYears_THREE, &OrgJodaTimeYears_MAX_VALUE, &OrgJodaTimeYears_MIN_VALUE, &OrgJodaTimeYears_PARSER };
  static const J2ObjcClassInfo _OrgJodaTimeYears = { "Years", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 20, 8, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeYears;
}

+ (void)initialize {
  if (self == [OrgJodaTimeYears class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeYears_ZERO, new_OrgJodaTimeYears_initWithInt_(0));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_ONE, new_OrgJodaTimeYears_initWithInt_(1));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_TWO, new_OrgJodaTimeYears_initWithInt_(2));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_THREE, new_OrgJodaTimeYears_initWithInt_(3));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_MAX_VALUE, new_OrgJodaTimeYears_initWithInt_(JavaLangInteger_MAX_VALUE));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_MIN_VALUE, new_OrgJodaTimeYears_initWithInt_(JavaLangInteger_MIN_VALUE));
    JreStrongAssign(&OrgJodaTimeYears_PARSER, [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeFormatISOPeriodFormat_standard())) withParseTypeWithOrgJodaTimePeriodType:OrgJodaTimePeriodType_years()]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeYears)
  }
}

@end

OrgJodaTimeYears *OrgJodaTimeYears_yearsWithInt_(jint years) {
  OrgJodaTimeYears_initialize();
  switch (years) {
    case 0:
    return OrgJodaTimeYears_ZERO;
    case 1:
    return OrgJodaTimeYears_ONE;
    case 2:
    return OrgJodaTimeYears_TWO;
    case 3:
    return OrgJodaTimeYears_THREE;
    case JavaLangInteger_MAX_VALUE:
    return OrgJodaTimeYears_MAX_VALUE;
    case JavaLangInteger_MIN_VALUE:
    return OrgJodaTimeYears_MIN_VALUE;
    default:
    return create_OrgJodaTimeYears_initWithInt_(years);
  }
}

OrgJodaTimeYears *OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end) {
  OrgJodaTimeYears_initialize();
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_(start, end, OrgJodaTimeDurationFieldType_years());
  return OrgJodaTimeYears_yearsWithInt_(amount);
}

OrgJodaTimeYears *OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end) {
  OrgJodaTimeYears_initialize();
  if ([start isKindOfClass:[OrgJodaTimeLocalDate class]] && [end isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getChronology]);
    jint years = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) years])) getDifferenceWithLong:[((OrgJodaTimeLocalDate *) nil_chk(((OrgJodaTimeLocalDate *) cast_chk(end, [OrgJodaTimeLocalDate class])))) getLocalMillis] withLong:[((OrgJodaTimeLocalDate *) cast_chk(start, [OrgJodaTimeLocalDate class])) getLocalMillis]];
    return OrgJodaTimeYears_yearsWithInt_(years);
  }
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePeriod_(start, end, OrgJodaTimeYears_ZERO);
  return OrgJodaTimeYears_yearsWithInt_(amount);
}

OrgJodaTimeYears *OrgJodaTimeYears_yearsInWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeYears_initialize();
  if (interval == nil) {
    return OrgJodaTimeYears_ZERO;
  }
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_([interval getStart], [interval getEnd], OrgJodaTimeDurationFieldType_years());
  return OrgJodaTimeYears_yearsWithInt_(amount);
}

OrgJodaTimeYears *OrgJodaTimeYears_parseYearsWithNSString_(NSString *periodStr) {
  OrgJodaTimeYears_initialize();
  if (periodStr == nil) {
    return OrgJodaTimeYears_ZERO;
  }
  OrgJodaTimePeriod *p = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeYears_PARSER)) parsePeriodWithNSString:periodStr];
  return OrgJodaTimeYears_yearsWithInt_([((OrgJodaTimePeriod *) nil_chk(p)) getYears]);
}

void OrgJodaTimeYears_initWithInt_(OrgJodaTimeYears *self, jint years) {
  OrgJodaTimeBaseBaseSingleFieldPeriod_initWithInt_(self, years);
}

OrgJodaTimeYears *new_OrgJodaTimeYears_initWithInt_(jint years) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYears, initWithInt_, years)
}

OrgJodaTimeYears *create_OrgJodaTimeYears_initWithInt_(jint years) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYears, initWithInt_, years)
}

id OrgJodaTimeYears_readResolve(OrgJodaTimeYears *self) {
  return OrgJodaTimeYears_yearsWithInt_([self getValue]);
}

IOSObjectArray *OrgJodaTimeYears__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeYears__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJodaConvertToString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeYears)
