//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/DateTimeZone.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeDateTimeZone")
#ifdef RESTRICT_OrgJodaTimeDateTimeZone
#define INCLUDE_ALL_OrgJodaTimeDateTimeZone 0
#else
#define INCLUDE_ALL_OrgJodaTimeDateTimeZone 1
#endif
#undef RESTRICT_OrgJodaTimeDateTimeZone

#if !defined (OrgJodaTimeDateTimeZone_) && (INCLUDE_ALL_OrgJodaTimeDateTimeZone || defined(INCLUDE_OrgJodaTimeDateTimeZone))
#define OrgJodaTimeDateTimeZone_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaUtilLocale;
@class JavaUtilTimeZone;
@class OrgJodaTimeLocalDateTime;
@protocol JavaUtilSet;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeTzNameProvider;
@protocol OrgJodaTimeTzProvider;

/*!
 @brief DateTimeZone represents a time zone.
 <p>
  A time zone is a system of rules to convert time from one geographic 
  location to another. For example, Paris, France is one hour ahead of
  London, England. Thus when it is 10:00 in London, it is 11:00 in Paris. 
 <p>
  All time zone rules are expressed, for historical reasons, relative to
  Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean
  Time (GMT).  This is similar, but not precisely identical, to Universal 
  Coordinated Time, or UTC. This library only uses the term UTC. 
 <p>
  Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00
  in the summer. The offset -08:00 indicates that America/Los_Angeles time is
  obtained from UTC by adding -08:00, that is, by subtracting 8 hours. 
 <p>
  The offset differs in the summer because of daylight saving time, or DST.
  The following definitions of time are generally used: 
 <ul>
  <li>UTC - The reference time. 
 <li>Standard Time - The local time without a daylight saving time offset.
  For example, in Paris, standard time is UTC+01:00. 
 <li>Daylight Saving Time - The local time with a daylight saving time 
  offset. This offset is typically one hour, but not always. It is typically
  used in most countries away from the equator.  In Paris, daylight saving 
  time is UTC+02:00. 
 <li>Wall Time - This is what a local clock on the wall reads. This will be
  either Standard Time or Daylight Saving Time depending on the time of year
  and whether the location uses Daylight Saving Time. 
 </ul>
  <p>
  Unlike the Java TimeZone class, DateTimeZone is immutable. It also only
  supports long format time zone ids. Thus EST and ECT are not accepted.
  However, the factory that accepts a TimeZone will attempt to convert from
  the old short id to a suitable long id. 
 <p>
  DateTimeZone is thread-safe and immutable, and all subclasses must be as
  well.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeDateTimeZone : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Adjusts the offset to be the earlier or later one during an overlap.
 @param instant the instant to adjust
 @param earlierOrLater false for earlier, true for later
 @return the adjusted instant millis
 */
- (jlong)adjustOffsetWithLong:(jlong)instant
                  withBoolean:(jboolean)earlierOrLater;

/*!
 @brief Converts a local instant to a standard UTC instant with the same
  local time.This conversion is used after performing a calculation
  where the calculation was done using a simple local zone.
 @param instantLocal the local instant to convert to UTC
 @param strict whether the conversion should reject non-existent local times
 @return the UTC instant with the same local time,
 @throw ArithmeticExceptionif the result overflows a long
 @throw IllegalInstantExceptionif the zone has no equivalent local time
 @since 1.5
 */
- (jlong)convertLocalToUTCWithLong:(jlong)instantLocal
                       withBoolean:(jboolean)strict;

/*!
 @brief Converts a local instant to a standard UTC instant with the same
  local time attempting to use the same offset as the original.
 <p>
  This conversion is used after performing a calculation
  where the calculation was done using a simple local zone.
  Whenever possible, the same offset as the original offset will be used.
  This is most significant during a daylight savings overlap.
 @param instantLocal the local instant to convert to UTC
 @param strict whether the conversion should reject non-existent local times
 @param originalInstantUTC the original instant that the calculation is based on
 @return the UTC instant with the same local time,
 @throw ArithmeticExceptionif the result overflows a long
 @throw IllegalArgumentExceptionif the zone has no equivalent local time
 @since 2.0
 */
- (jlong)convertLocalToUTCWithLong:(jlong)instantLocal
                       withBoolean:(jboolean)strict
                          withLong:(jlong)originalInstantUTC;

/*!
 @brief Converts a standard UTC instant to a local instant with the same
  local time.This conversion is used before performing a calculation
  so that the calculation can be done using a simple local zone.
 @param instantUTC the UTC instant to convert to local
 @return the local instant with the same local time
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.5
 */
- (jlong)convertUTCToLocalWithLong:(jlong)instantUTC;

/*!
 @brief Compare this datetime zone with another.
 @param object the object to compare with
 @return true if equal, based on the ID and all internal rules
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Gets a time zone instance for the specified time zone id.
 <p>
  The time zone id may be one of those returned by getAvailableIDs.
  Short ids, as accepted by <code>java.util.TimeZone</code>, are not accepted.
  All IDs must be specified in the long format.
  The exception is UTC, which is an acceptable id. 
 <p>
  Alternatively a locale independent, fixed offset, datetime zone can
  be specified. The form <code>[+-]hh:mm</code> can be used.
 @param id_ the ID of the datetime zone, null means default
 @return the DateTimeZone object for the ID
 @throw IllegalArgumentExceptionif the ID is not recognised
 */
+ (OrgJodaTimeDateTimeZone *)forIDWithNSString:(NSString *)id_;

/*!
 @brief Gets a time zone instance for the specified offset to UTC in hours.
 This method assumes standard length hours. 
 <p>
  This factory is a convenient way of constructing zones with a fixed offset.
 @param hoursOffset the offset in hours from UTC, from -23 to +23
 @return the DateTimeZone object for the offset
 @throw IllegalArgumentExceptionif the offset is too large or too small
 */
+ (OrgJodaTimeDateTimeZone *)forOffsetHoursWithInt:(jint)hoursOffset;

/*!
 @brief Gets a time zone instance for the specified offset to UTC in hours and minutes.
 This method assumes 60 minutes in an hour, and standard length minutes. 
 <p>
  This factory is a convenient way of constructing zones with a fixed offset.
  The hours value must be in the range -23 to +23.
  The minutes value must be in the range -59 to +59.
  The following combinations of sign for the hour and minute are possible: 
 @code

   Hour    Minute    Example    Result 
   +ve     +ve       (2, 15)    +02:15
   +ve     zero      (2, 0)     +02:00
   +ve     -ve       (2, -15)   IllegalArgumentException 
   zero    +ve       (0, 15)    +00:15
   zero    zero      (0, 0)     +00:00
   zero    -ve       (0, -15)   -00:15 
   -ve     +ve       (-2, 15)   -02:15
   -ve     zero      (-2, 0)    -02:00
   -ve     -ve       (-2, -15)  -02:15 
  
@endcode
  Note that in versions before 2.3, the minutes had to be zero or positive.
 @param hoursOffset the offset in hours from UTC, from -23 to +23
 @param minutesOffset the offset in minutes from UTC, from -59 to +59
 @return the DateTimeZone object for the offset
 @throw IllegalArgumentExceptionif any value is out of range, the minutes are negative
   when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000
 */
+ (OrgJodaTimeDateTimeZone *)forOffsetHoursMinutesWithInt:(jint)hoursOffset
                                                  withInt:(jint)minutesOffset;

/*!
 @brief Gets a time zone instance for the specified offset to UTC in milliseconds.
 @param millisOffset the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999
 @return the DateTimeZone object for the offset
 */
+ (OrgJodaTimeDateTimeZone *)forOffsetMillisWithInt:(jint)millisOffset;

/*!
 @brief Gets a time zone instance for a JDK TimeZone.
 <p>
  DateTimeZone only accepts a subset of the IDs from TimeZone. The
  excluded IDs are the short three letter form (except UTC). This 
  method will attempt to convert between time zones created using the
  short IDs and the full version. 
 <p>
  This method is not designed to parse time zones with rules created by
  applications using <code>SimpleTimeZone</code> directly.
 @param zone the zone to convert, null means default
 @return the DateTimeZone object for the zone
 @throw IllegalArgumentExceptionif the zone is not recognised
 */
+ (OrgJodaTimeDateTimeZone *)forTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone;

/*!
 @brief Gets all the available IDs supported.
 @return an unmodifiable Set of String IDs
 */
+ (id<JavaUtilSet>)getAvailableIDs;

/*!
 @brief Gets the default time zone.
 <p>
  The default time zone is derived from the system property <code>user.timezone</code>.
  If that is <code>null</code> or is not a valid identifier, then the value of the
  JDK <code>TimeZone</code> default is converted. If that fails, <code>UTC</code> is used. 
 <p>
  NOTE: If the <code>java.util.TimeZone</code> default is updated <i>after</i> calling this
  method, then the change will not be picked up here.
 @return the default datetime zone object
 */
+ (OrgJodaTimeDateTimeZone *)getDefault;

/*!
 @brief Gets the ID of this datetime zone.
 @return the ID of this datetime zone
 */
- (NSString *)getID;

/*!
 @brief Gets the millisecond instant in another zone keeping the same local time.
 <p>
  The conversion is performed by converting the specified UTC millis to local
  millis in this zone, then converting back to UTC millis in the new zone.
 @param newZone the new zone, null means default
 @param oldInstant the UTC millisecond instant to convert
 @return the UTC millisecond instant with the same local time in the new zone
 */
- (jlong)getMillisKeepLocalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone
                                              withLong:(jlong)oldInstant;

/*!
 @brief Gets the long name of this datetime zone suitable for display using
  the default locale.
 <p>
  If the name is not available for the locale, then this method returns a
  string in the format <code>[+-]hh:mm</code>.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
 @return the human-readable long name in the default locale
 */
- (NSString *)getNameWithLong:(jlong)instant;

/*!
 @brief Gets the long name of this datetime zone suitable for display using
  the specified locale.
 <p>
  If the name is not available for the locale, then this method returns a
  string in the format <code>[+-]hh:mm</code>.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
 @param locale the locale to get the name for
 @return the human-readable long name in the specified locale
 */
- (NSString *)getNameWithLong:(jlong)instant
           withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a non-localized name that is unique to this time zone.It can be
  combined with id to form a unique key for fetching localized names.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
 @return name key or null if id should be used for names
 */
- (NSString *)getNameKeyWithLong:(jlong)instant;

/*!
 @brief Gets the name provider factory.
 <p>
  The name provider is a pluggable instance factory that supplies the
  names of each DateTimeZone.
 @return the provider
 */
+ (id<OrgJodaTimeTzNameProvider>)getNameProvider;

/*!
 @brief Gets the millisecond offset to add to UTC to get local time.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the offset for
 @return the millisecond offset to add to UTC to get local time
 */
- (jint)getOffsetWithLong:(jlong)instant;

/*!
 @brief Gets the millisecond offset to add to UTC to get local time.
 @param instant instant to get the offset for, null means now
 @return the millisecond offset to add to UTC to get local time
 */
- (jint)getOffsetWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/*!
 @brief Gets the millisecond offset to subtract from local time to get UTC time.
 This offset can be used to undo adding the offset obtained by getOffset. 
 @code

  millisLocal == millisUTC   + getOffset(millisUTC)
  millisUTC   == millisLocal - getOffsetFromLocal(millisLocal) 
  
@endcode
  NOTE: After calculating millisLocal, some error may be introduced. At
  offset transitions (due to DST or other historical changes), ranges of
  local times may map to different UTC times. 
 <p>
  For overlaps (where the local time is ambiguous), this method returns the
  offset applicable before the gap. The effect of this is that any instant
  calculated using the offset from an overlap will be in "summer" time. 
 <p>
  For gaps, this method returns the offset applicable before the gap, ie "winter" offset.
  However, the effect of this is that any instant calculated using the offset
  from a gap will be after the gap, in "summer" time. 
 <p>
  For example, consider a zone with a gap from 01:00 to 01:59:<br>
  Input: 00:00 (before gap) Output: Offset applicable before gap  DateTime: 00:00<br>
  Input: 00:30 (before gap) Output: Offset applicable before gap  DateTime: 00:30<br>
  Input: 01:00 (in gap)     Output: Offset applicable before gap  DateTime: 02:00<br>
  Input: 01:30 (in gap)     Output: Offset applicable before gap  DateTime: 02:30<br>
  Input: 02:00 (after gap)  Output: Offset applicable after gap   DateTime: 02:00<br>
  Input: 02:30 (after gap)  Output: Offset applicable after gap   DateTime: 02:30<br>
  <p>
  NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
  Prior to v1.5, the DST gap behaviour was also not defined.
  In v2.4, the documentation was clarified again.
 @param instantLocal the millisecond instant, relative to this time zone, to get the offset for
 @return the millisecond offset to subtract from local time to get UTC time
 */
- (jint)getOffsetFromLocalWithLong:(jlong)instantLocal;

/*!
 @brief Gets the zone provider factory.
 <p>
  The zone provider is a pluggable instance factory that supplies the
  actual instances of DateTimeZone.
 @return the provider
 */
+ (id<OrgJodaTimeTzProvider>)getProvider;

/*!
 @brief Gets the short name of this datetime zone suitable for display using
  the default locale.
 <p>
  If the name is not available for the locale, then this method returns a
  string in the format <code>[+-]hh:mm</code>.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
 @return the human-readable short name in the default locale
 */
- (NSString *)getShortNameWithLong:(jlong)instant;

/*!
 @brief Gets the short name of this datetime zone suitable for display using
  the specified locale.
 <p>
  If the name is not available for the locale, then this method returns a
  string in the format <code>[+-]hh:mm</code>.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
 @param locale the locale to get the name for
 @return the human-readable short name in the specified locale
 */
- (NSString *)getShortNameWithLong:(jlong)instant
                withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets the standard millisecond offset to add to UTC to get local time,
  when standard time is in effect.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the offset for
 @return the millisecond offset to add to UTC to get local time
 */
- (jint)getStandardOffsetWithLong:(jlong)instant;

/*!
 @brief Gets a hash code compatable with equals.
 @return suitable hashcode
 */
- (NSUInteger)hash;

/*!
 @brief Returns true if this time zone has no transitions.
 @return true if no transitions
 */
- (jboolean)isFixed;

/*!
 @brief Checks if the given <code>LocalDateTime</code> is within a gap.
 <p>
  When switching from standard time to Daylight Savings Time there is
  typically a gap where a clock hour is missing. This method identifies
  whether the local datetime refers to such a gap.
 @param localDateTime the time to check, not null
 @return true if the given datetime refers to a gap
 @since 1.6
 */
- (jboolean)isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)localDateTime;

/*!
 @brief Checks whether, at a particular instant, the offset is standard or not.
 <p>
  This method can be used to determine whether Summer Time (DST) applies.
  As a general rule, if the offset at the specified instant is standard,
  then either Winter time applies, or there is no Summer Time. If the
  instant is not standard, then Summer Time applies. 
 <p>
  The implementation of the method is simply whether <code>getOffset(long)</code>
  equals <code>getStandardOffset(long)</code> at the specified instant.
 @param instant milliseconds from 1970-01-01T00:00:00Z to get the offset for
 @return true if the offset at the given instant is the standard offset
 @since 1.5
 */
- (jboolean)isStandardOffsetWithLong:(jlong)instant;

/*!
 @brief Advances the given instant to where the time zone offset or name changes.
 If the instant returned is exactly the same as passed in, then
  no changes occur after the given instant.
 @param instant milliseconds from 1970-01-01T00:00:00Z
 @return milliseconds from 1970-01-01T00:00:00Z
 */
- (jlong)nextTransitionWithLong:(jlong)instant;

/*!
 @brief Retreats the given instant to where the time zone offset or name changes.
 If the instant returned is exactly the same as passed in, then
  no changes occur before the given instant.
 @param instant milliseconds from 1970-01-01T00:00:00Z
 @return milliseconds from 1970-01-01T00:00:00Z
 */
- (jlong)previousTransitionWithLong:(jlong)instant;

/*!
 @brief Sets the default time zone.
 <p>
  NOTE: Calling this method does <i>not</i> set the <code>java.util.TimeZone</code> default.
 @param zone the default datetime zone object, must not be null
 @throw IllegalArgumentExceptionif the zone is null
 @throw SecurityExceptionif the application has insufficient security rights
 */
+ (void)setDefaultWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Sets the name provider factory.
 <p>
  The name provider is a pluggable instance factory that supplies the
  names of each DateTimeZone.
 @param nameProvider provider to use, or null for default
 @throw SecurityExceptionif you do not have the permission DateTimeZone.setNameProvider
 @throw IllegalArgumentExceptionif the provider is invalid
 */
+ (void)setNameProviderWithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider;

/*!
 @brief Sets the zone provider factory.
 <p>
  The zone provider is a pluggable instance factory that supplies the
  actual instances of DateTimeZone.
 @param provider provider to use, or null for default
 @throw SecurityExceptionif you do not have the permission DateTimeZone.setProvider
 @throw IllegalArgumentExceptionif the provider is invalid
 */
+ (void)setProviderWithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider;

/*!
 @brief Gets the datetime zone as a string, which is simply its ID.
 @return the id of the zone
 */
- (NSString *)description;

/*!
 @brief Get the datetime zone as a <code>java.util.TimeZone</code>.
 @return the closest matching TimeZone object
 */
- (JavaUtilTimeZone *)toTimeZone;

#pragma mark Protected

/*!
 @brief Constructor.
 @param id_ the id to use
 @throw IllegalArgumentExceptionif the id is null
 */
- (instancetype)initWithNSString:(NSString *)id_;

/*!
 @brief By default, when DateTimeZones are serialized, only a "stub" object
  referring to the id is written out.When the stub is read in, it
  replaces itself with a DateTimeZone object.
 @return a stub object to go in the stream
 */
- (id)writeReplace;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeDateTimeZone)

/*!
 @brief The time zone for Universal Coordinated Time
 */
inline OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_get_UTC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeZone, UTC, OrgJodaTimeDateTimeZone *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_getDefault(void);

FOUNDATION_EXPORT void OrgJodaTimeDateTimeZone_setDefaultWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forIDWithNSString_(NSString *id_);

FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetHoursWithInt_(jint hoursOffset);

FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(jint hoursOffset, jint minutesOffset);

FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(jint millisOffset);

FOUNDATION_EXPORT OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(JavaUtilTimeZone *zone);

FOUNDATION_EXPORT id<JavaUtilSet> OrgJodaTimeDateTimeZone_getAvailableIDs(void);

FOUNDATION_EXPORT id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getProvider(void);

FOUNDATION_EXPORT void OrgJodaTimeDateTimeZone_setProviderWithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider);

FOUNDATION_EXPORT id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getNameProvider(void);

FOUNDATION_EXPORT void OrgJodaTimeDateTimeZone_setNameProviderWithOrgJodaTimeTzNameProvider_(id<OrgJodaTimeTzNameProvider> nameProvider);

FOUNDATION_EXPORT void OrgJodaTimeDateTimeZone_initWithNSString_(OrgJodaTimeDateTimeZone *self, NSString *id_);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDateTimeZone)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeDateTimeZone")
