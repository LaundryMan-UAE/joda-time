//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/TimeOfDay.java
//

#ifndef _OrgJodaTimeTimeOfDay_H_
#define _OrgJodaTimeTimeOfDay_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/base/BasePartial.h"
#include "org/joda/time/field/AbstractPartialFieldProperty.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeLocalTime;
@class OrgJodaTimeTimeOfDay_Property;
@protocol OrgJodaTimeReadablePeriod;

#define OrgJodaTimeTimeOfDay_HOUR_OF_DAY 0
#define OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR 1
#define OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE 2
#define OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND 3

/**
 @brief TimeOfDay is an immutable partial supporting the hour, minute, second and millisecond fields.
 <p> NOTE: This class only supports the four fields listed above. Thus, you cannot query the millisOfDay or secondOfDay fields for example. The new <code>LocalTime</code> class removes this restriction. <p> Calculations on TimeOfDay are performed using a Chronology . This chronology is set to be in the UTC time zone for all calculations. <p> Each individual field can be queried in two ways: <ul> <li><code>getHourOfDay()</code> <li><code>hourOfDay().get()</code> </ul> The second technique also provides access to other useful methods on the field: <ul> <li>numeric value - <code>hourOfDay().get()</code> <li>text value - <code>hourOfDay().getAsText()</code> <li>short text value - <code>hourOfDay().getAsShortText()</code> <li>maximum/minimum values - <code>hourOfDay().getMaximumValue()</code> <li>add/subtract - <code>hourOfDay().addToCopy()</code> <li>set - <code>hourOfDay().setCopy()</code> </ul> <p> TimeOfDay is thread-safe and immutable, provided that the Chronology is as well. All standard Chronology classes supplied are thread-safe and immutable.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTimeOfDay : OrgJodaTimeBaseBasePartial < OrgJodaTimeReadablePartial, JavaIoSerializable >

#pragma mark Public

/**
 @brief Constructs a TimeOfDay with the current time, using ISOChronology in the default zone to extract the fields.
 <p> The constructor uses the default time zone, resulting in the local time being initialised. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 */
- (instancetype)init;

/**
 @brief Constructs a TimeOfDay with the current time, using the specified chronology and zone to extract the fields.
 <p> The constructor uses the time zone of the chronology specified. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param chronology the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs a TimeOfDay with the current time, using ISOChronology in the specified zone to extract the fields.
 <p> The constructor uses the specified time zone to obtain the current time. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param zone the zone to use, null means default zone
 @since 1.1
 */
- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Constructs a TimeOfDay with specified hour and minute and zero seconds and milliseconds using <code>ISOChronology</code> in the default zone.
 <p> The constructor uses the no time zone initialising the fields as provided. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour;

/**
 @brief Constructs a TimeOfDay with specified hour and minute and zero seconds and milliseconds.
 <p> The constructor uses the time zone of the chronology specified. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 @param chronology the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs a TimeOfDay with specified time field values and zero milliseconds using <code>ISOChronology</code> in the default zone.
 <p> The constructor uses the no time zone initialising the fields as provided. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 @param secondOfMinute the second of the minute
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute;

/**
 @brief Constructs a TimeOfDay with specified time field values and zero milliseconds.
 <p> The constructor uses the time zone of the chronology specified. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 @param secondOfMinute the second of the minute
 @param chronology the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs a TimeOfDay with specified time field values using <code>ISOChronology</code> in the default zone.
 <p> The constructor uses the no time zone initialising the fields as provided. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 @param secondOfMinute the second of the minute
 @param millisOfSecond the millisecond of the second
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond;

/**
 @brief Constructs a TimeOfDay with specified time field values and chronology.
 <p> The constructor uses the time zone of the chronology specified. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 @param secondOfMinute the second of the minute
 @param millisOfSecond the millisecond of the second
 @param chronology the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs a TimeOfDay extracting the partial fields from the specified milliseconds using the ISOChronology in the default zone.
 <p> The constructor uses the default time zone, resulting in the local time being initialised. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param instant the milliseconds from 1970-01-01T00:00:00Z
 */
- (instancetype)initWithLong:(jlong)instant;

/**
 @brief Constructs a TimeOfDay extracting the partial fields from the specified milliseconds using the chronology provided.
 <p> The constructor uses the time zone of the chronology specified. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC).
 @param instant the milliseconds from 1970-01-01T00:00:00Z
 @param chronology the chronology, null means ISOChronology in the default zone
 */
- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs a TimeOfDay from an Object that represents a time.
 <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadableInstant, String, Calendar and Date. The String formats are described by ISODateTimeFormat#timeParser() . <p> The chronology used will be derived from the object, defaulting to ISO. <p> NOTE: Prior to v1.3 the string format was described by ISODateTimeFormat#dateTimeParser() . Dates are now rejected.
 @param instant the datetime object, null means now
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant;

/**
 @brief Constructs a TimeOfDay from an Object that represents a time, using the specified chronology.
 <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadableInstant, String, Calendar and Date. The String formats are described by ISODateTimeFormat#timeParser() . <p> The constructor uses the time zone of the chronology specified. Once the constructor is complete, all further calculations are performed without reference to a timezone (by switching to UTC). The specified chronology overrides that of the object. <p> NOTE: Prior to v1.3 the string format was described by ISODateTimeFormat#dateTimeParser() . Dates are now rejected.
 @param instant the datetime object, null means now
 @param chronology the chronology, null means ISO default
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs a TimeOfDay from a <code>java.util.Calendar</code> using exactly the same field values avoiding any time zone effects.
 <p> Each field is queried from the Calendar and assigned to the TimeOfDay. This is useful to ensure that the field values are the same in the created TimeOfDay no matter what the time zone is. For example, if the Calendar states that the time is 04:29, then the created TimeOfDay will always have the time 04:29 irrespective of time zone issues. <p> This factory method ignores the type of the calendar and always creates a TimeOfDay with ISO chronology.
 @param calendar the Calendar to extract fields from
 @return the created TimeOfDay
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the time is invalid for the ISO chronology
 @since 1.2
 */
+ (OrgJodaTimeTimeOfDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

/**
 @brief Constructs a TimeOfDay from a <code>java.util.Date</code> using exactly the same field values avoiding any time zone effects.
 <p> Each field is queried from the Date and assigned to the TimeOfDay. This is useful to ensure that the field values are the same in the created TimeOfDay no matter what the time zone is. For example, if the Calendar states that the time is 04:29, then the created TimeOfDay will always have the time 04:29 irrespective of time zone issues. <p> This factory method always creates a TimeOfDay with ISO chronology.
 @param date the Date to extract fields from
 @return the created TimeOfDay
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 @since 1.2
 */
+ (OrgJodaTimeTimeOfDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date;

/**
 @brief Constructs a TimeOfDay from the specified millis of day using the ISO chronology.
 <p> The millisOfDay value may exceed the number of millis in one day, but additional days will be ignored. This method uses the UTC time zone internally.
 @param millisOfDay the number of milliseconds into a day to convert
 */
+ (OrgJodaTimeTimeOfDay *)fromMillisOfDayWithLong:(jlong)millisOfDay;

/**
 @brief Constructs a TimeOfDay from the specified millis of day using the specified chronology.
 <p> The millisOfDay value may exceed the number of millis in one day, but additional days will be ignored. This method uses the UTC time zone internally.
 @param millisOfDay the number of milliseconds into a day to convert
 @param chrono the chronology, null means ISO chronology
 */
+ (OrgJodaTimeTimeOfDay *)fromMillisOfDayWithLong:(jlong)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/**
 @brief Gets the field type at the specified index.
 @param index the index to retrieve
 @return the field at the specified index
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index;

/**
 @brief Gets an array of the field type of each of the fields that this partial supports.
 <p> The fields are returned largest to smallest, Hour, Minute, Second, Millis.
 @return the array of field types (cloned), largest to smallest
 */
- (IOSObjectArray *)getFieldTypes;

/**
 @brief Get the hour of day (0-23) field value.
 @return the hour of day
 */
- (jint)getHourOfDay;

/**
 @brief Get the millis of second field value.
 @return the millis of second
 */
- (jint)getMillisOfSecond;

/**
 @brief Get the minute of hour field value.
 @return the minute of hour
 */
- (jint)getMinuteOfHour;

/**
 @brief Get the second of minute field value.
 @return the second of minute
 */
- (jint)getSecondOfMinute;

/**
 @brief Get the hour of day field property which provides access to advanced functionality.
 @return the hour of day property
 */
- (OrgJodaTimeTimeOfDay_Property *)hourOfDay;

/**
 @brief Get the millis of second property which provides access to advanced functionality.
 @return the millis of second property
 */
- (OrgJodaTimeTimeOfDay_Property *)millisOfSecond;

/**
 @brief Returns a copy of this time with the specified period taken away, wrapping to what would be a new day if required.
 <p> If the amount is zero or null, then <code>this</code> is returned. <p> This method is typically used to subtract complex period instances. Subtracting one field is best achieved using methods like #minusHours(int) .
 @param period the period to reduce this instant by
 @return a copy of this instance with the period taken away
 @throws ArithmeticException if the new time exceeds capacity
 */
- (OrgJodaTimeTimeOfDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Returns a copy of this time minus the specified number of hours.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay subtracted = dt.minusHours(6); TimeOfDay subtracted = dt.minus(Period.hours(6)); TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6); </pre>
 @param hours the amount of hours to subtract, may be negative
 @return the new time minus the increased hours
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)minusHoursWithInt:(jint)hours;

/**
 @brief Returns a copy of this time minus the specified number of millis.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay subtracted = dt.minusMillis(6); TimeOfDay subtracted = dt.minus(Period.millis(6)); TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6); </pre>
 @param millis the amount of millis to subtract, may be negative
 @return the new time minus the increased millis
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)minusMillisWithInt:(jint)millis;

/**
 @brief Returns a copy of this time minus the specified number of minutes.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay subtracted = dt.minusMinutes(6); TimeOfDay subtracted = dt.minus(Period.minutes(6)); TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6); </pre>
 @param minutes the amount of minutes to subtract, may be negative
 @return the new time minus the increased minutes
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)minusMinutesWithInt:(jint)minutes;

/**
 @brief Returns a copy of this time minus the specified number of seconds.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay subtracted = dt.minusSeconds(6); TimeOfDay subtracted = dt.minus(Period.seconds(6)); TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6); </pre>
 @param seconds the amount of seconds to subtract, may be negative
 @return the new time minus the increased seconds
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)minusSecondsWithInt:(jint)seconds;

/**
 @brief Get the minute of hour field property which provides access to advanced functionality.
 @return the minute of hour property
 */
- (OrgJodaTimeTimeOfDay_Property *)minuteOfHour;

/**
 @brief Returns a copy of this time with the specified period added, wrapping to what would be a new day if required.
 <p> If the amount is zero or null, then <code>this</code> is returned. <p> This method is typically used to add complex period instances. Adding one field is best achieved using methods like #plusHours(int) .
 @param period the duration to add to this one, null means zero
 @return a copy of this instance with the period added
 @throws ArithmeticException if the new datetime exceeds the capacity of a long
 */
- (OrgJodaTimeTimeOfDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Returns a copy of this time plus the specified number of hours.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay added = dt.plusHours(6); TimeOfDay added = dt.plus(Period.hours(6)); TimeOfDay added = dt.withFieldAdded(DurationFieldType.hours(), 6); </pre>
 @param hours the amount of hours to add, may be negative
 @return the new time plus the increased hours
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)plusHoursWithInt:(jint)hours;

/**
 @brief Returns a copy of this time plus the specified number of millis.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay added = dt.plusMillis(6); TimeOfDay added = dt.plus(Period.millis(6)); TimeOfDay added = dt.withFieldAdded(DurationFieldType.millis(), 6); </pre>
 @param millis the amount of millis to add, may be negative
 @return the new time plus the increased millis
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)plusMillisWithInt:(jint)millis;

/**
 @brief Returns a copy of this time plus the specified number of minutes.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay added = dt.plusMinutes(6); TimeOfDay added = dt.plus(Period.minutes(6)); TimeOfDay added = dt.withFieldAdded(DurationFieldType.minutes(), 6); </pre>
 @param minutes the amount of minutes to add, may be negative
 @return the new time plus the increased minutes
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)plusMinutesWithInt:(jint)minutes;

/**
 @brief Returns a copy of this time plus the specified number of seconds.
 <p> This time instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> TimeOfDay added = dt.plusSeconds(6); TimeOfDay added = dt.plus(Period.seconds(6)); TimeOfDay added = dt.withFieldAdded(DurationFieldType.seconds(), 6); </pre>
 @param seconds the amount of seconds to add, may be negative
 @return the new time plus the increased seconds
 @since 1.1
 */
- (OrgJodaTimeTimeOfDay *)plusSecondsWithInt:(jint)seconds;

/**
 @brief Gets the property object for the specified type, which contains many useful methods.
 @param type the field type to get the property for
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimeTimeOfDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Get the second of minute field property which provides access to advanced functionality.
 @return the second of minute property
 */
- (OrgJodaTimeTimeOfDay_Property *)secondOfMinute;

/**
 @brief Gets the number of fields in this partial.
 @return the field count
 */
- (jint)size;

/**
 @brief Converts this partial to a full datetime using the default time zone setting the time fields from this instance and the date fields from the current time.
 @return this date as a datetime with the time as the current time
 */
- (OrgJodaTimeDateTime *)toDateTimeToday;

/**
 @brief Converts this partial to a full datetime using the specified time zone setting the time fields from this instance and the date fields from the current time.
 <p> This method uses the chronology from this instance plus the time zone specified.
 @param zone the zone to use, null means default
 @return this date as a datetime with the time as the current time
 */
- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Converts this object to a LocalTime with the same time and chronology.
 @return a LocalTime with the same time and chronology
 @since 1.3
 */
- (OrgJodaTimeLocalTime *)toLocalTime;

/**
 @brief Output the time in the ISO8601 format THH:mm:ss.SSS.
 @return ISO8601 formatted string
 */
- (NSString *)description;

/**
 @brief Returns a copy of this time with the specified chronology.
 This instance is immutable and unaffected by this method call. <p> This method retains the values of the fields, thus the result will typically refer to a different instant. <p> The time zone of the specified chronology is ignored, as TimeOfDay operates without a time zone.
 @param newChronology the new chronology, null means ISO
 @return a copy of this datetime with a different chronology
 @throws IllegalArgumentException if the values are invalid for the new chronology
 */
- (OrgJodaTimeTimeOfDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology;

/**
 @brief Returns a copy of this time with the specified field set to a new value.
 <p> For example, if the field type is <code>minuteOfHour</code> then the day would be changed in the returned instance. <p> These three lines are equivalent: <pre> TimeOfDay updated = tod.withField(DateTimeFieldType.minuteOfHour(), 6); TimeOfDay updated = tod.minuteOfHour().setCopy(6); TimeOfDay updated = tod.property(DateTimeFieldType.minuteOfHour()).setCopy(6); </pre>
 @param fieldType the field type to set, not null
 @param value the value to set
 @return a copy of this instance with the field set
 @throws IllegalArgumentException if the value is null or invalid
 */
- (OrgJodaTimeTimeOfDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value;

/**
 @brief Returns a copy of this time with the value of the specified field increased, wrapping to what would be a new day if required.
 <p> If the addition is zero, then <code>this</code> is returned. <p> These three lines are equivalent: <pre> TimeOfDay added = tod.withFieldAdded(DurationFieldType.minutes(), 6); TimeOfDay added = tod.plusMinutes(6); TimeOfDay added = tod.minuteOfHour().addToCopy(6); </pre>
 @param fieldType the field type to add to, not null
 @param amount the amount to add
 @return a copy of this instance with the field updated
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the new datetime exceeds the capacity
 */
- (OrgJodaTimeTimeOfDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount;

/**
 @brief Returns a copy of this time with the hour of day field updated.
 <p> TimeOfDay is immutable, so there are no set methods. Instead, this method returns a new instance with the value of hour of day changed.
 @param hour the hour of day to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 @since 1.3
 */
- (OrgJodaTimeTimeOfDay *)withHourOfDayWithInt:(jint)hour;

/**
 @brief Returns a copy of this time with the millis of second field updated.
 <p> TimeOfDay is immutable, so there are no set methods. Instead, this method returns a new instance with the value of millis of second changed.
 @param millis the millis of second to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 @since 1.3
 */
- (OrgJodaTimeTimeOfDay *)withMillisOfSecondWithInt:(jint)millis;

/**
 @brief Returns a copy of this time with the minute of hour field updated.
 <p> TimeOfDay is immutable, so there are no set methods. Instead, this method returns a new instance with the value of minute of hour changed.
 @param minute the minute of hour to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 @since 1.3
 */
- (OrgJodaTimeTimeOfDay *)withMinuteOfHourWithInt:(jint)minute;

/**
 @brief Returns a copy of this time with the specified period added, wrapping to what would be a new day if required.
 <p> If the addition is zero, then <code>this</code> is returned. Fields in the period that aren't present in the partial are ignored. <p> This method is typically used to add multiple copies of complex period instances. Adding one field is best achieved using methods like #withFieldAdded(DurationFieldType,int) or #plusHours(int) .
 @param period the period to add to this one, null means zero
 @param scalar the amount of times to add, such as -1 to subtract once
 @return a copy of this instance with the period added
 @throws ArithmeticException if the new datetime exceeds the capacity
 */
- (OrgJodaTimeTimeOfDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar;

/**
 @brief Returns a copy of this time with the second of minute field updated.
 <p> TimeOfDay is immutable, so there are no set methods. Instead, this method returns a new instance with the value of second of minute changed.
 @param second the second of minute to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 @since 1.3
 */
- (OrgJodaTimeTimeOfDay *)withSecondOfMinuteWithInt:(jint)second;

#pragma mark Protected

/**
 @brief Gets the field for a specific index in the chronology specified.
 <p> This method must not use any instance variables.
 @param index the index to retrieve
 @param chrono the chronology to use
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

#pragma mark Package-Private

/**
 @brief Constructs a TimeOfDay with values from this instance and a new chronology.
 @param partial the partial to base this new instance on
 @param chrono the new chronology
 */
- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/**
 @brief Constructs a TimeOfDay with chronology from this instance and new values.
 @param partial the partial to base this new instance on
 @param values the new set of values
 */
- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                                withIntArray:(IOSIntArray *)values;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeTimeOfDay)

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_MIDNIGHT_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTimeOfDay, MIDNIGHT_, OrgJodaTimeTimeOfDay *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTimeOfDay, HOUR_OF_DAY, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTimeOfDay, MINUTE_OF_HOUR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTimeOfDay, SECOND_OF_MINUTE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTimeOfDay, MILLIS_OF_SECOND, jint)

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_(jlong millisOfDay);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(jlong millisOfDay, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_init(OrgJodaTimeTimeOfDay *self);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithLong_(OrgJodaTimeTimeOfDay *self, jlong instant);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithLong_(jlong instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithId_(OrgJodaTimeTimeOfDay *self, id instant);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithId_(id instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithInt_withInt_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeTimeOfDay *partial, IOSIntArray *values);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(OrgJodaTimeTimeOfDay *partial, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeTimeOfDay *partial, OrgJodaTimeChronology *chrono);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *partial, OrgJodaTimeChronology *chrono) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTimeOfDay)

/**
 @brief The property class for <code>TimeOfDay</code>.
 <p> This class binds a <code>TimeOfDay</code> to a <code>DateTimeField</code>.
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeTimeOfDay_Property : OrgJodaTimeFieldAbstractPartialFieldProperty < JavaIoSerializable >

#pragma mark Public

/**
 @brief Adds to the value of this field in a copy of this TimeOfDay, throwing an Exception if the bounds are exceeded.
 <p> The value will be added to this field. If the value is too large to be added solely to this field then it will affect larger fields. Smaller fields are unaffected. <p> If the result would be too large (beyond 23:59:59:999) or too small (less than 00:00:00.000) then an Execption is thrown. For the alternate behaviour which wraps to the next 'day', see #addToCopy(int) . <p> The TimeOfDay attached to this property is unchanged by this call. Instead, a new instance is returned.
 @param valueToAdd the value to add to the field in the copy
 @return a copy of the TimeOfDay with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeTimeOfDay *)addNoWrapToCopyWithInt:(jint)valueToAdd;

/**
 @brief Adds to the value of this field in a copy of this TimeOfDay, wrapping to what would be the next day if necessary.
 <p> The value will be added to this field. If the value is too large to be added solely to this field then it will affect larger fields. Smaller fields are unaffected. <p> If the result would be too large, beyond 23:59:59:999, then the calculation wraps to 00:00:00.000. For the alternate strict behaviour with no wrapping see #addNoWrapToCopy(int) . <p> The TimeOfDay attached to this property is unchanged by this call. Instead, a new instance is returned.
 @param valueToAdd the value to add to the field in the copy
 @return a copy of the TimeOfDay with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeTimeOfDay *)addToCopyWithInt:(jint)valueToAdd;

/**
 @brief Adds to the value of this field in a copy of this TimeOfDay wrapping within this field if the maximum value is reached.
 <p> The value will be added to this field. If the value is too large to be added solely to this field then it wraps within this field. Other fields are unaffected. <p> For example, <code>12:59:37</code> addWrapField one minute returns <code>12:00:37</code>. <p> The TimeOfDay attached to this property is unchanged by this call. Instead, a new instance is returned.
 @param valueToAdd the value to add to the field in the copy
 @return a copy of the TimeOfDay with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeTimeOfDay *)addWrapFieldToCopyWithInt:(jint)valueToAdd;

/**
 @brief Gets the value of this field.
 @return the field value
 */
- (jint)get;

/**
 @brief Gets the field that this property uses.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/**
 @brief Gets the partial that this property belongs to.
 @return the partial
 */
- (OrgJodaTimeTimeOfDay *)getTimeOfDay;

/**
 @brief Sets this field in a copy of the TimeOfDay.
 <p> The TimeOfDay attached to this property is unchanged by this call. Instead, a new instance is returned.
 @param value the value to set the field in the copy to
 @return a copy of the TimeOfDay with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeTimeOfDay *)setCopyWithInt:(jint)value;

/**
 @brief Sets this field in a copy of the TimeOfDay to a parsed text value.
 <p> The TimeOfDay attached to this property is unchanged by this call. Instead, a new instance is returned.
 @param text the text value to set
 @return a copy of the TimeOfDay with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeTimeOfDay *)setCopyWithNSString:(NSString *)text;

/**
 @brief Sets this field in a copy of the TimeOfDay to a parsed text value.
 <p> The TimeOfDay attached to this property is unchanged by this call. Instead, a new instance is returned.
 @param text the text value to set
 @param locale optional locale to use for selecting a text symbol
 @return a copy of the TimeOfDay with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeTimeOfDay *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Returns a new TimeOfDay with this field set to the maximum value for this field.
 <p> The TimeOfDay attached to this property is unchanged by this call.
 @return a copy of the TimeOfDay with this field set to its maximum
 @since 1.2
 */
- (OrgJodaTimeTimeOfDay *)withMaximumValue;

/**
 @brief Returns a new TimeOfDay with this field set to the minimum value for this field.
 <p> The TimeOfDay attached to this property is unchanged by this call.
 @return a copy of the TimeOfDay with this field set to its minimum
 @since 1.2
 */
- (OrgJodaTimeTimeOfDay *)withMinimumValue;

#pragma mark Protected

/**
 @brief Gets the partial that this property belongs to.
 @return the partial
 */
- (id<OrgJodaTimeReadablePartial>)getReadablePartial;

#pragma mark Package-Private

/**
 @brief Constructs a property.
 @param partial the partial instance
 @param fieldIndex the index in the partial
 */
- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                                     withInt:(jint)fieldIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTimeOfDay_Property)

FOUNDATION_EXPORT void OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(OrgJodaTimeTimeOfDay_Property *self, OrgJodaTimeTimeOfDay *partial, jint fieldIndex);

FOUNDATION_EXPORT OrgJodaTimeTimeOfDay_Property *new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(OrgJodaTimeTimeOfDay *partial, jint fieldIndex) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTimeOfDay_Property)

#endif // _OrgJodaTimeTimeOfDay_H_
