//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/ReadWritableInstant.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeReadWritableInstant")
#ifdef RESTRICT_OrgJodaTimeReadWritableInstant
#define INCLUDE_ALL_OrgJodaTimeReadWritableInstant 0
#else
#define INCLUDE_ALL_OrgJodaTimeReadWritableInstant 1
#endif
#undef RESTRICT_OrgJodaTimeReadWritableInstant

#if !defined (OrgJodaTimeReadWritableInstant_) && (INCLUDE_ALL_OrgJodaTimeReadWritableInstant || defined(INCLUDE_OrgJodaTimeReadWritableInstant))
#define OrgJodaTimeReadWritableInstant_

#define RESTRICT_OrgJodaTimeReadableInstant 1
#define INCLUDE_OrgJodaTimeReadableInstant 1
#include "org/joda/time/ReadableInstant.h"

@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@protocol OrgJodaTimeReadableDuration;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief Defines an instant in the datetime continuum that can be queried and modified.
 This interface expresses the datetime as milliseconds from 1970-01-01T00:00:00Z. 
 <p>
  The implementation of this interface will be mutable.
  It may provide more advanced methods than those in the interface.
 @author Stephen Colebourne
 @since 1.0
 */
@protocol OrgJodaTimeReadWritableInstant < OrgJodaTimeReadableInstant, JavaObject >

/*!
 @brief Sets the value as the number of milliseconds since
  the epoch, 1970-01-01T00:00:00Z.
 @param instant the milliseconds since 1970-01-01T00:00:00Z to set the  instant to
 @throw IllegalArgumentExceptionif the value is invalid
 */
- (void)setMillisWithLong:(jlong)instant;

/*!
 @brief Sets the millisecond instant of this instant from another.
 <p>
  This method does not change the chronology of this instant, just the
  millisecond instant.
 @param instant the instant to use, null means now
 */
- (void)setMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/*!
 @brief Sets the chronology of the datetime, which has no effect if not applicable.
 @param chronology the chronology to use, null means ISOChronology in default zone
 @throw IllegalArgumentExceptionif the value is invalid
 */
- (void)setChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Sets the time zone of the datetime, changing the chronology and field values.
 <p>
  Changing the zone using this method retains the millisecond instant.
  The millisecond instant is adjusted in the new zone to compensate. 
  chronology. Setting the time zone does not affect the millisecond value
  of this instant. 
 <p>
  If the chronology already has this time zone, no change occurs.
 @param zone the time zone to use, null means default zone
 - seealso: #setZoneRetainFields
 */
- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Sets the time zone of the datetime, changing the chronology and millisecond.
 <p>
  Changing the zone using this method retains the field values.
  The millisecond instant is adjusted in the new zone to compensate. 
 <p>
  If the chronology already has this time zone, no change occurs.
 @param zone the time zone to use, null means default zone
 - seealso: #setZone
 */
- (void)setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Adds a millisecond duration to this instant.
 <p>
  This will typically change the value of ost fields.
 @param duration the millis to add
 @throw IllegalArgumentExceptionif the value is invalid
 */
- (void)addWithLong:(jlong)duration;

/*!
 @brief Adds a duration to this instant.
 <p>
  This will typically change the value of most fields.
 @param duration the duration to add, null means add zero
 @throw ArithmeticExceptionif the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/*!
 @brief Adds a duration to this instant specifying how many times to add.
 <p>
  This will typically change the value of most fields.
 @param duration the duration to add, null means add zero
 @param scalar direction and amount to add, which may be negative
 @throw ArithmeticExceptionif the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                                   withInt:(jint)scalar;

/*!
 @brief Adds a period to this instant.
 <p>
  This will typically change the value of most fields.
 @param period the period to add, null means add zero
 @throw ArithmeticExceptionif the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Adds a period to this instant specifying how many times to add.
 <p>
  This will typically change the value of most fields.
 @param period the period to add, null means add zero
 @param scalar direction and amount to add, which may be negative
 @throw ArithmeticExceptionif the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                 withInt:(jint)scalar;

/*!
 @brief Sets the value of one of the fields of the instant, such as hourOfDay.
 @param type a field type, usually obtained from DateTimeFieldType, null ignored
 @param value the value to set the field to
 @throw IllegalArgumentExceptionif the value is invalid
 */
- (void)setWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                    withInt:(jint)value;

/*!
 @brief Adds to the instant specifying the duration and multiple to add.
 @param type a field type, usually obtained from DateTimeFieldType, null ignored
 @param amount the amount to add of this duration
 @throw ArithmeticExceptionif the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                    withInt:(jint)amount;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeReadWritableInstant)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeReadWritableInstant)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeReadWritableInstant")
