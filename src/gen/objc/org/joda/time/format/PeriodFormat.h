//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/format/PeriodFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeFormatPeriodFormat")
#ifdef RESTRICT_OrgJodaTimeFormatPeriodFormat
#define INCLUDE_ALL_OrgJodaTimeFormatPeriodFormat 0
#else
#define INCLUDE_ALL_OrgJodaTimeFormatPeriodFormat 1
#endif
#undef RESTRICT_OrgJodaTimeFormatPeriodFormat

#if !defined (OrgJodaTimeFormatPeriodFormat_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormat || defined(INCLUDE_OrgJodaTimeFormatPeriodFormat))
#define OrgJodaTimeFormatPeriodFormat_

@class JavaUtilLocale;
@class OrgJodaTimeFormatPeriodFormatter;

/*!
 @brief Factory that creates instances of PeriodFormatter.
 <p>
  Period formatting is performed by the <code>PeriodFormatter</code> class.
  Three classes provide factory methods to create formatters, and this is one.
  The others are <code>ISOPeriodFormat</code> and <code>PeriodFormatterBuilder</code>.
  <p>
  PeriodFormat is thread-safe and immutable, and the formatters it returns
  are as well.
 @author Brian S O'Neill
 @since 1.0
 - seealso: ISOPeriodFormat
 - seealso: PeriodFormatterBuilder
 */
@interface OrgJodaTimeFormatPeriodFormat : NSObject

#pragma mark Public

/*!
 @brief Gets the default formatter that outputs words in English.
 <p>
  This calls <code>wordBased(Locale)</code> using a locale of <code>ENGLISH</code>.
 @return the formatter, not null
 */
+ (OrgJodaTimeFormatPeriodFormatter *)getDefault;

/*!
 @brief Returns a word based formatter for the JDK default locale.
 <p>
  This calls <code>wordBased(Locale)</code> using the <code>locale</code>.
 @return the formatter, not null
 @since 2.0
 */
+ (OrgJodaTimeFormatPeriodFormatter *)wordBased;

/*!
 @brief Returns a word based formatter for the specified locale.
 <p>
  The words are configured in a resource bundle text file - 
 <code>org.joda.time.format.messages</code>.
  This can be added to via the normal classpath resource bundle mechanisms. 
 <p>
  You can add your own translation by creating messages_<locale>.properties file
  and adding it to the <code>org.joda.time.format.messages</code> path. 
 <p>
  Simple example (1 -> singular suffix, not 1 -> plural suffix):  
 @code

  PeriodFormat.space=\ 
  PeriodFormat.comma=,
  PeriodFormat.commandand=,and 
  PeriodFormat.commaspaceand=, and 
  PeriodFormat.commaspace=, 
  PeriodFormat.spaceandspace=\ and 
  PeriodFormat.year=\ year
  PeriodFormat.years=\ years
  PeriodFormat.month=\ month
  PeriodFormat.months=\ months
  PeriodFormat.week=\ week
  PeriodFormat.weeks=\ weeks
  PeriodFormat.day=\ day
  PeriodFormat.days=\ days
  PeriodFormat.hour=\ hour
  PeriodFormat.hours=\ hours
  PeriodFormat.minute=\ minute
  PeriodFormat.minutes=\ minutes
  PeriodFormat.second=\ second
  PeriodFormat.seconds=\ seconds
  PeriodFormat.millisecond=\ millisecond
  PeriodFormat.milliseconds=\ milliseconds 
  
@endcode
   
 <p>
  Some languages contain more than two suffixes. You can use regular expressions
  for them. Here's an example using regular expression for English:  
 @code

  PeriodFormat.space=\ 
  PeriodFormat.comma=,
  PeriodFormat.commandand=,and 
  PeriodFormat.commaspaceand=, and 
  PeriodFormat.commaspace=, 
  PeriodFormat.spaceandspace=\ and 
  PeriodFormat.regex.separator=%
  PeriodFormat.years.regex=1$%.*
  PeriodFormat.years.list=\ year%\ years
  PeriodFormat.months.regex=1$%.*
  PeriodFormat.months.list=\ month%\ months
  PeriodFormat.weeks.regex=1$%.*
  PeriodFormat.weeks.list=\ week%\ weeks
  PeriodFormat.days.regex=1$%.*
  PeriodFormat.days.list=\ day%\ days
  PeriodFormat.hours.regex=1$%.*
  PeriodFormat.hours.list=\ hour%\ hours
  PeriodFormat.minutes.regex=1$%.*
  PeriodFormat.minutes.list=\ minute%\ minutes
  PeriodFormat.seconds.regex=1$%.*
  PeriodFormat.seconds.list=\ second%\ seconds
  PeriodFormat.milliseconds.regex=1$%.*
  PeriodFormat.milliseconds.list=\ millisecond%\ milliseconds 
  
@endcode
   
 <p>
  You can mix both approaches. Here's example for Polish (
  "1 year, 2 years, 5 years, 12 years, 15 years, 21 years, 22 years, 25 years"
  translates to
  "1 rok, 2 lata, 5 lat, 12 lat, 15 lat, 21 lat, 22 lata, 25 lat"). Notice that
  PeriodFormat.day and PeriodFormat.days is used for day suffixes as there is no
  need for regular expressions:  
 @code

  PeriodFormat.space=\ 
  PeriodFormat.comma=,
  PeriodFormat.commandand=,i 
  PeriodFormat.commaspaceand=, i 
  PeriodFormat.commaspace=, 
  PeriodFormat.spaceandspace=\ i 
  PeriodFormat.regex.separator=%
  PeriodFormat.years.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]*
  PeriodFormat.years.list=\ rok%\ lata%\ lat
  PeriodFormat.months.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]* PeriodFormat.months.list=\ miesiąc%\ miesiące%\ miesięcy
  PeriodFormat.weeks.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]* PeriodFormat.weeks.list=\ tydzień%\ tygodnie%\ tygodni PeriodFormat.day=\ dzień
  PeriodFormat.days=\ dni
  PeriodFormat.hours.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]*
  PeriodFormat.hours.list=\ godzina%\ godziny%\ godzin
  PeriodFormat.minutes.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]*
  PeriodFormat.minutes.list=\ minuta%\ minuty%\ minut
  PeriodFormat.seconds.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]*
  PeriodFormat.seconds.list=\ sekunda%\ sekundy%\ sekund
  PeriodFormat.milliseconds.regex=^1$%[0-9]*(?&lt;!1)[2-4]$%[0-9]*
  PeriodFormat.milliseconds.list=\ milisekunda%\ milisekundy%\ milisekund 
  
@endcode
   
 <p>
  Each PeriodFormat.&lt;duration_field_type&gt;.regex property stands for an array of
  regular expressions and is followed by a property
  PeriodFormat.&lt;duration_field_type&gt;.list holding an array of suffixes.
  PeriodFormat.regex.separator is used for splitting. See 
 <code>String[])</code> for details. 
 <p>
  Available languages are English, Danish, Dutch, French, German, Japanese,
  Polish, Portuguese and Spanish.
 @return the formatter, not null
 @since 2.0, regex since 2.5
 */
+ (OrgJodaTimeFormatPeriodFormatter *)wordBasedWithJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Protected

/*!
 @brief Constructor.
 @since 1.1 (previously private)
 */
- (instancetype)init;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormat)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormat_init(OrgJodaTimeFormatPeriodFormat *self);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormat *new_OrgJodaTimeFormatPeriodFormat_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormat *create_OrgJodaTimeFormatPeriodFormat_init(void);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeFormatPeriodFormat_getDefault(void);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeFormatPeriodFormat_wordBased(void);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeFormatPeriodFormat_wordBasedWithJavaUtilLocale_(JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormat)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeFormatPeriodFormat")
