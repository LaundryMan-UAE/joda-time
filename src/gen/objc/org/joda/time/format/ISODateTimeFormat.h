//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/format/ISODateTimeFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeFormatISODateTimeFormat")
#ifdef RESTRICT_OrgJodaTimeFormatISODateTimeFormat
#define INCLUDE_ALL_OrgJodaTimeFormatISODateTimeFormat 0
#else
#define INCLUDE_ALL_OrgJodaTimeFormatISODateTimeFormat 1
#endif
#undef RESTRICT_OrgJodaTimeFormatISODateTimeFormat

#if !defined (OrgJodaTimeFormatISODateTimeFormat_) && (INCLUDE_ALL_OrgJodaTimeFormatISODateTimeFormat || defined(INCLUDE_OrgJodaTimeFormatISODateTimeFormat))
#define OrgJodaTimeFormatISODateTimeFormat_

@class OrgJodaTimeFormatDateTimeFormatter;
@protocol JavaUtilCollection;

/*!
 @brief Factory that creates instances of DateTimeFormatter based on the ISO8601 standard.
 <p>
 Date-time formatting is performed by the <code>DateTimeFormatter</code> class.
 Three classes provide factory methods to create formatters, and this is one.
 The others are <code>DateTimeFormat</code> and <code>DateTimeFormatterBuilder</code>.
 <p>
 ISO8601 is the international standard for data interchange. It defines a
 framework, rather than an absolute standard. As a result this provider has a
 number of methods that represent common uses of the framework. The most common
 formats are <code>date</code>, <code>time</code>, and <code>dateTime</code>.
 <p>
 For example, to format a date time in ISO format:
 @code

  DateTime dt = new DateTime();
  DateTimeFormatter fmt = ISODateTimeFormat.dateTime();
  String str = fmt.print(dt);
  
@endcode
 <p>
 Note that these formatters mostly follow the ISO8601 standard for printing.
 For parsing, the formatters are more lenient and allow formats that are not
 in strict compliance with the standard.
 <p>
 It is important to understand that these formatters are not linked to
 the <code>ISOChronology</code>. These formatters may be used with any
 chronology, however there may be certain side effects with more unusual
 chronologies. For example, the ISO formatters rely on dayOfWeek being
 single digit, dayOfMonth being two digit and dayOfYear being three digit.
 A chronology with a ten day week would thus cause issues. However, in
 general, it is safe to use these formatters with other chronologies.
 <p>
 ISODateTimeFormat is thread-safe and immutable, and the formatters it
 returns are as well.
 @author Brian S O'Neill
 @since 1.0
 - seealso: DateTimeFormat
 - seealso: DateTimeFormatterBuilder
 */
@interface OrgJodaTimeFormatISODateTimeFormat : NSObject

#pragma mark Public

/*!
 @brief Returns a basic formatter for a full date as four digit year, two digit
 month of year, and two digit day of month (yyyyMMdd).
 <p>
 The returned formatter prints and parses only this format.
 @return a formatter for yyyyMMdd
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicDate;

/*!
 @brief Returns a basic formatter that combines a basic date and time, separated
 by a 'T' (yyyyMMdd'T'HHmmss.SSSZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for yyyyMMdd'T'HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicDateTime;

/*!
 @brief Returns a basic formatter that combines a basic date and time without millis,
 separated by a 'T' (yyyyMMdd'T'HHmmssZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for yyyyMMdd'T'HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicDateTimeNoMillis;

/*!
 @brief Returns a formatter for a full ordinal date, using a four
 digit year and three digit dayOfYear (yyyyDDD).
 <p>
 The returned formatter prints and parses only this format.
 @return a formatter for yyyyDDD
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDate;

/*!
 @brief Returns a formatter for a full ordinal date and time, using a four
 digit year and three digit dayOfYear (yyyyDDD'T'HHmmss.SSSZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for yyyyDDD'T'HHmmss.SSSZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDateTime;

/*!
 @brief Returns a formatter for a full ordinal date and time without millis,
 using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmssZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for yyyyDDD'T'HHmmssZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDateTimeNoMillis;

/*!
 @brief Returns a basic formatter for a two digit hour of day, two digit minute
 of hour, two digit second of minute, three digit millis, and time zone
 offset (HHmmss.SSSZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTime;

/*!
 @brief Returns a basic formatter for a two digit hour of day, two digit minute
 of hour, two digit second of minute, and time zone offset (HHmmssZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTimeNoMillis;

/*!
 @brief Returns a basic formatter for a two digit hour of day, two digit minute
 of hour, two digit second of minute, three digit millis, and time zone
 offset prefixed by 'T' ('T'HHmmss.SSSZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for 'T'HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTTime;

/*!
 @brief Returns a basic formatter for a two digit hour of day, two digit minute
 of hour, two digit second of minute, and time zone offset prefixed by 'T'
 ('T'HHmmssZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for 'T'HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTTimeNoMillis;

/*!
 @brief Returns a basic formatter for a full date as four digit weekyear, two
 digit week of weekyear, and one digit day of week (xxxx'W'wwe).
 <p>
 The returned formatter prints and parses only this format.
 @return a formatter for xxxx'W'wwe
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDate;

/*!
 @brief Returns a basic formatter that combines a basic weekyear date and time,
 separated by a 'T' (xxxx'W'wwe'T'HHmmss.SSSZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDateTime;

/*!
 @brief Returns a basic formatter that combines a basic weekyear date and time
 without millis, separated by a 'T' (xxxx'W'wwe'T'HHmmssZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for xxxx'W'wwe'T'HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDateTimeNoMillis;

/*!
 @brief Returns a formatter for a full date as four digit year, two digit month
 of year, and two digit day of month (yyyy-MM-dd).
 <p>
 The returned formatter prints and parses only this format.
 See <code>dateParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-MM-dd
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)date;

/*!
 @brief Returns a generic ISO date parser for parsing dates.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 It accepts formats described by the following syntax:
 @code

  date-element      = std-date-element | ord-date-element | week-date-element
  std-date-element  = yyyy ['-' MM ['-' dd]]
  ord-date-element  = yyyy ['-' DDD]
  week-date-element = xxxx '-W' ww ['-' e]
  
@endcode
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateElementParser;

/*!
 @brief Returns a formatter that combines a full date and two digit hour of
 day.
 (yyyy-MM-dd'T'HH)
 @return a formatter for yyyy-MM-dd'T'HH
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHour;

/*!
 @brief Returns a formatter that combines a full date, two digit hour of day,
 and two digit minute of hour.
 (yyyy-MM-dd'T'HH:mm)
 @return a formatter for yyyy-MM-dd'T'HH:mm
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinute;

/*!
 @brief Returns a formatter that combines a full date, two digit hour of day,
 two digit minute of hour, and two digit second of
 minute.
 (yyyy-MM-dd'T'HH:mm:ss)
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecond;

/*!
 @brief Returns a formatter that combines a full date, two digit hour of day,
 two digit minute of hour, two digit second of minute, and three digit
 fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS).
 Parsing will parse up
 to 9 fractional second digits, throwing away all except the first three.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecondFraction;

/*!
 @brief Returns a formatter that combines a full date, two digit hour of day,
 two digit minute of hour, two digit second of minute, and three digit
 fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS).
 Parsing will parse up
 to 3 fractional second digits.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecondMillis;

/*!
 @brief Returns a generic ISO datetime parser where the date is mandatory and the time is optional.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 This parser can parse zoned datetimes.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 It accepts formats described by the following syntax:
 @code

  date-opt-time     = date-element ['T' [time-element] [offset]]
  date-element      = std-date-element | ord-date-element | week-date-element
  std-date-element  = yyyy ['-' MM ['-' dd]]
  ord-date-element  = yyyy ['-' DDD]
  week-date-element = xxxx '-W' ww ['-' e]
  time-element      = HH [minute-element] | [fraction]
  minute-element    = ':' mm [second-element] | [fraction]
  second-element    = ':' ss [fraction]
  fraction          = ('.' | ',') digit+
  
@endcode
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateOptionalTimeParser;

/*!
 @brief Returns a generic ISO date parser for parsing dates with a possible zone.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 It accepts formats described by the following syntax:
 @code

  date              = date-element ['T' offset]
  date-element      = std-date-element | ord-date-element | week-date-element
  std-date-element  = yyyy ['-' MM ['-' dd]]
  ord-date-element  = yyyy ['-' DDD]
  week-date-element = xxxx '-W' ww ['-' e]
  offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])
  
@endcode
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateParser;

/*!
 @brief Returns a formatter that combines a full date and time, separated by a 'T'
 (yyyy-MM-dd'T'HH:mm:ss.SSSZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 See <code>dateTimeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateTime;

/*!
 @brief Returns a formatter that combines a full date and time without millis,
 separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 See <code>dateTimeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateTimeNoMillis;

/*!
 @brief Returns a generic ISO datetime parser which parses either a date or a time or both.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 It accepts formats described by the following syntax:
 @code

  datetime          = time | date-opt-time
  time              = 'T' time-element [offset]
  date-opt-time     = date-element ['T' [time-element] [offset]]
  date-element      = std-date-element | ord-date-element | week-date-element
  std-date-element  = yyyy ['-' MM ['-' dd]]
  ord-date-element  = yyyy ['-' DDD]
  week-date-element = xxxx '-W' ww ['-' e]
  time-element      = HH [minute-element] | [fraction]
  minute-element    = ':' mm [second-element] | [fraction]
  second-element    = ':' ss [fraction]
  fraction          = ('.' | ',') digit+
  offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])
  
@endcode
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateTimeParser;

/*!
 @brief Returns a formatter that outputs only those fields specified.
 <p>
 This method examines the fields provided and returns an ISO-style
 formatter that best fits. This can be useful for outputting
 less-common ISO styles, such as YearMonth (YYYY-MM) or MonthDay (--MM-DD).
 <p>
 The list provided may have overlapping fields, such as dayOfWeek and
 dayOfMonth. In this case, the style is chosen based on the following
 list, thus in the example, the calendar style is chosen as dayOfMonth
 is higher in priority than dayOfWeek:
 <ul>
 <li>monthOfYear - calendar date style
 <li>dayOfYear - ordinal date style
 <li>weekOfWeekYear - week date style
 <li>dayOfMonth - calendar date style
 <li>dayOfWeek - week date style
 <li>year
 <li>weekyear
 </ul>
 The supported formats are:
 @code

  Extended      Basic       Fields
  2005-03-25    20050325    year/monthOfYear/dayOfMonth
  2005-03       2005-03     year/monthOfYear
  2005--25      2005--25    year/dayOfMonth 
  2005          2005        year
  --03-25       --0325      monthOfYear/dayOfMonth
  --03          --03        monthOfYear
  ---03         ---03       dayOfMonth
  2005-084      2005084     year/dayOfYear
  -084          -084        dayOfYear
  2005-W12-5    2005W125    weekyear/weekOfWeekyear/dayOfWeek
  2005-W-5      2005W-5     weekyear/dayOfWeek 
  2005-W12      2005W12     weekyear/weekOfWeekyear
  -W12-5        -W125       weekOfWeekyear/dayOfWeek
  -W12          -W12        weekOfWeekyear
  -W-5          -W-5        dayOfWeek
  10:20:30.040  102030.040  hour/minute/second/milli
  10:20:30      102030      hour/minute/second
  10:20         1020        hour/minute
  10            10          hour
  -20:30.040    -2030.040   minute/second/milli
  -20:30        -2030       minute/second
  -20           -20         minute
  --30.040      --30.040    second/milli
  --30          --30        second
  ---.040       ---.040     milli 
  10-30.040     10-30.040   hour/second/milli 
  10:20-.040    1020-.040   hour/minute/milli 
  10-30         10-30       hour/second 
  10--.040      10--.040    hour/milli 
  -20-.040      -20-.040    minute/milli 
   plus datetime formats like {date}T{time}
  
@endcode
 * indiates that this is not an official ISO format and can be excluded
 by passing in <code>strictISO</code> as <code>true</code>.
 <p>
 This method can side effect the input collection of fields.
 If the input collection is modifiable, then each field that was added to
 the formatter will be removed from the collection, including any duplicates.
 If the input collection is unmodifiable then no side effect occurs.
 <p>
 This side effect processing is useful if you need to know whether all
 the fields were converted into the formatter or not. To achieve this,
 pass in a modifiable list, and check that it is empty on exit.
 @param fields  the fields to get a formatter for, not null,
 updated by the method call unless unmodifiable,
 removing those fields built in the formatter
 @param extended  true to use the extended format (with separators)
 @param strictISO  true to stick exactly to ISO8601, false to include additional formats
 @return a suitable formatter
 @throws IllegalArgumentException if there is no format for the fields
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)forFieldsWithJavaUtilCollection:(id<JavaUtilCollection>)fields
                                                            withBoolean:(jboolean)extended
                                                            withBoolean:(jboolean)strictISO;

/*!
 @brief Returns a formatter for a two digit hour of day.
 (HH)
 @return a formatter for HH
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hour;

/*!
 @brief Returns a formatter for a two digit hour of day and two digit minute of
 hour.
 (HH:mm)
 @return a formatter for HH:mm
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinute;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, and two digit second of minute.
 (HH:mm:ss)
 @return a formatter for HH:mm:ss
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecond;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, two digit second of minute, and three digit fraction of
 second (HH:mm:ss.SSS).
 Parsing will parse up to 9 fractional second
 digits, throwing away all except the first three.
 @return a formatter for HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecondFraction;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, two digit second of minute, and three digit fraction of
 second (HH:mm:ss.SSS).
 Parsing will parse up to 3 fractional second
 digits.
 @return a formatter for HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecondMillis;

/*!
 @brief Returns a generic ISO datetime parser where the date is mandatory and the time is optional.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 This parser only parses local datetimes.
 This parser is initialised with the local (UTC) time zone.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 It accepts formats described by the following syntax:
 @code

  datetime          = date-element ['T' time-element]
  date-element      = std-date-element | ord-date-element | week-date-element
  std-date-element  = yyyy ['-' MM ['-' dd]]
  ord-date-element  = yyyy ['-' DDD]
  week-date-element = xxxx '-W' ww ['-' e]
  time-element      = HH [minute-element] | [fraction]
  minute-element    = ':' mm [second-element] | [fraction]
  second-element    = ':' ss [fraction]
  fraction          = ('.' | ',') digit+
  
@endcode
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)localDateOptionalTimeParser;

/*!
 @brief Returns a generic ISO date parser for parsing local dates.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 This parser is initialised with the local (UTC) time zone.
 <p>
 It accepts formats described by the following syntax:
 @code

  date-element      = std-date-element | ord-date-element | week-date-element
  std-date-element  = yyyy ['-' MM ['-' dd]]
  ord-date-element  = yyyy ['-' DDD]
  week-date-element = xxxx '-W' ww ['-' e]
  
@endcode
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)localDateParser;

/*!
 @brief Returns a generic ISO time parser for parsing local times.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 This parser is initialised with the local (UTC) time zone.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 It accepts formats described by the following syntax:
 @code

  time           = ['T'] time-element
  time-element   = HH [minute-element] | [fraction]
  minute-element = ':' mm [second-element] | [fraction]
  second-element = ':' ss [fraction]
  fraction       = ('.' | ',') digit+
  
@endcode
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)localTimeParser;

/*!
 @brief Returns a formatter for a full ordinal date, using a four
 digit year and three digit dayOfYear (yyyy-DDD).
 <p>
 The returned formatter prints and parses only this format.
 See <code>dateParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-DDD
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDate;

/*!
 @brief Returns a formatter for a full ordinal date and time, using a four
 digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 See <code>dateTimeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDateTime;

/*!
 @brief Returns a formatter for a full ordinal date and time without millis,
 using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 See <code>dateTimeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-DDD'T'HH:mm:ssZZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDateTimeNoMillis;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, two digit second of minute, three digit fraction of second, and
 time zone offset (HH:mm:ss.SSSZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 See <code>timeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)time;

/*!
 @brief Returns a generic ISO time parser.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 It accepts formats described by the following syntax:
 @code

  time-element   = HH [minute-element] | [fraction]
  minute-element = ':' mm [second-element] | [fraction]
  second-element = ':' ss [fraction]
  fraction       = ('.' | ',') digit+
  
@endcode
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)timeElementParser;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, two digit second of minute, and time zone offset (HH:mm:ssZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 See <code>timeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)timeNoMillis;

/*!
 @brief Returns a generic ISO time parser for parsing times with a possible zone.
 <p>
 The returned formatter can only be used for parsing, printing is unsupported.
 <p>
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 It accepts formats described by the following syntax:
 @code

  time           = ['T'] time-element [offset]
  time-element   = HH [minute-element] | [fraction]
  minute-element = ':' mm [second-element] | [fraction]
  second-element = ':' ss [fraction]
  fraction       = ('.' | ',') digit+
  offset         = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])
  
@endcode
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)timeParser;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, two digit second of minute, three digit fraction of second, and
 time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 See <code>timeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for 'T'HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)tTime;

/*!
 @brief Returns a formatter for a two digit hour of day, two digit minute of
 hour, two digit second of minute, and time zone offset prefixed
 by 'T' ('T'HH:mm:ssZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 See <code>timeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for 'T'HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)tTimeNoMillis;

/*!
 @brief Returns a formatter for a full date as four digit weekyear, two digit
 week of weekyear, and one digit day of week (xxxx-'W'ww-e).
 <p>
 The returned formatter prints and parses only this format.
 See <code>dateParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for xxxx-'W'ww-e
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekDate;

/*!
 @brief Returns a formatter that combines a full weekyear date and time,
 separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which includes milliseconds.
 See <code>dateTimeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekDateTime;

/*!
 @brief Returns a formatter that combines a full weekyear date and time without millis,
 separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ssZZ).
 <p>
 The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
 The parser is strict by default, thus time string <code>24:00</code> cannot be parsed.
 <p>
 The returned formatter prints and parses only this format, which excludes milliseconds.
 See <code>dateTimeParser()</code> for a more flexible parser that accepts different formats.
 @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekDateTimeNoMillis;

/*!
 @brief Returns a formatter for a four digit weekyear.
 (xxxx)
 @return a formatter for xxxx
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekyear;

/*!
 @brief Returns a formatter for a four digit weekyear and two digit week of
 weekyear.
 (xxxx-'W'ww)
 @return a formatter for xxxx-'W'ww
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearWeek;

/*!
 @brief Returns a formatter for a four digit weekyear, two digit week of
 weekyear, and one digit day of week.
 (xxxx-'W'ww-e)
 @return a formatter for xxxx-'W'ww-e
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearWeekDay;

/*!
 @brief Returns a formatter for a four digit year.
 (yyyy)
 @return a formatter for yyyy
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)year;

/*!
 @brief Returns a formatter for a four digit year and two digit month of
 year.
 (yyyy-MM)
 @return a formatter for yyyy-MM
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)yearMonth;

/*!
 @brief Returns a formatter for a four digit year, two digit month of year, and
 two digit day of month.
 (yyyy-MM-dd)
 @return a formatter for yyyy-MM-dd
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)yearMonthDay;

#pragma mark Protected

/*!
 @brief Constructor.
 @since 1.1 (previously private)
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatISODateTimeFormat)

FOUNDATION_EXPORT void OrgJodaTimeFormatISODateTimeFormat_init(OrgJodaTimeFormatISODateTimeFormat *self);

FOUNDATION_EXPORT OrgJodaTimeFormatISODateTimeFormat *new_OrgJodaTimeFormatISODateTimeFormat_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatISODateTimeFormat *create_OrgJodaTimeFormatISODateTimeFormat_init();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_forFieldsWithJavaUtilCollection_withBoolean_withBoolean_(id<JavaUtilCollection> fields, jboolean extended, jboolean strictISO);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_localDateParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateElementParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_timeParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_localTimeParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_timeElementParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateTimeParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateOptionalTimeParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_date();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_time();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_timeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_tTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_tTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_ordinalDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_ordinalDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_ordinalDateTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekDateTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicDateTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDateTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicWeekDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicWeekDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicWeekDateTimeNoMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_year();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_yearMonth();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_yearMonthDay();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekyear();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekyearWeek();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekyearWeekDay();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hour();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinute();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecond();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondFraction();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHour();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinute();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecond();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecondMillis();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecondFraction();

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatISODateTimeFormat)

#endif

#if !defined (OrgJodaTimeFormatISODateTimeFormat_Constants_) && (INCLUDE_ALL_OrgJodaTimeFormatISODateTimeFormat || defined(INCLUDE_OrgJodaTimeFormatISODateTimeFormat_Constants))
#define OrgJodaTimeFormatISODateTimeFormat_Constants_

@interface OrgJodaTimeFormatISODateTimeFormat_Constants : NSObject

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatISODateTimeFormat_Constants)

FOUNDATION_EXPORT void OrgJodaTimeFormatISODateTimeFormat_Constants_init(OrgJodaTimeFormatISODateTimeFormat_Constants *self);

FOUNDATION_EXPORT OrgJodaTimeFormatISODateTimeFormat_Constants *new_OrgJodaTimeFormatISODateTimeFormat_Constants_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatISODateTimeFormat_Constants *create_OrgJodaTimeFormatISODateTimeFormat_Constants_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatISODateTimeFormat_Constants)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeFormatISODateTimeFormat")
