//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/format/DateTimeFormatter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/LocalDateTime.h"
#include "org/joda/time/LocalTime.h"
#include "org/joda/time/MutableDateTime.h"
#include "org/joda/time/ReadWritableInstant.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/DateTimeParser.h"
#include "org/joda/time/format/DateTimeParserBucket.h"
#include "org/joda/time/format/DateTimeParserInternalParser.h"
#include "org/joda/time/format/DateTimePrinter.h"
#include "org/joda/time/format/DateTimePrinterInternalPrinter.h"
#include "org/joda/time/format/FormatUtils.h"
#include "org/joda/time/format/InternalParser.h"
#include "org/joda/time/format/InternalParserDateTimeParser.h"
#include "org/joda/time/format/InternalPrinter.h"
#include "org/joda/time/format/InternalPrinterDateTimePrinter.h"

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, id<JavaLangAppendable> appendable, jlong instant, OrgJodaTimeChronology *chrono);
__attribute__((unused)) static id<OrgJodaTimeFormatInternalPrinter> OrgJodaTimeFormatDateTimeFormatter_requirePrinter(OrgJodaTimeFormatDateTimeFormatter *self);
__attribute__((unused)) static id<OrgJodaTimeFormatInternalParser> OrgJodaTimeFormatDateTimeFormatter_requireParser(OrgJodaTimeFormatDateTimeFormatter *self);
__attribute__((unused)) static OrgJodaTimeChronology *OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, OrgJodaTimeChronology *chrono);

@interface OrgJodaTimeFormatDateTimeFormatter () {
 @public
  /**
   @brief The internal printer used to output the datetime.
   */
  id<OrgJodaTimeFormatInternalPrinter> iPrinter_;
  /**
   @brief The internal parser used to output the datetime.
   */
  id<OrgJodaTimeFormatInternalParser> iParser_;
  /**
   @brief The locale to use for printing and parsing.
   */
  JavaUtilLocale *iLocale_;
  /**
   @brief Whether the offset is parsed.
   */
  jboolean iOffsetParsed_;
  /**
   @brief The chronology to use as an override.
   */
  OrgJodaTimeChronology *iChrono_;
  /**
   @brief The zone to use as an override.
   */
  OrgJodaTimeDateTimeZone *iZone_;
  /**
   @brief The pivot year to use for two-digit year parsing.
   */
  JavaLangInteger *iPivotYear_;
  /**
   @brief The default year for parsing month/day without year.
   */
  jint iDefaultYear_;
}
- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                             withBoolean:(jboolean)offsetParsed
                               withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                             withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                     withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                 withInt:(jint)defaultYear;

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/**
 @brief Checks whether printing is supported.
 @throws UnsupportedOperationException if printing is not supported
 */
- (id<OrgJodaTimeFormatInternalPrinter>)requirePrinter;

/**
 @brief Checks whether parsing is supported.
 @throws UnsupportedOperationException if parsing is not supported
 */
- (id<OrgJodaTimeFormatInternalParser>)requireParser;

/**
 @brief Determines the correct chronology to use.
 @param chrono the proposed chronology
 @return the actual chronology
 */
- (OrgJodaTimeChronology *)selectChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iPrinter_, id<OrgJodaTimeFormatInternalPrinter>)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iParser_, id<OrgJodaTimeFormatInternalParser>)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iChrono_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iPivotYear_, JavaLangInteger *)

@implementation OrgJodaTimeFormatDateTimeFormatter

- (instancetype)initWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                     withOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  return [self initOrgJodaTimeFormatDateTimeFormatterWithOrgJodaTimeFormatInternalPrinter:OrgJodaTimeFormatDateTimePrinterInternalPrinter_ofWithOrgJodaTimeFormatDateTimePrinter_(printer) withOrgJodaTimeFormatInternalParser:OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser)];
}

- (instancetype)initOrgJodaTimeFormatDateTimeFormatterWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                                                       withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  if (self = [super init]) {
    OrgJodaTimeFormatDateTimeFormatter_set_iPrinter_(self, printer);
    OrgJodaTimeFormatDateTimeFormatter_set_iParser_(self, parser);
    OrgJodaTimeFormatDateTimeFormatter_set_iLocale_(self, nil);
    iOffsetParsed_ = NO;
    OrgJodaTimeFormatDateTimeFormatter_set_iChrono_(self, nil);
    OrgJodaTimeFormatDateTimeFormatter_set_iZone_(self, nil);
    OrgJodaTimeFormatDateTimeFormatter_set_iPivotYear_(self, nil);
    iDefaultYear_ = 2000;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  return [self initOrgJodaTimeFormatDateTimeFormatterWithOrgJodaTimeFormatInternalPrinter:printer withOrgJodaTimeFormatInternalParser:parser];
}

- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                             withBoolean:(jboolean)offsetParsed
                               withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                             withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                     withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                 withInt:(jint)defaultYear {
  if (self = [super init]) {
    OrgJodaTimeFormatDateTimeFormatter_set_iPrinter_(self, printer);
    OrgJodaTimeFormatDateTimeFormatter_set_iParser_(self, parser);
    OrgJodaTimeFormatDateTimeFormatter_set_iLocale_(self, locale);
    iOffsetParsed_ = offsetParsed;
    OrgJodaTimeFormatDateTimeFormatter_set_iChrono_(self, chrono);
    OrgJodaTimeFormatDateTimeFormatter_set_iZone_(self, zone);
    OrgJodaTimeFormatDateTimeFormatter_set_iPivotYear_(self, pivotYear);
    iDefaultYear_ = defaultYear;
  }
  return self;
}

- (jboolean)isPrinter {
  return (iPrinter_ != nil);
}

- (id<OrgJodaTimeFormatDateTimePrinter>)getPrinter {
  return OrgJodaTimeFormatInternalPrinterDateTimePrinter_ofWithOrgJodaTimeFormatInternalPrinter_(iPrinter_);
}

- (id<OrgJodaTimeFormatInternalPrinter>)getPrinter0 {
  return iPrinter_;
}

- (jboolean)isParser {
  return (iParser_ != nil);
}

- (id<OrgJodaTimeFormatDateTimeParser>)getParser {
  return OrgJodaTimeFormatInternalParserDateTimeParser_ofWithOrgJodaTimeFormatInternalParser_(iParser_);
}

- (id<OrgJodaTimeFormatInternalParser>)getParser0 {
  return iParser_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == [self getLocale] || (locale != nil && [locale isEqual:[self getLocale]])) {
    return self;
  }
  return [[[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:locale withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withOffsetParsed {
  if (iOffsetParsed_ == YES) {
    return self;
  }
  return [[[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:YES withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:nil withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
}

- (jboolean)isOffsetParsed {
  return iOffsetParsed_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (iChrono_ == chrono) {
    return self;
  }
  return [[[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:chrono withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
}

- (OrgJodaTimeChronology *)getChronology {
  return iChrono_;
}

- (OrgJodaTimeChronology *)getChronolgy {
  return iChrono_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withZoneUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
}

- (OrgJodaTimeFormatDateTimeFormatter *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (iZone_ == zone) {
    return self;
  }
  return [[[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:NO withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:zone withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return iZone_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear {
  if (iPivotYear_ == pivotYear || (iPivotYear_ != nil && [iPivotYear_ isEqual:pivotYear])) {
    return self;
  }
  return [[[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:pivotYear withInt:iDefaultYear_] autorelease];
}

- (OrgJodaTimeFormatDateTimeFormatter *)withPivotYearWithInt:(jint)pivotYear {
  return [self withPivotYearWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(pivotYear)];
}

- (JavaLangInteger *)getPivotYear {
  return iPivotYear_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withDefaultYearWithInt:(jint)defaultYear {
  return [[[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:iPivotYear_ withInt:defaultYear] autorelease];
}

- (jint)getDefaultYear {
  return iDefaultYear_;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadableInstant:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(outArg, @protocol(JavaLangAppendable)) withOrgJodaTimeReadableInstant:instant];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong millis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(self, appendable, millis, chrono);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                               withLong:(jlong)instant {
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withLong:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                       withLong:(jlong)instant {
  [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(outArg, @protocol(JavaLangAppendable)) withLong:instant];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant {
  OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(self, appendable, instant, nil);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadablePartial:partial];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(outArg, @protocol(JavaLangAppendable)) withOrgJodaTimeReadablePartial:partial];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  id<OrgJodaTimeFormatInternalPrinter> printer = OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self);
  if (partial == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The partial must not be null"] autorelease];
  }
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:iLocale_];
}

- (NSString *)printWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithInt:[((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self))) estimatePrintedLength]] autorelease];
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadableInstant:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (NSString *)printWithLong:(jlong)instant {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithInt:[((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self))) estimatePrintedLength]] autorelease];
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withLong:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (NSString *)printWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithInt:[((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self))) estimatePrintedLength]] autorelease];
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadablePartial:partial];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(self, appendable, instant, chrono);
}

- (id<OrgJodaTimeFormatInternalPrinter>)requirePrinter {
  return OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self);
}

- (jint)parseIntoWithOrgJodaTimeReadWritableInstant:(id<OrgJodaTimeReadWritableInstant>)instant
                                       withNSString:(NSString *)text
                                            withInt:(jint)position {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  if (instant == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Instant must not be null"] autorelease];
  }
  jlong instantMillis = [((id<OrgJodaTimeReadWritableInstant>) nil_chk(instant)) getMillis];
  OrgJodaTimeChronology *chrono = [instant getChronology];
  jint defaultYear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) year])) getWithLong:instantMillis];
  jlong instantLocal = instantMillis + [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) getZone])) getOffsetWithLong:instantMillis];
  chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, chrono);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:defaultYear] autorelease];
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  [instant setMillisWithLong:[bucket computeMillisWithBoolean:NO withNSString:text]];
  if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
    jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
    OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
  }
  else if ([bucket getZone] != nil) {
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
  }
  [instant setChronologyWithOrgJodaTimeChronology:chrono];
  if (iZone_ != nil) {
    [instant setZoneWithOrgJodaTimeDateTimeZone:iZone_];
  }
  return newPos;
}

- (jlong)parseMillisWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, iChrono_);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
  return [bucket doParseMillisWithOrgJodaTimeFormatInternalParser:parser withJavaLangCharSequence:text];
}

- (OrgJodaTimeLocalDate *)parseLocalDateWithNSString:(NSString *)text {
  return [((OrgJodaTimeLocalDateTime *) nil_chk([self parseLocalDateTimeWithNSString:text])) toLocalDate];
}

- (OrgJodaTimeLocalTime *)parseLocalTimeWithNSString:(NSString *)text {
  return [((OrgJodaTimeLocalDateTime *) nil_chk([self parseLocalDateTimeWithNSString:text])) toLocalTime];
}

- (OrgJodaTimeLocalDateTime *)parseLocalDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, nil))) withUTC];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= ((jint) [((NSString *) nil_chk(text)) length])) {
      jlong millis = [bucket computeMillisWithBoolean:YES withNSString:text];
      if ([bucket getOffsetInteger] != nil) {
        jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      return [[[OrgJodaTimeLocalDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:chrono] autorelease];
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos)] autorelease];
}

- (OrgJodaTimeDateTime *)parseDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= ((jint) [((NSString *) nil_chk(text)) length])) {
      jlong millis = [bucket computeMillisWithBoolean:YES withNSString:text];
      if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
        jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      OrgJodaTimeDateTime *dt = [[[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:chrono] autorelease];
      if (iZone_ != nil) {
        dt = [dt withZoneWithOrgJodaTimeDateTimeZone:iZone_];
      }
      return dt;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos)] autorelease];
}

- (OrgJodaTimeMutableDateTime *)parseMutableDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_] autorelease];
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= ((jint) [((NSString *) nil_chk(text)) length])) {
      jlong millis = [bucket computeMillisWithBoolean:YES withNSString:text];
      if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
        jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      OrgJodaTimeMutableDateTime *dt = [[[OrgJodaTimeMutableDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:chrono] autorelease];
      if (iZone_ != nil) {
        [dt setZoneWithOrgJodaTimeDateTimeZone:iZone_];
      }
      return dt;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos)] autorelease];
}

- (id<OrgJodaTimeFormatInternalParser>)requireParser {
  return OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
}

- (OrgJodaTimeChronology *)selectChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, chrono);
}

- (void)dealloc {
  RELEASE_(iPrinter_);
  RELEASE_(iParser_);
  RELEASE_(iLocale_);
  RELEASE_(iChrono_);
  RELEASE_(iZone_);
  RELEASE_(iPivotYear_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatter *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFormatDateTimeFormatter_set_iPrinter_(other, iPrinter_);
  OrgJodaTimeFormatDateTimeFormatter_set_iParser_(other, iParser_);
  OrgJodaTimeFormatDateTimeFormatter_set_iLocale_(other, iLocale_);
  other->iOffsetParsed_ = iOffsetParsed_;
  OrgJodaTimeFormatDateTimeFormatter_set_iChrono_(other, iChrono_);
  OrgJodaTimeFormatDateTimeFormatter_set_iZone_(other, iZone_);
  OrgJodaTimeFormatDateTimeFormatter_set_iPivotYear_(other, iPivotYear_);
  other->iDefaultYear_ = iDefaultYear_;
}

+ (IOSObjectArray *)__annotations_getChronolgy {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParser:", "DateTimeFormatter", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:", "DateTimeFormatter", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:withJavaUtilLocale:withBoolean:withOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:withJavaLangInteger:withInt:", "DateTimeFormatter", NULL, 0x2, NULL },
    { "isPrinter", NULL, "Z", 0x1, NULL },
    { "getPrinter", NULL, "Lorg.joda.time.format.DateTimePrinter;", 0x1, NULL },
    { "getPrinter0", NULL, "Lorg.joda.time.format.InternalPrinter;", 0x0, NULL },
    { "isParser", NULL, "Z", 0x1, NULL },
    { "getParser", NULL, "Lorg.joda.time.format.DateTimeParser;", 0x1, NULL },
    { "getParser0", NULL, "Lorg.joda.time.format.InternalParser;", 0x0, NULL },
    { "withLocaleWithJavaUtilLocale:", "withLocale", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "withOffsetParsed", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "isOffsetParsed", NULL, "Z", 0x1, NULL },
    { "withChronologyWithOrgJodaTimeChronology:", "withChronology", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getChronolgy", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneUTC", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "withPivotYearWithJavaLangInteger:", "withPivotYear", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "withPivotYearWithInt:", "withPivotYear", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getPivotYear", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "withDefaultYearWithInt:", "withDefaultYear", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getDefaultYear", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadableInstant:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadableInstant:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadableInstant:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangStringBuffer:withLong:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withLong:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withLong:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePartial:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePartial:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printWithOrgJodaTimeReadableInstant:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "printWithLong:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "printWithOrgJodaTimeReadablePartial:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:", "printTo", "V", 0x2, "Ljava.io.IOException;" },
    { "requirePrinter", NULL, "Lorg.joda.time.format.InternalPrinter;", 0x2, NULL },
    { "parseIntoWithOrgJodaTimeReadWritableInstant:withNSString:withInt:", "parseInto", "I", 0x1, NULL },
    { "parseMillisWithNSString:", "parseMillis", "J", 0x1, NULL },
    { "parseLocalDateWithNSString:", "parseLocalDate", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "parseLocalTimeWithNSString:", "parseLocalTime", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "parseLocalDateTimeWithNSString:", "parseLocalDateTime", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "parseDateTimeWithNSString:", "parseDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "parseMutableDateTimeWithNSString:", "parseMutableDateTime", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "requireParser", NULL, "Lorg.joda.time.format.InternalParser;", 0x2, NULL },
    { "selectChronologyWithOrgJodaTimeChronology:", "selectChronology", "Lorg.joda.time.Chronology;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iPrinter_", NULL, 0x12, "Lorg.joda.time.format.InternalPrinter;", NULL,  },
    { "iParser_", NULL, 0x12, "Lorg.joda.time.format.InternalParser;", NULL,  },
    { "iLocale_", NULL, 0x12, "Ljava.util.Locale;", NULL,  },
    { "iOffsetParsed_", NULL, 0x12, "Z", NULL,  },
    { "iChrono_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iZone_", NULL, 0x12, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iPivotYear_", NULL, 0x12, "Ljava.lang.Integer;", NULL,  },
    { "iDefaultYear_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatter = { 1, "DateTimeFormatter", "org.joda.time.format", NULL, 0x1, 47, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatter;
}

@end

void OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, id<JavaLangAppendable> appendable, jlong instant, OrgJodaTimeChronology *chrono) {
  id<OrgJodaTimeFormatInternalPrinter> printer = OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self);
  chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, chrono);
  OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone];
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getOffsetWithLong:instant];
  jlong adjustedInstant = instant + offset;
  if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
    zone = OrgJodaTimeDateTimeZone_get_UTC_();
    offset = 0;
    adjustedInstant = instant;
  }
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) printToWithJavaLangAppendable:appendable withLong:adjustedInstant withOrgJodaTimeChronology:[chrono withUTC] withInt:offset withOrgJodaTimeDateTimeZone:zone withJavaUtilLocale:self->iLocale_];
}

id<OrgJodaTimeFormatInternalPrinter> OrgJodaTimeFormatDateTimeFormatter_requirePrinter(OrgJodaTimeFormatDateTimeFormatter *self) {
  id<OrgJodaTimeFormatInternalPrinter> printer = self->iPrinter_;
  if (printer == nil) {
    @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Printing not supported"] autorelease];
  }
  return printer;
}

id<OrgJodaTimeFormatInternalParser> OrgJodaTimeFormatDateTimeFormatter_requireParser(OrgJodaTimeFormatDateTimeFormatter *self) {
  id<OrgJodaTimeFormatInternalParser> parser = self->iParser_;
  if (parser == nil) {
    @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Parsing not supported"] autorelease];
  }
  return parser;
}

OrgJodaTimeChronology *OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, OrgJodaTimeChronology *chrono) {
  chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  if (self->iChrono_ != nil) {
    chrono = self->iChrono_;
  }
  if (self->iZone_ != nil) {
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:self->iZone_];
  }
  return chrono;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatter)
