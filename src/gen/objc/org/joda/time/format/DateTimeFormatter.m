//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/format/DateTimeFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/LocalDateTime.h"
#include "org/joda/time/LocalTime.h"
#include "org/joda/time/MutableDateTime.h"
#include "org/joda/time/ReadWritableInstant.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/DateTimeParser.h"
#include "org/joda/time/format/DateTimeParserBucket.h"
#include "org/joda/time/format/DateTimeParserInternalParser.h"
#include "org/joda/time/format/DateTimePrinter.h"
#include "org/joda/time/format/DateTimePrinterInternalPrinter.h"
#include "org/joda/time/format/FormatUtils.h"
#include "org/joda/time/format/InternalParser.h"
#include "org/joda/time/format/InternalParserDateTimeParser.h"
#include "org/joda/time/format/InternalPrinter.h"
#include "org/joda/time/format/InternalPrinterDateTimePrinter.h"

@interface OrgJodaTimeFormatDateTimeFormatter () {
 @public
  /*!
   @brief The internal printer used to output the datetime.
   */
  id<OrgJodaTimeFormatInternalPrinter> iPrinter_;
  /*!
   @brief The internal parser used to output the datetime.
   */
  id<OrgJodaTimeFormatInternalParser> iParser_;
  /*!
   @brief The locale to use for printing and parsing.
   */
  JavaUtilLocale *iLocale_;
  /*!
   @brief Whether the offset is parsed.
   */
  jboolean iOffsetParsed_;
  /*!
   @brief The chronology to use as an override.
   */
  OrgJodaTimeChronology *iChrono_;
  /*!
   @brief The zone to use as an override.
   */
  OrgJodaTimeDateTimeZone *iZone_;
  /*!
   @brief The pivot year to use for two-digit year parsing.
   */
  JavaLangInteger *iPivotYear_;
  /*!
   @brief The default year for parsing month/day without year.
   */
  jint iDefaultYear_;
}

/*!
 @brief Constructor.
 */
- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                             withBoolean:(jboolean)offsetParsed
                               withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                             withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                     withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                 withInt:(jint)defaultYear;

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/*!
 @brief Checks whether printing is supported.
 @throw UnsupportedOperationExceptionif printing is not supported
 */
- (id<OrgJodaTimeFormatInternalPrinter>)requirePrinter;

/*!
 @brief Checks whether parsing is supported.
 @throw UnsupportedOperationExceptionif parsing is not supported
 */
- (id<OrgJodaTimeFormatInternalParser>)requireParser;

/*!
 @brief Determines the correct chronology to use.
 @param chrono the proposed chronology
 @return the actual chronology
 */
- (OrgJodaTimeChronology *)selectChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iPrinter_, id<OrgJodaTimeFormatInternalPrinter>)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iParser_, id<OrgJodaTimeFormatInternalParser>)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iChrono_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatter, iPivotYear_, JavaLangInteger *)

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(OrgJodaTimeFormatDateTimeFormatter *self, id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser, JavaUtilLocale *locale, jboolean offsetParsed, OrgJodaTimeChronology *chrono, OrgJodaTimeDateTimeZone *zone, JavaLangInteger *pivotYear, jint defaultYear);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *new_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser, JavaUtilLocale *locale, jboolean offsetParsed, OrgJodaTimeChronology *chrono, OrgJodaTimeDateTimeZone *zone, JavaLangInteger *pivotYear, jint defaultYear) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser, JavaUtilLocale *locale, jboolean offsetParsed, OrgJodaTimeChronology *chrono, OrgJodaTimeDateTimeZone *zone, JavaLangInteger *pivotYear, jint defaultYear);

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, id<JavaLangAppendable> appendable, jlong instant, OrgJodaTimeChronology *chrono);

__attribute__((unused)) static id<OrgJodaTimeFormatInternalPrinter> OrgJodaTimeFormatDateTimeFormatter_requirePrinter(OrgJodaTimeFormatDateTimeFormatter *self);

__attribute__((unused)) static id<OrgJodaTimeFormatInternalParser> OrgJodaTimeFormatDateTimeFormatter_requireParser(OrgJodaTimeFormatDateTimeFormatter *self);

__attribute__((unused)) static OrgJodaTimeChronology *OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, OrgJodaTimeChronology *chrono);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeFormatDateTimeFormatter__Annotations$0(void);

@implementation OrgJodaTimeFormatDateTimeFormatter

- (instancetype)initWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                     withOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatDateTimePrinter_withOrgJodaTimeFormatDateTimeParser_(self, printer, parser);
  return self;
}

- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, printer, parser);
  return self;
}

- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                             withBoolean:(jboolean)offsetParsed
                               withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                             withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                     withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                 withInt:(jint)defaultYear {
  OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(self, printer, parser, locale, offsetParsed, chrono, zone, pivotYear, defaultYear);
  return self;
}

- (jboolean)isPrinter {
  return (iPrinter_ != nil);
}

- (id<OrgJodaTimeFormatDateTimePrinter>)getPrinter {
  return OrgJodaTimeFormatInternalPrinterDateTimePrinter_ofWithOrgJodaTimeFormatInternalPrinter_(iPrinter_);
}

- (id<OrgJodaTimeFormatInternalPrinter>)getPrinter0 {
  return iPrinter_;
}

- (jboolean)isParser {
  return (iParser_ != nil);
}

- (id<OrgJodaTimeFormatDateTimeParser>)getParser {
  return OrgJodaTimeFormatInternalParserDateTimeParser_ofWithOrgJodaTimeFormatInternalParser_(iParser_);
}

- (id<OrgJodaTimeFormatInternalParser>)getParser0 {
  return iParser_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == [self getLocale] || (locale != nil && [locale isEqual:[self getLocale]])) {
    return self;
  }
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(iPrinter_, iParser_, locale, iOffsetParsed_, iChrono_, iZone_, iPivotYear_, iDefaultYear_);
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withOffsetParsed {
  if (iOffsetParsed_ == true) {
    return self;
  }
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(iPrinter_, iParser_, iLocale_, true, iChrono_, nil, iPivotYear_, iDefaultYear_);
}

- (jboolean)isOffsetParsed {
  return iOffsetParsed_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (iChrono_ == chrono) {
    return self;
  }
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(iPrinter_, iParser_, iLocale_, iOffsetParsed_, chrono, iZone_, iPivotYear_, iDefaultYear_);
}

- (OrgJodaTimeChronology *)getChronology {
  return iChrono_;
}

- (OrgJodaTimeChronology *)getChronolgy {
  return iChrono_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withZoneUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)];
}

- (OrgJodaTimeFormatDateTimeFormatter *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (iZone_ == zone) {
    return self;
  }
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(iPrinter_, iParser_, iLocale_, false, iChrono_, zone, iPivotYear_, iDefaultYear_);
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return iZone_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear {
  if (iPivotYear_ == pivotYear || (iPivotYear_ != nil && [iPivotYear_ isEqual:pivotYear])) {
    return self;
  }
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(iPrinter_, iParser_, iLocale_, iOffsetParsed_, iChrono_, iZone_, pivotYear, iDefaultYear_);
}

- (OrgJodaTimeFormatDateTimeFormatter *)withPivotYearWithInt:(jint)pivotYear {
  return [self withPivotYearWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(pivotYear)];
}

- (JavaLangInteger *)getPivotYear {
  return iPivotYear_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withDefaultYearWithInt:(jint)defaultYear {
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(iPrinter_, iParser_, iLocale_, iOffsetParsed_, iChrono_, iZone_, iPivotYear_, defaultYear);
}

- (jint)getDefaultYear {
  return iDefaultYear_;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  @try {
    [self printToWithJavaLangAppendable:buf withOrgJodaTimeReadableInstant:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  [self printToWithJavaLangAppendable:outArg withOrgJodaTimeReadableInstant:instant];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong millis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(self, appendable, millis, chrono);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                               withLong:(jlong)instant {
  @try {
    [self printToWithJavaLangAppendable:buf withLong:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                       withLong:(jlong)instant {
  [self printToWithJavaLangAppendable:outArg withLong:instant];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant {
  OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(self, appendable, instant, nil);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  @try {
    [self printToWithJavaLangAppendable:buf withOrgJodaTimeReadablePartial:partial];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  [self printToWithJavaLangAppendable:outArg withOrgJodaTimeReadablePartial:partial];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  id<OrgJodaTimeFormatInternalPrinter> printer = OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self);
  if (partial == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The partial must not be null");
  }
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:iLocale_];
}

- (NSString *)printWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_([((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self))) estimatePrintedLength]);
  @try {
    [self printToWithJavaLangAppendable:buf withOrgJodaTimeReadableInstant:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (NSString *)printWithLong:(jlong)instant {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_([((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self))) estimatePrintedLength]);
  @try {
    [self printToWithJavaLangAppendable:buf withLong:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (NSString *)printWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_([((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self))) estimatePrintedLength]);
  @try {
    [self printToWithJavaLangAppendable:buf withOrgJodaTimeReadablePartial:partial];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(self, appendable, instant, chrono);
}

- (id<OrgJodaTimeFormatInternalPrinter>)requirePrinter {
  return OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self);
}

- (jint)parseIntoWithOrgJodaTimeReadWritableInstant:(id<OrgJodaTimeReadWritableInstant>)instant
                                       withNSString:(NSString *)text
                                            withInt:(jint)position {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  if (instant == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Instant must not be null");
  }
  jlong instantMillis = [instant getMillis];
  OrgJodaTimeChronology *chrono = [instant getChronology];
  jint defaultYear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) year])) getWithLong:instantMillis];
  jlong instantLocal = instantMillis + [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) getZone])) getOffsetWithLong:instantMillis];
  chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, chrono);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(instantLocal, chrono, iLocale_, iPivotYear_, defaultYear);
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  [instant setMillisWithLong:[bucket computeMillisWithBoolean:false withNSString:text]];
  if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
    jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
    OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
  }
  else if ([bucket getZone] != nil) {
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
  }
  [instant setChronologyWithOrgJodaTimeChronology:chrono];
  if (iZone_ != nil) {
    [instant setZoneWithOrgJodaTimeDateTimeZone:iZone_];
  }
  return newPos;
}

- (jlong)parseMillisWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, iChrono_);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(0, chrono, iLocale_, iPivotYear_, iDefaultYear_);
  return [bucket doParseMillisWithOrgJodaTimeFormatInternalParser:parser withJavaLangCharSequence:text];
}

- (OrgJodaTimeLocalDate *)parseLocalDateWithNSString:(NSString *)text {
  return [((OrgJodaTimeLocalDateTime *) nil_chk([self parseLocalDateTimeWithNSString:text])) toLocalDate];
}

- (OrgJodaTimeLocalTime *)parseLocalTimeWithNSString:(NSString *)text {
  return [((OrgJodaTimeLocalDateTime *) nil_chk([self parseLocalDateTimeWithNSString:text])) toLocalTime];
}

- (OrgJodaTimeLocalDateTime *)parseLocalDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, nil))) withUTC];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(0, chrono, iLocale_, iPivotYear_, iDefaultYear_);
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= [((NSString *) nil_chk(text)) java_length]) {
      jlong millis = [bucket computeMillisWithBoolean:true withNSString:text];
      if ([bucket getOffsetInteger] != nil) {
        jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      return create_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(millis, chrono);
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos));
}

- (OrgJodaTimeDateTime *)parseDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(0, chrono, iLocale_, iPivotYear_, iDefaultYear_);
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= [((NSString *) nil_chk(text)) java_length]) {
      jlong millis = [bucket computeMillisWithBoolean:true withNSString:text];
      if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
        jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      OrgJodaTimeDateTime *dt = create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(millis, chrono);
      if (iZone_ != nil) {
        dt = [dt withZoneWithOrgJodaTimeDateTimeZone:iZone_];
      }
      return dt;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos));
}

- (OrgJodaTimeMutableDateTime *)parseMutableDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
  OrgJodaTimeChronology *chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket *bucket = create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(0, chrono, iLocale_, iPivotYear_, iDefaultYear_);
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= [((NSString *) nil_chk(text)) java_length]) {
      jlong millis = [bucket computeMillisWithBoolean:true withNSString:text];
      if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
        jint parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(parsedOffset);
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      OrgJodaTimeMutableDateTime *dt = create_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(millis, chrono);
      if (iZone_ != nil) {
        [dt setZoneWithOrgJodaTimeDateTimeZone:iZone_];
      }
      return dt;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos));
}

- (id<OrgJodaTimeFormatInternalParser>)requireParser {
  return OrgJodaTimeFormatDateTimeFormatter_requireParser(self);
}

- (OrgJodaTimeChronology *)selectChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, chrono);
}

- (void)dealloc {
  RELEASE_(iPrinter_);
  RELEASE_(iParser_);
  RELEASE_(iLocale_);
  RELEASE_(iChrono_);
  RELEASE_(iZone_);
  RELEASE_(iPivotYear_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimePrinter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatInternalPrinter;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeParser;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatInternalParser;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 18, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 20, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 21, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 23, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 24, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 29, 17, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatInternalPrinter;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 34, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 35, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 36, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 37, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 38, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatInternalParser;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x2, 39, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParser:);
  methods[1].selector = @selector(initWithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:);
  methods[2].selector = @selector(initWithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:withJavaUtilLocale:withBoolean:withOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:withJavaLangInteger:withInt:);
  methods[3].selector = @selector(isPrinter);
  methods[4].selector = @selector(getPrinter);
  methods[5].selector = @selector(getPrinter0);
  methods[6].selector = @selector(isParser);
  methods[7].selector = @selector(getParser);
  methods[8].selector = @selector(getParser0);
  methods[9].selector = @selector(withLocaleWithJavaUtilLocale:);
  methods[10].selector = @selector(getLocale);
  methods[11].selector = @selector(withOffsetParsed);
  methods[12].selector = @selector(isOffsetParsed);
  methods[13].selector = @selector(withChronologyWithOrgJodaTimeChronology:);
  methods[14].selector = @selector(getChronology);
  methods[15].selector = @selector(getChronolgy);
  methods[16].selector = @selector(withZoneUTC);
  methods[17].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[18].selector = @selector(getZone);
  methods[19].selector = @selector(withPivotYearWithJavaLangInteger:);
  methods[20].selector = @selector(withPivotYearWithInt:);
  methods[21].selector = @selector(getPivotYear);
  methods[22].selector = @selector(withDefaultYearWithInt:);
  methods[23].selector = @selector(getDefaultYear);
  methods[24].selector = @selector(printToWithJavaLangStringBuffer:withOrgJodaTimeReadableInstant:);
  methods[25].selector = @selector(printToWithJavaIoWriter:withOrgJodaTimeReadableInstant:);
  methods[26].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadableInstant:);
  methods[27].selector = @selector(printToWithJavaLangStringBuffer:withLong:);
  methods[28].selector = @selector(printToWithJavaIoWriter:withLong:);
  methods[29].selector = @selector(printToWithJavaLangAppendable:withLong:);
  methods[30].selector = @selector(printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePartial:);
  methods[31].selector = @selector(printToWithJavaIoWriter:withOrgJodaTimeReadablePartial:);
  methods[32].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:);
  methods[33].selector = @selector(printWithOrgJodaTimeReadableInstant:);
  methods[34].selector = @selector(printWithLong:);
  methods[35].selector = @selector(printWithOrgJodaTimeReadablePartial:);
  methods[36].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:);
  methods[37].selector = @selector(requirePrinter);
  methods[38].selector = @selector(parseIntoWithOrgJodaTimeReadWritableInstant:withNSString:withInt:);
  methods[39].selector = @selector(parseMillisWithNSString:);
  methods[40].selector = @selector(parseLocalDateWithNSString:);
  methods[41].selector = @selector(parseLocalTimeWithNSString:);
  methods[42].selector = @selector(parseLocalDateTimeWithNSString:);
  methods[43].selector = @selector(parseDateTimeWithNSString:);
  methods[44].selector = @selector(parseMutableDateTimeWithNSString:);
  methods[45].selector = @selector(requireParser);
  methods[46].selector = @selector(selectChronologyWithOrgJodaTimeChronology:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iPrinter_", "LOrgJodaTimeFormatInternalPrinter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iParser_", "LOrgJodaTimeFormatInternalParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iLocale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iOffsetParsed_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iChrono_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iZone_", "LOrgJodaTimeDateTimeZone;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iPivotYear_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iDefaultYear_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeFormatDateTimePrinter;LOrgJodaTimeFormatDateTimeParser;", "LOrgJodaTimeFormatInternalPrinter;LOrgJodaTimeFormatInternalParser;", "LOrgJodaTimeFormatInternalPrinter;LOrgJodaTimeFormatInternalParser;LJavaUtilLocale;ZLOrgJodaTimeChronology;LOrgJodaTimeDateTimeZone;LJavaLangInteger;I", "withLocale", "LJavaUtilLocale;", "withChronology", "LOrgJodaTimeChronology;", (void *)&OrgJodaTimeFormatDateTimeFormatter__Annotations$0, "withZone", "LOrgJodaTimeDateTimeZone;", "withPivotYear", "LJavaLangInteger;", "I", "withDefaultYear", "printTo", "LJavaLangStringBuffer;LOrgJodaTimeReadableInstant;", "LJavaIoWriter;LOrgJodaTimeReadableInstant;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadableInstant;", "LJavaLangStringBuffer;J", "LJavaIoWriter;J", "LJavaLangAppendable;J", "LJavaLangStringBuffer;LOrgJodaTimeReadablePartial;", "LJavaIoWriter;LOrgJodaTimeReadablePartial;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;", "print", "LOrgJodaTimeReadableInstant;", "J", "LOrgJodaTimeReadablePartial;", "LJavaLangAppendable;JLOrgJodaTimeChronology;", "parseInto", "LOrgJodaTimeReadWritableInstant;LNSString;I", "parseMillis", "LNSString;", "parseLocalDate", "parseLocalTime", "parseLocalDateTime", "parseDateTime", "parseMutableDateTime", "selectChronology" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatter = { "DateTimeFormatter", "org.joda.time.format", ptrTable, methods, fields, 7, 0x1, 47, 8, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatter;
}

@end

void OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatDateTimePrinter_withOrgJodaTimeFormatDateTimeParser_(OrgJodaTimeFormatDateTimeFormatter *self, id<OrgJodaTimeFormatDateTimePrinter> printer, id<OrgJodaTimeFormatDateTimeParser> parser) {
  OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, OrgJodaTimeFormatDateTimePrinterInternalPrinter_ofWithOrgJodaTimeFormatDateTimePrinter_(printer), OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser));
}

OrgJodaTimeFormatDateTimeFormatter *new_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatDateTimePrinter_withOrgJodaTimeFormatDateTimeParser_(id<OrgJodaTimeFormatDateTimePrinter> printer, id<OrgJodaTimeFormatDateTimeParser> parser) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatter, initWithOrgJodaTimeFormatDateTimePrinter_withOrgJodaTimeFormatDateTimeParser_, printer, parser)
}

OrgJodaTimeFormatDateTimeFormatter *create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatDateTimePrinter_withOrgJodaTimeFormatDateTimeParser_(id<OrgJodaTimeFormatDateTimePrinter> printer, id<OrgJodaTimeFormatDateTimeParser> parser) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatter, initWithOrgJodaTimeFormatDateTimePrinter_withOrgJodaTimeFormatDateTimeParser_, printer, parser)
}

void OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(OrgJodaTimeFormatDateTimeFormatter *self, id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser) {
  NSObject_init(self);
  JreStrongAssign(&self->iPrinter_, printer);
  JreStrongAssign(&self->iParser_, parser);
  JreStrongAssign(&self->iLocale_, nil);
  self->iOffsetParsed_ = false;
  JreStrongAssign(&self->iChrono_, nil);
  JreStrongAssign(&self->iZone_, nil);
  JreStrongAssign(&self->iPivotYear_, nil);
  self->iDefaultYear_ = 2000;
}

OrgJodaTimeFormatDateTimeFormatter *new_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatter, initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_, printer, parser)
}

OrgJodaTimeFormatDateTimeFormatter *create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatter, initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_, printer, parser)
}

void OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(OrgJodaTimeFormatDateTimeFormatter *self, id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser, JavaUtilLocale *locale, jboolean offsetParsed, OrgJodaTimeChronology *chrono, OrgJodaTimeDateTimeZone *zone, JavaLangInteger *pivotYear, jint defaultYear) {
  NSObject_init(self);
  JreStrongAssign(&self->iPrinter_, printer);
  JreStrongAssign(&self->iParser_, parser);
  JreStrongAssign(&self->iLocale_, locale);
  self->iOffsetParsed_ = offsetParsed;
  JreStrongAssign(&self->iChrono_, chrono);
  JreStrongAssign(&self->iZone_, zone);
  JreStrongAssign(&self->iPivotYear_, pivotYear);
  self->iDefaultYear_ = defaultYear;
}

OrgJodaTimeFormatDateTimeFormatter *new_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser, JavaUtilLocale *locale, jboolean offsetParsed, OrgJodaTimeChronology *chrono, OrgJodaTimeDateTimeZone *zone, JavaLangInteger *pivotYear, jint defaultYear) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatter, initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_, printer, parser, locale, offsetParsed, chrono, zone, pivotYear, defaultYear)
}

OrgJodaTimeFormatDateTimeFormatter *create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_(id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser, JavaUtilLocale *locale, jboolean offsetParsed, OrgJodaTimeChronology *chrono, OrgJodaTimeDateTimeZone *zone, JavaLangInteger *pivotYear, jint defaultYear) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatter, initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_withJavaUtilLocale_withBoolean_withOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_withJavaLangInteger_withInt_, printer, parser, locale, offsetParsed, chrono, zone, pivotYear, defaultYear)
}

void OrgJodaTimeFormatDateTimeFormatter_printToWithJavaLangAppendable_withLong_withOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, id<JavaLangAppendable> appendable, jlong instant, OrgJodaTimeChronology *chrono) {
  id<OrgJodaTimeFormatInternalPrinter> printer = OrgJodaTimeFormatDateTimeFormatter_requirePrinter(self);
  chrono = OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(self, chrono);
  OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone];
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getOffsetWithLong:instant];
  jlong adjustedInstant = instant + offset;
  if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
    zone = JreLoadStatic(OrgJodaTimeDateTimeZone, UTC);
    offset = 0;
    adjustedInstant = instant;
  }
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) printToWithJavaLangAppendable:appendable withLong:adjustedInstant withOrgJodaTimeChronology:[chrono withUTC] withInt:offset withOrgJodaTimeDateTimeZone:zone withJavaUtilLocale:self->iLocale_];
}

id<OrgJodaTimeFormatInternalPrinter> OrgJodaTimeFormatDateTimeFormatter_requirePrinter(OrgJodaTimeFormatDateTimeFormatter *self) {
  id<OrgJodaTimeFormatInternalPrinter> printer = self->iPrinter_;
  if (printer == nil) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Printing not supported");
  }
  return printer;
}

id<OrgJodaTimeFormatInternalParser> OrgJodaTimeFormatDateTimeFormatter_requireParser(OrgJodaTimeFormatDateTimeFormatter *self) {
  id<OrgJodaTimeFormatInternalParser> parser = self->iParser_;
  if (parser == nil) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Parsing not supported");
  }
  return parser;
}

OrgJodaTimeChronology *OrgJodaTimeFormatDateTimeFormatter_selectChronologyWithOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatter *self, OrgJodaTimeChronology *chrono) {
  chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  if (self->iChrono_ != nil) {
    chrono = self->iChrono_;
  }
  if (self->iZone_ != nil) {
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:self->iZone_];
  }
  return chrono;
}

IOSObjectArray *OrgJodaTimeFormatDateTimeFormatter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatter)
