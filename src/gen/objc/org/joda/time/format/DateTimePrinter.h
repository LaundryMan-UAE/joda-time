//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/format/DateTimePrinter.java
//

#ifndef _OrgJodaTimeFormatDateTimePrinter_H_
#define _OrgJodaTimeFormatDateTimePrinter_H_

@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@protocol OrgJodaTimeReadablePartial;

#include "J2ObjC_header.h"

/**
 @brief Internal interface for creating textual representations of datetimes.
 <p> Application users will rarely use this class directly. Instead, you will use one of the factory classes to create a DateTimeFormatter . <p> The factory classes are:<br /> - DateTimeFormatterBuilder <br /> - DateTimeFormat <br /> - ISODateTimeFormat <br />
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@protocol OrgJodaTimeFormatDateTimePrinter < NSObject, JavaObject >

/**
 @brief Returns the expected maximum number of characters produced.
 The actual amount should rarely exceed this estimate.
 @return the estimated length
 */
- (jint)estimatePrintedLength;

/**
 @brief Prints an instant from milliseconds since 1970-01-01T00:00:00Z, using the given Chronology.
 @param buf formatted instant is appended to this buffer, not null
 @param instant millis since 1970-01-01T00:00:00Z
 @param chrono the chronology to use, not null
 @param displayOffset if a time zone offset is printed, force it to use this millisecond value
 @param displayZone the time zone to use, null means local time
 @param locale the locale to use, null means default locale
 */
- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                               withLong:(jlong)instant
              withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                withInt:(jint)displayOffset
            withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Prints an instant from milliseconds since 1970-01-01T00:00:00Z, using the given Chronology.
 @param out formatted instant is written out, not null
 @param instant millis since 1970-01-01T00:00:00Z
 @param chrono the chronology to use, not null
 @param displayOffset if a time zone offset is printed, force it to use this millisecond value
 @param displayZone the time zone to use, null means local time
 @param locale the locale to use, null means default locale
 */
- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                       withLong:(jlong)instant
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                        withInt:(jint)displayOffset
    withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
             withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Prints a ReadablePartial.
 @param buf formatted partial is appended to this buffer, not null
 @param partial partial to format, not null
 @param locale the locale to use, null means default locale
 */
- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Prints a ReadablePartial.
 @param out formatted partial is written out, not null
 @param partial partial to format, not null
 @param locale the locale to use, null means default locale
 */
- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
             withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatDateTimePrinter)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimePrinter)

#endif // _OrgJodaTimeFormatDateTimePrinter_H_
