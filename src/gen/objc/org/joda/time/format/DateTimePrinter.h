//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/joda-time/src/main/java/org/joda/time/format/DateTimePrinter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeFormatDateTimePrinter")
#ifdef RESTRICT_OrgJodaTimeFormatDateTimePrinter
#define INCLUDE_ALL_OrgJodaTimeFormatDateTimePrinter 0
#else
#define INCLUDE_ALL_OrgJodaTimeFormatDateTimePrinter 1
#endif
#undef RESTRICT_OrgJodaTimeFormatDateTimePrinter

#if !defined (OrgJodaTimeFormatDateTimePrinter_) && (INCLUDE_ALL_OrgJodaTimeFormatDateTimePrinter || defined(INCLUDE_OrgJodaTimeFormatDateTimePrinter))
#define OrgJodaTimeFormatDateTimePrinter_

@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@protocol OrgJodaTimeReadablePartial;

/*!
 @brief Internal interface for creating textual representations of datetimes.
 <p>
 Application users will rarely use this class directly. Instead, you
 will use one of the factory classes to create a <code>DateTimeFormatter</code>.
 <p>
 The factory classes are:<br />
 - <code>DateTimeFormatterBuilder</code><br />
 - <code>DateTimeFormat</code><br />
 - <code>ISODateTimeFormat</code><br />
 @author Brian S O'Neill
 @author Stephen Colebourne
 - seealso: DateTimeFormatterBuilder
 - seealso: DateTimeFormat
 - seealso: ISODateTimeFormat
 @since 1.0
 */
@protocol OrgJodaTimeFormatDateTimePrinter < JavaObject >

/*!
 @brief Returns the expected maximum number of characters produced.
 The actual amount should rarely exceed this estimate.
 @return the estimated length
 */
- (jint)estimatePrintedLength;

/*!
 @brief Prints an instant from milliseconds since 1970-01-01T00:00:00Z,
 using the given Chronology.
 @param buf  formatted instant is appended to this buffer, not null
 @param instant  millis since 1970-01-01T00:00:00Z
 @param chrono  the chronology to use, not null
 @param displayOffset  if a time zone offset is printed, force it to use
 this millisecond value
 @param displayZone  the time zone to use, null means local time
 @param locale  the locale to use, null means default locale
 */
- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                               withLong:(jlong)instant
              withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                withInt:(jint)displayOffset
            withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Prints an instant from milliseconds since 1970-01-01T00:00:00Z,
 using the given Chronology.
 @param outArg  formatted instant is written out, not null
 @param instant  millis since 1970-01-01T00:00:00Z
 @param chrono  the chronology to use, not null
 @param displayOffset  if a time zone offset is printed, force it to use
 this millisecond value
 @param displayZone  the time zone to use, null means local time
 @param locale  the locale to use, null means default locale
 */
- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                       withLong:(jlong)instant
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                        withInt:(jint)displayOffset
    withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
             withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Prints a ReadablePartial.
 @param buf  formatted partial is appended to this buffer, not null
 @param partial  partial to format, not null
 @param locale  the locale to use, null means default locale
 */
- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Prints a ReadablePartial.
 @param outArg  formatted partial is written out, not null
 @param partial  partial to format, not null
 @param locale  the locale to use, null means default locale
 */
- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
             withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatDateTimePrinter)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimePrinter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeFormatDateTimePrinter")
