//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/format/FormatUtils.java
//

#ifndef _OrgJodaTimeFormatFormatUtils_H_
#define _OrgJodaTimeFormatFormatUtils_H_

#include "J2ObjC_header.h"

@class JavaIoWriter;
@class JavaLangStringBuffer;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

/*!
 @brief Utility methods used by formatters.
 <p>
 FormatUtils is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFormatFormatUtils : NSObject

#pragma mark Public

/*!
 @brief Converts an integer to a string, prepended with a variable amount of '0'
 pad characters, and appends it to the given appendable.
 <p>This method is optimized for converting small values to strings.
 @param appenadble receives integer converted to a string
 @param value value to convert to a string
 @param size minimum amount of digits to append
 @since 2.4
 */
+ (void)appendPaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appenadble
                                          withInt:(jint)value
                                          withInt:(jint)size;

/*!
 @brief Converts an integer to a string, prepended with a variable amount of '0'
 pad characters, and appends it to the given buffer.
 <p>This method is optimized for converting small values to strings.
 @param appendable receives integer converted to a string
 @param value value to convert to a string
 @param size minimum amount of digits to append
 @since 2.4
 */
+ (void)appendPaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                         withLong:(jlong)value
                                          withInt:(jint)size;

/*!
 @brief Converts an integer to a string, prepended with a variable amount of '0'
 pad characters, and appends it to the given buffer.
 <p>This method is optimized for converting small values to strings.
 @param buf receives integer converted to a string
 @param value value to convert to a string
 @param size minimum amount of digits to append
 */
+ (void)appendPaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                            withInt:(jint)value
                                            withInt:(jint)size;

/*!
 @brief Converts an integer to a string, prepended with a variable amount of '0'
 pad characters, and appends it to the given buffer.
 <p>This method is optimized for converting small values to strings.
 @param buf receives integer converted to a string
 @param value value to convert to a string
 @param size minimum amount of digits to append
 */
+ (void)appendPaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                           withLong:(jlong)value
                                            withInt:(jint)size;

/*!
 @brief Converts an integer to a string, and appends it to the given appendable.
 <p>This method is optimized for converting small values to strings.
 @param appendable receives integer converted to a string
 @param value value to convert to a string
 @since 2.4
 */
+ (void)appendUnpaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                            withInt:(jint)value;

/*!
 @brief Converts an integer to a string, and appends it to the given appendable.
 <p>This method is optimized for converting small values to strings.
 @param appendable receives integer converted to a string
 @param value value to convert to a string
 */
+ (void)appendUnpaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                           withLong:(jlong)value;

/*!
 @brief Converts an integer to a string, and appends it to the given buffer.
 <p>This method is optimized for converting small values to strings.
 @param buf receives integer converted to a string
 @param value value to convert to a string
 */
+ (void)appendUnpaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                              withInt:(jint)value;

/*!
 @brief Converts an integer to a string, and appends it to the given buffer.
 <p>This method is optimized for converting small values to strings.
 @param buf receives integer converted to a string
 @param value value to convert to a string
 */
+ (void)appendUnpaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                             withLong:(jlong)value;

/*!
 @brief Calculates the number of decimal digits for the given value,
 including the sign.
 */
+ (jint)calculateDigitCountWithLong:(jlong)value;

/*!
 @brief Converts an integer to a string, prepended with a variable amount of '0'
 pad characters, and writes it to the given writer.
 <p>This method is optimized for converting small values to strings.
 @param outArg receives integer converted to a string
 @param value value to convert to a string
 @param size minimum amount of digits to append
 */
+ (void)writePaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                   withInt:(jint)value
                                   withInt:(jint)size;

/*!
 @brief Converts an integer to a string, prepended with a variable amount of '0'
 pad characters, and writes it to the given writer.
 <p>This method is optimized for converting small values to strings.
 @param outArg receives integer converted to a string
 @param value value to convert to a string
 @param size minimum amount of digits to append
 */
+ (void)writePaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                  withLong:(jlong)value
                                   withInt:(jint)size;

/*!
 @brief Converts an integer to a string, and writes it to the given writer.
 <p>This method is optimized for converting small values to strings.
 @param outArg receives integer converted to a string
 @param value value to convert to a string
 */
+ (void)writeUnpaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                     withInt:(jint)value;

/*!
 @brief Converts an integer to a string, and writes it to the given writer.
 <p>This method is optimized for converting small values to strings.
 @param outArg receives integer converted to a string
 @param value value to convert to a string
 */
+ (void)writeUnpaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                    withLong:(jlong)value;

#pragma mark Package-Private

+ (NSString *)createErrorMessageWithNSString:(NSString *)text
                                     withInt:(jint)errorPos;

+ (jint)parseTwoDigitsWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                       withInt:(jint)position;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatFormatUtils)

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(JavaLangStringBuffer *buf, jint value, jint size);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(id<JavaLangAppendable> appenadble, jint value, jint size);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withLong_withInt_(JavaLangStringBuffer *buf, jlong value, jint size);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withLong_withInt_(id<JavaLangAppendable> appendable, jlong value, jint size);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_writePaddedIntegerWithJavaIoWriter_withInt_withInt_(JavaIoWriter *outArg, jint value, jint size);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_writePaddedIntegerWithJavaIoWriter_withLong_withInt_(JavaIoWriter *outArg, jlong value, jint size);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendUnpaddedIntegerWithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buf, jint value);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendUnpaddedIntegerWithJavaLangAppendable_withInt_(id<JavaLangAppendable> appendable, jint value);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendUnpaddedIntegerWithJavaLangStringBuffer_withLong_(JavaLangStringBuffer *buf, jlong value);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_appendUnpaddedIntegerWithJavaLangAppendable_withLong_(id<JavaLangAppendable> appendable, jlong value);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_writeUnpaddedIntegerWithJavaIoWriter_withInt_(JavaIoWriter *outArg, jint value);

FOUNDATION_EXPORT void OrgJodaTimeFormatFormatUtils_writeUnpaddedIntegerWithJavaIoWriter_withLong_(JavaIoWriter *outArg, jlong value);

FOUNDATION_EXPORT jint OrgJodaTimeFormatFormatUtils_calculateDigitCountWithLong_(jlong value);

FOUNDATION_EXPORT jint OrgJodaTimeFormatFormatUtils_parseTwoDigitsWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> text, jint position);

FOUNDATION_EXPORT NSString *OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(NSString *text, jint errorPos);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatFormatUtils)

#endif // _OrgJodaTimeFormatFormatUtils_H_
