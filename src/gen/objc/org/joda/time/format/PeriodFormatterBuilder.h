//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder")
#ifdef RESTRICT_OrgJodaTimeFormatPeriodFormatterBuilder
#define INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder 0
#else
#define INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder 1
#endif
#undef RESTRICT_OrgJodaTimeFormatPeriodFormatterBuilder
#ifdef INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix
#define INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix 1
#endif
#ifdef INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix
#define INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix 1
#endif
#ifdef INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix
#define INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix 1
#endif
#ifdef INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix
#define INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix 1
#endif
#ifdef INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix
#define INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix 1
#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder))
#define OrgJodaTimeFormatPeriodFormatterBuilder_

@class IOSObjectArray;
@class OrgJodaTimeFormatPeriodFormatter;
@protocol OrgJodaTimeFormatPeriodParser;
@protocol OrgJodaTimeFormatPeriodPrinter;

/*!
 @brief Factory that creates complex instances of PeriodFormatter via method calls.
 <p>
  Period formatting is performed by the <code>PeriodFormatter</code> class.
  Three classes provide factory methods to create formatters, and this is one.
  The others are <code>PeriodFormat</code> and <code>ISOPeriodFormat</code>.
  <p>
  PeriodFormatterBuilder is used for constructing formatters which are then
  used to print or parse. The formatters are built by appending specific fields
  or other formatters to an instance of this builder. 
 <p>
  For example, a formatter that prints years and months, like "15 years and 8 months",
  can be constructed as follows: 
 <p>
  @code

  PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()
      .printZeroAlways()
      .appendYears()
      .appendSuffix(" year", " years")
      .appendSeparator(" and ")
      .printZeroRarelyLast()
      .appendMonths()
      .appendSuffix(" month", " months")
      .toFormatter(); 
  
@endcode
  <p>
  PeriodFormatterBuilder itself is mutable and not thread-safe, but the
  formatters that it builds are thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 - seealso: PeriodFormat
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Appends another formatter.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWithOrgJodaTimeFormatPeriodFormatter:(OrgJodaTimeFormatPeriodFormatter *)formatter;

/*!
 @brief Appends a printer parser pair.
 <p>
  Either the printer or the parser may be null, in which case the builder will
  be unable to produce a parser or printer repectively.
 @param printer appends a printer to the builder, null if printing is not supported
 @param parser appends a parser to the builder, null if parsing is not supported
 @return this PeriodFormatterBuilder
 @throw IllegalArgumentExceptionif both the printer and parser are null
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)printer
                                                    withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)parser;

/*!
 @brief Instruct the printer to emit an integer days field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendDays;

/*!
 @brief Instruct the printer to emit an integer hours field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendHours;

/*!
 @brief Instructs the printer to emit specific text, and the parser to expect it.
 The parser is case-insensitive.
 @return this PeriodFormatterBuilder
 @throw IllegalArgumentExceptionif text is null
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendLiteralWithNSString:(NSString *)text;

/*!
 @brief Instruct the printer to emit an integer millis field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMillis;

/*!
 @brief Instruct the printer to emit an integer millis field, if supported.
 <p>
  The number of arsed digits can be controlled using <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMillis3Digit;

/*!
 @brief Instruct the printer to emit an integer minutes field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMinutes;

/*!
 @brief Instruct the printer to emit an integer months field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMonths;

/*!
 @brief Append a field prefix which applies only to the next appended field.If
  the field is not printed, neither is the prefix.
 @param text text to print before field only if field is printed
 @return this PeriodFormatterBuilder
 - seealso: #appendSuffix
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSString:(NSString *)text;

/*!
 @brief Append a field prefix which applies only to the next appended field.If
  the field is not printed, neither is the prefix.
 <p>
  During parsing, the singular and plural versions are accepted whether
  or not the actual value matches plurality.
 @param singularText text to print if field value is one
 @param pluralText text to print if field value is not one
 @return this PeriodFormatterBuilder
 - seealso: #appendSuffix
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSString:(NSString *)singularText
                                                         withNSString:(NSString *)pluralText;

/*!
 @brief Append a field prefix which applies only to the next appended field.
 If the field is not printed, neither is the prefix. 
 <p>
  The value is converted to String. During parsing, the prefix is selected based
  on the match with the regular expression. The index of the first regular
  expression that matches value converted to String nominates the prefix. If
  none of the regular expressions match the value converted to String then the
  last prefix is selected. 
 <p>
  An example usage for English might look like this:  
 @code

  appendPrefix(new String[] { &quot;&circ;1$&quot;, &quot;.*&quot; }, new String[] { &quot; year&quot;, &quot; years&quot; }) 
  
@endcode
   
 <p>
  Please note that for languages with simple mapping (singular and plural prefix
  only - like the one above) the <code>String)</code> method
  will produce in a slightly faster formatter and that 
 <code>String[])</code> method should be only used when the
  mapping between values and prefixes is more complicated than the difference between
  singular and plural.
 @param regularExpressions an array of regular expressions, at least one   element, length has to match the length of prefixes parameter
 @param prefixes an array of prefixes, at least one element, length has to   match the length of regularExpressions parameter
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif no field exists to append to
 - seealso: #appendPrefix
 @since 2.5
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSStringArray:(IOSObjectArray *)regularExpressions
                                                         withNSStringArray:(IOSObjectArray *)prefixes;

/*!
 @brief Instruct the printer to emit an integer seconds field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeconds;

/*!
 @brief Instruct the printer to emit a combined seconds and millis field, if supported.
 The millis will overflow into the seconds if necessary.
  The millis are always output.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSecondsWithMillis;

/*!
 @brief Instruct the printer to emit a combined seconds and millis field, if supported.
 The millis will overflow into the seconds if necessary.
  The millis are only output if non-zero.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSecondsWithOptionalMillis;

/*!
 @brief Append a separator, which is output if fields are printed both before
  and after the separator.
 <p>
  For example, <code>builder.appendDays().appendSeparator(",").appendHours()</code>
  will only output the comma if both the days and hours fields are output. 
 <p>
  The text will be parsed case-insensitively. 
 <p>
  Note: appending a separator discontinues any further work on the latest
  appended field.
 @param text the text to use as a separator
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text;

/*!
 @brief Append a separator, which is output if fields are printed both before
  and after the separator.
 <p>
  This method changes the separator depending on whether it is the last separator
  to be output. 
 <p>
  For example, <code>builder.appendDays().appendSeparator(",", "&").appendHours().appendSeparator(",", "&").appendMinutes()</code>
  will output '1,2&3' if all three fields are output, '1&2' if two fields are output
  and '1' if just one field is output. 
 <p>
  The text will be parsed case-insensitively. 
 <p>
  Note: appending a separator discontinues any further work on the latest
  appended field.
 @param text the text to use as a separator
 @param finalText the text used used if this is the final separator to be printed
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText;

/*!
 @brief Append a separator, which is output if fields are printed both before
  and after the separator.
 <p>
  This method changes the separator depending on whether it is the last separator
  to be output. 
 <p>
  For example, <code>builder.appendDays().appendSeparator(",", "&").appendHours().appendSeparator(",", "&").appendMinutes()</code>
  will output '1,2&3' if all three fields are output, '1&2' if two fields are output
  and '1' if just one field is output. 
 <p>
  The text will be parsed case-insensitively. 
 <p>
  Note: appending a separator discontinues any further work on the latest
  appended field.
 @param text the text to use as a separator
 @param finalText the text used used if this is the final separator to be printed
 @param variants set of text values which are also acceptable when parsed
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText
                                                       withNSStringArray:(IOSObjectArray *)variants;

/*!
 @brief Append a separator, which is output only if fields are printed after the separator.
 <p>
  For example, 
 <code>builder.appendDays().appendSeparatorIfFieldsAfter(",").appendHours()</code>
  will only output the comma if the hours fields is output. 
 <p>
  The text will be parsed case-insensitively. 
 <p>
  Note: appending a separator discontinues any further work on the latest
  appended field.
 @param text the text to use as a separator
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorIfFieldsAfterWithNSString:(NSString *)text;

/*!
 @brief Append a separator, which is output only if fields are printed before the separator.
 <p>
  For example, 
 <code>builder.appendDays().appendSeparatorIfFieldsBefore(",").appendHours()</code>
  will only output the comma if the days fields is output. 
 <p>
  The text will be parsed case-insensitively. 
 <p>
  Note: appending a separator discontinues any further work on the latest
  appended field.
 @param text the text to use as a separator
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorIfFieldsBeforeWithNSString:(NSString *)text;

/*!
 @brief Append a field suffix which applies only to the last appended field.If
  the field is not printed, neither is the suffix.
 @param text text to print after field only if field is printed
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif no field exists to append to
 - seealso: #appendPrefix
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSString:(NSString *)text;

/*!
 @brief Append a field suffix which applies only to the last appended field.If
  the field is not printed, neither is the suffix.
 <p>
  During parsing, the singular and plural versions are accepted whether or
  not the actual value matches plurality.
 @param singularText text to print if field value is one
 @param pluralText text to print if field value is not one
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif no field exists to append to
 - seealso: #appendPrefix
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSString:(NSString *)singularText
                                                         withNSString:(NSString *)pluralText;

/*!
 @brief Append a field suffix which applies only to the last appended field.
 If the field is not printed, neither is the suffix. 
 <p>
  The value is converted to String. During parsing, the suffix is selected based
  on the match with the regular expression. The index of the first regular
  expression that matches value converted to String nominates the suffix. If
  none of the regular expressions match the value converted to String then the
  last suffix is selected. 
 <p>
  An example usage for English might look like this:  
 @code

  appendSuffix(new String[] { &quot;&circ;1$&quot;, &quot;.*&quot; }, new String[] { &quot; year&quot;, &quot; years&quot; }) 
  
@endcode
   
 <p>
  Please note that for languages with simple mapping (singular and plural suffix
  only - like the one above) the <code>String)</code> method
  will result in a slightly faster formatter and that 
 <code>String[])</code> method should be only used when the
  mapping between values and prefixes is more complicated than the difference between
  singular and plural.
 @param regularExpressions an array of regular expressions, at least one   element, length has to match the length of suffixes parameter
 @param suffixes an array of suffixes, at least one element, length has to   match the length of regularExpressions parameter
 @return this PeriodFormatterBuilder
 @throw IllegalStateExceptionif no field exists to append to
 - seealso: #appendPrefix
 @since 2.5
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSStringArray:(IOSObjectArray *)regularExpressions
                                                         withNSStringArray:(IOSObjectArray *)suffixes;

/*!
 @brief Instruct the printer to emit an integer weeks field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWeeks;

/*!
 @brief Instruct the printer to emit an integer years field, if supported.
 <p>
  The number of printed and parsed digits can be controlled using 
 <code>minimumPrintedDigits(int)</code> and <code>maximumParsedDigits(int)</code>.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendYears;

/*!
 @brief Clears out all the appended elements, allowing this builder to be reused.
 */
- (void)clear;

/*!
 @brief Set the maximum digits parsed for the next and following appended
  fields.By default, the maximum digits parsed is ten.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)maximumParsedDigitsWithInt:(jint)maxDigits;

/*!
 @brief Set the minimum digits printed for the next and following appended
  fields.By default, the minimum digits printed is one.
 If the field value
  is zero, it is not printed unless a printZero rule is applied.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)minimumPrintedDigitsWithInt:(jint)minDigits;

/*!
 @brief Always print zero values for the next and following appended fields,
  even if the period doesn't support it.The parser requires values for
  fields that always print zero.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroAlways;

/*!
 @brief Print zero values for the next and following appened fields only if the
  period supports it.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroIfSupported;

/*!
 @brief Never print zero values for the next and following appended fields,
  unless no fields would be printed.If no fields are printed, the printer
  forces the last "printZeroRarely" field to print a zero.
 <p>
  This field setting is the default.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroNever;

/*!
 @brief Never print zero values for the next and following appended fields,
  unless no fields would be printed.If no fields are printed, the printer
  forces the first "printZeroRarely" field to print a zero.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroRarelyFirst;

/*!
 @brief Never print zero values for the next and following appended fields,
  unless no fields would be printed.If no fields are printed, the printer
  forces the last "printZeroRarely" field to print a zero.
 <p>
  This field setting is the default.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroRarelyLast;

/*!
 @brief Reject signed values when parsing the next and following appended fields.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)rejectSignedValuesWithBoolean:(jboolean)v;

/*!
 @brief Constructs a PeriodFormatter using all the appended elements.
 <p>
  This is the main method used by applications at the end of the build
  process to create a usable formatter. 
 <p>
  Subsequent changes to this builder do not affect the returned formatter. 
 <p>
  The returned formatter may not support both printing and parsing.
  The methods <code>PeriodFormatter.isPrinter()</code> and 
 <code>PeriodFormatter.isParser()</code> will help you determine the state
  of the formatter.
 @return the newly created formatter
 @throw IllegalStateExceptionif the builder can produce neither a printer nor a parser
 */
- (OrgJodaTimeFormatPeriodFormatter *)toFormatter;

/*!
 @brief Internal method to create a PeriodParser instance using all the
  appended elements.
 <p>
  Most applications will not use this method.
  If you want a printer in an application, call <code>toFormatter()</code>
  and just use the printing API. 
 <p>
  Subsequent changes to this builder do not affect the returned parser.
 @return the newly created parser, null if builder cannot create a parser
 */
- (id<OrgJodaTimeFormatPeriodParser>)toParser;

/*!
 @brief Internal method to create a PeriodPrinter instance using all the
  appended elements.
 <p>
  Most applications will not use this method.
  If you want a printer in an application, call <code>toFormatter()</code>
  and just use the printing API. 
 <p>
  Subsequent changes to this builder do not affect the returned printer.
 @return the newly created printer, null if builder cannot create a printer
 */
- (id<OrgJodaTimeFormatPeriodPrinter>)toPrinter;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_init(OrgJodaTimeFormatPeriodFormatterBuilder *self);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder *new_OrgJodaTimeFormatPeriodFormatterBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder *create_OrgJodaTimeFormatPeriodFormatterBuilder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix))
#define OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@protocol JavaUtilSet;

/*!
 @brief Defines a formatted field's prefix or suffix text.
 This can be used for fields such as 'n hours' or 'nH' or 'Hour:n'.
 */
@protocol OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix < JavaObject >

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

/*!
 @return new position after parsing affix, or ~position of failure
 */
- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

/*!
 @return position where affix starts, or original ~position if not found
 */
- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

/*!
 @return a copy of array of affixes
 */
- (IOSObjectArray *)getAffixes;

/*!
 @brief This method should be called only once.
 After first call consecutive calls to this methods will have no effect.
  Causes this affix to ignore a match (parse and scan
  methods) if there is an affix in the passed list that holds 
  affix text which satisfy both following conditions:
   - the affix text is also a match
   - the affix text is longer than the match from this object
 @param affixesToIgnore
 */
- (void)finishWithJavaUtilSet:(id<JavaUtilSet>)affixesToIgnore;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix))
#define OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix_

@protocol JavaUtilSet;

/*!
 @brief An affix that can be ignored.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix : NSObject < OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix >

#pragma mark Public

- (void)finishWithJavaUtilSet:(id<JavaUtilSet>)periodFieldAffixesToIgnore;

#pragma mark Protected

/*!
 @brief Checks if there is a match among the other affixes (stored internally) 
  that is longer than the passed value (textLength).
 @param textLength the length of the match
 @param periodStr the Period string that will be parsed
 @param position the position in the Period string at which the parsing should be started.
 @return true if the other affixes (stored internally) contain a match 
   that is longer than the textLength parameter, false otherwise
 */
- (jboolean)matchesOtherAffixWithInt:(jint)textLength
                        withNSString:(NSString *)periodStr
                             withInt:(jint)position;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix_init(OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix))
#define OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix_

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;

/*!
 @brief Implements an affix where the text does not vary by the amount.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix

#pragma mark Public

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (IOSObjectArray *)getAffixes;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)text;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix_initWithNSString_(OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix *self, NSString *text);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix *new_OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix_initWithNSString_(NSString *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix *create_OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix_initWithNSString_(NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix))
#define OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix_

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;

/*!
 @brief Implements an affix where the text varies by the amount of the field.
 Only singular (1) and plural (not 1) are supported.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix

#pragma mark Public

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (IOSObjectArray *)getAffixes;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)singularText
                    withNSString:(NSString *)pluralText;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix_initWithNSString_withNSString_(OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix *self, NSString *singularText, NSString *pluralText);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix *new_OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix_initWithNSString_withNSString_(NSString *singularText, NSString *pluralText) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix *create_OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix_initWithNSString_withNSString_(NSString *singularText, NSString *pluralText);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix))
#define OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;

/*!
 @brief Implements an affix where the text varies by the amount of the field.
 Different amounts are supported based on the provided parameters.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix

#pragma mark Public

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (IOSObjectArray *)getAffixes;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

#pragma mark Package-Private

- (instancetype)initWithNSStringArray:(IOSObjectArray *)regExes
                    withNSStringArray:(IOSObjectArray *)texts;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_initWithNSStringArray_withNSStringArray_(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix *self, IOSObjectArray *regExes, IOSObjectArray *texts);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix *new_OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_initWithNSStringArray_withNSStringArray_(IOSObjectArray *regExes, IOSObjectArray *texts) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix *create_OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_initWithNSStringArray_withNSStringArray_(IOSObjectArray *regExes, IOSObjectArray *texts);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix))
#define OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix_

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@protocol OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix;

/*!
 @brief Builds a composite affix by merging two other affix implementations.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix

#pragma mark Public

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (IOSObjectArray *)getAffixes;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)left
                    withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)right;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix_initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix *self, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> left, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> right);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix *new_OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix_initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> left, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> right) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix *create_OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix_initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> left, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> right);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter))
#define OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_

#define RESTRICT_OrgJodaTimeFormatPeriodPrinter 1
#define INCLUDE_OrgJodaTimeFormatPeriodPrinter 1
#include "org/joda/time/format/PeriodPrinter.h"

#define RESTRICT_OrgJodaTimeFormatPeriodParser 1
#define INCLUDE_OrgJodaTimeFormatPeriodParser 1
#include "org/joda/time/format/PeriodParser.h"

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@class OrgJodaTimePeriodType;
@protocol OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix;
@protocol OrgJodaTimeReadWritablePeriod;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief Formats the numeric value of a field, potentially with prefix/suffix.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser >

#pragma mark Public

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)finishWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:(IOSObjectArray *)fieldFormatters;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)text
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter:(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *)field
                  withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix;

- (instancetype)initWithInt:(jint)minPrintedDigits
                    withInt:(jint)printZeroSetting
                    withInt:(jint)maxParsedDigits
                withBoolean:(jboolean)rejectSignedValues
                    withInt:(jint)fieldType
withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:(IOSObjectArray *)fieldFormatters
withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)prefix
withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix;

- (jint)getFieldType;

/*!
 @return Long.MAX_VALUE if nothing to print, otherwise value
 */
- (jlong)getFieldValueWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (jboolean)isSupportedWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
                                         withInt:(jint)field;

- (jboolean)isZeroWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (void)setFieldValueWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                               withInt:(jint)field
                                               withInt:(jint)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_initWithInt_withInt_withInt_withBoolean_withInt_withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *self, jint minPrintedDigits, jint printZeroSetting, jint maxParsedDigits, jboolean rejectSignedValues, jint fieldType, IOSObjectArray *fieldFormatters, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> prefix, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> suffix);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *new_OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_initWithInt_withInt_withInt_withBoolean_withInt_withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(jint minPrintedDigits, jint printZeroSetting, jint maxParsedDigits, jboolean rejectSignedValues, jint fieldType, IOSObjectArray *fieldFormatters, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> prefix, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> suffix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *create_OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_initWithInt_withInt_withInt_withBoolean_withInt_withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(jint minPrintedDigits, jint printZeroSetting, jint maxParsedDigits, jboolean rejectSignedValues, jint fieldType, IOSObjectArray *fieldFormatters, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> prefix, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> suffix);

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *self, OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *field, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> suffix);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *new_OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *field, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> suffix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *create_OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter_withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix_(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *field, id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> suffix);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_Literal_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_Literal))
#define OrgJodaTimeFormatPeriodFormatterBuilder_Literal_

#define RESTRICT_OrgJodaTimeFormatPeriodPrinter 1
#define INCLUDE_OrgJodaTimeFormatPeriodPrinter 1
#include "org/joda/time/format/PeriodPrinter.h"

#define RESTRICT_OrgJodaTimeFormatPeriodParser 1
#define INCLUDE_OrgJodaTimeFormatPeriodParser 1
#include "org/joda/time/format/PeriodParser.h"

@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@protocol OrgJodaTimeReadWritablePeriod;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief Handles a simple literal piece of text.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_Literal : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser >

#pragma mark Public

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)periodStr
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)text;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_Literal)

inline OrgJodaTimeFormatPeriodFormatterBuilder_Literal *OrgJodaTimeFormatPeriodFormatterBuilder_Literal_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Literal *OrgJodaTimeFormatPeriodFormatterBuilder_Literal_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatPeriodFormatterBuilder_Literal, EMPTY, OrgJodaTimeFormatPeriodFormatterBuilder_Literal *)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_Literal_initWithNSString_(OrgJodaTimeFormatPeriodFormatterBuilder_Literal *self, NSString *text);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Literal *new_OrgJodaTimeFormatPeriodFormatterBuilder_Literal_initWithNSString_(NSString *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Literal *create_OrgJodaTimeFormatPeriodFormatterBuilder_Literal_initWithNSString_(NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_Literal)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_Separator_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_Separator))
#define OrgJodaTimeFormatPeriodFormatterBuilder_Separator_

#define RESTRICT_OrgJodaTimeFormatPeriodPrinter 1
#define INCLUDE_OrgJodaTimeFormatPeriodPrinter 1
#include "org/joda/time/format/PeriodPrinter.h"

#define RESTRICT_OrgJodaTimeFormatPeriodParser 1
#define INCLUDE_OrgJodaTimeFormatPeriodParser 1
#include "org/joda/time/format/PeriodParser.h"

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@protocol OrgJodaTimeReadWritablePeriod;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief Handles a separator, that splits the fields into multiple parts.
 For example, the 'T' in the ISO8601 standard.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_Separator : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser >

#pragma mark Public

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)periodStr
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)text
                    withNSString:(NSString *)finalText
               withNSStringArray:(IOSObjectArray *)variants
withOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)beforePrinter
withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)beforeParser
                     withBoolean:(jboolean)useBefore
                     withBoolean:(jboolean)useAfter;

- (OrgJodaTimeFormatPeriodFormatterBuilder_Separator *)finishWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)afterPrinter
                                                              withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)afterParser;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_Separator)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_Separator_initWithNSString_withNSString_withNSStringArray_withOrgJodaTimeFormatPeriodPrinter_withOrgJodaTimeFormatPeriodParser_withBoolean_withBoolean_(OrgJodaTimeFormatPeriodFormatterBuilder_Separator *self, NSString *text, NSString *finalText, IOSObjectArray *variants, id<OrgJodaTimeFormatPeriodPrinter> beforePrinter, id<OrgJodaTimeFormatPeriodParser> beforeParser, jboolean useBefore, jboolean useAfter);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Separator *new_OrgJodaTimeFormatPeriodFormatterBuilder_Separator_initWithNSString_withNSString_withNSStringArray_withOrgJodaTimeFormatPeriodPrinter_withOrgJodaTimeFormatPeriodParser_withBoolean_withBoolean_(NSString *text, NSString *finalText, IOSObjectArray *variants, id<OrgJodaTimeFormatPeriodPrinter> beforePrinter, id<OrgJodaTimeFormatPeriodParser> beforeParser, jboolean useBefore, jboolean useAfter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Separator *create_OrgJodaTimeFormatPeriodFormatterBuilder_Separator_initWithNSString_withNSString_withNSStringArray_withOrgJodaTimeFormatPeriodPrinter_withOrgJodaTimeFormatPeriodParser_withBoolean_withBoolean_(NSString *text, NSString *finalText, IOSObjectArray *variants, id<OrgJodaTimeFormatPeriodPrinter> beforePrinter, id<OrgJodaTimeFormatPeriodParser> beforeParser, jboolean useBefore, jboolean useAfter);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_Separator)

#endif

#if !defined (OrgJodaTimeFormatPeriodFormatterBuilder_Composite_) && (INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder || defined(INCLUDE_OrgJodaTimeFormatPeriodFormatterBuilder_Composite))
#define OrgJodaTimeFormatPeriodFormatterBuilder_Composite_

#define RESTRICT_OrgJodaTimeFormatPeriodPrinter 1
#define INCLUDE_OrgJodaTimeFormatPeriodPrinter 1
#include "org/joda/time/format/PeriodPrinter.h"

#define RESTRICT_OrgJodaTimeFormatPeriodParser 1
#define INCLUDE_OrgJodaTimeFormatPeriodParser 1
#include "org/joda/time/format/PeriodParser.h"

@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@protocol JavaUtilList;
@protocol OrgJodaTimeReadWritablePeriod;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief Composite implementation that merges other fields to create a full pattern.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_Composite : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser >

#pragma mark Public

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)periodStr
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)elementPairs;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_Composite)

FOUNDATION_EXPORT void OrgJodaTimeFormatPeriodFormatterBuilder_Composite_initWithJavaUtilList_(OrgJodaTimeFormatPeriodFormatterBuilder_Composite *self, id<JavaUtilList> elementPairs);

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Composite *new_OrgJodaTimeFormatPeriodFormatterBuilder_Composite_initWithJavaUtilList_(id<JavaUtilList> elementPairs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Composite *create_OrgJodaTimeFormatPeriodFormatterBuilder_Composite_initWithJavaUtilList_(id<JavaUtilList> elementPairs);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_Composite)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeFormatPeriodFormatterBuilder")
