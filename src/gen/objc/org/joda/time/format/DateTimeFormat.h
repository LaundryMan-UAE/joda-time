//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/format/DateTimeFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL")
#ifdef OrgJodaTimeFormatDateTimeFormat_RESTRICT
#define OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL 0
#else
#define OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeFormatDateTimeFormat_RESTRICT

#if !defined (OrgJodaTimeFormatDateTimeFormat_) && (OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL || defined(OrgJodaTimeFormatDateTimeFormat_INCLUDE))
#define OrgJodaTimeFormatDateTimeFormat_

@class JavaUtilLocale;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeFormatDateTimeFormatterBuilder;

/*!
 @brief Factory that creates instances of DateTimeFormatter from patterns and styles.
 <p>
 Datetime formatting is performed by the <code>DateTimeFormatter</code> class.
 Three classes provide factory methods to create formatters, and this is one.
 The others are <code>ISODateTimeFormat</code> and <code>DateTimeFormatterBuilder</code>.
 <p>
 This class provides two types of factory:
 <ul>
 <li><code>Pattern</code> provides a DateTimeFormatter based on
 a pattern string that is mostly compatible with the JDK date patterns.
 <li><code>Style</code> provides a DateTimeFormatter based on a
 two character style, representing short, medium, long and full.
 </ul>
 <p>
 For example, to use a patterm:
 @code

  DateTime dt = new DateTime();
  DateTimeFormatter fmt = DateTimeFormat.forPattern("MMMM, yyyy");
  String str = fmt.print(dt);
  
@endcode
 The pattern syntax is mostly compatible with java.text.SimpleDateFormat -
 time zone names cannot be parsed and a few more symbols are supported.
 All ASCII letters are reserved as pattern letters, which are defined as follows:
 <blockquote>
 @code

  Symbol  Meaning                      Presentation  Examples
  ------  -------                      ------------  -------
  G       era                          text          AD
  C       century of era (&gt;=0)         number        20
  Y       year of era (&gt;=0)            year          1996
  x       weekyear                     year          1996
  w       week of weekyear             number        27
  e       day of week                  number        2
  E       day of week                  text          Tuesday; Tue
  y       year                         year          1996
  D       day of year                  number        189
  M       month of year                month         July; Jul; 07
  d       day of month                 number        10
  a       halfday of day               text          PM
  K       hour of halfday (0~11)       number        0
  h       clockhour of halfday (1~12)  number        12
  H       hour of day (0~23)           number        0
  k       clockhour of day (1~24)      number        24
  m       minute of hour               number        30
  s       second of minute             number        55
  S       fraction of second           millis        978
  z       time zone                    text          Pacific Standard Time; PST
  Z       time zone offset/id          zone          -0800; -08:00; America/Los_Angeles
  '       escape for text              delimiter
  ''      single quote                 literal       '
  
@endcode
 </blockquote>
 The count of pattern letters determine the format.
 <p>
 <strong>Text</strong>: If the number of pattern letters is 4 or more,
 the full form is used; otherwise a short or abbreviated form is used if
 available.
 <p>
 <strong>Number</strong>: The minimum number of digits.
 Shorter numbers are zero-padded to this amount.
 When parsing, any number of digits are accepted.
 <p>
 <strong>Year</strong>: Numeric presentation for year and weekyear fields
 are handled specially. For example, if the count of 'y' is 2, the year
 will be displayed as the zero-based year of the century, which is two
 digits.
 <p>
 <strong>Month</strong>: 3 or over, use text, otherwise use number.
 <p>
 <strong>Millis</strong>: The exact number of fractional digits.
 If more millisecond digits are available then specified the number will be truncated,
 if there are fewer than specified then the number will be zero-padded to the right.
 When parsing, only the exact number of digits are accepted.
 <p>
 <strong>Zone</strong>: 'Z' outputs offset without a colon, 'ZZ' outputs
 the offset with a colon, 'ZZZ' or more outputs the zone id.
 <p>
 <strong>Zone names</strong>: Time zone names ('z') cannot be parsed.
 <p>
 Any characters in the pattern that are not in the ranges of ['a'..'z']
 and ['A'..'Z'] will be treated as quoted text. For instance, characters
 like ':', '.', ' ', '#' and '?' will appear in the resulting time text
 even they are not embraced within single quotes.
 <p>
 DateTimeFormat is thread-safe and immutable, and the formatters it returns
 are as well.
 @author Brian S O'Neill
 @author Maxim Zhao
 @since 1.0
 - seealso: ISODateTimeFormat
 - seealso: DateTimeFormatterBuilder
 */
@interface OrgJodaTimeFormatDateTimeFormat : NSObject

#pragma mark Public

/*!
 @brief Factory to create a formatter from a pattern string.
 The pattern string is described above in the class level javadoc.
 It is very similar to SimpleDateFormat patterns.
 <p>
 The format may contain locale specific output, and this will change as
 you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 For example:
 @code

  DateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt);
  
@endcode
 @param pattern  pattern specification
 @return the formatter
 @throws IllegalArgumentException if the pattern is invalid
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)forPatternWithNSString:(NSString *)pattern;

/*!
 @brief Factory to create a format from a two character style pattern.
 <p>
 The first character is the date style, and the second character is the
 time style. Specify a character of 'S' for short style, 'M' for medium,
 'L' for long, and 'F' for full.
 A date or time may be ommitted by specifying a style character '-'.
 <p>
 The returned formatter will dynamically adjust to the locale that
 the print/parse takes place in. Thus you just call
 <code>DateTimeFormatter.withLocale(Locale)</code> and the Short/Medium/Long/Full
 style for that locale will be output. For example:
 @code

  DateTimeFormat.forStyle(style).withLocale(Locale.FRANCE).print(dt);
  
@endcode
 @param style  two characters from the set {"S", "M", "L", "F", "-"}
 @return the formatter
 @throws IllegalArgumentException if the style is invalid
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)forStyleWithNSString:(NSString *)style;

/*!
 @brief Creates a format that outputs a full date format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)fullDate;

/*!
 @brief Creates a format that outputs a full datetime format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)fullDateTime;

/*!
 @brief Creates a format that outputs a full time format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)fullTime;

/*!
 @brief Creates a format that outputs a long date format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)longDate;

/*!
 @brief Creates a format that outputs a long datetime format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)longDateTime;

/*!
 @brief Creates a format that outputs a long time format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)longTime;

/*!
 @brief Creates a format that outputs a medium date format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDate;

/*!
 @brief Creates a format that outputs a medium datetime format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDateTime;

/*!
 @brief Creates a format that outputs a medium time format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)mediumTime;

/*!
 @brief Returns the pattern used by a particular style and locale.
 <p>
 The first character is the date style, and the second character is the
 time style. Specify a character of 'S' for short style, 'M' for medium,
 'L' for long, and 'F' for full.
 A date or time may be ommitted by specifying a style character '-'.
 @param style  two characters from the set {"S", "M", "L", "F", "-"}
 @param locale  locale to use, null means default
 @return the formatter
 @throws IllegalArgumentException if the style is invalid
 @since 1.3
 */
+ (NSString *)patternForStyleWithNSString:(NSString *)style
                       withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Creates a format that outputs a short date format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)shortDate;

/*!
 @brief Creates a format that outputs a short datetime format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)shortDateTime;

/*!
 @brief Creates a format that outputs a short time format.
 <p>
 The format will change as you change the locale of the formatter.
 Call <code>DateTimeFormatter.withLocale(Locale)</code> to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)shortTime;

#pragma mark Protected

/*!
 @brief Constructor.
 @since 1.1 (previously private)
 */
- (instancetype)init;

#pragma mark Package-Private

/*!
 @brief Parses the given pattern and appends the rules to the given
 DateTimeFormatterBuilder.
 @param pattern  pattern specification
 @throws IllegalArgumentException if the pattern is invalid
 */
+ (void)appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                        withNSString:(NSString *)pattern;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatDateTimeFormat)

/*!
 @brief Style constant for FULL.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_FULL();
#define OrgJodaTimeFormatDateTimeFormat_FULL 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, FULL, jint)

/*!
 @brief Style constant for LONG.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_LONG();
#define OrgJodaTimeFormatDateTimeFormat_LONG 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, LONG, jint)

/*!
 @brief Style constant for MEDIUM.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_MEDIUM();
#define OrgJodaTimeFormatDateTimeFormat_MEDIUM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, MEDIUM, jint)

/*!
 @brief Style constant for SHORT.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_SHORT();
#define OrgJodaTimeFormatDateTimeFormat_SHORT 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, SHORT, jint)

/*!
 @brief Style constant for NONE.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_NONE();
#define OrgJodaTimeFormatDateTimeFormat_NONE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, NONE, jint)

/*!
 @brief Type constant for DATE only.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_DATE();
#define OrgJodaTimeFormatDateTimeFormat_DATE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, DATE, jint)

/*!
 @brief Type constant for TIME only.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_TIME();
#define OrgJodaTimeFormatDateTimeFormat_TIME 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, TIME, jint)

/*!
 @brief Type constant for DATETIME.
 */
inline jint OrgJodaTimeFormatDateTimeFormat_get_DATETIME();
#define OrgJodaTimeFormatDateTimeFormat_DATETIME 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, DATETIME, jint)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(NSString *pattern);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forStyleWithNSString_(NSString *style);

FOUNDATION_EXPORT NSString *OrgJodaTimeFormatDateTimeFormat_patternForStyleWithNSString_withJavaUtilLocale_(NSString *style, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDateTime();

FOUNDATION_EXPORT void OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern);

FOUNDATION_EXPORT void OrgJodaTimeFormatDateTimeFormat_init(OrgJodaTimeFormatDateTimeFormat *self);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormat *new_OrgJodaTimeFormatDateTimeFormat_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimeFormat)

#endif

#if !defined (OrgJodaTimeFormatDateTimeFormat_StyleFormatter_) && (OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL || defined(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_INCLUDE))
#define OrgJodaTimeFormatDateTimeFormat_StyleFormatter_

#define OrgJodaTimeFormatInternalPrinter_RESTRICT 1
#define OrgJodaTimeFormatInternalPrinter_INCLUDE 1
#include "org/joda/time/format/InternalPrinter.h"

#define OrgJodaTimeFormatInternalParser_RESTRICT 1
#define OrgJodaTimeFormatInternalParser_INCLUDE 1
#include "org/joda/time/format/InternalParser.h"

@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeFormatDateTimeParserBucket;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;
@protocol OrgJodaTimeReadablePartial;

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatter : NSObject < OrgJodaTimeFormatInternalPrinter, OrgJodaTimeFormatInternalParser >

#pragma mark Public

- (jint)estimateParsedLength;

- (jint)estimatePrintedLength;

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position;

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appenadble
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle
                    withInt:(jint)type;

- (NSString *)getPatternWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

FOUNDATION_EXPORT void OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, jint dateStyle, jint timeStyle, jint type);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormat_StyleFormatter *new_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(jint dateStyle, jint timeStyle, jint type) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

#endif

#if !defined (OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_) && (OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL || defined(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_INCLUDE))
#define OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_

@class JavaUtilLocale;

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey : NSObject

#pragma mark Public

- (instancetype)initWithInt:(jint)iType
                    withInt:(jint)iDateStyle
                    withInt:(jint)iTimeStyle
         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey)

FOUNDATION_EXPORT void OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *self, jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *new_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey)

#endif

#pragma pop_macro("OrgJodaTimeFormatDateTimeFormat_INCLUDE_ALL")
