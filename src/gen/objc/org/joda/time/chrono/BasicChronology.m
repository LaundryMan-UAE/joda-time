//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/joda-time/src/main/java/org/joda/time/chrono/BasicChronology.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/BasicDayOfMonthDateTimeField.h"
#include "org/joda/time/chrono/BasicDayOfYearDateTimeField.h"
#include "org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.h"
#include "org/joda/time/chrono/BasicWeekyearDateTimeField.h"
#include "org/joda/time/chrono/BasicYearDateTimeField.h"
#include "org/joda/time/chrono/GJDayOfWeekDateTimeField.h"
#include "org/joda/time/chrono/GJEraDateTimeField.h"
#include "org/joda/time/chrono/GJLocaleSymbols.h"
#include "org/joda/time/chrono/GJMonthOfYearDateTimeField.h"
#include "org/joda/time/chrono/GJYearOfEraDateTimeField.h"
#include "org/joda/time/field/DividedDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/MillisDurationField.h"
#include "org/joda/time/field/OffsetDateTimeField.h"
#include "org/joda/time/field/PreciseDateTimeField.h"
#include "org/joda/time/field/PreciseDurationField.h"
#include "org/joda/time/field/RemainderDateTimeField.h"
#include "org/joda/time/field/ZeroIsMaxDateTimeField.h"

@class OrgJodaTimeChronoBasicChronology_YearInfo;

@interface OrgJodaTimeChronoBasicChronology () {
 @public
  IOSObjectArray *iYearInfoCache_;
  jint iMinDaysInFirstWeek_;
}

- (jlong)getDateTimeMillis0WithInt:(jint)year
                           withInt:(jint)monthOfYear
                           withInt:(jint)dayOfMonth
                           withInt:(jint)millisOfDay;

- (OrgJodaTimeChronoBasicChronology_YearInfo *)getYearInfoWithInt:(jint)year;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoBasicChronology, iYearInfoCache_, IOSObjectArray *)

inline jlong OrgJodaTimeChronoBasicChronology_get_serialVersionUID(void);
#define OrgJodaTimeChronoBasicChronology_serialVersionUID 8283225332206808863LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicChronology, serialVersionUID, jlong)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cMillisField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cMillisField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cMillisField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cSecondsField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cSecondsField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cSecondsField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cMinutesField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cMinutesField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cMinutesField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cHoursField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cHoursField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cHoursField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cHalfdaysField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cHalfdaysField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cHalfdaysField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cDaysField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cDaysField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cDaysField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_get_cWeeksField(void);
static OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cWeeksField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cWeeksField, OrgJodaTimeDurationField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cMillisOfSecondField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMillisOfSecondField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cMillisOfSecondField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cMillisOfDayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMillisOfDayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cMillisOfDayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cSecondOfMinuteField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cSecondOfMinuteField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cSecondOfDayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cSecondOfDayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cSecondOfDayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cMinuteOfHourField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMinuteOfHourField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cMinuteOfHourField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cMinuteOfDayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMinuteOfDayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cMinuteOfDayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cHourOfDayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cHourOfDayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cHourOfDayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cHourOfHalfdayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cHourOfHalfdayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cClockhourOfDayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cClockhourOfDayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cClockhourOfDayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cClockhourOfHalfdayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cClockhourOfHalfdayField, OrgJodaTimeDateTimeField *)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_get_cHalfdayOfDayField(void);
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoBasicChronology, cHalfdayOfDayField, OrgJodaTimeDateTimeField *)

inline jint OrgJodaTimeChronoBasicChronology_get_CACHE_SIZE(void);
#define OrgJodaTimeChronoBasicChronology_CACHE_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicChronology, CACHE_SIZE, jint)

inline jint OrgJodaTimeChronoBasicChronology_get_CACHE_MASK(void);
#define OrgJodaTimeChronoBasicChronology_CACHE_MASK 1023
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicChronology, CACHE_MASK, jint)

__attribute__((unused)) static jlong OrgJodaTimeChronoBasicChronology_getDateTimeMillis0WithInt_withInt_withInt_withInt_(OrgJodaTimeChronoBasicChronology *self, jint year, jint monthOfYear, jint dayOfMonth, jint millisOfDay);

__attribute__((unused)) static OrgJodaTimeChronoBasicChronology_YearInfo *OrgJodaTimeChronoBasicChronology_getYearInfoWithInt_(OrgJodaTimeChronoBasicChronology *self, jint year);

@interface OrgJodaTimeChronoBasicChronology_HalfdayField : OrgJodaTimeFieldPreciseDateTimeField

- (instancetype)init;

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)setWithLong:(jlong)millis
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoBasicChronology_HalfdayField)

inline jlong OrgJodaTimeChronoBasicChronology_HalfdayField_get_serialVersionUID(void);
#define OrgJodaTimeChronoBasicChronology_HalfdayField_serialVersionUID 581601443656929254LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicChronology_HalfdayField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoBasicChronology_HalfdayField_init(OrgJodaTimeChronoBasicChronology_HalfdayField *self);

__attribute__((unused)) static OrgJodaTimeChronoBasicChronology_HalfdayField *new_OrgJodaTimeChronoBasicChronology_HalfdayField_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoBasicChronology_HalfdayField *create_OrgJodaTimeChronoBasicChronology_HalfdayField_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBasicChronology_HalfdayField)

@interface OrgJodaTimeChronoBasicChronology_YearInfo : NSObject {
 @public
  jint iYear_;
  jlong iFirstDayMillis_;
}

- (instancetype)initWithInt:(jint)year
                   withLong:(jlong)firstDayMillis;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoBasicChronology_YearInfo)

__attribute__((unused)) static void OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(OrgJodaTimeChronoBasicChronology_YearInfo *self, jint year, jlong firstDayMillis);

__attribute__((unused)) static OrgJodaTimeChronoBasicChronology_YearInfo *new_OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(jint year, jlong firstDayMillis) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoBasicChronology_YearInfo *create_OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(jint year, jlong firstDayMillis);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBasicChronology_YearInfo)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoBasicChronology)

@implementation OrgJodaTimeChronoBasicChronology

- (instancetype)initPackagePrivateWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                                     withId:(id)param
                                                    withInt:(jint)minDaysInFirstWeek {
  OrgJodaTimeChronoBasicChronology_initPackagePrivateWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return JreLoadStatic(OrgJodaTimeDateTimeZone, UTC);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_millisOfDay(), millisOfDay, 0, OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1);
  return OrgJodaTimeChronoBasicChronology_getDateTimeMillis0WithInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, millisOfDay);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_hourOfDay(), hourOfDay, 0, 23);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_minuteOfHour(), minuteOfHour, 0, 59);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_secondOfMinute(), secondOfMinute, 0, 59);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_millisOfSecond(), millisOfSecond, 0, 999);
  jlong millisOfDay = hourOfDay * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR + minuteOfHour * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE + secondOfMinute * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND + millisOfSecond;
  return OrgJodaTimeChronoBasicChronology_getDateTimeMillis0WithInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, (jint) millisOfDay);
}

- (jlong)getDateTimeMillis0WithInt:(jint)year
                           withInt:(jint)monthOfYear
                           withInt:(jint)dayOfMonth
                           withInt:(jint)millisOfDay {
  return OrgJodaTimeChronoBasicChronology_getDateTimeMillis0WithInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, millisOfDay);
}

- (jint)getMinimumDaysInFirstWeek {
  return iMinDaysInFirstWeek_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj != nil && [self java_getClass] == [obj java_getClass]) {
    OrgJodaTimeChronoBasicChronology *chrono = (OrgJodaTimeChronoBasicChronology *) cast_chk(obj, [OrgJodaTimeChronoBasicChronology class]);
    return [self getMinimumDaysInFirstWeek] == [chrono getMinimumDaysInFirstWeek] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([[self java_getClass] getName])) hash]) * 11 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) + [self getMinimumDaysInFirstWeek];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(60);
  NSString *name = [[self java_getClass] getName];
  jint index = [((NSString *) nil_chk(name)) java_lastIndexOf:'.'];
  if (index >= 0) {
    name = [name java_substring:index + 1];
  }
  [sb appendWithNSString:name];
  [sb appendWithChar:'['];
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  if (zone != nil) {
    [sb appendWithNSString:[zone getID]];
  }
  if ([self getMinimumDaysInFirstWeek] != 4) {
    [sb appendWithNSString:@",mdfw="];
    [sb appendWithInt:[self getMinimumDaysInFirstWeek]];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JreStrongAssign(&((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->millis_, OrgJodaTimeChronoBasicChronology_cMillisField);
  JreStrongAssign(&fields->seconds_, OrgJodaTimeChronoBasicChronology_cSecondsField);
  JreStrongAssign(&fields->minutes_, OrgJodaTimeChronoBasicChronology_cMinutesField);
  JreStrongAssign(&fields->hours_, OrgJodaTimeChronoBasicChronology_cHoursField);
  JreStrongAssign(&fields->halfdays_, OrgJodaTimeChronoBasicChronology_cHalfdaysField);
  JreStrongAssign(&fields->days_, OrgJodaTimeChronoBasicChronology_cDaysField);
  JreStrongAssign(&fields->weeks_, OrgJodaTimeChronoBasicChronology_cWeeksField);
  JreStrongAssign(&fields->millisOfSecond_, OrgJodaTimeChronoBasicChronology_cMillisOfSecondField);
  JreStrongAssign(&fields->millisOfDay_, OrgJodaTimeChronoBasicChronology_cMillisOfDayField);
  JreStrongAssign(&fields->secondOfMinute_, OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField);
  JreStrongAssign(&fields->secondOfDay_, OrgJodaTimeChronoBasicChronology_cSecondOfDayField);
  JreStrongAssign(&fields->minuteOfHour_, OrgJodaTimeChronoBasicChronology_cMinuteOfHourField);
  JreStrongAssign(&fields->minuteOfDay_, OrgJodaTimeChronoBasicChronology_cMinuteOfDayField);
  JreStrongAssign(&fields->hourOfDay_, OrgJodaTimeChronoBasicChronology_cHourOfDayField);
  JreStrongAssign(&fields->hourOfHalfday_, OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField);
  JreStrongAssign(&fields->clockhourOfDay_, OrgJodaTimeChronoBasicChronology_cClockhourOfDayField);
  JreStrongAssign(&fields->clockhourOfHalfday_, OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField);
  JreStrongAssign(&fields->halfdayOfDay_, OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField);
  JreStrongAssignAndConsume(&fields->year_, new_OrgJodaTimeChronoBasicYearDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_(self));
  JreStrongAssignAndConsume(&fields->yearOfEra_, new_OrgJodaTimeChronoGJYearOfEraDateTimeField_initPackagePrivateWithOrgJodaTimeDateTimeField_withOrgJodaTimeChronoBasicChronology_(fields->year_, self));
  OrgJodaTimeDateTimeField *field = create_OrgJodaTimeFieldOffsetDateTimeField_initWithOrgJodaTimeDateTimeField_withInt_(fields->yearOfEra_, 99);
  JreStrongAssignAndConsume(&fields->centuryOfEra_, new_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(field, OrgJodaTimeDateTimeFieldType_centuryOfEra(), 100));
  JreStrongAssign(&fields->centuries_, [fields->centuryOfEra_ getDurationField]);
  field = create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_((OrgJodaTimeFieldDividedDateTimeField *) cast_chk(fields->centuryOfEra_, [OrgJodaTimeFieldDividedDateTimeField class]));
  JreStrongAssignAndConsume(&fields->yearOfCentury_, new_OrgJodaTimeFieldOffsetDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(field, OrgJodaTimeDateTimeFieldType_yearOfCentury(), 1));
  JreStrongAssignAndConsume(&fields->era_, new_OrgJodaTimeChronoGJEraDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_(self));
  JreStrongAssignAndConsume(&fields->dayOfWeek_, new_OrgJodaTimeChronoGJDayOfWeekDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(self, fields->days_));
  JreStrongAssignAndConsume(&fields->dayOfMonth_, new_OrgJodaTimeChronoBasicDayOfMonthDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(self, fields->days_));
  JreStrongAssignAndConsume(&fields->dayOfYear_, new_OrgJodaTimeChronoBasicDayOfYearDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(self, fields->days_));
  JreStrongAssignAndConsume(&fields->monthOfYear_, new_OrgJodaTimeChronoGJMonthOfYearDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_(self));
  JreStrongAssignAndConsume(&fields->weekyear_, new_OrgJodaTimeChronoBasicWeekyearDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_(self));
  JreStrongAssignAndConsume(&fields->weekOfWeekyear_, new_OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField_initPackagePrivateWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(self, fields->weeks_));
  field = create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(fields->weekyear_, fields->centuries_, OrgJodaTimeDateTimeFieldType_weekyearOfCentury(), 100);
  JreStrongAssignAndConsume(&fields->weekyearOfCentury_, new_OrgJodaTimeFieldOffsetDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(field, OrgJodaTimeDateTimeFieldType_weekyearOfCentury(), 1));
  JreStrongAssign(&fields->years_, [((OrgJodaTimeDateTimeField *) nil_chk(fields->year_)) getDurationField]);
  JreStrongAssign(&fields->months_, [((OrgJodaTimeDateTimeField *) nil_chk(fields->monthOfYear_)) getDurationField]);
  JreStrongAssign(&fields->weekyears_, [((OrgJodaTimeDateTimeField *) nil_chk(fields->weekyear_)) getDurationField]);
}

- (jint)getDaysInYearMax {
  return 366;
}

- (jint)getDaysInYearWithInt:(jint)year {
  return [self isLeapYearWithInt:year] ? 366 : 365;
}

- (jint)getWeeksInYearWithInt:(jint)year {
  jlong firstWeekMillis1 = [self getFirstWeekOfYearMillisWithInt:year];
  jlong firstWeekMillis2 = [self getFirstWeekOfYearMillisWithInt:year + 1];
  return (jint) (JreLongDiv((firstWeekMillis2 - firstWeekMillis1), OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK));
}

- (jlong)getFirstWeekOfYearMillisWithInt:(jint)year {
  jlong jan1millis = [self getYearMillisWithInt:year];
  jint jan1dayOfWeek = [self getDayOfWeekWithLong:jan1millis];
  if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek_)) {
    return jan1millis + (8 - jan1dayOfWeek) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
  else {
    return jan1millis - (jan1dayOfWeek - 1) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
}

- (jlong)getYearMillisWithInt:(jint)year {
  return ((OrgJodaTimeChronoBasicChronology_YearInfo *) nil_chk(OrgJodaTimeChronoBasicChronology_getYearInfoWithInt_(self, year)))->iFirstDayMillis_;
}

- (jlong)getYearMonthMillisWithInt:(jint)year
                           withInt:(jint)month {
  jlong millis = [self getYearMillisWithInt:year];
  millis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return millis;
}

- (jlong)getYearMonthDayMillisWithInt:(jint)year
                              withInt:(jint)month
                              withInt:(jint)dayOfMonth {
  jlong millis = [self getYearMillisWithInt:year];
  millis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return millis + (dayOfMonth - 1) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jint)getYearWithLong:(jlong)instant {
  jlong unitMillis = [self getAverageMillisPerYearDividedByTwo];
  jlong i2 = (JreRShift64(instant, 1)) + [self getApproxMillisAtEpochDividedByTwo];
  if (i2 < 0) {
    i2 = i2 - unitMillis + 1;
  }
  jint year = (jint) (JreLongDiv(i2, unitMillis));
  jlong yearStart = [self getYearMillisWithInt:year];
  jlong diff = instant - yearStart;
  if (diff < 0) {
    year--;
  }
  else if (diff >= OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 365LL) {
    jlong oneYear;
    if ([self isLeapYearWithInt:year]) {
      oneYear = OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 366LL;
    }
    else {
      oneYear = OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 365LL;
    }
    yearStart += oneYear;
    if (yearStart <= instant) {
      year++;
    }
  }
  return year;
}

- (jint)getMonthOfYearWithLong:(jlong)millis {
  return [self getMonthOfYearWithLong:millis withInt:[self getYearWithLong:millis]];
}

- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getDayOfMonthWithLong:(jlong)millis {
  jint year = [self getYearWithLong:millis];
  jint month = [self getMonthOfYearWithLong:millis withInt:year];
  return [self getDayOfMonthWithLong:millis withInt:year withInt:month];
}

- (jint)getDayOfMonthWithLong:(jlong)millis
                      withInt:(jint)year {
  jint month = [self getMonthOfYearWithLong:millis withInt:year];
  return [self getDayOfMonthWithLong:millis withInt:year withInt:month];
}

- (jint)getDayOfMonthWithLong:(jlong)millis
                      withInt:(jint)year
                      withInt:(jint)month {
  jlong dateMillis = [self getYearMillisWithInt:year];
  dateMillis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return (jint) (JreLongDiv((millis - dateMillis), OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY)) + 1;
}

- (jint)getDayOfYearWithLong:(jlong)instant {
  return [self getDayOfYearWithLong:instant withInt:[self getYearWithLong:instant]];
}

- (jint)getDayOfYearWithLong:(jlong)instant
                     withInt:(jint)year {
  jlong yearStart = [self getYearMillisWithInt:year];
  return (jint) (JreLongDiv((instant - yearStart), OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY)) + 1;
}

- (jint)getWeekyearWithLong:(jlong)instant {
  jint year = [self getYearWithLong:instant];
  jint week = [self getWeekOfWeekyearWithLong:instant withInt:year];
  if (week == 1) {
    return [self getYearWithLong:instant + OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK];
  }
  else if (week > 51) {
    return [self getYearWithLong:instant - (2 * OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK)];
  }
  else {
    return year;
  }
}

- (jint)getWeekOfWeekyearWithLong:(jlong)instant {
  return [self getWeekOfWeekyearWithLong:instant withInt:[self getYearWithLong:instant]];
}

- (jint)getWeekOfWeekyearWithLong:(jlong)instant
                          withInt:(jint)year {
  jlong firstWeekMillis1 = [self getFirstWeekOfYearMillisWithInt:year];
  if (instant < firstWeekMillis1) {
    return [self getWeeksInYearWithInt:year - 1];
  }
  jlong firstWeekMillis2 = [self getFirstWeekOfYearMillisWithInt:year + 1];
  if (instant >= firstWeekMillis2) {
    return 1;
  }
  return (jint) (JreLongDiv((instant - firstWeekMillis1), OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK)) + 1;
}

- (jint)getDayOfWeekWithLong:(jlong)instant {
  jlong daysSince19700101;
  if (instant >= 0) {
    daysSince19700101 = JreLongDiv(instant, OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  }
  else {
    daysSince19700101 = JreLongDiv((instant - (OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1)), OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
    if (daysSince19700101 < -3) {
      return 7 + (jint) (JreLongMod((daysSince19700101 + 4), 7));
    }
  }
  return 1 + (jint) (JreLongMod((daysSince19700101 + 3), 7));
}

- (jint)getMillisOfDayWithLong:(jlong)instant {
  if (instant >= 0) {
    return (jint) (JreLongMod(instant, OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY));
  }
  else {
    return (OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1) + (jint) (JreLongMod((instant + 1), OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY));
  }
}

- (jint)getDaysInMonthMax {
  return 31;
}

- (jint)getDaysInMonthMaxWithLong:(jlong)instant {
  jint thisYear = [self getYearWithLong:instant];
  jint thisMonth = [self getMonthOfYearWithLong:instant withInt:thisYear];
  return [self getDaysInYearMonthWithInt:thisYear withInt:thisMonth];
}

- (jint)getDaysInMonthMaxForSetWithLong:(jlong)instant
                                withInt:(jint)value {
  return [self getDaysInMonthMaxWithLong:instant];
}

- (jlong)getDateMidnightMillisWithInt:(jint)year
                              withInt:(jint)monthOfYear
                              withInt:(jint)dayOfMonth {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_year(), year, [self getMinYear] - 1, [self getMaxYear] + 1);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_monthOfYear(), monthOfYear, 1, [self getMaxMonthWithInt:year]);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_dayOfMonth(), dayOfMonth, 1, [self getDaysInYearMonthWithInt:year withInt:monthOfYear]);
  jlong instant = [self getYearMonthDayMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth];
  if (instant < 0 && year == [self getMaxYear] + 1) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (instant > 0 && year == [self getMinYear] - 1) {
    return JavaLangLong_MIN_VALUE;
  }
  return instant;
}

- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLeapDayWithLong:(jlong)instant {
  return false;
}

- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getDaysInMonthMaxWithInt:(jint)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMinYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMaxYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMaxMonthWithInt:(jint)year {
  return [self getMaxMonth];
}

- (jint)getMaxMonth {
  return 12;
}

- (jlong)getAverageMillisPerYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getAverageMillisPerMonth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeChronoBasicChronology_YearInfo *)getYearInfoWithInt:(jint)year {
  return OrgJodaTimeChronoBasicChronology_getYearInfoWithInt_(self, year);
}

- (void)dealloc {
  RELEASE_(iYearInfoCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "J", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 14, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 15, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 16, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 23, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 25, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 25, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 27, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 27, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 28, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 29, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 29, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 30, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 31, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 32, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 33, 24, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 34, 20, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 37, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 38, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 39, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 32, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 40, 18, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 41, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 42, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 43, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoBasicChronology_YearInfo;", 0x2, 44, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgJodaTimeChronology:withId:withInt:);
  methods[1].selector = @selector(getZone);
  methods[2].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getDateTimeMillis0WithInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(getMinimumDaysInFirstWeek);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[10].selector = @selector(getDaysInYearMax);
  methods[11].selector = @selector(getDaysInYearWithInt:);
  methods[12].selector = @selector(getWeeksInYearWithInt:);
  methods[13].selector = @selector(getFirstWeekOfYearMillisWithInt:);
  methods[14].selector = @selector(getYearMillisWithInt:);
  methods[15].selector = @selector(getYearMonthMillisWithInt:withInt:);
  methods[16].selector = @selector(getYearMonthDayMillisWithInt:withInt:withInt:);
  methods[17].selector = @selector(getYearWithLong:);
  methods[18].selector = @selector(getMonthOfYearWithLong:);
  methods[19].selector = @selector(getMonthOfYearWithLong:withInt:);
  methods[20].selector = @selector(getDayOfMonthWithLong:);
  methods[21].selector = @selector(getDayOfMonthWithLong:withInt:);
  methods[22].selector = @selector(getDayOfMonthWithLong:withInt:withInt:);
  methods[23].selector = @selector(getDayOfYearWithLong:);
  methods[24].selector = @selector(getDayOfYearWithLong:withInt:);
  methods[25].selector = @selector(getWeekyearWithLong:);
  methods[26].selector = @selector(getWeekOfWeekyearWithLong:);
  methods[27].selector = @selector(getWeekOfWeekyearWithLong:withInt:);
  methods[28].selector = @selector(getDayOfWeekWithLong:);
  methods[29].selector = @selector(getMillisOfDayWithLong:);
  methods[30].selector = @selector(getDaysInMonthMax);
  methods[31].selector = @selector(getDaysInMonthMaxWithLong:);
  methods[32].selector = @selector(getDaysInMonthMaxForSetWithLong:withInt:);
  methods[33].selector = @selector(getDateMidnightMillisWithInt:withInt:withInt:);
  methods[34].selector = @selector(getYearDifferenceWithLong:withLong:);
  methods[35].selector = @selector(isLeapYearWithInt:);
  methods[36].selector = @selector(isLeapDayWithLong:);
  methods[37].selector = @selector(getDaysInYearMonthWithInt:withInt:);
  methods[38].selector = @selector(getDaysInMonthMaxWithInt:);
  methods[39].selector = @selector(getTotalMillisByYearMonthWithInt:withInt:);
  methods[40].selector = @selector(calculateFirstDayOfYearMillisWithInt:);
  methods[41].selector = @selector(getMinYear);
  methods[42].selector = @selector(getMaxYear);
  methods[43].selector = @selector(getMaxMonthWithInt:);
  methods[44].selector = @selector(getMaxMonth);
  methods[45].selector = @selector(getAverageMillisPerYear);
  methods[46].selector = @selector(getAverageMillisPerYearDividedByTwo);
  methods[47].selector = @selector(getAverageMillisPerMonth);
  methods[48].selector = @selector(getApproxMillisAtEpochDividedByTwo);
  methods[49].selector = @selector(setYearWithLong:withInt:);
  methods[50].selector = @selector(getYearInfoWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoBasicChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "cMillisField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "cSecondsField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "cMinutesField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "cHoursField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "cHalfdaysField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "cDaysField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "cWeeksField", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "cMillisOfSecondField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "cMillisOfDayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "cSecondOfMinuteField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "cSecondOfDayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "cMinuteOfHourField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "cMinuteOfDayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "cHourOfDayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "cHourOfHalfdayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "cClockhourOfDayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "cClockhourOfHalfdayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "cHalfdayOfDayField", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "CACHE_SIZE", "I", .constantValue.asInt = OrgJodaTimeChronoBasicChronology_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "CACHE_MASK", "I", .constantValue.asInt = OrgJodaTimeChronoBasicChronology_CACHE_MASK, 0x1a, -1, -1, -1, -1 },
    { "iYearInfoCache_", "[LOrgJodaTimeChronoBasicChronology_YearInfo;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "iMinDaysInFirstWeek_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeChronology;LNSObject;I", "getDateTimeMillis", "IIII", "LJavaLangIllegalArgumentException;", "IIIIIII", "getDateTimeMillis0", "equals", "LNSObject;", "hashCode", "toString", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "getDaysInYear", "I", "getWeeksInYear", "getFirstWeekOfYearMillis", "getYearMillis", "getYearMonthMillis", "II", "getYearMonthDayMillis", "III", "getYear", "J", "getMonthOfYear", "JI", "getDayOfMonth", "JII", "getDayOfYear", "getWeekyear", "getWeekOfWeekyear", "getDayOfWeek", "getMillisOfDay", "getDaysInMonthMax", "getDaysInMonthMaxForSet", "getDateMidnightMillis", "getYearDifference", "JJ", "isLeapYear", "isLeapDay", "getDaysInYearMonth", "getTotalMillisByYearMonth", "calculateFirstDayOfYearMillis", "getMaxMonth", "setYear", "getYearInfo", &OrgJodaTimeChronoBasicChronology_cMillisField, &OrgJodaTimeChronoBasicChronology_cSecondsField, &OrgJodaTimeChronoBasicChronology_cMinutesField, &OrgJodaTimeChronoBasicChronology_cHoursField, &OrgJodaTimeChronoBasicChronology_cHalfdaysField, &OrgJodaTimeChronoBasicChronology_cDaysField, &OrgJodaTimeChronoBasicChronology_cWeeksField, &OrgJodaTimeChronoBasicChronology_cMillisOfSecondField, &OrgJodaTimeChronoBasicChronology_cMillisOfDayField, &OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField, &OrgJodaTimeChronoBasicChronology_cSecondOfDayField, &OrgJodaTimeChronoBasicChronology_cMinuteOfHourField, &OrgJodaTimeChronoBasicChronology_cMinuteOfDayField, &OrgJodaTimeChronoBasicChronology_cHourOfDayField, &OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField, &OrgJodaTimeChronoBasicChronology_cClockhourOfDayField, &OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField, &OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField, "LOrgJodaTimeChronoBasicChronology_HalfdayField;LOrgJodaTimeChronoBasicChronology_YearInfo;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology = { "BasicChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x400, 51, 23, -1, 63, -1, -1, -1 };
  return &_OrgJodaTimeChronoBasicChronology;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoBasicChronology class]) {
    {
      JreStrongAssign(&OrgJodaTimeChronoBasicChronology_cMillisField, JreLoadStatic(OrgJodaTimeFieldMillisDurationField, INSTANCE));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cSecondsField, new_OrgJodaTimeFieldPreciseDurationField_initWithOrgJodaTimeDurationFieldType_withLong_(OrgJodaTimeDurationFieldType_seconds(), OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMinutesField, new_OrgJodaTimeFieldPreciseDurationField_initWithOrgJodaTimeDurationFieldType_withLong_(OrgJodaTimeDurationFieldType_minutes(), OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHoursField, new_OrgJodaTimeFieldPreciseDurationField_initWithOrgJodaTimeDurationFieldType_withLong_(OrgJodaTimeDurationFieldType_hours(), OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHalfdaysField, new_OrgJodaTimeFieldPreciseDurationField_initWithOrgJodaTimeDurationFieldType_withLong_(OrgJodaTimeDurationFieldType_halfdays(), JreIntDiv(OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY, 2)));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cDaysField, new_OrgJodaTimeFieldPreciseDurationField_initWithOrgJodaTimeDurationFieldType_withLong_(OrgJodaTimeDurationFieldType_days(), OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cWeeksField, new_OrgJodaTimeFieldPreciseDurationField_initWithOrgJodaTimeDurationFieldType_withLong_(OrgJodaTimeDurationFieldType_weeks(), OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMillisOfSecondField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_millisOfSecond(), OrgJodaTimeChronoBasicChronology_cMillisField, OrgJodaTimeChronoBasicChronology_cSecondsField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMillisOfDayField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_millisOfDay(), OrgJodaTimeChronoBasicChronology_cMillisField, OrgJodaTimeChronoBasicChronology_cDaysField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_secondOfMinute(), OrgJodaTimeChronoBasicChronology_cSecondsField, OrgJodaTimeChronoBasicChronology_cMinutesField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cSecondOfDayField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_secondOfDay(), OrgJodaTimeChronoBasicChronology_cSecondsField, OrgJodaTimeChronoBasicChronology_cDaysField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMinuteOfHourField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_minuteOfHour(), OrgJodaTimeChronoBasicChronology_cMinutesField, OrgJodaTimeChronoBasicChronology_cHoursField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMinuteOfDayField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_minuteOfDay(), OrgJodaTimeChronoBasicChronology_cMinutesField, OrgJodaTimeChronoBasicChronology_cDaysField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHourOfDayField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_hourOfDay(), OrgJodaTimeChronoBasicChronology_cHoursField, OrgJodaTimeChronoBasicChronology_cDaysField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField, new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_hourOfHalfday(), OrgJodaTimeChronoBasicChronology_cHoursField, OrgJodaTimeChronoBasicChronology_cHalfdaysField));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cClockhourOfDayField, new_OrgJodaTimeFieldZeroIsMaxDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeChronoBasicChronology_cHourOfDayField, OrgJodaTimeDateTimeFieldType_clockhourOfDay()));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField, new_OrgJodaTimeFieldZeroIsMaxDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField, OrgJodaTimeDateTimeFieldType_clockhourOfHalfday()));
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField, new_OrgJodaTimeChronoBasicChronology_HalfdayField_init());
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoBasicChronology)
  }
}

@end

void OrgJodaTimeChronoBasicChronology_initPackagePrivateWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoBasicChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, param);
  JreStrongAssignAndConsume(&self->iYearInfoCache_, [IOSObjectArray newArrayWithLength:OrgJodaTimeChronoBasicChronology_CACHE_SIZE type:OrgJodaTimeChronoBasicChronology_YearInfo_class_()]);
  if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid min days in first week: ", minDaysInFirstWeek));
  }
  self->iMinDaysInFirstWeek_ = minDaysInFirstWeek;
}

jlong OrgJodaTimeChronoBasicChronology_getDateTimeMillis0WithInt_withInt_withInt_withInt_(OrgJodaTimeChronoBasicChronology *self, jint year, jint monthOfYear, jint dayOfMonth, jint millisOfDay) {
  jlong dayInstant = [self getDateMidnightMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth];
  if (dayInstant == JavaLangLong_MIN_VALUE) {
    dayInstant = [self getDateMidnightMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth + 1];
    millisOfDay = millisOfDay - 86400000;
  }
  jlong result = dayInstant + millisOfDay;
  if (result < 0 && dayInstant > 0) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (result > 0 && dayInstant < 0) {
    return JavaLangLong_MIN_VALUE;
  }
  return result;
}

OrgJodaTimeChronoBasicChronology_YearInfo *OrgJodaTimeChronoBasicChronology_getYearInfoWithInt_(OrgJodaTimeChronoBasicChronology *self, jint year) {
  OrgJodaTimeChronoBasicChronology_YearInfo *info = IOSObjectArray_Get(nil_chk(self->iYearInfoCache_), year & OrgJodaTimeChronoBasicChronology_CACHE_MASK);
  if (info == nil || info->iYear_ != year) {
    info = create_OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(year, [self calculateFirstDayOfYearMillisWithInt:year]);
    IOSObjectArray_Set(self->iYearInfoCache_, year & OrgJodaTimeChronoBasicChronology_CACHE_MASK, info);
  }
  return info;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBasicChronology)

@implementation OrgJodaTimeChronoBasicChronology_HalfdayField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeChronoBasicChronology_HalfdayField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) halfdayValueToTextWithInt:fieldValue];
}

- (jlong)setWithLong:(jlong)millis
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self setWithLong:millis withInt:[((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) halfdayTextToValueWithNSString:text]];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) getHalfdayMaxTextLength];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAsTextWithInt:withJavaUtilLocale:);
  methods[2].selector = @selector(setWithLong:withNSString:withJavaUtilLocale:);
  methods[3].selector = @selector(getMaximumTextLengthWithJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoBasicChronology_HalfdayField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getAsText", "ILJavaUtilLocale;", "set", "JLNSString;LJavaUtilLocale;", "getMaximumTextLength", "LJavaUtilLocale;", "LOrgJodaTimeChronoBasicChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology_HalfdayField = { "HalfdayField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0xa, 4, 1, 6, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoBasicChronology_HalfdayField;
}

@end

void OrgJodaTimeChronoBasicChronology_HalfdayField_init(OrgJodaTimeChronoBasicChronology_HalfdayField *self) {
  OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, OrgJodaTimeDateTimeFieldType_halfdayOfDay(), JreLoadStatic(OrgJodaTimeChronoBasicChronology, cHalfdaysField), JreLoadStatic(OrgJodaTimeChronoBasicChronology, cDaysField));
}

OrgJodaTimeChronoBasicChronology_HalfdayField *new_OrgJodaTimeChronoBasicChronology_HalfdayField_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoBasicChronology_HalfdayField, init)
}

OrgJodaTimeChronoBasicChronology_HalfdayField *create_OrgJodaTimeChronoBasicChronology_HalfdayField_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoBasicChronology_HalfdayField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBasicChronology_HalfdayField)

@implementation OrgJodaTimeChronoBasicChronology_YearInfo

- (instancetype)initWithInt:(jint)year
                   withLong:(jlong)firstDayMillis {
  OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(self, year, firstDayMillis);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iYear_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "iFirstDayMillis_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJ", "LOrgJodaTimeChronoBasicChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology_YearInfo = { "YearInfo", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoBasicChronology_YearInfo;
}

@end

void OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(OrgJodaTimeChronoBasicChronology_YearInfo *self, jint year, jlong firstDayMillis) {
  NSObject_init(self);
  self->iYear_ = year;
  self->iFirstDayMillis_ = firstDayMillis;
}

OrgJodaTimeChronoBasicChronology_YearInfo *new_OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(jint year, jlong firstDayMillis) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoBasicChronology_YearInfo, initWithInt_withLong_, year, firstDayMillis)
}

OrgJodaTimeChronoBasicChronology_YearInfo *create_OrgJodaTimeChronoBasicChronology_YearInfo_initWithInt_withLong_(jint year, jlong firstDayMillis) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoBasicChronology_YearInfo, initWithInt_withLong_, year, firstDayMillis)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBasicChronology_YearInfo)
