//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/chrono/BuddhistChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeChronoBuddhistChronology_INCLUDE_ALL")
#ifdef OrgJodaTimeChronoBuddhistChronology_RESTRICT
#define OrgJodaTimeChronoBuddhistChronology_INCLUDE_ALL 0
#else
#define OrgJodaTimeChronoBuddhistChronology_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeChronoBuddhistChronology_RESTRICT

#if !defined (OrgJodaTimeChronoBuddhistChronology_) && (OrgJodaTimeChronoBuddhistChronology_INCLUDE_ALL || defined(OrgJodaTimeChronoBuddhistChronology_INCLUDE))
#define OrgJodaTimeChronoBuddhistChronology_

#define OrgJodaTimeChronoAssembledChronology_RESTRICT 1
#define OrgJodaTimeChronoAssembledChronology_INCLUDE 1
#include "org/joda/time/chrono/AssembledChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

/*!
 @brief A chronology that matches the BuddhistCalendar class supplied by Sun.
 <p>
 The chronology is identical to the Gregorian/Julian, except that the
 year is offset by +543 and the era is named 'BE' for Buddhist Era.
 <p>
 This class was intended by Sun to model the calendar used in Thailand.
 However, the actual rules for Thailand are much more involved than
 this class covers. (This class is accurate after 1941-01-01 ISO).
 <p>
 This chronlogy is being retained for those who want a same effect
 replacement for the Sun class. It is hoped that community support will
 enable a more accurate chronology for Thailand, to be developed.
 <p>
 BuddhistChronology is thread-safe and immutable.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeChronoBuddhistChronology : OrgJodaTimeChronoAssembledChronology

#pragma mark Public

/*!
 @brief Checks if this chronology instance equals another.
 @param obj  the object to compare to
 @return true if equal
 @since 1.6
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Standard instance of a Buddhist Chronology, that matches
 Sun's BuddhistCalendar class.
 This means that it follows the
 GregorianJulian calendar rules with a cutover date.
 */
+ (OrgJodaTimeChronoBuddhistChronology *)getInstance;

/*!
 @brief Standard instance of a Buddhist Chronology, that matches
 Sun's BuddhistCalendar class.
 This means that it follows the
 GregorianJulian calendar rules with a cutover date.
 @param zone  the time zone to use, null is default
 */
+ (OrgJodaTimeChronoBuddhistChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Standard instance of a Buddhist Chronology, that matches
 Sun's BuddhistCalendar class.
 This means that it follows the
 GregorianJulian calendar rules with a cutover date.
 <p>
 The time zone of the returned instance is UTC.
 */
+ (OrgJodaTimeChronoBuddhistChronology *)getInstanceUTC;

/*!
 @brief A suitable hash code for the chronology.
 @return the hash code
 @since 1.6
 */
- (NSUInteger)hash;

/*!
 @brief Gets a debugging toString.
 @return a debugging string
 */
- (NSString *)description;

/*!
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/*!
 @brief Gets the Chronology in a specific time zone.
 @param zone  the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoBuddhistChronology)

/*!
 @brief Constant value for 'Buddhist Era', equivalent to the value returned
 for AD/CE.
 Note that this differs from the constant in BuddhistCalendar.
 */
inline jint OrgJodaTimeChronoBuddhistChronology_get_BE();
#define OrgJodaTimeChronoBuddhistChronology_BE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBuddhistChronology, BE, jint)

FOUNDATION_EXPORT OrgJodaTimeChronoBuddhistChronology *OrgJodaTimeChronoBuddhistChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoBuddhistChronology *OrgJodaTimeChronoBuddhistChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoBuddhistChronology *OrgJodaTimeChronoBuddhistChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBuddhistChronology)

#endif

#pragma pop_macro("OrgJodaTimeChronoBuddhistChronology_INCLUDE_ALL")
