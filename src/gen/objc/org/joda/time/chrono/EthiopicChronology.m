//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/chrono/EthiopicChronology.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/BasicFixedMonthChronology.h"
#include "org/joda/time/chrono/BasicMonthOfYearDateTimeField.h"
#include "org/joda/time/chrono/BasicSingleEraDateTimeField.h"
#include "org/joda/time/chrono/EthiopicChronology.h"
#include "org/joda/time/chrono/LimitChronology.h"
#include "org/joda/time/chrono/ZonedChronology.h"
#include "org/joda/time/field/SkipDateTimeField.h"

@interface OrgJodaTimeChronoEthiopicChronology () {
}

/**
 @brief Serialization singleton.
 */
- (id)readResolve;
@end

BOOL OrgJodaTimeChronoEthiopicChronology_initialized = NO;

@implementation OrgJodaTimeChronoEthiopicChronology

OrgJodaTimeDateTimeField * OrgJodaTimeChronoEthiopicChronology_ERA_FIELD_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoEthiopicChronology_cCache_;
OrgJodaTimeChronoEthiopicChronology * OrgJodaTimeChronoEthiopicChronology_INSTANCE_UTC_;

+ (OrgJodaTimeChronoEthiopicChronology *)getInstanceUTC {
  return OrgJodaTimeChronoEthiopicChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoEthiopicChronology *)getInstance {
  return OrgJodaTimeChronoEthiopicChronology_getInstance();
}

+ (OrgJodaTimeChronoEthiopicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoEthiopicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                        withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek {
  return [super initWithOrgJodaTimeChronology:base withId:param withInt:minDaysInFirstWeek];
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  return base == nil ? OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone_get_UTC_(), [self getMinimumDaysInFirstWeek]) : OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_([base getZone], [self getMinimumDaysInFirstWeek]);
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoEthiopicChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (jboolean)isLeapDayWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self dayOfMonth])) getWithLong:instant] == 6 && [((OrgJodaTimeDateTimeField *) nil_chk([self monthOfYear])) isLeapWithLong:instant];
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  jint relativeYear = year - 1963;
  jint leapYears;
  if (relativeYear <= 0) {
    leapYears = RShift32((relativeYear + 3), 2);
  }
  else {
    leapYears = RShift32(relativeYear, 2);
    if (![self isLeapYearWithInt:year]) {
      leapYears++;
    }
  }
  jlong millis = (relativeYear * 365LL + leapYears) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  return millis + (365LL - 112) * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jint)getMinYear {
  return OrgJodaTimeChronoEthiopicChronology_MIN_YEAR;
}

- (jint)getMaxYear {
  return OrgJodaTimeChronoEthiopicChronology_MAX_YEAR;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  return (1962LL * OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_YEAR + 112LL * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) / 2;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_year_(nil_chk(fields), [[OrgJodaTimeFieldSkipDateTimeField alloc] initWithOrgJodaTimeChronology:self withOrgJodaTimeDateTimeField:fields->year_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekyear_(fields, [[OrgJodaTimeFieldSkipDateTimeField alloc] initWithOrgJodaTimeChronology:self withOrgJodaTimeDateTimeField:fields->weekyear_]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_era_(fields, OrgJodaTimeChronoEthiopicChronology_ERA_FIELD_);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_monthOfYear_(fields, [[OrgJodaTimeChronoBasicMonthOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withInt:13]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_months_(fields, [fields->monthOfYear_ getDurationField]);
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoEthiopicChronology class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoEthiopicChronology_ERA_FIELD_, nil, [[OrgJodaTimeChronoBasicSingleEraDateTimeField alloc] initWithNSString:@"EE"]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoEthiopicChronology_cCache_, nil, [[JavaUtilConcurrentConcurrentHashMap alloc] init]);
    {
      JreStrongAssign(&OrgJodaTimeChronoEthiopicChronology_INSTANCE_UTC_, nil, OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone_get_UTC_()));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoEthiopicChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.EthiopicChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.EthiopicChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.EthiopicChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withInt:", "getInstance", "Lorg.joda.time.chrono.EthiopicChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withId:withInt:", "EthiopicChronology", NULL, 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isLeapDayWithLong:", "isLeapDay", "Z", 0x0, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoEthiopicChronology_serialVersionUID },
    { "EE_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoEthiopicChronology_EE },
    { "ERA_FIELD_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoEthiopicChronology_ERA_FIELD_,  },
    { "MIN_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoEthiopicChronology_MIN_YEAR },
    { "MAX_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoEthiopicChronology_MAX_YEAR },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoEthiopicChronology_cCache_,  },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.EthiopicChronology;", &OrgJodaTimeChronoEthiopicChronology_INSTANCE_UTC_,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoEthiopicChronology = { 1, "EthiopicChronology", "org.joda.time.chrono", NULL, 0x11, 14, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeChronoEthiopicChronology;
}

@end

OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstanceUTC() {
  OrgJodaTimeChronoEthiopicChronology_init();
  return OrgJodaTimeChronoEthiopicChronology_INSTANCE_UTC_;
}

OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstance() {
  OrgJodaTimeChronoEthiopicChronology_init();
  return OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone_getDefault(), 4);
}

OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoEthiopicChronology_init();
  return OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, 4);
}

OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoEthiopicChronology_init();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoEthiopicChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoEthiopicChronology_cCache_)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:7 type:OrgJodaTimeChronoEthiopicChronology_class_()];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoEthiopicChronology_cCache_ putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  @try {
    chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Invalid min days in first week: ", minDaysInFirstWeek)] autorelease];
  }
  if (chrono == nil) {
    @synchronized(chronos) {
      chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
      if (chrono == nil) {
        if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
          chrono = [[[OrgJodaTimeChronoEthiopicChronology alloc] initWithOrgJodaTimeChronology:nil withId:nil withInt:minDaysInFirstWeek] autorelease];
          OrgJodaTimeDateTime *lowerLimit = [[[OrgJodaTimeDateTime alloc] initWithInt:1 withInt:1 withInt:1 withInt:0 withInt:0 withInt:0 withInt:0 withOrgJodaTimeChronology:chrono] autorelease];
          chrono = [[[OrgJodaTimeChronoEthiopicChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(chrono, lowerLimit, nil) withId:nil withInt:minDaysInFirstWeek] autorelease];
        }
        else {
          chrono = OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone_get_UTC_(), minDaysInFirstWeek);
          chrono = [[[OrgJodaTimeChronoEthiopicChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone) withId:nil withInt:minDaysInFirstWeek] autorelease];
        }
        IOSObjectArray_Set(chronos, minDaysInFirstWeek - 1, chrono);
      }
    }
  }
  return chrono;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoEthiopicChronology)
