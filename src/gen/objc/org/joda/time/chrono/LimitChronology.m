//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/chrono/LimitChronology.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/MutableDateTime.h"
#include "org/joda/time/ReadableDateTime.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/LimitChronology.h"
#include "org/joda/time/field/DecoratedDateTimeField.h"
#include "org/joda/time/field/DecoratedDurationField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

@interface OrgJodaTimeChronoLimitChronology () {
 @public
  OrgJodaTimeChronoLimitChronology *iWithUTC_;
}

/*!
 @brief Wraps another chronology, with datetime limits.When withUTC or
  withZone is called, the returned LimitChronology instance has
  the same limits, except they are time zone adjusted.
 @param lowerLimit inclusive lower limit, or null if none
 @param upperLimit exclusive upper limit, or null if none
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)lowerLimit
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)upperLimit;

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology, iWithUTC_, OrgJodaTimeChronoLimitChronology *)

/*!
 @brief Serialization lock
 */
inline jlong OrgJodaTimeChronoLimitChronology_get_serialVersionUID(void);
#define OrgJodaTimeChronoLimitChronology_serialVersionUID 7670866536893052522LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoLimitChronology, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeDateTime *lowerLimit, OrgJodaTimeDateTime *upperLimit);

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology *new_OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(OrgJodaTimeChronology *base, OrgJodaTimeDateTime *lowerLimit, OrgJodaTimeDateTime *upperLimit) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology *create_OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(OrgJodaTimeChronology *base, OrgJodaTimeDateTime *lowerLimit, OrgJodaTimeDateTime *upperLimit);

__attribute__((unused)) static OrgJodaTimeDurationField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted);

__attribute__((unused)) static OrgJodaTimeDateTimeField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted);

/*!
 @brief Extends IllegalArgumentException such that the exception message is not
  generated unless it is actually requested.
 */
@interface OrgJodaTimeChronoLimitChronology_LimitException : JavaLangIllegalArgumentException {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
  jboolean iIsLow_;
}

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                                            withNSString:(NSString *)desc
                                             withBoolean:(jboolean)isLow;

- (NSString *)getMessage;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoLimitChronology_LimitException)

inline jlong OrgJodaTimeChronoLimitChronology_LimitException_get_serialVersionUID(void);
#define OrgJodaTimeChronoLimitChronology_LimitException_serialVersionUID -5924689995607498581LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoLimitChronology_LimitException, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(OrgJodaTimeChronoLimitChronology_LimitException *self, OrgJodaTimeChronoLimitChronology *outer$, NSString *desc, jboolean isLow);

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology_LimitException *new_OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(OrgJodaTimeChronoLimitChronology *outer$, NSString *desc, jboolean isLow) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology_LimitException *create_OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(OrgJodaTimeChronoLimitChronology *outer$, NSString *desc, jboolean isLow);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoLimitChronology_LimitException)

@interface OrgJodaTimeChronoLimitChronology_LimitDurationField : OrgJodaTimeFieldDecoratedDurationField {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
}

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field;

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant;

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant;

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant;

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoLimitChronology_LimitDurationField)

inline jlong OrgJodaTimeChronoLimitChronology_LimitDurationField_get_serialVersionUID(void);
#define OrgJodaTimeChronoLimitChronology_LimitDurationField_serialVersionUID 8049297699408782284LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoLimitChronology_LimitDurationField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology_LimitDurationField *self, OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDurationField *field);

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology_LimitDurationField *new_OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDurationField *field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology_LimitDurationField *create_OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDurationField *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoLimitChronology_LimitDurationField)

@interface OrgJodaTimeChronoLimitChronology_LimitDateTimeField : OrgJodaTimeFieldDecoratedDateTimeField {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
  OrgJodaTimeDurationField *iLeapDurationField_;
}

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField;

- (jint)getWithLong:(jlong)instant;

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount;

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeDurationField *)getDurationField;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jboolean)isLeapWithLong:(jlong)instant;

- (jint)getLeapAmountWithLong:(jlong)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (jlong)roundFloorWithLong:(jlong)instant;

- (jlong)roundCeilingWithLong:(jlong)instant;

- (jlong)roundHalfFloorWithLong:(jlong)instant;

- (jlong)roundHalfCeilingWithLong:(jlong)instant;

- (jlong)roundHalfEvenWithLong:(jlong)instant;

- (jlong)remainderWithLong:(jlong)instant;

- (jint)getMinimumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithLong:(jlong)instant;

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoLimitChronology_LimitDateTimeField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iRangeDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iLeapDurationField_, OrgJodaTimeDurationField *)

inline jlong OrgJodaTimeChronoLimitChronology_LimitDateTimeField_get_serialVersionUID(void);
#define OrgJodaTimeChronoLimitChronology_LimitDateTimeField_serialVersionUID -2435306746995699312LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology_LimitDateTimeField *self, OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField);

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology_LimitDateTimeField *new_OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoLimitChronology_LimitDateTimeField *create_OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField)

@implementation OrgJodaTimeChronoLimitChronology

+ (OrgJodaTimeChronoLimitChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)lowerLimit
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)upperLimit {
  return OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(base, lowerLimit, upperLimit);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)lowerLimit
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)upperLimit {
  OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, base, lowerLimit, upperLimit);
  return self;
}

- (OrgJodaTimeDateTime *)getLowerLimit {
  return iLowerLimit_;
}

- (OrgJodaTimeDateTime *)getUpperLimit {
  return iUpperLimit_;
}

- (OrgJodaTimeChronology *)withUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC) && iWithUTC_ != nil) {
    return iWithUTC_;
  }
  OrgJodaTimeDateTime *lowerLimit = iLowerLimit_;
  if (lowerLimit != nil) {
    OrgJodaTimeMutableDateTime *mdt = [lowerLimit toMutableDateTime];
    [((OrgJodaTimeMutableDateTime *) nil_chk(mdt)) setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:zone];
    lowerLimit = [mdt toDateTime];
  }
  OrgJodaTimeDateTime *upperLimit = iUpperLimit_;
  if (upperLimit != nil) {
    OrgJodaTimeMutableDateTime *mdt = [upperLimit toMutableDateTime];
    [((OrgJodaTimeMutableDateTime *) nil_chk(mdt)) setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:zone];
    upperLimit = [mdt toDateTime];
  }
  OrgJodaTimeChronoLimitChronology *chrono = OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_([((OrgJodaTimeChronology *) nil_chk([self getBase])) withZoneWithOrgJodaTimeDateTimeZone:zone], lowerLimit, upperLimit);
  if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
    JreStrongAssign(&iWithUTC_, chrono);
  }
  return chrono;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  [self checkLimitsWithLong:instant withNSString:nil];
  instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JavaUtilHashMap *converted = create_JavaUtilHashMap_init();
  JreStrongAssign(&((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->eras_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->eras_, converted));
  JreStrongAssign(&fields->centuries_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->centuries_, converted));
  JreStrongAssign(&fields->years_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->years_, converted));
  JreStrongAssign(&fields->months_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->months_, converted));
  JreStrongAssign(&fields->weekyears_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weekyears_, converted));
  JreStrongAssign(&fields->weeks_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weeks_, converted));
  JreStrongAssign(&fields->days_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->days_, converted));
  JreStrongAssign(&fields->halfdays_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->halfdays_, converted));
  JreStrongAssign(&fields->hours_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->hours_, converted));
  JreStrongAssign(&fields->minutes_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->minutes_, converted));
  JreStrongAssign(&fields->seconds_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->seconds_, converted));
  JreStrongAssign(&fields->millis_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->millis_, converted));
  JreStrongAssign(&fields->year_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->year_, converted));
  JreStrongAssign(&fields->yearOfEra_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfEra_, converted));
  JreStrongAssign(&fields->yearOfCentury_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfCentury_, converted));
  JreStrongAssign(&fields->centuryOfEra_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->centuryOfEra_, converted));
  JreStrongAssign(&fields->era_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->era_, converted));
  JreStrongAssign(&fields->dayOfWeek_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfWeek_, converted));
  JreStrongAssign(&fields->dayOfMonth_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfMonth_, converted));
  JreStrongAssign(&fields->dayOfYear_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfYear_, converted));
  JreStrongAssign(&fields->monthOfYear_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->monthOfYear_, converted));
  JreStrongAssign(&fields->weekOfWeekyear_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekOfWeekyear_, converted));
  JreStrongAssign(&fields->weekyear_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyear_, converted));
  JreStrongAssign(&fields->weekyearOfCentury_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyearOfCentury_, converted));
  JreStrongAssign(&fields->millisOfSecond_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfSecond_, converted));
  JreStrongAssign(&fields->millisOfDay_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfDay_, converted));
  JreStrongAssign(&fields->secondOfMinute_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfMinute_, converted));
  JreStrongAssign(&fields->secondOfDay_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfDay_, converted));
  JreStrongAssign(&fields->minuteOfHour_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfHour_, converted));
  JreStrongAssign(&fields->minuteOfDay_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfDay_, converted));
  JreStrongAssign(&fields->hourOfDay_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfDay_, converted));
  JreStrongAssign(&fields->hourOfHalfday_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfHalfday_, converted));
  JreStrongAssign(&fields->clockhourOfDay_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfDay_, converted));
  JreStrongAssign(&fields->clockhourOfHalfday_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfHalfday_, converted));
  JreStrongAssign(&fields->halfdayOfDay_, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->halfdayOfDay_, converted));
}

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, field, converted);
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, field, converted);
}

- (void)checkLimitsWithLong:(jlong)instant
               withNSString:(NSString *)desc {
  OrgJodaTimeDateTime *limit;
  if ((limit = iLowerLimit_) != nil && instant < [((OrgJodaTimeDateTime *) nil_chk(limit)) getMillis]) {
    @throw create_OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(self, desc, true);
  }
  if ((limit = iUpperLimit_) != nil && instant >= [((OrgJodaTimeDateTime *) nil_chk(limit)) getMillis]) {
    @throw create_OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(self, desc, false);
  }
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoLimitChronology class]] == false) {
    return false;
  }
  OrgJodaTimeChronoLimitChronology *chrono = (OrgJodaTimeChronoLimitChronology *) cast_chk(obj, [OrgJodaTimeChronoLimitChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoLimitChronology *) nil_chk(chrono)) getBase]] && OrgJodaTimeFieldFieldUtils_equalsWithId_withId_([self getLowerLimit], [chrono getLowerLimit]) && OrgJodaTimeFieldFieldUtils_equalsWithId_withId_([self getUpperLimit], [chrono getUpperLimit]);
}

- (NSUInteger)hash {
  jint hash_ = 317351877;
  hash_ += ([self getLowerLimit] != nil ? ((jint) [((OrgJodaTimeDateTime *) nil_chk([self getLowerLimit])) hash]) : 0);
  hash_ += ([self getUpperLimit] != nil ? ((jint) [((OrgJodaTimeDateTime *) nil_chk([self getUpperLimit])) hash]) : 0);
  hash_ += ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
  return hash_;
}

- (NSString *)description {
  return JreStrcat("$$$$$$C", @"LimitChronology[", [((OrgJodaTimeChronology *) nil_chk([self getBase])) description], @", ", ([self getLowerLimit] == nil ? @"NoLimit" : [((OrgJodaTimeDateTime *) nil_chk([self getLowerLimit])) description]), @", ", ([self getUpperLimit] == nil ? @"NoLimit" : [((OrgJodaTimeDateTime *) nil_chk([self getUpperLimit])) description]), ']');
}

- (void)dealloc {
  RELEASE_(iLowerLimit_);
  RELEASE_(iUpperLimit_);
  RELEASE_(iWithUTC_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeChronoLimitChronology;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 8, 7, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x2, 12, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstanceWithOrgJodaTimeChronology:withOrgJodaTimeReadableDateTime:withOrgJodaTimeReadableDateTime:);
  methods[1].selector = @selector(initWithOrgJodaTimeChronology:withOrgJodaTimeDateTime:withOrgJodaTimeDateTime:);
  methods[2].selector = @selector(getLowerLimit);
  methods[3].selector = @selector(getUpperLimit);
  methods[4].selector = @selector(withUTC);
  methods[5].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[6].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:);
  methods[9].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[10].selector = @selector(convertFieldWithOrgJodaTimeDurationField:withJavaUtilHashMap:);
  methods[11].selector = @selector(convertFieldWithOrgJodaTimeDateTimeField:withJavaUtilHashMap:);
  methods[12].selector = @selector(checkLimitsWithLong:withNSString:);
  methods[13].selector = @selector(isEqual:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoLimitChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iLowerLimit_", "LOrgJodaTimeDateTime;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iUpperLimit_", "LOrgJodaTimeDateTime;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iWithUTC_", "LOrgJodaTimeChronoLimitChronology;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgJodaTimeChronology;LOrgJodaTimeReadableDateTime;LOrgJodaTimeReadableDateTime;", "LOrgJodaTimeChronology;LOrgJodaTimeDateTime;LOrgJodaTimeDateTime;", "withZone", "LOrgJodaTimeDateTimeZone;", "getDateTimeMillis", "IIII", "LJavaLangIllegalArgumentException;", "IIIIIII", "JIIII", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "convertField", "LOrgJodaTimeDurationField;LJavaUtilHashMap;", "(Lorg/joda/time/DurationField;Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;)Lorg/joda/time/DurationField;", "LOrgJodaTimeDateTimeField;LJavaUtilHashMap;", "(Lorg/joda/time/DateTimeField;Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;)Lorg/joda/time/DateTimeField;", "checkLimits", "JLNSString;", "equals", "LNSObject;", "hashCode", "toString", "LOrgJodaTimeChronoLimitChronology_LimitException;LOrgJodaTimeChronoLimitChronology_LimitDurationField;LOrgJodaTimeChronoLimitChronology_LimitDateTimeField;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology = { "LimitChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x11, 16, 4, -1, 23, -1, -1, -1 };
  return &_OrgJodaTimeChronoLimitChronology;
}

@end

OrgJodaTimeChronoLimitChronology *OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(OrgJodaTimeChronology *base, id<OrgJodaTimeReadableDateTime> lowerLimit, id<OrgJodaTimeReadableDateTime> upperLimit) {
  OrgJodaTimeChronoLimitChronology_initialize();
  if (base == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must supply a chronology");
  }
  lowerLimit = lowerLimit == nil ? nil : [lowerLimit toDateTime];
  upperLimit = upperLimit == nil ? nil : [upperLimit toDateTime];
  if (lowerLimit != nil && upperLimit != nil) {
    if (![lowerLimit isBeforeWithOrgJodaTimeReadableInstant:upperLimit]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The lower limit must be come before than the upper limit");
    }
  }
  return create_OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(base, (OrgJodaTimeDateTime *) cast_chk(lowerLimit, [OrgJodaTimeDateTime class]), (OrgJodaTimeDateTime *) cast_chk(upperLimit, [OrgJodaTimeDateTime class]));
}

void OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeDateTime *lowerLimit, OrgJodaTimeDateTime *upperLimit) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, nil);
  JreStrongAssign(&self->iLowerLimit_, lowerLimit);
  JreStrongAssign(&self->iUpperLimit_, upperLimit);
}

OrgJodaTimeChronoLimitChronology *new_OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(OrgJodaTimeChronology *base, OrgJodaTimeDateTime *lowerLimit, OrgJodaTimeDateTime *upperLimit) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoLimitChronology, initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_, base, lowerLimit, upperLimit)
}

OrgJodaTimeChronoLimitChronology *create_OrgJodaTimeChronoLimitChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(OrgJodaTimeChronology *base, OrgJodaTimeDateTime *lowerLimit, OrgJodaTimeDateTime *upperLimit) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoLimitChronology, initWithOrgJodaTimeChronology_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_, base, lowerLimit, upperLimit)
}

OrgJodaTimeDurationField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDurationField *) cast_chk([converted getWithId:field], [OrgJodaTimeDurationField class]);
  }
  OrgJodaTimeChronoLimitChronology_LimitDurationField *limitField = create_OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(self, field);
  [converted putWithId:field withId:limitField];
  return limitField;
}

OrgJodaTimeDateTimeField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDateTimeField *) cast_chk([converted getWithId:field], [OrgJodaTimeDateTimeField class]);
  }
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField *limitField = create_OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, field, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getDurationField], converted), OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getRangeDurationField], converted), OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getLeapDurationField], converted));
  [converted putWithId:field withId:limitField];
  return limitField;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology)

@implementation OrgJodaTimeChronoLimitChronology_LimitException

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                                            withNSString:(NSString *)desc
                                             withBoolean:(jboolean)isLow {
  OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(self, outer$, desc, isLow);
  return self;
}

- (NSString *)getMessage {
  JavaLangStringBuffer *buf = create_JavaLangStringBuffer_initWithInt_(85);
  [buf appendWithNSString:@"The"];
  NSString *desc = [super getMessage];
  if (desc != nil) {
    [buf appendWithChar:' '];
    [buf appendWithNSString:desc];
  }
  [buf appendWithNSString:@" instant is "];
  OrgJodaTimeFormatDateTimeFormatter *p = OrgJodaTimeFormatISODateTimeFormat_dateTime();
  p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) withChronologyWithOrgJodaTimeChronology:[this$0_ getBase]];
  if (iIsLow_) {
    [buf appendWithNSString:@"below the supported minimum of "];
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) printToWithJavaLangStringBuffer:buf withLong:[((OrgJodaTimeDateTime *) nil_chk([this$0_ getLowerLimit])) getMillis]];
  }
  else {
    [buf appendWithNSString:@"above the supported maximum of "];
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) printToWithJavaLangStringBuffer:buf withLong:[((OrgJodaTimeDateTime *) nil_chk([this$0_ getUpperLimit])) getMillis]];
  }
  [buf appendWithNSString:@" ("];
  [buf appendWithId:[this$0_ getBase]];
  [buf appendWithChar:')'];
  return [buf description];
}

- (NSString *)description {
  return JreStrcat("$$", @"IllegalArgumentException: ", [self getMessage]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeChronoLimitChronology:withNSString:withBoolean:);
  methods[1].selector = @selector(getMessage);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJodaTimeChronoLimitChronology;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iIsLow_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;Z", "toString", "LOrgJodaTimeChronoLimitChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitException = { "LimitException", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x2, 3, 3, 2, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoLimitChronology_LimitException;
}

@end

void OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(OrgJodaTimeChronoLimitChronology_LimitException *self, OrgJodaTimeChronoLimitChronology *outer$, NSString *desc, jboolean isLow) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangIllegalArgumentException_initWithNSString_(self, desc);
  self->iIsLow_ = isLow;
}

OrgJodaTimeChronoLimitChronology_LimitException *new_OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(OrgJodaTimeChronoLimitChronology *outer$, NSString *desc, jboolean isLow) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoLimitChronology_LimitException, initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_, outer$, desc, isLow)
}

OrgJodaTimeChronoLimitChronology_LimitException *create_OrgJodaTimeChronoLimitChronology_LimitException_initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_(OrgJodaTimeChronoLimitChronology *outer$, NSString *desc, jboolean isLow) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoLimitChronology_LimitException, initWithOrgJodaTimeChronoLimitChronology_withNSString_withBoolean_, outer$, desc, isLow)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology_LimitException)

@implementation OrgJodaTimeChronoLimitChronology_LimitDurationField

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(self, outer$, field);
  return self;
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration withLong:instant];
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration withLong:instant];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithInt:value withLong:instant];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:value withLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeChronoLimitChronology:withOrgJodaTimeDurationField:);
  methods[1].selector = @selector(getValueWithLong:withLong:);
  methods[2].selector = @selector(getValueAsLongWithLong:withLong:);
  methods[3].selector = @selector(getMillisWithInt:withLong:);
  methods[4].selector = @selector(getMillisWithLong:withLong:);
  methods[5].selector = @selector(addWithLong:withInt:);
  methods[6].selector = @selector(addWithLong:withLong:);
  methods[7].selector = @selector(getDifferenceWithLong:withLong:);
  methods[8].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJodaTimeChronoLimitChronology;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitDurationField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDurationField;", "getValue", "JJ", "getValueAsLong", "getMillis", "IJ", "add", "JI", "getDifference", "getDifferenceAsLong", "LOrgJodaTimeChronoLimitChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitDurationField = { "LimitDurationField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x2, 9, 2, 10, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoLimitChronology_LimitDurationField;
}

@end

void OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology_LimitDurationField *self, OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDurationField *field) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgJodaTimeFieldDecoratedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_(self, field, [((OrgJodaTimeDurationField *) nil_chk(field)) getType]);
}

OrgJodaTimeChronoLimitChronology_LimitDurationField *new_OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDurationField *field) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoLimitChronology_LimitDurationField, initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_, outer$, field)
}

OrgJodaTimeChronoLimitChronology_LimitDurationField *create_OrgJodaTimeChronoLimitChronology_LimitDurationField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDurationField *field) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoLimitChronology_LimitDurationField, initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDurationField_, outer$, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology_LimitDurationField)

@implementation OrgJodaTimeChronoLimitChronology_LimitDateTimeField

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField {
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, outer$, field, durationField, rangeDurationField, leapDurationField);
  return self;
}

- (jint)getWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getAsTextWithLong:instant withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withInt:value];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) isLeapWithLong:instant];
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getLeapAmountWithLong:instant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return iLeapDurationField_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundHalfFloorWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfFloorWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundHalfCeilingWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfCeilingWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundHalfEvenWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfEvenWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)remainderWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMinimumValueWithLong:instant];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumValueWithLong:instant];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(iDurationField_);
  RELEASE_(iRangeDurationField_);
  RELEASE_(iLeapDurationField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeChronoLimitChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:);
  methods[1].selector = @selector(getWithLong:);
  methods[2].selector = @selector(getAsTextWithLong:withJavaUtilLocale:);
  methods[3].selector = @selector(getAsShortTextWithLong:withJavaUtilLocale:);
  methods[4].selector = @selector(addWithLong:withInt:);
  methods[5].selector = @selector(addWithLong:withLong:);
  methods[6].selector = @selector(addWrapFieldWithLong:withInt:);
  methods[7].selector = @selector(getDifferenceWithLong:withLong:);
  methods[8].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[9].selector = @selector(setWithLong:withInt:);
  methods[10].selector = @selector(setWithLong:withNSString:withJavaUtilLocale:);
  methods[11].selector = @selector(getDurationField);
  methods[12].selector = @selector(getRangeDurationField);
  methods[13].selector = @selector(isLeapWithLong:);
  methods[14].selector = @selector(getLeapAmountWithLong:);
  methods[15].selector = @selector(getLeapDurationField);
  methods[16].selector = @selector(roundFloorWithLong:);
  methods[17].selector = @selector(roundCeilingWithLong:);
  methods[18].selector = @selector(roundHalfFloorWithLong:);
  methods[19].selector = @selector(roundHalfCeilingWithLong:);
  methods[20].selector = @selector(roundHalfEvenWithLong:);
  methods[21].selector = @selector(remainderWithLong:);
  methods[22].selector = @selector(getMinimumValueWithLong:);
  methods[23].selector = @selector(getMaximumValueWithLong:);
  methods[24].selector = @selector(getMaximumTextLengthWithJavaUtilLocale:);
  methods[25].selector = @selector(getMaximumShortTextLengthWithJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJodaTimeChronoLimitChronology;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitDateTimeField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iRangeDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iLeapDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeField;LOrgJodaTimeDurationField;LOrgJodaTimeDurationField;LOrgJodaTimeDurationField;", "get", "J", "getAsText", "JLJavaUtilLocale;", "getAsShortText", "add", "JI", "JJ", "addWrapField", "getDifference", "getDifferenceAsLong", "set", "JLNSString;LJavaUtilLocale;", "isLeap", "getLeapAmount", "roundFloor", "roundCeiling", "roundHalfFloor", "roundHalfCeiling", "roundHalfEven", "remainder", "getMinimumValue", "getMaximumValue", "getMaximumTextLength", "LJavaUtilLocale;", "getMaximumShortTextLength", "LOrgJodaTimeChronoLimitChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitDateTimeField = { "LimitDateTimeField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x2, 26, 5, 27, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoLimitChronology_LimitDateTimeField;
}

@end

void OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology_LimitDateTimeField *self, OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgJodaTimeFieldDecoratedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, field, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getType]);
  JreStrongAssign(&self->iDurationField_, durationField);
  JreStrongAssign(&self->iRangeDurationField_, rangeDurationField);
  JreStrongAssign(&self->iLeapDurationField_, leapDurationField);
}

OrgJodaTimeChronoLimitChronology_LimitDateTimeField *new_OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_, outer$, field, durationField, rangeDurationField, leapDurationField)
}

OrgJodaTimeChronoLimitChronology_LimitDateTimeField *create_OrgJodaTimeChronoLimitChronology_LimitDateTimeField_initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoLimitChronology *outer$, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, initWithOrgJodaTimeChronoLimitChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_, outer$, field, durationField, rangeDurationField, leapDurationField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology_LimitDateTimeField)
