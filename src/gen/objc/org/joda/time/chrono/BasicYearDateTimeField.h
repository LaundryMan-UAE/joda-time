//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeChronoBasicYearDateTimeField")
#ifdef RESTRICT_OrgJodaTimeChronoBasicYearDateTimeField
#define INCLUDE_ALL_OrgJodaTimeChronoBasicYearDateTimeField 0
#else
#define INCLUDE_ALL_OrgJodaTimeChronoBasicYearDateTimeField 1
#endif
#undef RESTRICT_OrgJodaTimeChronoBasicYearDateTimeField

#if !defined (OrgJodaTimeChronoBasicYearDateTimeField_) && (INCLUDE_ALL_OrgJodaTimeChronoBasicYearDateTimeField || defined(INCLUDE_OrgJodaTimeChronoBasicYearDateTimeField))
#define OrgJodaTimeChronoBasicYearDateTimeField_

#define RESTRICT_OrgJodaTimeFieldImpreciseDateTimeField 1
#define INCLUDE_OrgJodaTimeFieldImpreciseDateTimeField 1
#include "org/joda/time/field/ImpreciseDateTimeField.h"

@class OrgJodaTimeChronoBasicChronology;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;

@interface OrgJodaTimeChronoBasicYearDateTimeField : OrgJodaTimeFieldImpreciseDateTimeField {
 @public
  OrgJodaTimeChronoBasicChronology *iChronology_;
}

#pragma mark Public

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)years;

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years;

- (jint)getWithLong:(jlong)instant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jint)getLeapAmountWithLong:(jlong)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (jint)getMaximumValue;

- (jint)getMinimumValue;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jboolean)isLeapWithLong:(jlong)instant;

- (jboolean)isLenient;

- (jlong)remainderWithLong:(jlong)instant;

- (jlong)roundCeilingWithLong:(jlong)instant;

- (jlong)roundFloorWithLong:(jlong)instant;

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year;

- (jlong)setExtendedWithLong:(jlong)instant
                     withInt:(jint)year;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)arg0
                                            withLong:(jlong)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoBasicYearDateTimeField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoBasicYearDateTimeField, iChronology_, OrgJodaTimeChronoBasicChronology *)

FOUNDATION_EXPORT void OrgJodaTimeChronoBasicYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicYearDateTimeField *self, OrgJodaTimeChronoBasicChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeChronoBasicYearDateTimeField *new_OrgJodaTimeChronoBasicYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoBasicYearDateTimeField *create_OrgJodaTimeChronoBasicYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBasicYearDateTimeField)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeChronoBasicYearDateTimeField")
