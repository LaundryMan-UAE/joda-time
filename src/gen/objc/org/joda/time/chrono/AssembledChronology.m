//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/chrono/AssembledChronology.java
//

#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/BaseChronology.h"

static id (*OrgJodaTimeChronoAssembledChronology_super$_millis)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_seconds)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_minutes)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_hours)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_halfdays)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_days)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_weeks)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_weekyears)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_months)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_years)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_centuries)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_eras)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_millisOfSecond)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_millisOfDay)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_secondOfMinute)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_secondOfDay)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_minuteOfHour)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_minuteOfDay)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_hourOfDay)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_clockhourOfDay)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_hourOfHalfday)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_clockhourOfHalfday)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_halfdayOfDay)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_dayOfWeek)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_dayOfMonth)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_dayOfYear)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_weekOfWeekyear)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_weekyear)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_weekyearOfCentury)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_monthOfYear)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_year)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_yearOfEra)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_yearOfCentury)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_centuryOfEra)(id, SEL);

static id (*OrgJodaTimeChronoAssembledChronology_super$_era)(id, SEL);

@interface OrgJodaTimeChronoAssembledChronology () {
 @public
  OrgJodaTimeChronology *iBase_;
  id iParam_;
  OrgJodaTimeDurationField *iMillis_;
  OrgJodaTimeDurationField *iSeconds_;
  OrgJodaTimeDurationField *iMinutes_;
  OrgJodaTimeDurationField *iHours_;
  OrgJodaTimeDurationField *iHalfdays_;
  OrgJodaTimeDurationField *iDays_;
  OrgJodaTimeDurationField *iWeeks_;
  OrgJodaTimeDurationField *iWeekyears_;
  OrgJodaTimeDurationField *iMonths_;
  OrgJodaTimeDurationField *iYears_;
  OrgJodaTimeDurationField *iCenturies_;
  OrgJodaTimeDurationField *iEras_;
  OrgJodaTimeDateTimeField *iMillisOfSecond_;
  OrgJodaTimeDateTimeField *iMillisOfDay_;
  OrgJodaTimeDateTimeField *iSecondOfMinute_;
  OrgJodaTimeDateTimeField *iSecondOfDay_;
  OrgJodaTimeDateTimeField *iMinuteOfHour_;
  OrgJodaTimeDateTimeField *iMinuteOfDay_;
  OrgJodaTimeDateTimeField *iHourOfDay_;
  OrgJodaTimeDateTimeField *iClockhourOfDay_;
  OrgJodaTimeDateTimeField *iHourOfHalfday_;
  OrgJodaTimeDateTimeField *iClockhourOfHalfday_;
  OrgJodaTimeDateTimeField *iHalfdayOfDay_;
  OrgJodaTimeDateTimeField *iDayOfWeek_;
  OrgJodaTimeDateTimeField *iDayOfMonth_;
  OrgJodaTimeDateTimeField *iDayOfYear_;
  OrgJodaTimeDateTimeField *iWeekOfWeekyear_;
  OrgJodaTimeDateTimeField *iWeekyear_;
  OrgJodaTimeDateTimeField *iWeekyearOfCentury_;
  OrgJodaTimeDateTimeField *iMonthOfYear_;
  OrgJodaTimeDateTimeField *iYear_;
  OrgJodaTimeDateTimeField *iYearOfEra_;
  OrgJodaTimeDateTimeField *iYearOfCentury_;
  OrgJodaTimeDateTimeField *iCenturyOfEra_;
  OrgJodaTimeDateTimeField *iEra_;
  jint iBaseFlags_;
}

- (void)setFields;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iBase_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iParam_, id)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMillis_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iSeconds_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMinutes_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iHours_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iHalfdays_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iDays_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iWeeks_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iWeekyears_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMonths_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iYears_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iCenturies_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iEras_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMillisOfSecond_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMillisOfDay_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iSecondOfMinute_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iSecondOfDay_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMinuteOfHour_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMinuteOfDay_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iHourOfDay_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iClockhourOfDay_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iHourOfHalfday_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iClockhourOfHalfday_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iHalfdayOfDay_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iDayOfWeek_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iDayOfMonth_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iDayOfYear_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iWeekOfWeekyear_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iWeekyear_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iWeekyearOfCentury_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iMonthOfYear_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iYear_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iYearOfEra_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iYearOfCentury_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iCenturyOfEra_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoAssembledChronology, iEra_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeChronoAssembledChronology_get_serialVersionUID(void);
#define OrgJodaTimeChronoAssembledChronology_serialVersionUID -6728465968995518215LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoAssembledChronology, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoAssembledChronology_setFields(OrgJodaTimeChronoAssembledChronology *self);

__attribute__((unused)) static void OrgJodaTimeChronoAssembledChronology_readObjectWithJavaIoObjectInputStream_(OrgJodaTimeChronoAssembledChronology *self, JavaIoObjectInputStream *inArg);

@interface OrgJodaTimeChronoAssembledChronology_Fields ()

+ (jboolean)isSupportedWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field;

+ (jboolean)isSupportedWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

__attribute__((unused)) static jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field);

__attribute__((unused)) static jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(OrgJodaTimeDateTimeField *field);

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoAssembledChronology)

@implementation OrgJodaTimeChronoAssembledChronology

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, param);
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return nil;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 6) == 6) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  return [super getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 5) == 5) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  return [super getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 1) == 1) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  return [super getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (OrgJodaTimeDurationField *)millis {
  return iMillis_;
}

- (OrgJodaTimeDateTimeField *)millisOfSecond {
  return iMillisOfSecond_;
}

- (OrgJodaTimeDateTimeField *)millisOfDay {
  return iMillisOfDay_;
}

- (OrgJodaTimeDurationField *)seconds {
  return iSeconds_;
}

- (OrgJodaTimeDateTimeField *)secondOfMinute {
  return iSecondOfMinute_;
}

- (OrgJodaTimeDateTimeField *)secondOfDay {
  return iSecondOfDay_;
}

- (OrgJodaTimeDurationField *)minutes {
  return iMinutes_;
}

- (OrgJodaTimeDateTimeField *)minuteOfHour {
  return iMinuteOfHour_;
}

- (OrgJodaTimeDateTimeField *)minuteOfDay {
  return iMinuteOfDay_;
}

- (OrgJodaTimeDurationField *)hours {
  return iHours_;
}

- (OrgJodaTimeDateTimeField *)hourOfDay {
  return iHourOfDay_;
}

- (OrgJodaTimeDateTimeField *)clockhourOfDay {
  return iClockhourOfDay_;
}

- (OrgJodaTimeDurationField *)halfdays {
  return iHalfdays_;
}

- (OrgJodaTimeDateTimeField *)hourOfHalfday {
  return iHourOfHalfday_;
}

- (OrgJodaTimeDateTimeField *)clockhourOfHalfday {
  return iClockhourOfHalfday_;
}

- (OrgJodaTimeDateTimeField *)halfdayOfDay {
  return iHalfdayOfDay_;
}

- (OrgJodaTimeDurationField *)days {
  return iDays_;
}

- (OrgJodaTimeDateTimeField *)dayOfWeek {
  return iDayOfWeek_;
}

- (OrgJodaTimeDateTimeField *)dayOfMonth {
  return iDayOfMonth_;
}

- (OrgJodaTimeDateTimeField *)dayOfYear {
  return iDayOfYear_;
}

- (OrgJodaTimeDurationField *)weeks {
  return iWeeks_;
}

- (OrgJodaTimeDateTimeField *)weekOfWeekyear {
  return iWeekOfWeekyear_;
}

- (OrgJodaTimeDurationField *)weekyears {
  return iWeekyears_;
}

- (OrgJodaTimeDateTimeField *)weekyear {
  return iWeekyear_;
}

- (OrgJodaTimeDateTimeField *)weekyearOfCentury {
  return iWeekyearOfCentury_;
}

- (OrgJodaTimeDurationField *)months {
  return iMonths_;
}

- (OrgJodaTimeDateTimeField *)monthOfYear {
  return iMonthOfYear_;
}

- (OrgJodaTimeDurationField *)years {
  return iYears_;
}

- (OrgJodaTimeDateTimeField *)year {
  return iYear_;
}

- (OrgJodaTimeDateTimeField *)yearOfEra {
  return iYearOfEra_;
}

- (OrgJodaTimeDateTimeField *)yearOfCentury {
  return iYearOfCentury_;
}

- (OrgJodaTimeDurationField *)centuries {
  return iCenturies_;
}

- (OrgJodaTimeDateTimeField *)centuryOfEra {
  return iCenturyOfEra_;
}

- (OrgJodaTimeDurationField *)eras {
  return iEras_;
}

- (OrgJodaTimeDateTimeField *)era {
  return iEra_;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgJodaTimeChronology *)getBase {
  return iBase_;
}

- (id)getParam {
  return iParam_;
}

- (void)setFields {
  OrgJodaTimeChronoAssembledChronology_setFields(self);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgJodaTimeChronoAssembledChronology_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)dealloc {
  RELEASE_(iBase_);
  RELEASE_(iParam_);
  RELEASE_(iMillis_);
  RELEASE_(iSeconds_);
  RELEASE_(iMinutes_);
  RELEASE_(iHours_);
  RELEASE_(iHalfdays_);
  RELEASE_(iDays_);
  RELEASE_(iWeeks_);
  RELEASE_(iWeekyears_);
  RELEASE_(iMonths_);
  RELEASE_(iYears_);
  RELEASE_(iCenturies_);
  RELEASE_(iEras_);
  RELEASE_(iMillisOfSecond_);
  RELEASE_(iMillisOfDay_);
  RELEASE_(iSecondOfMinute_);
  RELEASE_(iSecondOfDay_);
  RELEASE_(iMinuteOfHour_);
  RELEASE_(iMinuteOfDay_);
  RELEASE_(iHourOfDay_);
  RELEASE_(iClockhourOfDay_);
  RELEASE_(iHourOfHalfday_);
  RELEASE_(iClockhourOfHalfday_);
  RELEASE_(iHalfdayOfDay_);
  RELEASE_(iDayOfWeek_);
  RELEASE_(iDayOfMonth_);
  RELEASE_(iDayOfYear_);
  RELEASE_(iWeekOfWeekyear_);
  RELEASE_(iWeekyear_);
  RELEASE_(iWeekyearOfCentury_);
  RELEASE_(iMonthOfYear_);
  RELEASE_(iYear_);
  RELEASE_(iYearOfEra_);
  RELEASE_(iYearOfCentury_);
  RELEASE_(iCenturyOfEra_);
  RELEASE_(iEra_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 5, 3, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgJodaTimeChronology:withId:);
  methods[1].selector = @selector(getZone);
  methods[2].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(millis);
  methods[6].selector = @selector(millisOfSecond);
  methods[7].selector = @selector(millisOfDay);
  methods[8].selector = @selector(seconds);
  methods[9].selector = @selector(secondOfMinute);
  methods[10].selector = @selector(secondOfDay);
  methods[11].selector = @selector(minutes);
  methods[12].selector = @selector(minuteOfHour);
  methods[13].selector = @selector(minuteOfDay);
  methods[14].selector = @selector(hours);
  methods[15].selector = @selector(hourOfDay);
  methods[16].selector = @selector(clockhourOfDay);
  methods[17].selector = @selector(halfdays);
  methods[18].selector = @selector(hourOfHalfday);
  methods[19].selector = @selector(clockhourOfHalfday);
  methods[20].selector = @selector(halfdayOfDay);
  methods[21].selector = @selector(days);
  methods[22].selector = @selector(dayOfWeek);
  methods[23].selector = @selector(dayOfMonth);
  methods[24].selector = @selector(dayOfYear);
  methods[25].selector = @selector(weeks);
  methods[26].selector = @selector(weekOfWeekyear);
  methods[27].selector = @selector(weekyears);
  methods[28].selector = @selector(weekyear);
  methods[29].selector = @selector(weekyearOfCentury);
  methods[30].selector = @selector(months);
  methods[31].selector = @selector(monthOfYear);
  methods[32].selector = @selector(years);
  methods[33].selector = @selector(year);
  methods[34].selector = @selector(yearOfEra);
  methods[35].selector = @selector(yearOfCentury);
  methods[36].selector = @selector(centuries);
  methods[37].selector = @selector(centuryOfEra);
  methods[38].selector = @selector(eras);
  methods[39].selector = @selector(era);
  methods[40].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[41].selector = @selector(getBase);
  methods[42].selector = @selector(getParam);
  methods[43].selector = @selector(setFields);
  methods[44].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoAssembledChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iBase_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iParam_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iMillis_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iSeconds_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMinutes_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iHours_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iHalfdays_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iDays_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iWeeks_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iWeekyears_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMonths_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iYears_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iCenturies_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iEras_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMillisOfSecond_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMillisOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iSecondOfMinute_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iSecondOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMinuteOfHour_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMinuteOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iHourOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iClockhourOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iHourOfHalfday_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iClockhourOfHalfday_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iHalfdayOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iDayOfWeek_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iDayOfMonth_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iDayOfYear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iWeekOfWeekyear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iWeekyear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iWeekyearOfCentury_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iMonthOfYear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iYear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iYearOfEra_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iYearOfCentury_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iCenturyOfEra_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iEra_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iBaseFlags_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeChronology;LNSObject;", "getDateTimeMillis", "IIII", "LJavaLangIllegalArgumentException;", "IIIIIII", "JIIII", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoAssembledChronology = { "AssembledChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x401, 45, 39, -1, 7, -1, -1, -1 };
  return &_OrgJodaTimeChronoAssembledChronology;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoAssembledChronology class]) {
    OrgJodaTimeChronoAssembledChronology_super$_era = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(era)];
    OrgJodaTimeChronoAssembledChronology_super$_centuryOfEra = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(centuryOfEra)];
    OrgJodaTimeChronoAssembledChronology_super$_yearOfCentury = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(yearOfCentury)];
    OrgJodaTimeChronoAssembledChronology_super$_yearOfEra = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(yearOfEra)];
    OrgJodaTimeChronoAssembledChronology_super$_year = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(year)];
    OrgJodaTimeChronoAssembledChronology_super$_monthOfYear = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(monthOfYear)];
    OrgJodaTimeChronoAssembledChronology_super$_weekyearOfCentury = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(weekyearOfCentury)];
    OrgJodaTimeChronoAssembledChronology_super$_weekyear = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(weekyear)];
    OrgJodaTimeChronoAssembledChronology_super$_weekOfWeekyear = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(weekOfWeekyear)];
    OrgJodaTimeChronoAssembledChronology_super$_dayOfYear = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(dayOfYear)];
    OrgJodaTimeChronoAssembledChronology_super$_dayOfMonth = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(dayOfMonth)];
    OrgJodaTimeChronoAssembledChronology_super$_dayOfWeek = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(dayOfWeek)];
    OrgJodaTimeChronoAssembledChronology_super$_halfdayOfDay = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(halfdayOfDay)];
    OrgJodaTimeChronoAssembledChronology_super$_clockhourOfHalfday = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(clockhourOfHalfday)];
    OrgJodaTimeChronoAssembledChronology_super$_hourOfHalfday = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(hourOfHalfday)];
    OrgJodaTimeChronoAssembledChronology_super$_clockhourOfDay = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(clockhourOfDay)];
    OrgJodaTimeChronoAssembledChronology_super$_hourOfDay = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(hourOfDay)];
    OrgJodaTimeChronoAssembledChronology_super$_minuteOfDay = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(minuteOfDay)];
    OrgJodaTimeChronoAssembledChronology_super$_minuteOfHour = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(minuteOfHour)];
    OrgJodaTimeChronoAssembledChronology_super$_secondOfDay = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(secondOfDay)];
    OrgJodaTimeChronoAssembledChronology_super$_secondOfMinute = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(secondOfMinute)];
    OrgJodaTimeChronoAssembledChronology_super$_millisOfDay = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(millisOfDay)];
    OrgJodaTimeChronoAssembledChronology_super$_millisOfSecond = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(millisOfSecond)];
    OrgJodaTimeChronoAssembledChronology_super$_eras = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(eras)];
    OrgJodaTimeChronoAssembledChronology_super$_centuries = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(centuries)];
    OrgJodaTimeChronoAssembledChronology_super$_years = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(years)];
    OrgJodaTimeChronoAssembledChronology_super$_months = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(months)];
    OrgJodaTimeChronoAssembledChronology_super$_weekyears = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(weekyears)];
    OrgJodaTimeChronoAssembledChronology_super$_weeks = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(weeks)];
    OrgJodaTimeChronoAssembledChronology_super$_days = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(days)];
    OrgJodaTimeChronoAssembledChronology_super$_halfdays = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(halfdays)];
    OrgJodaTimeChronoAssembledChronology_super$_hours = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(hours)];
    OrgJodaTimeChronoAssembledChronology_super$_minutes = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(minutes)];
    OrgJodaTimeChronoAssembledChronology_super$_seconds = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(seconds)];
    OrgJodaTimeChronoAssembledChronology_super$_millis = (id (*)(id, SEL))[OrgJodaTimeChronoBaseChronology instanceMethodForSelector:@selector(millis)];
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoAssembledChronology)
  }
}

@end

void OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(OrgJodaTimeChronoAssembledChronology *self, OrgJodaTimeChronology *base, id param) {
  OrgJodaTimeChronoBaseChronology_init(self);
  JreStrongAssign(&self->iBase_, base);
  JreStrongAssign(&self->iParam_, param);
  OrgJodaTimeChronoAssembledChronology_setFields(self);
}

void OrgJodaTimeChronoAssembledChronology_setFields(OrgJodaTimeChronoAssembledChronology *self) {
  OrgJodaTimeChronoAssembledChronology_Fields *fields = create_OrgJodaTimeChronoAssembledChronology_Fields_init();
  if (self->iBase_ != nil) {
    [fields copyFieldsFromWithOrgJodaTimeChronology:self->iBase_];
  }
  [self assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
  {
    OrgJodaTimeDurationField *f;
    JreStrongAssign(&self->iMillis_, (f = fields->millis_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_millis(self, @selector(millis)));
    JreStrongAssign(&self->iSeconds_, (f = fields->seconds_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_seconds(self, @selector(seconds)));
    JreStrongAssign(&self->iMinutes_, (f = fields->minutes_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_minutes(self, @selector(minutes)));
    JreStrongAssign(&self->iHours_, (f = fields->hours_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_hours(self, @selector(hours)));
    JreStrongAssign(&self->iHalfdays_, (f = fields->halfdays_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_halfdays(self, @selector(halfdays)));
    JreStrongAssign(&self->iDays_, (f = fields->days_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_days(self, @selector(days)));
    JreStrongAssign(&self->iWeeks_, (f = fields->weeks_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_weeks(self, @selector(weeks)));
    JreStrongAssign(&self->iWeekyears_, (f = fields->weekyears_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_weekyears(self, @selector(weekyears)));
    JreStrongAssign(&self->iMonths_, (f = fields->months_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_months(self, @selector(months)));
    JreStrongAssign(&self->iYears_, (f = fields->years_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_years(self, @selector(years)));
    JreStrongAssign(&self->iCenturies_, (f = fields->centuries_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_centuries(self, @selector(centuries)));
    JreStrongAssign(&self->iEras_, (f = fields->eras_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_eras(self, @selector(eras)));
  }
  {
    OrgJodaTimeDateTimeField *f;
    JreStrongAssign(&self->iMillisOfSecond_, (f = fields->millisOfSecond_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_millisOfSecond(self, @selector(millisOfSecond)));
    JreStrongAssign(&self->iMillisOfDay_, (f = fields->millisOfDay_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_millisOfDay(self, @selector(millisOfDay)));
    JreStrongAssign(&self->iSecondOfMinute_, (f = fields->secondOfMinute_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_secondOfMinute(self, @selector(secondOfMinute)));
    JreStrongAssign(&self->iSecondOfDay_, (f = fields->secondOfDay_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_secondOfDay(self, @selector(secondOfDay)));
    JreStrongAssign(&self->iMinuteOfHour_, (f = fields->minuteOfHour_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_minuteOfHour(self, @selector(minuteOfHour)));
    JreStrongAssign(&self->iMinuteOfDay_, (f = fields->minuteOfDay_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_minuteOfDay(self, @selector(minuteOfDay)));
    JreStrongAssign(&self->iHourOfDay_, (f = fields->hourOfDay_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_hourOfDay(self, @selector(hourOfDay)));
    JreStrongAssign(&self->iClockhourOfDay_, (f = fields->clockhourOfDay_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_clockhourOfDay(self, @selector(clockhourOfDay)));
    JreStrongAssign(&self->iHourOfHalfday_, (f = fields->hourOfHalfday_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_hourOfHalfday(self, @selector(hourOfHalfday)));
    JreStrongAssign(&self->iClockhourOfHalfday_, (f = fields->clockhourOfHalfday_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_clockhourOfHalfday(self, @selector(clockhourOfHalfday)));
    JreStrongAssign(&self->iHalfdayOfDay_, (f = fields->halfdayOfDay_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_halfdayOfDay(self, @selector(halfdayOfDay)));
    JreStrongAssign(&self->iDayOfWeek_, (f = fields->dayOfWeek_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_dayOfWeek(self, @selector(dayOfWeek)));
    JreStrongAssign(&self->iDayOfMonth_, (f = fields->dayOfMonth_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_dayOfMonth(self, @selector(dayOfMonth)));
    JreStrongAssign(&self->iDayOfYear_, (f = fields->dayOfYear_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_dayOfYear(self, @selector(dayOfYear)));
    JreStrongAssign(&self->iWeekOfWeekyear_, (f = fields->weekOfWeekyear_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_weekOfWeekyear(self, @selector(weekOfWeekyear)));
    JreStrongAssign(&self->iWeekyear_, (f = fields->weekyear_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_weekyear(self, @selector(weekyear)));
    JreStrongAssign(&self->iWeekyearOfCentury_, (f = fields->weekyearOfCentury_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_weekyearOfCentury(self, @selector(weekyearOfCentury)));
    JreStrongAssign(&self->iMonthOfYear_, (f = fields->monthOfYear_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_monthOfYear(self, @selector(monthOfYear)));
    JreStrongAssign(&self->iYear_, (f = fields->year_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_year(self, @selector(year)));
    JreStrongAssign(&self->iYearOfEra_, (f = fields->yearOfEra_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_yearOfEra(self, @selector(yearOfEra)));
    JreStrongAssign(&self->iYearOfCentury_, (f = fields->yearOfCentury_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_yearOfCentury(self, @selector(yearOfCentury)));
    JreStrongAssign(&self->iCenturyOfEra_, (f = fields->centuryOfEra_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_centuryOfEra(self, @selector(centuryOfEra)));
    JreStrongAssign(&self->iEra_, (f = fields->era_) != nil ? f : OrgJodaTimeChronoAssembledChronology_super$_era(self, @selector(era)));
  }
  jint flags;
  if (self->iBase_ == nil) {
    flags = 0;
  }
  else {
    flags = ((self->iHourOfDay_ == [self->iBase_ hourOfDay] && self->iMinuteOfHour_ == [self->iBase_ minuteOfHour] && self->iSecondOfMinute_ == [self->iBase_ secondOfMinute] && self->iMillisOfSecond_ == [self->iBase_ millisOfSecond]) ? 1 : 0) | ((self->iMillisOfDay_ == [self->iBase_ millisOfDay]) ? 2 : 0) | ((self->iYear_ == [self->iBase_ year] && self->iMonthOfYear_ == [self->iBase_ monthOfYear] && self->iDayOfMonth_ == [self->iBase_ dayOfMonth]) ? 4 : 0);
  }
  self->iBaseFlags_ = flags;
}

void OrgJodaTimeChronoAssembledChronology_readObjectWithJavaIoObjectInputStream_(OrgJodaTimeChronoAssembledChronology *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  OrgJodaTimeChronoAssembledChronology_setFields(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoAssembledChronology)

@implementation OrgJodaTimeChronoAssembledChronology_Fields

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeChronoAssembledChronology_Fields_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copyFieldsFromWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  {
    OrgJodaTimeDurationField *f;
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [((OrgJodaTimeChronology *) nil_chk(chrono)) millis])) {
      JreStrongAssign(&millis_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono seconds])) {
      JreStrongAssign(&seconds_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono minutes])) {
      JreStrongAssign(&minutes_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono hours])) {
      JreStrongAssign(&hours_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono halfdays])) {
      JreStrongAssign(&halfdays_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono days])) {
      JreStrongAssign(&days_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono weeks])) {
      JreStrongAssign(&weeks_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono weekyears])) {
      JreStrongAssign(&weekyears_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono months])) {
      JreStrongAssign(&months_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono years])) {
      JreStrongAssign(&years_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono centuries])) {
      JreStrongAssign(&centuries_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono eras])) {
      JreStrongAssign(&eras_, f);
    }
  }
  {
    OrgJodaTimeDateTimeField *f;
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono millisOfSecond])) {
      JreStrongAssign(&millisOfSecond_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono millisOfDay])) {
      JreStrongAssign(&millisOfDay_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono secondOfMinute])) {
      JreStrongAssign(&secondOfMinute_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono secondOfDay])) {
      JreStrongAssign(&secondOfDay_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono minuteOfHour])) {
      JreStrongAssign(&minuteOfHour_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono minuteOfDay])) {
      JreStrongAssign(&minuteOfDay_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono hourOfDay])) {
      JreStrongAssign(&hourOfDay_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono clockhourOfDay])) {
      JreStrongAssign(&clockhourOfDay_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono hourOfHalfday])) {
      JreStrongAssign(&hourOfHalfday_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono clockhourOfHalfday])) {
      JreStrongAssign(&clockhourOfHalfday_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono halfdayOfDay])) {
      JreStrongAssign(&halfdayOfDay_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono dayOfWeek])) {
      JreStrongAssign(&dayOfWeek_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono dayOfMonth])) {
      JreStrongAssign(&dayOfMonth_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono dayOfYear])) {
      JreStrongAssign(&dayOfYear_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono weekOfWeekyear])) {
      JreStrongAssign(&weekOfWeekyear_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono weekyear])) {
      JreStrongAssign(&weekyear_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono weekyearOfCentury])) {
      JreStrongAssign(&weekyearOfCentury_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono monthOfYear])) {
      JreStrongAssign(&monthOfYear_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono year])) {
      JreStrongAssign(&year_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono yearOfEra])) {
      JreStrongAssign(&yearOfEra_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono yearOfCentury])) {
      JreStrongAssign(&yearOfCentury_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono centuryOfEra])) {
      JreStrongAssign(&centuryOfEra_, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono era])) {
      JreStrongAssign(&era_, f);
    }
  }
}

+ (jboolean)isSupportedWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  return OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(field);
}

+ (jboolean)isSupportedWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(field);
}

- (void)dealloc {
  RELEASE_(millis_);
  RELEASE_(seconds_);
  RELEASE_(minutes_);
  RELEASE_(hours_);
  RELEASE_(halfdays_);
  RELEASE_(days_);
  RELEASE_(weeks_);
  RELEASE_(weekyears_);
  RELEASE_(months_);
  RELEASE_(years_);
  RELEASE_(centuries_);
  RELEASE_(eras_);
  RELEASE_(millisOfSecond_);
  RELEASE_(millisOfDay_);
  RELEASE_(secondOfMinute_);
  RELEASE_(secondOfDay_);
  RELEASE_(minuteOfHour_);
  RELEASE_(minuteOfDay_);
  RELEASE_(hourOfDay_);
  RELEASE_(clockhourOfDay_);
  RELEASE_(hourOfHalfday_);
  RELEASE_(clockhourOfHalfday_);
  RELEASE_(halfdayOfDay_);
  RELEASE_(dayOfWeek_);
  RELEASE_(dayOfMonth_);
  RELEASE_(dayOfYear_);
  RELEASE_(weekOfWeekyear_);
  RELEASE_(weekyear_);
  RELEASE_(weekyearOfCentury_);
  RELEASE_(monthOfYear_);
  RELEASE_(year_);
  RELEASE_(yearOfEra_);
  RELEASE_(yearOfCentury_);
  RELEASE_(centuryOfEra_);
  RELEASE_(era_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFieldsFromWithOrgJodaTimeChronology:);
  methods[2].selector = @selector(isSupportedWithOrgJodaTimeDurationField:);
  methods[3].selector = @selector(isSupportedWithOrgJodaTimeDateTimeField:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "millis_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "seconds_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minutes_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hours_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "halfdays_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "days_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weeks_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weekyears_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "months_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "years_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "centuries_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "eras_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "millisOfSecond_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "millisOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "secondOfMinute_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "secondOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minuteOfHour_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minuteOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hourOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "clockhourOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hourOfHalfday_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "clockhourOfHalfday_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "halfdayOfDay_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dayOfWeek_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dayOfMonth_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dayOfYear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weekOfWeekyear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weekyear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weekyearOfCentury_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "monthOfYear_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "year_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "yearOfEra_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "yearOfCentury_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "centuryOfEra_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "era_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFieldsFrom", "LOrgJodaTimeChronology;", "isSupported", "LOrgJodaTimeDurationField;", "LOrgJodaTimeDateTimeField;", "LOrgJodaTimeChronoAssembledChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoAssembledChronology_Fields = { "Fields", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x19, 4, 35, 5, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoAssembledChronology_Fields;
}

@end

void OrgJodaTimeChronoAssembledChronology_Fields_init(OrgJodaTimeChronoAssembledChronology_Fields *self) {
  NSObject_init(self);
}

OrgJodaTimeChronoAssembledChronology_Fields *new_OrgJodaTimeChronoAssembledChronology_Fields_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoAssembledChronology_Fields, init)
}

OrgJodaTimeChronoAssembledChronology_Fields *create_OrgJodaTimeChronoAssembledChronology_Fields_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoAssembledChronology_Fields, init)
}

jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field) {
  OrgJodaTimeChronoAssembledChronology_Fields_initialize();
  return field == nil ? false : [field isSupported];
}

jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeChronoAssembledChronology_Fields_initialize();
  return field == nil ? false : [field isSupported];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoAssembledChronology_Fields)
