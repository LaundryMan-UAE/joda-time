//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/chrono/CopticChronology.java
//

#ifndef _OrgJodaTimeChronoCopticChronology_H_
#define _OrgJodaTimeChronoCopticChronology_H_

#include "J2ObjC_header.h"
#include "org/joda/time/chrono/BasicFixedMonthChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

#define OrgJodaTimeChronoCopticChronology_AM 1

/*!
 @brief Implements the Coptic calendar system, which defines every fourth year as
 leap, much like the Julian calendar.
 The year is broken down into 12 months,
 each 30 days in length. An extra period at the end of the year is either 5
 or 6 days in length. In this implementation, it is considered a 13th month.
 <p>
 Year 1 in the Coptic calendar began on August 29, 284 CE (Julian), thus
 Coptic years do not begin at the same time as Julian years. This chronology
 is not proleptic, as it does not allow dates before the first Coptic year.
 <p>
 This implementation defines a day as midnight to midnight exactly as per
 the ISO chronology. Some references indicate that a coptic day starts at
 sunset on the previous ISO day, but this has not been confirmed and is not
 implemented.
 <p>
 CopticChronology is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeChronoCopticChronology : OrgJodaTimeChronoBasicFixedMonthChronology

#pragma mark Public

/*!
 @brief Gets an instance of the CopticChronology in the default time zone.
 @return a chronology in the default time zone
 */
+ (OrgJodaTimeChronoCopticChronology *)getInstance;

/*!
 @brief Gets an instance of the CopticChronology in the given time zone.
 @param zone  the time zone to get the chronology in, null is default
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoCopticChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Gets an instance of the CopticChronology in the given time zone.
 @param zone  the time zone to get the chronology in, null is default
 @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoCopticChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                      withInt:(jint)minDaysInFirstWeek;

/*!
 @brief Gets an instance of the CopticChronology.
 The time zone of the returned instance is UTC.
 @return a singleton UTC instance of the chronology
 */
+ (OrgJodaTimeChronoCopticChronology *)getInstanceUTC;

/*!
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/*!
 @brief Gets the Chronology in a specific time zone.
 @param zone  the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

/*!
 @brief Restricted constructor.
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jlong)getApproxMillisAtEpochDividedByTwo;

- (jint)getMaxYear;

- (jint)getMinYear;

- (jboolean)isLeapDayWithLong:(jlong)instant;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoCopticChronology)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoCopticChronology, AM, jint)

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek);

FOUNDATION_EXPORT void OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoCopticChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *new_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoCopticChronology)

#endif // _OrgJodaTimeChronoCopticChronology_H_
