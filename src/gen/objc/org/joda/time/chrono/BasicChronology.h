//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/chrono/BasicChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeChronoBasicChronology")
#ifdef RESTRICT_OrgJodaTimeChronoBasicChronology
#define INCLUDE_ALL_OrgJodaTimeChronoBasicChronology 0
#else
#define INCLUDE_ALL_OrgJodaTimeChronoBasicChronology 1
#endif
#undef RESTRICT_OrgJodaTimeChronoBasicChronology

#if !defined (OrgJodaTimeChronoBasicChronology_) && (INCLUDE_ALL_OrgJodaTimeChronoBasicChronology || defined(INCLUDE_OrgJodaTimeChronoBasicChronology))
#define OrgJodaTimeChronoBasicChronology_

#define RESTRICT_OrgJodaTimeChronoAssembledChronology 1
#define INCLUDE_OrgJodaTimeChronoAssembledChronology 1
#include "org/joda/time/chrono/AssembledChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

/*!
 @brief Abstract implementation for calendar systems that use a typical
 day/month/year/leapYear model.
 Most of the utility methods required by subclasses are package-private,
 reflecting the intention that they be defined in the same package.
 <p>
 BasicChronology is thread-safe and immutable, and all subclasses must
 be as well.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @author Guy Allard
 @since 1.2, renamed from BaseGJChronology
 */
@interface OrgJodaTimeChronoBasicChronology : OrgJodaTimeChronoAssembledChronology

#pragma mark Public

/*!
 @brief Checks if this chronology instance equals another.
 @param obj  the object to compare to
 @return true if equal
 @since 1.6
 */
- (jboolean)isEqual:(id)obj;

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay;

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond;

- (jint)getMinimumDaysInFirstWeek;

- (OrgJodaTimeDateTimeZone *)getZone;

/*!
 @brief A suitable hash code for the chronology.
 @return the hash code
 @since 1.6
 */
- (NSUInteger)hash;

/*!
 @brief Gets a debugging toString.
 @return a debugging string
 */
- (NSString *)description;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

/*!
 @brief Gets the millisecond value of the first day of the year.
 @return the milliseconds for the first of the year
 */
- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

/*!
 @brief Returns a constant representing the approximate number of milliseconds
 elapsed from year 0 of this chronology, divided by two.
 This constant
 <em>must</em> be defined as:
 @code

    (yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch) / 2
  
@endcode
 where epoch is 1970-01-01 (Gregorian).
 */
- (jlong)getApproxMillisAtEpochDividedByTwo;

/*!
 @brief Gets an average value for the milliseconds per month.
 @return the millis per month
 */
- (jlong)getAverageMillisPerMonth;

/*!
 @brief Gets an average value for the milliseconds per year.
 @return the millis per year
 */
- (jlong)getAverageMillisPerYear;

/*!
 @brief Gets an average value for the milliseconds per year, divided by two.
 @return the millis per year divided by two
 */
- (jlong)getAverageMillisPerYearDividedByTwo;

/*!
 @brief Gets the milliseconds for a date at midnight.
 @param year  the year
 @param monthOfYear  the month
 @param dayOfMonth  the day
 @return the milliseconds
 */
- (jlong)getDateMidnightMillisWithInt:(jint)year
                              withInt:(jint)monthOfYear
                              withInt:(jint)dayOfMonth;

/*!
 @param millis from 1970-01-01T00:00:00Z
 */
- (jint)getDayOfMonthWithLong:(jlong)millis;

/*!
 @param millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (jint)getDayOfMonthWithLong:(jlong)millis
                      withInt:(jint)year;

/*!
 @param millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 @param month precalculated month of millis
 */
- (jint)getDayOfMonthWithLong:(jlong)millis
                      withInt:(jint)year
                      withInt:(jint)month;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (jint)getDayOfWeekWithLong:(jlong)instant;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (jint)getDayOfYearWithLong:(jlong)instant;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (jint)getDayOfYearWithLong:(jlong)instant
                     withInt:(jint)year;

/*!
 @brief Gets the maximum number of days in any month.
 @return 31
 */
- (jint)getDaysInMonthMax;

/*!
 @brief Gets the maximum days in the specified month.
 @param month  the month
 @return the max days
 */
- (jint)getDaysInMonthMaxWithInt:(jint)month;

/*!
 @brief Gets the maximum number of days in the month specified by the instant.
 @param instant  millis from 1970-01-01T00:00:00Z
 @return the maximum number of days in the month
 */
- (jint)getDaysInMonthMaxWithLong:(jlong)instant;

/*!
 @brief Gets the maximum number of days in the month specified by the instant.
 The value represents what the user is trying to set, and can be
 used to optimise this method.
 @param instant  millis from 1970-01-01T00:00:00Z
 @param value  the value being set
 @return the maximum number of days in the month
 */
- (jint)getDaysInMonthMaxForSetWithLong:(jlong)instant
                                withInt:(jint)value;

/*!
 @brief Get the number of days in the year.
 @param year  the year to use
 @return 366 if a leap year, otherwise 365
 */
- (jint)getDaysInYearWithInt:(jint)year;

/*!
 @brief Get the number of days in the year.
 @return 366
 */
- (jint)getDaysInYearMax;

/*!
 @brief Gets the number of days in the specified month and year.
 @param year  the year
 @param month  the month
 @return the number of days
 */
- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month;

/*!
 @brief Get the millis for the first week of a year.
 @param year  the year to use
 @return millis
 */
- (jlong)getFirstWeekOfYearMillisWithInt:(jint)year;

/*!
 @brief Gets the maximum number of months.
 @return 12
 */
- (jint)getMaxMonth;

/*!
 @brief Gets the maximum month for the specified year.
 This implementation calls getMaxMonth().
 @param year  the year
 @return the maximum month value
 */
- (jint)getMaxMonthWithInt:(jint)year;

/*!
 @brief Gets the maximum supported year.
 @return the year
 */
- (jint)getMaxYear;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (jint)getMillisOfDayWithLong:(jlong)instant;

/*!
 @brief Gets the minimum supported year.
 @return the year
 */
- (jint)getMinYear;

/*!
 @param millis from 1970-01-01T00:00:00Z
 */
- (jint)getMonthOfYearWithLong:(jlong)millis;

/*!
 @param millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year;

/*!
 @brief Gets the total number of millis elapsed in this year at the start
 of the specified month, such as zero for month 1.
 @param year  the year
 @param month  the month
 @return the elapsed millis at the start of the month
 */
- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (jint)getWeekOfWeekyearWithLong:(jlong)instant;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (jint)getWeekOfWeekyearWithLong:(jlong)instant
                          withInt:(jint)year;

/*!
 @brief Get the number of weeks in the year.
 @param year  the year to use
 @return number of weeks in the year
 */
- (jint)getWeeksInYearWithInt:(jint)year;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (jint)getWeekyearWithLong:(jlong)instant;

/*!
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (jint)getYearWithLong:(jlong)instant;

/*!
 @brief Gets the difference between the two instants in years.
 @param minuendInstant  the first instant
 @param subtrahendInstant  the second instant
 @return the difference
 */
- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant;

/*!
 @brief Get the milliseconds for the start of a year.
 @param year The year to use.
 @return millis from 1970-01-01T00:00:00Z
 */
- (jlong)getYearMillisWithInt:(jint)year;

/*!
 @brief Get the milliseconds for a particular date.
 @param year The year to use.
 @param month The month to use
 @param dayOfMonth The day of the month to use
 @return millis from 1970-01-01T00:00:00Z
 */
- (jlong)getYearMonthDayMillisWithInt:(jint)year
                              withInt:(jint)month
                              withInt:(jint)dayOfMonth;

/*!
 @brief Get the milliseconds for the start of a month.
 @param year The year to use.
 @param month The month to use
 @return millis from 1970-01-01T00:00:00Z
 */
- (jlong)getYearMonthMillisWithInt:(jint)year
                           withInt:(jint)month;

/*!
 @brief Is the specified instant a leap day?
 @param instant  the instant to test
 @return true if leap, default is false
 */
- (jboolean)isLeapDayWithLong:(jlong)instant;

/*!
 @brief Is the specified year a leap year?
 @param year  the year to test
 @return true if leap
 */
- (jboolean)isLeapYearWithInt:(jint)year;

/*!
 @brief Sets the year from an instant and year.
 @param instant  millis from 1970-01-01T00:00:00Z
 @param year  the year to set
 @return the updated millis
 */
- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoBasicChronology)

FOUNDATION_EXPORT void OrgJodaTimeChronoBasicChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoBasicChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBasicChronology)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeChronoBasicChronology")
