//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/chrono/IslamicChronology.java
//

#ifndef _OrgJodaTimeChronoIslamicChronology_H_
#define _OrgJodaTimeChronoIslamicChronology_H_

@class JavaUtilConcurrentConcurrentHashMap;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronoIslamicChronology_LeapYearPatternType;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeZone;

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/joda/time/chrono/BasicChronology.h"

#define OrgJodaTimeChronoIslamicChronology_AH 1
#define OrgJodaTimeChronoIslamicChronology_CYCLE 30
#define OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH 30
#define OrgJodaTimeChronoIslamicChronology_MAX_YEAR 292271022
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE 918518400000LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH 2592000000LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR 30672000000LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH 2551440384LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR 5097600000LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR 30585600000LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR 30617280288LL
#define OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 -42521587200000LL
#define OrgJodaTimeChronoIslamicChronology_MIN_YEAR -292269337
#define OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH 59
#define OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH 29
#define OrgJodaTimeChronoIslamicChronology_serialVersionUID -3663823829888LL

/**
 @brief Implements the Islamic, or Hijri, calendar system using arithmetic rules.
 <p> This calendar is a lunar calendar with a shorter year than ISO. Year 1 in the Islamic calendar began on July 16, 622 CE (Julian), thus Islamic years do not begin at the same time as Julian years. This chronology is not proleptic, as it does not allow dates before the first Islamic year. <p> There are two basic forms of the Islamic calendar, the tabular and the observed. The observed form cannot easily be used by computers as it relies on human observation of the new moon. The tabular calendar, implemented here, is an arithmetical approximation of the observed form that follows relatively simple rules. <p> The tabular form of the calendar defines 12 months of alternately 30 and 29 days. The last month is extended to 30 days in a leap year. Leap years occur according to a 30 year cycle. There are four recognised patterns of leap years in the 30 year cycle: <pre> Years 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 & 29 - 15-based, used by Microsoft Years 2, 5, 7, 10, 13, 16, 18, 21, 24, 26 & 29 - 16-based, most commonly used Years 2, 5, 8, 10, 13, 16, 19, 21, 24, 27 & 29 - Indian Years 2, 5, 8, 11, 13, 16, 19, 21, 24, 27 & 30 - Habash al-Hasib </pre> You can select which pattern to use via the factory methods, or use the default (16-based). <p> This implementation defines a day as midnight to midnight exactly as per the ISO chronology. This correct start of day is at sunset on the previous day, however this cannot readily be modelled and has been ignored. <p> IslamicChronology is thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.2
 */
@interface OrgJodaTimeChronoIslamicChronology : OrgJodaTimeChronoBasicChronology {
}

/**
 @brief Gets an instance of the IslamicChronology.
 The time zone of the returned instance is UTC.
 @return a singleton UTC instance of the chronology
 */
+ (OrgJodaTimeChronoIslamicChronology *)getInstanceUTC;

/**
 @brief Gets an instance of the IslamicChronology in the default time zone.
 @return a chronology in the default time zone
 */
+ (OrgJodaTimeChronoIslamicChronology *)getInstance;

/**
 @brief Gets an instance of the IslamicChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Gets an instance of the IslamicChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @param leapYears the type defining the leap year pattern
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears;

/**
 @brief Restricted constructor.
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears;

/**
 @brief Gets the leap year pattern type.
 @return the pattern type
 */
- (OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)getLeapYearPatternType;

/**
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/**
 @brief Gets the Chronology in a specific time zone.
 @param zone the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Checks if this chronology instance equals another.
 @param obj the object to compare to
 @return true if equal
 @since 2.3
 */
- (jboolean)isEqual:(id)obj;

/**
 @brief A suitable hash code for the chronology.
 @return the hash code
 @since 1.6
 */
- (NSUInteger)hash;

- (jint)getYearWithLong:(jlong)instant;

- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year;

- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant;

- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month;

- (jint)getDayOfMonthWithLong:(jlong)millis;

- (jboolean)isLeapYearWithInt:(jint)year;

- (jint)getDaysInYearMax;

- (jint)getDaysInYearWithInt:(jint)year;

- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month;

- (jint)getDaysInMonthMax;

- (jint)getDaysInMonthMaxWithInt:(jint)month;

- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year;

- (jlong)getAverageMillisPerYear;

- (jlong)getAverageMillisPerYearDividedByTwo;

- (jlong)getAverageMillisPerMonth;

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jint)getMinYear;

- (jint)getMaxYear;

- (jlong)getApproxMillisAtEpochDividedByTwo;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeChronoIslamicChronology_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeChronoIslamicChronology)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeDateTimeZone *zone, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *leapYears);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, AH, jint)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoIslamicChronology_ERA_FIELD_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, ERA_FIELD_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_15_BASED_, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_16_BASED_, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_INDIAN_, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_HABASH_AL_HASIB_, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MIN_YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MAX_YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MONTH_PAIR_LENGTH, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, LONG_MONTH_LENGTH, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, SHORT_MONTH_LENGTH, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_MONTH_PAIR, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_MONTH, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_LONG_MONTH, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_YEAR, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_SHORT_YEAR, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_LONG_YEAR, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_YEAR_1, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, CYCLE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_CYCLE, jlong)

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoIslamicChronology_cCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, cCache_, JavaUtilConcurrentConcurrentHashMap *)

FOUNDATION_EXPORT OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology, INSTANCE_UTC_, OrgJodaTimeChronoIslamicChronology *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoIslamicChronology)

#define OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_serialVersionUID 26581275372698LL

/**
 @brief Opaque object describing a leap year pattern for the Islamic Chronology.
 @since 1.2
 */
@interface OrgJodaTimeChronoIslamicChronology_LeapYearPatternType : NSObject < JavaIoSerializable > {
 @public
  /**
   @brief The index.
   */
  jbyte index_;
  /**
   @brief The leap year pattern, a bit-based 1=true pattern.
   */
  jint pattern_;
}

/**
 @brief Constructor.
 This constructor takes a bit pattern where bits 0-29 correspond to years 0-29 in the 30 year Islamic cycle of years. This allows a highly efficient lookup by bit-matching.
 @param index the index
 @param pattern the bit pattern
 */
- (instancetype)initWithInt:(jint)index
                    withInt:(jint)pattern;

/**
 @brief Is the year a leap year.
 @param year the year to query
 @return true if leap
 */
- (jboolean)isLeapYearWithInt:(jint)year;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType, serialVersionUID, jlong)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType)

#endif // _OrgJodaTimeChronoIslamicChronology_H_
