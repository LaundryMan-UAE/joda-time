//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/chrono/EthiopicChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeChronoEthiopicChronology")
#ifdef RESTRICT_OrgJodaTimeChronoEthiopicChronology
#define INCLUDE_ALL_OrgJodaTimeChronoEthiopicChronology 0
#else
#define INCLUDE_ALL_OrgJodaTimeChronoEthiopicChronology 1
#endif
#undef RESTRICT_OrgJodaTimeChronoEthiopicChronology

#if !defined (OrgJodaTimeChronoEthiopicChronology_) && (INCLUDE_ALL_OrgJodaTimeChronoEthiopicChronology || defined(INCLUDE_OrgJodaTimeChronoEthiopicChronology))
#define OrgJodaTimeChronoEthiopicChronology_

#define RESTRICT_OrgJodaTimeChronoBasicFixedMonthChronology 1
#define INCLUDE_OrgJodaTimeChronoBasicFixedMonthChronology 1
#include "org/joda/time/chrono/BasicFixedMonthChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

/*!
 @brief Implements the Ethiopic calendar system, which defines every fourth year as
  leap, much like the Julian calendar.The year is broken down into 12 months,
  each 30 days in length.
 An extra period at the end of the year is either 5
  or 6 days in length. In this implementation, it is considered a 13th month. 
 <p>
  Year 1 in the Ethiopic calendar began on August 29, 8 CE (Julian), thus
  Ethiopic years do not begin at the same time as Julian years. This chronology
  is not proleptic, as it does not allow dates before the first Ethiopic year. 
 <p>
  This implementation defines a day as midnight to midnight exactly as per
  the ISO chronology. Some references indicate that a coptic day starts at
  sunset on the previous ISO day, but this has not been confirmed and is not
  implemented. 
 <p>
  EthiopicChronology is thread-safe and immutable.
 - seealso: <a href="http://en.wikipedia.org/wiki/Ethiopian_calendar">Wikipedia</a>
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.2
 */
@interface OrgJodaTimeChronoEthiopicChronology : OrgJodaTimeChronoBasicFixedMonthChronology

#pragma mark Public

/*!
 @brief Gets an instance of the EthiopicChronology in the default time zone.
 @return a chronology in the default time zone
 */
+ (OrgJodaTimeChronoEthiopicChronology *)getInstance;

/*!
 @brief Gets an instance of the EthiopicChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoEthiopicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Gets an instance of the EthiopicChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @param minDaysInFirstWeek minimum number of days in first week of the year; default is 4
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoEthiopicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                        withInt:(jint)minDaysInFirstWeek;

/*!
 @brief Gets an instance of the EthiopicChronology.
 The time zone of the returned instance is UTC.
 @return a singleton UTC instance of the chronology
 */
+ (OrgJodaTimeChronoEthiopicChronology *)getInstanceUTC;

/*!
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/*!
 @brief Gets the Chronology in a specific time zone.
 @param zone the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

/*!
 @brief Restricted constructor.
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jlong)getApproxMillisAtEpochDividedByTwo;

- (jint)getMaxYear;

- (jint)getMinYear;

- (jboolean)isLeapDayWithLong:(jlong)instant;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoEthiopicChronology)

/*!
 @brief Constant value for 'Ethiopean Era', equivalent
  to the value returned for AD/CE.
 */
inline jint OrgJodaTimeChronoEthiopicChronology_get_EE(void);
#define OrgJodaTimeChronoEthiopicChronology_EE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoEthiopicChronology, EE, jint)

FOUNDATION_EXPORT OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstanceUTC(void);

FOUNDATION_EXPORT OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstance(void);

FOUNDATION_EXPORT OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoEthiopicChronology *OrgJodaTimeChronoEthiopicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek);

FOUNDATION_EXPORT void OrgJodaTimeChronoEthiopicChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoEthiopicChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

FOUNDATION_EXPORT OrgJodaTimeChronoEthiopicChronology *new_OrgJodaTimeChronoEthiopicChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoEthiopicChronology *create_OrgJodaTimeChronoEthiopicChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoEthiopicChronology)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeChronoEthiopicChronology")
