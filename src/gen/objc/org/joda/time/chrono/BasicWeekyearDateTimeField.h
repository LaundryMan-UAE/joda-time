//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeChronoBasicWeekyearDateTimeField_INCLUDE_ALL")
#ifdef OrgJodaTimeChronoBasicWeekyearDateTimeField_RESTRICT
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_INCLUDE_ALL 0
#else
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeChronoBasicWeekyearDateTimeField_RESTRICT

#if !defined (OrgJodaTimeChronoBasicWeekyearDateTimeField_) && (OrgJodaTimeChronoBasicWeekyearDateTimeField_INCLUDE_ALL || defined(OrgJodaTimeChronoBasicWeekyearDateTimeField_INCLUDE))
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_

#define OrgJodaTimeFieldImpreciseDateTimeField_RESTRICT 1
#define OrgJodaTimeFieldImpreciseDateTimeField_INCLUDE 1
#include "org/joda/time/field/ImpreciseDateTimeField.h"

@class OrgJodaTimeChronoBasicChronology;
@class OrgJodaTimeDurationField;

/*!
 @brief Provides time calculations for the week of the weekyear component of time.
 @author Guy Allard
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.1, refactored from GJWeekyearDateTimeField
 */
@interface OrgJodaTimeChronoBasicWeekyearDateTimeField : OrgJodaTimeFieldImpreciseDateTimeField

#pragma mark Public

/*!
 @brief Add the specified years to the specified time instant.
 - seealso: org.joda.time.DateTimeField#add
 @param instant  the time instant in millis to update.
 @param years  the years to add (can be negative).
 @return the updated time instant.
 */
- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

/*!
 @brief Add to the year component of the specified time instant
 wrapping around within that component if necessary.
 - seealso: org.joda.time.DateTimeField#addWrapField
 @param instant  the time instant in millis to update.
 @param years  the years to add (can be negative).
 @return the updated time instant.
 */
- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years;

/*!
 @brief Get the Year of a week based year component of the specified time instant.
 - seealso: org.joda.time.DateTimeField#get
 @param instant  the time instant in millis to query.
 @return the year extracted from the input.
 */
- (jint)getWithLong:(jlong)instant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jint)getLeapAmountWithLong:(jlong)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (jint)getMaximumValue;

- (jint)getMinimumValue;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jboolean)isLeapWithLong:(jlong)instant;

- (jboolean)isLenient;

- (jlong)remainderWithLong:(jlong)instant;

- (jlong)roundFloorWithLong:(jlong)instant;

/*!
 @brief Set the Year of a week based year component of the specified time instant.
 - seealso: org.joda.time.DateTimeField#set
 @param instant  the time instant in millis to update.
 @param year  the year (-9999,9999) to set the date to.
 @return the updated DateTime.
 @throws IllegalArgumentException  if year is invalid.
 */
- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year;

#pragma mark Package-Private

/*!
 @brief Restricted constructor
 */
- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoBasicWeekyearDateTimeField)

FOUNDATION_EXPORT void OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicWeekyearDateTimeField *self, OrgJodaTimeChronoBasicChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeChronoBasicWeekyearDateTimeField *new_OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoBasicWeekyearDateTimeField *create_OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBasicWeekyearDateTimeField)

#endif

#pragma pop_macro("OrgJodaTimeChronoBasicWeekyearDateTimeField_INCLUDE_ALL")
