//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/ReadableInstant.java
//

#ifndef _OrgJodaTimeReadableInstant_H_
#define _OrgJodaTimeReadableInstant_H_

@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeInstant;

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

/**
 @brief Defines an instant in the datetime continuum.
 This interface expresses the datetime as milliseconds from 1970-01-01T00:00:00Z. <p> The implementation of this interface may be mutable or immutable. This interface only gives access to retrieve data, never to change it. <p> Methods in your application should be defined using <code>ReadableInstant</code> as a parameter if the method only wants to read the instant without needing to know the specific datetime fields. <p> The <code>compareTo</code> method is no longer defined in this class in version 2.0. Instead, the definition is simply inherited from the <code>Comparable</code> interface. This approach is necessary to preserve binary compatibility. The definition of the comparison is ascending order by millisecond instant. Implementors are recommended to extend <code>AbstractInstant</code> instead of this interface.
 @author Stephen Colebourne
 @since 1.0
 */
@protocol OrgJodaTimeReadableInstant < JavaLangComparable, NSObject, JavaObject >
/**
 @brief Get the value as the number of milliseconds since the epoch, 1970-01-01T00:00:00Z.
 @return the value as milliseconds
 */
- (jlong)getMillis;

/**
 @brief Gets the chronology of the instant.
 <p> The Chronology provides conversion from the millisecond value to meaningful fields in a particular calendar system.
 @return the Chronology, never null
 */
- (OrgJodaTimeChronology *)getChronology;

/**
 @brief Gets the time zone of the instant from the chronology.
 @return the DateTimeZone that the instant is using, never null
 */
- (OrgJodaTimeDateTimeZone *)getZone;

/**
 @brief Get the value of one of the fields of a datetime.
 <p> This method uses the chronology of the instant to obtain the value.
 @param type a field type, usually obtained from DateTimeFieldType, not null
 @return the value of that field
 @throws IllegalArgumentException if the field type is null
 */
- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Checks whether the field type specified is supported by this implementation.
 @param field the field type to check, may be null which returns false
 @return true if the field is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)field;

/**
 @brief Get the value as a simple immutable <code>Instant</code> object.
 <p> This can be useful if you don't trust the implementation of the interface to be well-behaved, or to get a guaranteed immutable object.
 @return the value as an <code>Instant</code> object
 */
- (OrgJodaTimeInstant *)toInstant;

/**
 @brief Is this instant equal to the instant passed in comparing solely by millisecond.
 @param instant an instant to check against, null means now
 @return true if the instant is equal to the instant passed in
 */
- (jboolean)isEqualWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/**
 @brief Is this instant after the instant passed in comparing solely by millisecond.
 @param instant an instant to check against, null means now
 @return true if the instant is after the instant passed in
 */
- (jboolean)isAfterWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/**
 @brief Is this instant before the instant passed in comparing solely by millisecond.
 @param instant an instant to check against, null means now
 @return true if the instant is before the instant passed in
 */
- (jboolean)isBeforeWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/**
 @brief Compares this object with the specified object for equality based on the millisecond instant and the Chronology.
 All ReadableInstant instances are accepted. <p> To compare two instants for absolute time (ie. UTC milliseconds ignoring the chronology), use #isEqual(ReadableInstant) or #compareTo(Object) .
 @param readableInstant a readable instant to check against
 @return true if millisecond and chronology are equal, false if not or the instant is null or of an incorrect type
 */
- (jboolean)isEqual:(id)readableInstant;

/**
 @brief Gets a hash code for the instant that is compatible with the equals method.
 <p> The formula used must be as follows: <pre> ((int) (getMillis() ^ (getMillis() >>> 32))) + (getChronology().hashCode()) </pre>
 @return a hash code as defined above
 */
- (NSUInteger)hash;

/**
 @brief Get the value as a String in a recognisable ISO8601 format.
 <p> The string output is in ISO8601 format to enable the String constructor to correctly parse it.
 @return the value as an ISO8601 string
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeReadableInstant)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeReadableInstant)

#endif // _OrgJodaTimeReadableInstant_H_
