//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/YearMonthDay.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateMidnight.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/Interval.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/TimeOfDay.h"
#include "org/joda/time/YearMonthDay.h"
#include "org/joda/time/base/AbstractPartial.h"
#include "org/joda/time/base/BasePartial.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/field/AbstractPartialFieldProperty.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

@interface OrgJodaTimeYearMonthDay () {
}
@end

@interface OrgJodaTimeYearMonthDay_Property () {
 @public
  /**
   @brief The partial
   */
  OrgJodaTimeYearMonthDay *iYearMonthDay_;
  /**
   @brief The field index
   */
  jint iFieldIndex_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeYearMonthDay_Property, iYearMonthDay_, OrgJodaTimeYearMonthDay *)

BOOL OrgJodaTimeYearMonthDay_initialized = NO;

@implementation OrgJodaTimeYearMonthDay

IOSObjectArray * OrgJodaTimeYearMonthDay_FIELD_TYPES_;

+ (OrgJodaTimeYearMonthDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeYearMonthDay_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeYearMonthDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeYearMonthDay_fromDateFieldsWithJavaUtilDate_(date);
}

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(jlong)instant {
  return [super initWithLong:instant];
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [super initWithId:instant withOrgJodaTimeChronology:nil withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_dateOptionalTimeParser()];
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithId:instant withOrgJodaTimeChronology:OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology) withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_dateOptionalTimeParser()];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth {
  return [self initOrgJodaTimeYearMonthDayWithInt:year withInt:monthOfYear withInt:dayOfMonth withOrgJodaTimeChronology:nil];
}

- (instancetype)initOrgJodaTimeYearMonthDayWithInt:(jint)year
                                           withInt:(jint)monthOfYear
                                           withInt:(jint)dayOfMonth
                         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ year, monthOfYear, dayOfMonth } count:3] withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeYearMonthDayWithInt:year withInt:monthOfYear withInt:dayOfMonth withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithOrgJodaTimeYearMonthDay:(OrgJodaTimeYearMonthDay *)partial
                                   withIntArray:(IOSIntArray *)values {
  return [super initWithOrgJodaTimeBaseBasePartial:partial withIntArray:values];
}

- (instancetype)initWithOrgJodaTimeYearMonthDay:(OrgJodaTimeYearMonthDay *)partial
                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [super initWithOrgJodaTimeBaseBasePartial:partial withOrgJodaTimeChronology:chrono];
}

- (jint)size {
  return 3;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeYearMonthDay_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) year];
    case OrgJodaTimeYearMonthDay_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeYearMonthDay_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(OrgJodaTimeYearMonthDay_FIELD_TYPES_), index);
}

- (IOSObjectArray *)getFieldTypes {
  return (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(OrgJodaTimeYearMonthDay_FIELD_TYPES_)) clone], [IOSObjectArray class]);
}

- (OrgJodaTimeYearMonthDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimeYearMonthDay *newYearMonthDay = [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withOrgJodaTimeChronology:newChronology] autorelease];
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newYearMonthDay withIntArray:[self getValues]];
    return newYearMonthDay;
  }
}

- (OrgJodaTimeYearMonthDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                               withInt:(jint)value {
  jint index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                    withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                                  withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    jint index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar)];
    }
  }
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeYearMonthDay *)plusYearsWithInt:(jint)years {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_years() withInt:years];
}

- (OrgJodaTimeYearMonthDay *)plusMonthsWithInt:(jint)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_months() withInt:months];
}

- (OrgJodaTimeYearMonthDay *)plusDaysWithInt:(jint)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withInt:days];
}

- (OrgJodaTimeYearMonthDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeYearMonthDay *)minusYearsWithInt:(jint)years {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_years() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(years)];
}

- (OrgJodaTimeYearMonthDay *)minusMonthsWithInt:(jint)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_months() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(months)];
}

- (OrgJodaTimeYearMonthDay *)minusDaysWithInt:(jint)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(days)];
}

- (OrgJodaTimeYearMonthDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [[[OrgJodaTimeYearMonthDay_Property alloc] initWithOrgJodaTimeYearMonthDay:self withInt:[self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]] autorelease];
}

- (OrgJodaTimeLocalDate *)toLocalDate {
  return [[[OrgJodaTimeLocalDate alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withOrgJodaTimeChronology:[self getChronology]] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnight {
  return [self toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateTime alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withInt:0 withInt:0 withInt:0 withInt:0 withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTime {
  return [self toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return [[[OrgJodaTimeDateTime alloc] initWithLong:resolved withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateMidnight *)toDateMidnight {
  return [self toDateMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateMidnight *)toDateMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateMidnight alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)time {
  return [self toDateTimeWithOrgJodaTimeTimeOfDay:time withOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)time
                                withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instant = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  instant = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instant];
  if (time != nil) {
    instant = [chrono setWithOrgJodaTimeReadablePartial:time withLong:instant];
  }
  return [[[OrgJodaTimeDateTime alloc] initWithLong:instant withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeInterval *)toInterval {
  return [self toIntervalWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  return [((OrgJodaTimeDateMidnight *) nil_chk([self toDateMidnightWithOrgJodaTimeDateTimeZone:zone])) toInterval];
}

- (jint)getYear {
  return [self getValueWithInt:OrgJodaTimeYearMonthDay_YEAR];
}

- (jint)getMonthOfYear {
  return [self getValueWithInt:OrgJodaTimeYearMonthDay_MONTH_OF_YEAR];
}

- (jint)getDayOfMonth {
  return [self getValueWithInt:OrgJodaTimeYearMonthDay_DAY_OF_MONTH];
}

- (OrgJodaTimeYearMonthDay *)withYearWithInt:(jint)year {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeYearMonthDay_YEAR withIntArray:newValues withInt:year];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)withMonthOfYearWithInt:(jint)monthOfYear {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeYearMonthDay_MONTH_OF_YEAR withIntArray:newValues withInt:monthOfYear];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)withDayOfMonthWithInt:(jint)dayOfMonth {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeYearMonthDay_DAY_OF_MONTH withIntArray:newValues withInt:dayOfMonth];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:self withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay_Property *)year {
  return [[[OrgJodaTimeYearMonthDay_Property alloc] initWithOrgJodaTimeYearMonthDay:self withInt:OrgJodaTimeYearMonthDay_YEAR] autorelease];
}

- (OrgJodaTimeYearMonthDay_Property *)monthOfYear {
  return [[[OrgJodaTimeYearMonthDay_Property alloc] initWithOrgJodaTimeYearMonthDay:self withInt:OrgJodaTimeYearMonthDay_MONTH_OF_YEAR] autorelease];
}

- (OrgJodaTimeYearMonthDay_Property *)dayOfMonth {
  return [[[OrgJodaTimeYearMonthDay_Property alloc] initWithOrgJodaTimeYearMonthDay:self withInt:OrgJodaTimeYearMonthDay_DAY_OF_MONTH] autorelease];
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_yearMonthDay())) printWithOrgJodaTimeReadablePartial:self];
}

+ (void)initialize {
  if (self == [OrgJodaTimeYearMonthDay class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeYearMonthDay_FIELD_TYPES_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeDateTimeFieldType_year(), OrgJodaTimeDateTimeFieldType_monthOfYear(), OrgJodaTimeDateTimeFieldType_dayOfMonth() } count:3 type:OrgJodaTimeDateTimeFieldType_class_()]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeYearMonthDay)
  }
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.YearMonthDay;", 0x9, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.YearMonthDay;", 0x9, NULL },
    { "init", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithLong:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithId:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withOrgJodaTimeChronology:", "YearMonthDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeYearMonthDay:withIntArray:", "YearMonthDay", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeYearMonthDay:withOrgJodaTimeChronology:", "YearMonthDay", NULL, 0x0, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL },
    { "getFieldTypeWithInt:", "getFieldType", "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "getFieldTypes", NULL, "[Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "withChronologyRetainFieldsWithOrgJodaTimeChronology:", "withChronologyRetainFields", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "plusYearsWithInt:", "plusYears", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "plusMonthsWithInt:", "plusMonths", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "plusDaysWithInt:", "plusDays", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "minusYearsWithInt:", "minusYears", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "minusMonthsWithInt:", "minusMonths", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "minusDaysWithInt:", "minusDays", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.YearMonthDay$Property;", 0x1, NULL },
    { "toLocalDate", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "toDateTimeAtMidnight", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:", "toDateTimeAtMidnight", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtCurrentTime", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:", "toDateTimeAtCurrentTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateMidnight", NULL, "Lorg.joda.time.DateMidnight;", 0x1, NULL },
    { "toDateMidnightWithOrgJodaTimeDateTimeZone:", "toDateMidnight", "Lorg.joda.time.DateMidnight;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeTimeOfDay:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeTimeOfDay:withOrgJodaTimeDateTimeZone:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toInterval", NULL, "Lorg.joda.time.Interval;", 0x1, NULL },
    { "toIntervalWithOrgJodaTimeDateTimeZone:", "toInterval", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "getYear", NULL, "I", 0x1, NULL },
    { "getMonthOfYear", NULL, "I", 0x1, NULL },
    { "getDayOfMonth", NULL, "I", 0x1, NULL },
    { "withYearWithInt:", "withYear", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withMonthOfYearWithInt:", "withMonthOfYear", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withDayOfMonthWithInt:", "withDayOfMonth", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "year", NULL, "Lorg.joda.time.YearMonthDay$Property;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.YearMonthDay$Property;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.YearMonthDay$Property;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeYearMonthDay_serialVersionUID },
    { "FIELD_TYPES_", NULL, 0x1a, "[Lorg.joda.time.DateTimeFieldType;", &OrgJodaTimeYearMonthDay_FIELD_TYPES_,  },
    { "YEAR_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeYearMonthDay_YEAR },
    { "MONTH_OF_YEAR_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeYearMonthDay_MONTH_OF_YEAR },
    { "DAY_OF_MONTH_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeYearMonthDay_DAY_OF_MONTH },
  };
  static const J2ObjcClassInfo _OrgJodaTimeYearMonthDay = { 1, "YearMonthDay", "org.joda.time", NULL, 0x11, 51, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeYearMonthDay;
}

@end

OrgJodaTimeYearMonthDay *OrgJodaTimeYearMonthDay_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeYearMonthDay_init();
  if (calendar == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The calendar must not be null"] autorelease];
  }
  return [[[OrgJodaTimeYearMonthDay alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_YEAR] withInt:[calendar getWithInt:JavaUtilCalendar_MONTH] + 1 withInt:[calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]] autorelease];
}

OrgJodaTimeYearMonthDay *OrgJodaTimeYearMonthDay_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeYearMonthDay_init();
  if (date == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The date must not be null"] autorelease];
  }
  return [[[OrgJodaTimeYearMonthDay alloc] initWithInt:[((JavaUtilDate *) nil_chk(date)) getYear] + 1900 withInt:[date getMonth] + 1 withInt:[date getDate]] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeYearMonthDay)

@implementation OrgJodaTimeYearMonthDay_Property

- (instancetype)initWithOrgJodaTimeYearMonthDay:(OrgJodaTimeYearMonthDay *)partial
                                        withInt:(jint)fieldIndex {
  if (self = [super init]) {
    OrgJodaTimeYearMonthDay_Property_set_iYearMonthDay_(self, partial);
    iFieldIndex_ = fieldIndex;
  }
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iYearMonthDay_;
}

- (OrgJodaTimeYearMonthDay *)getYearMonthDay {
  return iYearMonthDay_;
}

- (jint)get {
  return [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimeYearMonthDay *)addToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:iYearMonthDay_ withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)addWrapFieldToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:iYearMonthDay_ withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)setCopyWithInt:(jint)value {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:iYearMonthDay_ withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)setCopyWithNSString:(NSString *)text
                              withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return [[[OrgJodaTimeYearMonthDay alloc] initWithOrgJodaTimeYearMonthDay:iYearMonthDay_ withIntArray:newValues] autorelease];
}

- (OrgJodaTimeYearMonthDay *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeYearMonthDay *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeYearMonthDay *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (void)dealloc {
  RELEASE_(iYearMonthDay_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeYearMonthDay_Property *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeYearMonthDay_Property_set_iYearMonthDay_(other, iYearMonthDay_);
  other->iFieldIndex_ = iFieldIndex_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeYearMonthDay:withInt:", "Property", NULL, 0x0, NULL },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getReadablePartial", NULL, "Lorg.joda.time.ReadablePartial;", 0x4, NULL },
    { "getYearMonthDay", NULL, "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "get", NULL, "I", 0x1, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeYearMonthDay_Property_serialVersionUID },
    { "iYearMonthDay_", NULL, 0x12, "Lorg.joda.time.YearMonthDay;", NULL,  },
    { "iFieldIndex_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeYearMonthDay_Property = { 1, "Property", "org.joda.time", "YearMonthDay", 0x9, 12, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeYearMonthDay_Property;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeYearMonthDay_Property)
