//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/MutableDateTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeMutableDateTime_INCLUDE_ALL")
#ifdef OrgJodaTimeMutableDateTime_RESTRICT
#define OrgJodaTimeMutableDateTime_INCLUDE_ALL 0
#else
#define OrgJodaTimeMutableDateTime_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeMutableDateTime_RESTRICT

#if !defined (OrgJodaTimeMutableDateTime_) && (OrgJodaTimeMutableDateTime_INCLUDE_ALL || defined(OrgJodaTimeMutableDateTime_INCLUDE))
#define OrgJodaTimeMutableDateTime_

#define OrgJodaTimeBaseBaseDateTime_RESTRICT 1
#define OrgJodaTimeBaseBaseDateTime_INCLUDE 1
#include "org/joda/time/base/BaseDateTime.h"

#define OrgJodaTimeReadWritableDateTime_RESTRICT 1
#define OrgJodaTimeReadWritableDateTime_INCLUDE 1
#include "org/joda/time/ReadWritableDateTime.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeMutableDateTime_Property;
@protocol OrgJodaTimeReadableDuration;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadablePeriod;

/*!
 @brief MutableDateTime is the standard implementation of a modifiable datetime class.
 It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.
 <p>
 This class uses a Chronology internally. The Chronology determines how the
 millisecond instant value is converted into the date time fields.
 The default Chronology is <code>ISOChronology</code> which is the agreed
 international standard and compatible with the modern Gregorian calendar.
 <p>
 Each individual field can be accessed in two ways:
 <ul>
 <li><code>getHourOfDay()</code>
 <li><code>hourOfDay().get()</code>
 </ul>
 The second technique also provides access to other useful methods on the
 field:
 <ul>
 <li>get numeric value
 <li>set numeric value
 <li>add to numeric value
 <li>add to numeric value wrapping with the field
 <li>get text value
 <li>get short text value
 <li>set text value
 <li>field maximum value
 <li>field minimum value
 </ul>
 <p>
 MutableDateTime is mutable and not thread-safe, unless concurrent threads
 are not invoking mutator methods.
 @author Guy Allard
 @author Brian S O'Neill
 @author Stephen Colebourne
 @author Mike Schrag
 @since 1.0
 - seealso: DateTime
 */
@interface OrgJodaTimeMutableDateTime : OrgJodaTimeBaseBaseDateTime < OrgJodaTimeReadWritableDateTime, NSCopying, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs an instance set to the current system millisecond time
 using <code>ISOChronology</code> in the default time zone.
 - seealso: #now()
 */
- (instancetype)init;

/*!
 @brief Constructs an instance set to the current system millisecond time
 using the specified chronology.
 <p>
 If the chronology is null, <code>ISOChronology</code>
 in the default time zone is used.
 @param chronology  the chronology, null means ISOChronology in default zone
 - seealso: #now(Chronology)
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the current system millisecond time
 using <code>ISOChronology</code> in the specified time zone.
 <p>
 If the specified time zone is null, the default zone is used.
 @param zone  the time zone, null means default zone
 - seealso: #now(DateTimeZone)
 */
- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance from datetime field values
 using <code>ISOChronology</code> in the default time zone.
 @param year  the year
 @param monthOfYear  the month of the year
 @param dayOfMonth  the day of the month
 @param hourOfDay  the hour of the day
 @param minuteOfHour  the minute of the hour
 @param secondOfMinute  the second of the minute
 @param millisOfSecond  the millisecond of the second
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond;

/*!
 @brief Constructs an instance from datetime field values
 using the specified chronology.
 <p>
 If the chronology is null, <code>ISOChronology</code>
 in the default time zone is used.
 @param year  the year
 @param monthOfYear  the month of the year
 @param dayOfMonth  the day of the month
 @param hourOfDay  the hour of the day
 @param minuteOfHour  the minute of the hour
 @param secondOfMinute  the second of the minute
 @param millisOfSecond  the millisecond of the second
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance from datetime field values
 using <code>ISOChronology</code> in the specified time zone.
 <p>
 If the specified time zone is null, the default zone is used.
 @param year  the year
 @param monthOfYear  the month of the year
 @param dayOfMonth  the day of the month
 @param hourOfDay  the hour of the day
 @param minuteOfHour  the minute of the hour
 @param secondOfMinute  the second of the minute
 @param millisOfSecond  the millisecond of the second
 @param zone  the time zone, null means default time zone
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
 using <code>ISOChronology</code> in the default time zone.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 */
- (instancetype)initWithLong:(jlong)instant;

/*!
 @brief Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
 using the specified chronology.
 <p>
 If the chronology is null, <code>ISOChronology</code>
 in the default time zone is used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param chronology  the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
 using <code>ISOChronology</code> in the specified time zone.
 <p>
 If the specified time zone is null, the default zone is used.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z
 @param zone  the time zone, null means default zone
 */
- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Constructs an instance from an Object that represents a datetime.
 <p>
 If the object implies a chronology (such as GregorianCalendar does),
 then that chronology will be used. Otherwise, ISO default is used.
 Thus if a GregorianCalendar is passed in, the chronology used will
 be GJ, but if a Date is passed in the chronology will be ISO.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadableInstant, String, Calendar and Date.
 @param instant  the datetime object, null means now
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant;

/*!
 @brief Constructs an instance from an Object that represents a datetime,
 using the specified chronology.
 <p>
 If the chronology is null, ISO in the default time zone is used.
 Any chronology implied by the object (such as GregorianCalendar does)
 is ignored.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadableInstant, String, Calendar and Date.
 @param instant  the datetime object, null means now
 @param chronology  the chronology, null means ISOChronology in default zone
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Constructs an instance from an Object that represents a datetime,
 forcing the time zone to that specified.
 <p>
 If the object implies a chronology (such as GregorianCalendar does),
 then that chronology will be used, but with the time zone adjusted.
 Otherwise, ISO is used in the specified time zone.
 If the specified time zone is null, the default zone is used.
 Thus if a GregorianCalendar is passed in, the chronology used will
 be GJ, but if a Date is passed in the chronology will be ISO.
 <p>
 The recognised object types are defined in
 <code>ConverterManager</code> and
 include ReadableInstant, String, Calendar and Date.
 @param instant  the datetime object, null means now
 @param zone  the time zone, null means default time zone
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Adds to the instant specifying the duration and multiple to add.
 @param type  a field type, usually obtained from DateTimeFieldType, not null
 @param amount  the amount to add of this duration
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                    withInt:(jint)amount;

/*!
 @brief Add an amount of time to the datetime.
 @param duration  the millis to add
 @throws ArithmeticException if the result exceeds the capacity of the instant
 */
- (void)addWithLong:(jlong)duration;

/*!
 @brief Adds a duration to this instant.
 <p>
 This will typically change the value of most fields.
 @param duration  the duration to add, null means add zero
 @throws ArithmeticException if the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/*!
 @brief Adds a duration to this instant specifying how many times to add.
 <p>
 This will typically change the value of most fields.
 @param duration  the duration to add, null means add zero
 @param scalar  direction and amount to add, which may be negative
 @throws ArithmeticException if the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                                   withInt:(jint)scalar;

/*!
 @brief Adds a period to this instant.
 <p>
 This will typically change the value of most fields.
 @param period  the period to add, null means add zero
 @throws ArithmeticException if the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/*!
 @brief Adds a period to this instant specifying how many times to add.
 <p>
 This will typically change the value of most fields.
 @param period  the period to add, null means add zero
 @param scalar  direction and amount to add, which may be negative
 @throws ArithmeticException if the result exceeds the capacity of the instant
 */
- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                 withInt:(jint)scalar;

/*!
 @brief Add a number of days to the date.
 @param days  the days to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addDaysWithInt:(jint)days;

/*!
 @brief Add a number of hours to the date.
 @param hours  the hours to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addHoursWithInt:(jint)hours;

/*!
 @brief Add a number of milliseconds to the date.
 The implementation of this
 method differs from the <code>add(long)</code> method in that a
 DateTimeField performs the addition.
 @param millis  the milliseconds to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addMillisWithInt:(jint)millis;

/*!
 @brief Add a number of minutes to the date.
 @param minutes  the minutes to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addMinutesWithInt:(jint)minutes;

/*!
 @brief Add a number of months to the date.
 @param months  the months to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addMonthsWithInt:(jint)months;

/*!
 @brief Add a number of seconds to the date.
 @param seconds  the seconds to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addSecondsWithInt:(jint)seconds;

/*!
 @brief Add a number of weeks to the date.
 @param weeks  the weeks to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addWeeksWithInt:(jint)weeks;

/*!
 @brief Add a number of weekyears to the date.
 @param weekyears  the weekyears to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addWeekyearsWithInt:(jint)weekyears;

/*!
 @brief Add a number of years to the date.
 @param years  the years to add
 @throws IllegalArgumentException if the value is invalid
 */
- (void)addYearsWithInt:(jint)years;

/*!
 @brief Get the century of era property.
 @return the year of era property
 */
- (OrgJodaTimeMutableDateTime_Property *)centuryOfEra;

/*!
 @brief Clone this object.
 @return a clone of this object.
 */
- (id)clone;

/*!
 @brief Clone this object without having to cast the returned object.
 @return a clone of the this object.
 */
- (OrgJodaTimeMutableDateTime *)copy__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Get the day of month property.
 <p>
 The values for day of month are defined in <code>DateTimeConstants</code>.
 @return the day of month property
 */
- (OrgJodaTimeMutableDateTime_Property *)dayOfMonth;

/*!
 @brief Get the day of week property.
 <p>
 The values for day of week are defined in <code>DateTimeConstants</code>.
 @return the day of week property
 */
- (OrgJodaTimeMutableDateTime_Property *)dayOfWeek;

/*!
 @brief Get the day of year property.
 @return the day of year property
 */
- (OrgJodaTimeMutableDateTime_Property *)dayOfYear;

/*!
 @brief Get the era property.
 @return the era property
 */
- (OrgJodaTimeMutableDateTime_Property *)era;

/*!
 @brief Gets the field used for rounding this instant, returning null if rounding
 is not enabled.
 @return the rounding field
 */
- (OrgJodaTimeDateTimeField *)getRoundingField;

/*!
 @brief Gets the rounding mode for this instant, returning ROUND_NONE if rounding
 is not enabled.
 @return the rounding mode constant
 */
- (jint)getRoundingMode;

/*!
 @brief Get the hour of day field property
 @return the hour of day property
 */
- (OrgJodaTimeMutableDateTime_Property *)hourOfDay;

/*!
 @brief Get the millis of day property
 @return the millis of day property
 */
- (OrgJodaTimeMutableDateTime_Property *)millisOfDay;

/*!
 @brief Get the millis of second property
 @return the millis of second property
 */
- (OrgJodaTimeMutableDateTime_Property *)millisOfSecond;

/*!
 @brief Get the minute of day property
 @return the minute of day property
 */
- (OrgJodaTimeMutableDateTime_Property *)minuteOfDay;

/*!
 @brief Get the minute of hour field property
 @return the minute of hour property
 */
- (OrgJodaTimeMutableDateTime_Property *)minuteOfHour;

/*!
 @brief Get the month of year property.
 @return the month of year property
 */
- (OrgJodaTimeMutableDateTime_Property *)monthOfYear;

/*!
 @brief Obtains a <code>MutableDateTime</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the default time zone.
 @return the current date-time, not null
 @since 2.0
 */
+ (OrgJodaTimeMutableDateTime *)now;

/*!
 @brief Obtains a <code>MutableDateTime</code> set to the current system millisecond time
 using the specified chronology.
 @param chronology  the chronology, not null
 @return the current date-time, not null
 @since 2.0
 */
+ (OrgJodaTimeMutableDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Obtains a <code>MutableDateTime</code> set to the current system millisecond time
 using <code>ISOChronology</code> in the specified time zone.
 @param zone  the time zone, not null
 @return the current date-time, not null
 @since 2.0
 */
+ (OrgJodaTimeMutableDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/*!
 @brief Parses a <code>MutableDateTime</code> from the specified string.
 <p>
 This uses <code>ISODateTimeFormat.dateTimeParser()</code>.
 @param str  the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeMutableDateTime *)parseWithNSString:(NSString *)str;

/*!
 @brief Parses a <code>MutableDateTime</code> from the specified string using a formatter.
 @param str  the string to parse, not null
 @param formatter  the formatter to use, not null
 @since 2.0
 */
+ (OrgJodaTimeMutableDateTime *)parseWithNSString:(NSString *)str
           withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Gets the property object for the specified type, which contains many useful methods.
 @param type  the field type to get the chronology for
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 @since 1.2
 */
- (OrgJodaTimeMutableDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Get the second of day property
 @return the second of day property
 */
- (OrgJodaTimeMutableDateTime_Property *)secondOfDay;

/*!
 @brief Get the second of minute field property
 @return the second of minute property
 */
- (OrgJodaTimeMutableDateTime_Property *)secondOfMinute;

/*!
 @brief Sets the value of one of the fields of the instant, such as hourOfDay.
 @param type  a field type, usually obtained from DateTimeFieldType, not null
 @param value  the value to set the field to
 @throws IllegalArgumentException if the value is null or invalid
 */
- (void)setWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                    withInt:(jint)value;

/*!
 @brief Set the chronology of the datetime.
 <p>
 All changes to the chronology occur via this method.
 @param chronology  the chronology to use, null means ISOChronology in default zone
 */
- (void)setChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Set the date from fields.
 The time part of this object will be unaffected.
 @param year  the year
 @param monthOfYear  the month of the year
 @param dayOfMonth  the day of the month
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setDateWithInt:(jint)year
               withInt:(jint)monthOfYear
               withInt:(jint)dayOfMonth;

/*!
 @brief Set the date from milliseconds.
 The time part of this object will be unaffected.
 @param instant  an instant to copy the date from, time part ignored
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setDateWithLong:(jlong)instant;

/*!
 @brief Set the date from another instant.
 The time part of this object will be unaffected.
 <p>
 If the input is a <code>ReadableDateTime</code> then it is converted to the
 same time-zone as this object before using the instant millis.
 @param instant  an instant to copy the date from, time part ignored
 @throws IllegalArgumentException if the object is invalid
 */
- (void)setDateWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/*!
 @brief Set the date and time from fields.
 @param year  the year
 @param monthOfYear  the month of the year
 @param dayOfMonth  the day of the month
 @param hourOfDay  the hour of the day
 @param minuteOfHour  the minute of the hour
 @param secondOfMinute  the second of the minute
 @param millisOfSecond  the millisecond of the second
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setDateTimeWithInt:(jint)year
                   withInt:(jint)monthOfYear
                   withInt:(jint)dayOfMonth
                   withInt:(jint)hourOfDay
                   withInt:(jint)minuteOfHour
                   withInt:(jint)secondOfMinute
                   withInt:(jint)millisOfSecond;

/*!
 @brief Set the day of the month to the specified value.
 @param dayOfMonth  the day of the month
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setDayOfMonthWithInt:(jint)dayOfMonth;

/*!
 @brief Set the day of week to the specified value.
 @param dayOfWeek  the day of the week
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setDayOfWeekWithInt:(jint)dayOfWeek;

/*!
 @brief Set the day of year to the specified value.
 @param dayOfYear the day of the year
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setDayOfYearWithInt:(jint)dayOfYear;

/*!
 @brief Set the hour of the day to the specified value.
 @param hourOfDay  the hour of day
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setHourOfDayWithInt:(jint)hourOfDay;

/*!
 @brief Set the milliseconds of the datetime.
 <p>
 All changes to the millisecond field occurs via this method.
 @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
 datetime to
 */
- (void)setMillisWithLong:(jlong)instant;

/*!
 @brief Sets the millisecond instant of this instant from another.
 <p>
 This method does not change the chronology of this instant, just the
 millisecond instant.
 @param instant  the instant to use, null means now
 */
- (void)setMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/*!
 @brief Set the millis of the day to the specified value.
 @param millisOfDay  the millis of day
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setMillisOfDayWithInt:(jint)millisOfDay;

/*!
 @brief Set the millis of the second to the specified value.
 @param millisOfSecond  the millis of second
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setMillisOfSecondWithInt:(jint)millisOfSecond;

/*!
 @brief Set the minute of the day to the specified value.
 @param minuteOfDay  the minute of day
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setMinuteOfDayWithInt:(jint)minuteOfDay;

/*!
 @brief Set the minute of the hour to the specified value.
 @param minuteOfHour  the minute of hour
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setMinuteOfHourWithInt:(jint)minuteOfHour;

/*!
 @brief Set the month of the year to the specified value.
 @param monthOfYear  the month of the year
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setMonthOfYearWithInt:(jint)monthOfYear;

/*!
 @brief Sets the status of rounding to use the specified field and ROUND_FLOOR mode.
 A null field will disable rounding.
 Once set, the instant is then rounded using the new field and mode.
 <p>
 Enabling rounding will cause all subsequent calls to <code>setMillis(long)</code>
 to be rounded. This can be used to control the precision of the instant,
 for example by setting a rounding field of minuteOfDay, the seconds and
 milliseconds will always be zero.
 @param field rounding field or null to disable
 */
- (void)setRoundingWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

/*!
 @brief Sets the status of rounding to use the specified field and mode.
 A null field or mode of ROUND_NONE will disable rounding.
 Once set, the instant is then rounded using the new field and mode.
 <p>
 Enabling rounding will cause all subsequent calls to <code>setMillis(long)</code>
 to be rounded. This can be used to control the precision of the instant,
 for example by setting a rounding field of minuteOfDay, the seconds and
 milliseconds will always be zero.
 @param field  rounding field or null to disable
 @param mode  rounding mode or ROUND_NONE to disable
 @throws IllegalArgumentException if mode is unknown, no exception if field is null
 */
- (void)setRoundingWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                        withInt:(jint)mode;

/*!
 @brief Set the second of the day to the specified value.
 @param secondOfDay  the second of day
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setSecondOfDayWithInt:(jint)secondOfDay;

/*!
 @brief Set the second of the minute to the specified value.
 @param secondOfMinute  the second of minute
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setSecondOfMinuteWithInt:(jint)secondOfMinute;

/*!
 @brief Set the time from fields.
 The date part of this object will be unaffected.
 @param hour  the hour
 @param minuteOfHour  the minute of the hour
 @param secondOfMinute  the second of the minute
 @param millisOfSecond  the millisecond of the second
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setTimeWithInt:(jint)hour
               withInt:(jint)minuteOfHour
               withInt:(jint)secondOfMinute
               withInt:(jint)millisOfSecond;

/*!
 @brief Set the time from milliseconds.
 The date part of this object will be unaffected.
 @param millis  an instant to copy the time from, date part ignored
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setTimeWithLong:(jlong)millis;

/*!
 @brief Set the time from another instant.
 The date part of this object will be unaffected.
 @param instant  an instant to copy the time from, date part ignored
 @throws IllegalArgumentException if the object is invalid
 */
- (void)setTimeWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant;

/*!
 @brief Set the week of weekyear to the specified value.
 @param weekOfWeekyear the week of the weekyear
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setWeekOfWeekyearWithInt:(jint)weekOfWeekyear;

/*!
 @brief Set the weekyear to the specified value.
 @param weekyear  the weekyear
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setWeekyearWithInt:(jint)weekyear;

/*!
 @brief Set the year to the specified value.
 @param year  the year
 @throws IllegalArgumentException if the value is invalid
 */
- (void)setYearWithInt:(jint)year;

/*!
 @brief Sets the time zone of the datetime, changing the chronology and field values.
 <p>
 Changing the zone using this method retains the millisecond instant.
 The millisecond instant is adjusted in the new zone to compensate.
 chronology. Setting the time zone does not affect the millisecond value
 of this instant.
 <p>
 If the chronology already has this time zone, no change occurs.
 @param newZone  the time zone to use, null means default zone
 - seealso: #setZoneRetainFields
 */
- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone;

/*!
 @brief Sets the time zone of the datetime, changing the chronology and millisecond.
 <p>
 Changing the zone using this method retains the field values.
 The millisecond instant is adjusted in the new zone to compensate.
 <p>
 If the chronology already has this time zone, no change occurs.
 @param newZone  the time zone to use, null means default zone
 - seealso: #setZone
 */
- (void)setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone;

/*!
 @brief Get the week of a week based year property.
 @return the week of a week based year property
 */
- (OrgJodaTimeMutableDateTime_Property *)weekOfWeekyear;

/*!
 @brief Get the year of a week based year property.
 @return the year of a week based year property
 */
- (OrgJodaTimeMutableDateTime_Property *)weekyear;

/*!
 @brief Get the year property.
 @return the year property
 */
- (OrgJodaTimeMutableDateTime_Property *)year;

/*!
 @brief Get the year of century property.
 @return the year of era property
 */
- (OrgJodaTimeMutableDateTime_Property *)yearOfCentury;

/*!
 @brief Get the year of era property.
 @return the year of era property
 */
- (OrgJodaTimeMutableDateTime_Property *)yearOfEra;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeMutableDateTime)

/*!
 @brief Rounding is disabled
 */
inline jint OrgJodaTimeMutableDateTime_get_ROUND_NONE();
#define OrgJodaTimeMutableDateTime_ROUND_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, ROUND_NONE, jint)

/*!
 @brief Rounding mode as described by <code>DateTimeField.roundFloor</code>
 */
inline jint OrgJodaTimeMutableDateTime_get_ROUND_FLOOR();
#define OrgJodaTimeMutableDateTime_ROUND_FLOOR 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, ROUND_FLOOR, jint)

/*!
 @brief Rounding mode as described by <code>DateTimeField.roundCeiling</code>
 */
inline jint OrgJodaTimeMutableDateTime_get_ROUND_CEILING();
#define OrgJodaTimeMutableDateTime_ROUND_CEILING 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, ROUND_CEILING, jint)

/*!
 @brief Rounding mode as described by <code>DateTimeField.roundHalfFloor</code>
 */
inline jint OrgJodaTimeMutableDateTime_get_ROUND_HALF_FLOOR();
#define OrgJodaTimeMutableDateTime_ROUND_HALF_FLOOR 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, ROUND_HALF_FLOOR, jint)

/*!
 @brief Rounding mode as described by <code>DateTimeField.roundHalfCeiling</code>
 */
inline jint OrgJodaTimeMutableDateTime_get_ROUND_HALF_CEILING();
#define OrgJodaTimeMutableDateTime_ROUND_HALF_CEILING 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, ROUND_HALF_CEILING, jint)

/*!
 @brief Rounding mode as described by <code>DateTimeField.roundHalfEven</code>
 */
inline jint OrgJodaTimeMutableDateTime_get_ROUND_HALF_EVEN();
#define OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, ROUND_HALF_EVEN, jint)

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_now();

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_parseWithNSString_(NSString *str);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_init(OrgJodaTimeMutableDateTime *self);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_init();

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithLong_(OrgJodaTimeMutableDateTime *self, jlong instant);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithLong_(jlong instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithLong_(jlong instant);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithId_(OrgJodaTimeMutableDateTime *self, id instant);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithId_(id instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithId_(id instant);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeMutableDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeMutableDateTime)

#endif

#if !defined (OrgJodaTimeMutableDateTime_Property_) && (OrgJodaTimeMutableDateTime_INCLUDE_ALL || defined(OrgJodaTimeMutableDateTime_Property_INCLUDE))
#define OrgJodaTimeMutableDateTime_Property_

#define OrgJodaTimeFieldAbstractReadableInstantFieldProperty_RESTRICT 1
#define OrgJodaTimeFieldAbstractReadableInstantFieldProperty_INCLUDE 1
#include "org/joda/time/field/AbstractReadableInstantFieldProperty.h"

@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeMutableDateTime;

/*!
 @brief MutableDateTime.Property binds a MutableDateTime to a
 DateTimeField allowing powerful datetime functionality to be easily
 accessed.
 <p>
 The example below shows how to use the property to change the value of a
 MutableDateTime object.
 @code

  MutableDateTime dt = new MutableDateTime(1972, 12, 3, 13, 32, 19, 123);
  dt.year().add(20);
  dt.second().roundFloor().minute().set(10);
  
@endcode
 <p>
 MutableDateTime.Propery itself is thread-safe and immutable, but the
 MutableDateTime being operated on is not.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeMutableDateTime_Property : OrgJodaTimeFieldAbstractReadableInstantFieldProperty

#pragma mark Public

/*!
 @brief Adds a value to the millis value.
 @param value  the value to add
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#add(long,int)
 */
- (OrgJodaTimeMutableDateTime *)addWithInt:(jint)value;

/*!
 @brief Adds a value to the millis value.
 @param value  the value to add
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#add(long,long)
 */
- (OrgJodaTimeMutableDateTime *)addWithLong:(jlong)value;

/*!
 @brief Adds a value, possibly wrapped, to the millis value.
 @param value  the value to add
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#addWrapField
 */
- (OrgJodaTimeMutableDateTime *)addWrapFieldWithInt:(jint)value;

/*!
 @brief Gets the field being used.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/*!
 @brief Gets the mutable datetime being used.
 @return the mutable datetime
 */
- (OrgJodaTimeMutableDateTime *)getMutableDateTime;

/*!
 @brief Round to the highest whole unit of this field.
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#roundCeiling
 */
- (OrgJodaTimeMutableDateTime *)roundCeiling;

/*!
 @brief Round to the lowest whole unit of this field.
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#roundFloor
 */
- (OrgJodaTimeMutableDateTime *)roundFloor;

/*!
 @brief Round to the nearest whole unit of this field, favoring the ceiling if
 halfway.
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#roundHalfCeiling
 */
- (OrgJodaTimeMutableDateTime *)roundHalfCeiling;

/*!
 @brief Round to the nearest whole unit of this field.
 If halfway, the ceiling
 is favored over the floor only if it makes this field's value even.
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#roundHalfEven
 */
- (OrgJodaTimeMutableDateTime *)roundHalfEven;

/*!
 @brief Round to the nearest whole unit of this field, favoring the floor if
 halfway.
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#roundHalfFloor
 */
- (OrgJodaTimeMutableDateTime *)roundHalfFloor;

/*!
 @brief Sets a value.
 @param value  the value to set.
 @return the mutable datetime being used, so calls can be chained
 - seealso: DateTimeField#set(long,int)
 */
- (OrgJodaTimeMutableDateTime *)setWithInt:(jint)value;

/*!
 @brief Sets a text value.
 @param text  the text value to set
 @return the mutable datetime being used, so calls can be chained
 @throws IllegalArgumentException if the text value isn't valid
 - seealso: DateTimeField#set(long,java.lang.String)
 */
- (OrgJodaTimeMutableDateTime *)setWithNSString:(NSString *)text;

/*!
 @brief Sets a text value.
 @param text  the text value to set
 @param locale  optional locale to use for selecting a text symbol
 @return the mutable datetime being used, so calls can be chained
 @throws IllegalArgumentException if the text value isn't valid
 - seealso: DateTimeField#set(long,java.lang.String,java.util.Locale)
 */
- (OrgJodaTimeMutableDateTime *)setWithNSString:(NSString *)text
                             withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Protected

/*!
 @brief Gets the chronology of the datetime that this property is linked to.
 @return the chronology
 @since 1.4
 */
- (OrgJodaTimeChronology *)getChronology;

/*!
 @brief Gets the milliseconds of the datetime that this property is linked to.
 @return the milliseconds
 */
- (jlong)getMillis;

#pragma mark Package-Private

/*!
 @brief Constructor.
 @param instant  the instant to set
 @param field  the field to use
 */
- (instancetype)initWithOrgJodaTimeMutableDateTime:(OrgJodaTimeMutableDateTime *)instant
                      withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeMutableDateTime_Property)

FOUNDATION_EXPORT void OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeMutableDateTime_Property *self, OrgJodaTimeMutableDateTime *instant, OrgJodaTimeDateTimeField *field);

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime_Property *new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeMutableDateTime *instant, OrgJodaTimeDateTimeField *field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeMutableDateTime_Property *create_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeMutableDateTime *instant, OrgJodaTimeDateTimeField *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeMutableDateTime_Property)

#endif

#pragma pop_macro("OrgJodaTimeMutableDateTime_INCLUDE_ALL")
