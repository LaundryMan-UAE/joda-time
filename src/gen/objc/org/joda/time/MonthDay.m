//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/joda-time/src/main/java/org/joda/time/MonthDay.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/MonthDay.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/base/AbstractPartial.h"
#include "org/joda/time/base/BasePartial.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/field/AbstractPartialFieldProperty.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/DateTimeFormat.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/DateTimeFormatterBuilder.h"
#include "org/joda/time/format/DateTimeParser.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

#define OrgJodaTimeMonthDay_serialVersionUID 2954560699050434609LL

@interface OrgJodaTimeMonthDay ()

/**
 @brief Handle broken serialization from other tools.
 @return the resolved object, not null
 */
- (id)readResolve;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeMonthDay, serialVersionUID, jlong)

static IOSObjectArray *OrgJodaTimeMonthDay_FIELD_TYPES_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeMonthDay, FIELD_TYPES_, IOSObjectArray *)

static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeMonthDay_PARSER_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeMonthDay, PARSER_, OrgJodaTimeFormatDateTimeFormatter *)

#define OrgJodaTimeMonthDay_Property_serialVersionUID 5727734012190224363LL

@interface OrgJodaTimeMonthDay_Property () {
 @public
  /**
   @brief The partial
   */
  OrgJodaTimeMonthDay *iBase_;
  /**
   @brief The field index
   */
  jint iFieldIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeMonthDay_Property, iBase_, OrgJodaTimeMonthDay *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeMonthDay_Property, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeMonthDay)

@implementation OrgJodaTimeMonthDay

+ (OrgJodaTimeMonthDay *)now {
  return OrgJodaTimeMonthDay_now();
}

+ (OrgJodaTimeMonthDay *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeMonthDay_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeMonthDay *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeMonthDay_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeMonthDay *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeMonthDay_parseWithNSString_(str);
}

+ (OrgJodaTimeMonthDay *)parseWithNSString:(NSString *)str
    withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeMonthDay_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeMonthDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeMonthDay_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeMonthDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeMonthDay_fromDateFieldsWithJavaUtilDate_(date);
}

- (instancetype)init {
  OrgJodaTimeMonthDay_init(self);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeMonthDay_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMonthDay_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeMonthDay_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMonthDay_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeMonthDay_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMonthDay_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth {
  OrgJodaTimeMonthDay_initWithInt_withInt_(self, monthOfYear, dayOfMonth);
  return self;
}

- (instancetype)initWithInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMonthDay_initWithInt_withInt_withOrgJodaTimeChronology_(self, monthOfYear, dayOfMonth, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeMonthDay:(OrgJodaTimeMonthDay *)partial
                               withIntArray:(IOSIntArray *)values {
  OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, partial, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeMonthDay:(OrgJodaTimeMonthDay *)partial
                  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withOrgJodaTimeChronology_(self, partial, chrono);
  return self;
}

- (id)readResolve {
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_get_UTC_())) isEqual:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone]] == NO) {
    return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withOrgJodaTimeChronology_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withUTC]) autorelease];
  }
  return self;
}

- (jint)size {
  return 2;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeMonthDay_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeMonthDay_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    default:
    @throw [new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index)) autorelease];
  }
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(OrgJodaTimeMonthDay_FIELD_TYPES_), index);
}

- (IOSObjectArray *)getFieldTypes {
  return (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(OrgJodaTimeMonthDay_FIELD_TYPES_)) clone], [IOSObjectArray class]);
}

- (OrgJodaTimeMonthDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimeMonthDay *newMonthDay = [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withOrgJodaTimeChronology_(self, newChronology) autorelease];
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newMonthDay withIntArray:[self getValues]];
    return newMonthDay;
  }
}

- (OrgJodaTimeMonthDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                           withInt:(jint)value {
  jint index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                              withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    jint index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar)];
    }
  }
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeMonthDay *)plusMonthsWithInt:(jint)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_months() withInt:months];
}

- (OrgJodaTimeMonthDay *)plusDaysWithInt:(jint)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withInt:days];
}

- (OrgJodaTimeMonthDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeMonthDay *)minusMonthsWithInt:(jint)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_months() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(months)];
}

- (OrgJodaTimeMonthDay *)minusDaysWithInt:(jint)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(days)];
}

- (OrgJodaTimeLocalDate *)toLocalDateWithInt:(jint)year {
  return [new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(year, [self getMonthOfYear], [self getDayOfMonth], [self getChronology]) autorelease];
}

- (jint)getMonthOfYear {
  return [self getValueWithInt:OrgJodaTimeMonthDay_MONTH_OF_YEAR];
}

- (jint)getDayOfMonth {
  return [self getValueWithInt:OrgJodaTimeMonthDay_DAY_OF_MONTH];
}

- (OrgJodaTimeMonthDay *)withMonthOfYearWithInt:(jint)monthOfYear {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeMonthDay_MONTH_OF_YEAR withIntArray:newValues withInt:monthOfYear];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)withDayOfMonthWithInt:(jint)dayOfMonth {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeMonthDay_DAY_OF_MONTH withIntArray:newValues withInt:dayOfMonth];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, newValues) autorelease];
}

- (OrgJodaTimeMonthDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [new_OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(self, [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]) autorelease];
}

- (OrgJodaTimeMonthDay_Property *)monthOfYear {
  return [new_OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(self, OrgJodaTimeMonthDay_MONTH_OF_YEAR) autorelease];
}

- (OrgJodaTimeMonthDay_Property *)dayOfMonth {
  return [new_OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(self, OrgJodaTimeMonthDay_DAY_OF_MONTH) autorelease];
}

- (NSString *)description {
  id<JavaUtilList> fields = [new_JavaUtilArrayList_init() autorelease];
  [fields addWithId:OrgJodaTimeDateTimeFieldType_monthOfYear()];
  [fields addWithId:OrgJodaTimeDateTimeFieldType_dayOfMonth()];
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_forFieldsWithJavaUtilCollection_withBoolean_withBoolean_(fields, YES, YES))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

+ (void)initialize {
  if (self == [OrgJodaTimeMonthDay class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeMonthDay_FIELD_TYPES_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeDateTimeFieldType_monthOfYear(), OrgJodaTimeDateTimeFieldType_dayOfMonth() } count:2 type:OrgJodaTimeDateTimeFieldType_class_()]);
    JreStrongAssign(&OrgJodaTimeMonthDay_PARSER_, nil, [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([((OrgJodaTimeFormatDateTimeFormatterBuilder *) [new_OrgJodaTimeFormatDateTimeFormatterBuilder_init() autorelease]) appendOptionalWithOrgJodaTimeFormatDateTimeParser:[((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_localDateParser())) getParser]])) appendOptionalWithOrgJodaTimeFormatDateTimeParser:[((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(@"--MM-dd"))) getParser]])) toFormatter]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeMonthDay)
  }
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.MonthDay;", 0x9, NULL, NULL },
    { "init", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithLong:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithId:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeMonthDay:withIntArray:", "MonthDay", NULL, 0x0, NULL, NULL },
    { "initWithOrgJodaTimeMonthDay:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x0, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL, NULL },
    { "getFieldTypeWithInt:", "getFieldType", "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL, NULL },
    { "getFieldTypes", NULL, "[Lorg.joda.time.DateTimeFieldType;", 0x1, NULL, NULL },
    { "withChronologyRetainFieldsWithOrgJodaTimeChronology:", "withChronologyRetainFields", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "plusMonthsWithInt:", "plusMonths", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "plusDaysWithInt:", "plusDays", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "minusMonthsWithInt:", "minusMonths", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "minusDaysWithInt:", "minusDays", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "toLocalDateWithInt:", "toLocalDate", "Lorg.joda.time.LocalDate;", 0x1, NULL, NULL },
    { "getMonthOfYear", NULL, "I", 0x1, NULL, NULL },
    { "getDayOfMonth", NULL, "I", 0x1, NULL, NULL },
    { "withMonthOfYearWithInt:", "withMonthOfYear", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "withDayOfMonthWithInt:", "withDayOfMonth", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.MonthDay$Property;", 0x1, NULL, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.MonthDay$Property;", 0x1, NULL, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.MonthDay$Property;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeMonthDay_serialVersionUID },
    { "FIELD_TYPES_", NULL, 0x1a, "[Lorg.joda.time.DateTimeFieldType;", &OrgJodaTimeMonthDay_FIELD_TYPES_, NULL,  },
    { "PARSER_", NULL, 0x1a, "Lorg.joda.time.format.DateTimeFormatter;", &OrgJodaTimeMonthDay_PARSER_, NULL,  },
    { "MONTH_OF_YEAR", "MONTH_OF_YEAR", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeMonthDay_MONTH_OF_YEAR },
    { "DAY_OF_MONTH", "DAY_OF_MONTH", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeMonthDay_DAY_OF_MONTH },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.MonthDay$Property;"};
  static const J2ObjcClassInfo _OrgJodaTimeMonthDay = { 2, "MonthDay", "org.joda.time", NULL, 0x11, 44, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgJodaTimeMonthDay;
}

@end

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_now() {
  OrgJodaTimeMonthDay_initialize();
  return [new_OrgJodaTimeMonthDay_init() autorelease];
}

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeMonthDay_initialize();
  if (zone == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null") autorelease];
  }
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeDateTimeZone_(zone) autorelease];
}

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMonthDay_initialize();
  if (chronology == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null") autorelease];
  }
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeChronology_(chronology) autorelease];
}

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_parseWithNSString_(NSString *str) {
  OrgJodaTimeMonthDay_initialize();
  return OrgJodaTimeMonthDay_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeMonthDay_PARSER_);
}

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeMonthDay_initialize();
  OrgJodaTimeLocalDate *date = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalDateWithNSString:str];
  return [new_OrgJodaTimeMonthDay_initWithInt_withInt_([((OrgJodaTimeLocalDate *) nil_chk(date)) getMonthOfYear], [date getDayOfMonth]) autorelease];
}

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeMonthDay_initialize();
  if (calendar == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null") autorelease];
  }
  return [new_OrgJodaTimeMonthDay_initWithInt_withInt_([((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MONTH] + 1, [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) autorelease];
}

OrgJodaTimeMonthDay *OrgJodaTimeMonthDay_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeMonthDay_initialize();
  if (date == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null") autorelease];
  }
  return [new_OrgJodaTimeMonthDay_initWithInt_withInt_([((JavaUtilDate *) nil_chk(date)) getMonth] + 1, [date getDate]) autorelease];
}

void OrgJodaTimeMonthDay_init(OrgJodaTimeMonthDay *self) {
  OrgJodaTimeBaseBasePartial_init(self);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_init() {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_init(self);
  return self;
}

void OrgJodaTimeMonthDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeMonthDay *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeChronology_(self, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

void OrgJodaTimeMonthDay_initWithOrgJodaTimeChronology_(OrgJodaTimeMonthDay *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeChronology_(self, chronology);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

void OrgJodaTimeMonthDay_initWithLong_(OrgJodaTimeMonthDay *self, jlong instant) {
  OrgJodaTimeBaseBasePartial_initWithLong_(self, instant);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithLong_(jlong instant) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithLong_(self, instant);
  return self;
}

void OrgJodaTimeMonthDay_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeMonthDay *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

void OrgJodaTimeMonthDay_initWithId_(OrgJodaTimeMonthDay *self, id instant) {
  OrgJodaTimeBaseBasePartial_initWithId_withOrgJodaTimeChronology_withOrgJodaTimeFormatDateTimeFormatter_(self, instant, nil, OrgJodaTimeFormatISODateTimeFormat_localDateParser());
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithId_(id instant) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithId_(self, instant);
  return self;
}

void OrgJodaTimeMonthDay_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeMonthDay *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithId_withOrgJodaTimeChronology_withOrgJodaTimeFormatDateTimeFormatter_(self, instant, OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology), OrgJodaTimeFormatISODateTimeFormat_localDateParser());
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

void OrgJodaTimeMonthDay_initWithInt_withInt_(OrgJodaTimeMonthDay *self, jint monthOfYear, jint dayOfMonth) {
  OrgJodaTimeMonthDay_initWithInt_withInt_withOrgJodaTimeChronology_(self, monthOfYear, dayOfMonth, nil);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithInt_withInt_(jint monthOfYear, jint dayOfMonth) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithInt_withInt_(self, monthOfYear, dayOfMonth);
  return self;
}

void OrgJodaTimeMonthDay_initWithInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeMonthDay *self, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithIntArray_withOrgJodaTimeChronology_(self, [IOSIntArray arrayWithInts:(jint[]){ monthOfYear, dayOfMonth } count:2], chronology);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithInt_withInt_withOrgJodaTimeChronology_(jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithInt_withInt_withOrgJodaTimeChronology_(self, monthOfYear, dayOfMonth, chronology);
  return self;
}

void OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(OrgJodaTimeMonthDay *self, OrgJodaTimeMonthDay *partial, IOSIntArray *values) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeBaseBasePartial_withIntArray_(self, partial, values);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(OrgJodaTimeMonthDay *partial, IOSIntArray *values) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(self, partial, values);
  return self;
}

void OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withOrgJodaTimeChronology_(OrgJodaTimeMonthDay *self, OrgJodaTimeMonthDay *partial, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeBaseBasePartial_withOrgJodaTimeChronology_(self, partial, chrono);
}

OrgJodaTimeMonthDay *new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withOrgJodaTimeChronology_(OrgJodaTimeMonthDay *partial, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeMonthDay *self = [OrgJodaTimeMonthDay alloc];
  OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withOrgJodaTimeChronology_(self, partial, chrono);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeMonthDay)

@implementation OrgJodaTimeMonthDay_Property

- (instancetype)initWithOrgJodaTimeMonthDay:(OrgJodaTimeMonthDay *)partial
                                    withInt:(jint)fieldIndex {
  OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(self, partial, fieldIndex);
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iBase_;
}

- (OrgJodaTimeMonthDay *)getMonthDay {
  return iBase_;
}

- (jint)get {
  return [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimeMonthDay *)addToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(iBase_, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)addWrapFieldToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(iBase_, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)setCopyWithInt:(jint)value {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(iBase_, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)setCopyWithNSString:(NSString *)text
                          withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return [new_OrgJodaTimeMonthDay_initWithOrgJodaTimeMonthDay_withIntArray_(iBase_, newValues) autorelease];
}

- (OrgJodaTimeMonthDay *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (void)dealloc {
  RELEASE_(iBase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeMonthDay:withInt:", "Property", NULL, 0x0, NULL, NULL },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL, NULL },
    { "getReadablePartial", NULL, "Lorg.joda.time.ReadablePartial;", 0x4, NULL, NULL },
    { "getMonthDay", NULL, "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "get", NULL, "I", 0x1, NULL, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeMonthDay_Property_serialVersionUID },
    { "iBase_", NULL, 0x12, "Lorg.joda.time.MonthDay;", NULL, NULL,  },
    { "iFieldIndex_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeMonthDay_Property = { 2, "Property", "org.joda.time", "MonthDay", 0x9, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeMonthDay_Property;
}

@end

void OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(OrgJodaTimeMonthDay_Property *self, OrgJodaTimeMonthDay *partial, jint fieldIndex) {
  OrgJodaTimeFieldAbstractPartialFieldProperty_init(self);
  OrgJodaTimeMonthDay_Property_set_iBase_(self, partial);
  self->iFieldIndex_ = fieldIndex;
}

OrgJodaTimeMonthDay_Property *new_OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(OrgJodaTimeMonthDay *partial, jint fieldIndex) {
  OrgJodaTimeMonthDay_Property *self = [OrgJodaTimeMonthDay_Property alloc];
  OrgJodaTimeMonthDay_Property_initWithOrgJodaTimeMonthDay_withInt_(self, partial, fieldIndex);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeMonthDay_Property)
