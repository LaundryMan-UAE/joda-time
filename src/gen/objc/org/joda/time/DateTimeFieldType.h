//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/DateTimeFieldType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeDateTimeFieldType")
#ifdef RESTRICT_OrgJodaTimeDateTimeFieldType
#define INCLUDE_ALL_OrgJodaTimeDateTimeFieldType 0
#else
#define INCLUDE_ALL_OrgJodaTimeDateTimeFieldType 1
#endif
#undef RESTRICT_OrgJodaTimeDateTimeFieldType

#if !defined (OrgJodaTimeDateTimeFieldType_) && (INCLUDE_ALL_OrgJodaTimeDateTimeFieldType || defined(INCLUDE_OrgJodaTimeDateTimeFieldType))
#define OrgJodaTimeDateTimeFieldType_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDurationFieldType;

/*!
 @brief Identifies a field, such as year or minuteOfHour, in a chronology-neutral way.
 <p>
  A field type defines the type of the field, such as hourOfDay.
  If does not directly enable any calculations, however it does provide a 
 <code>getField(Chronology)</code> method that returns the actual calculation engine
  for a particular chronology.
  It also provides access to the related <code>DurationFieldType</code>s.
  <p>
  Instances of <code>DateTimeFieldType</code> are singletons.
  They can be compared using <code>==</code>.
  <p>
  If required, you can create your own field, for example a quarterOfYear.
  You must create a subclass of <code>DateTimeFieldType</code> that defines the field type.
  This class returns the actual calculation engine from <code>getField(Chronology)</code>.
  The subclass should implement equals and hashCode.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeDateTimeFieldType : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Get the century of era field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)centuryOfEra;

/*!
 @brief Get the hour of day (offset to 1-24) field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)clockhourOfDay;

/*!
 @brief Get the hour of am/pm (offset to 1-12) field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)clockhourOfHalfday;

/*!
 @brief Get the day of month field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)dayOfMonth;

/*!
 @brief Get the day of week field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)dayOfWeek;

/*!
 @brief Get the day of year field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)dayOfYear;

/*!
 @brief Get the era field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)era;

/*!
 @brief Get the duration unit of the field.
 @return duration unit of the field, never null
 */
- (OrgJodaTimeDurationFieldType *)getDurationType;

/*!
 @brief Gets a suitable field for this type from the given Chronology.
 @param chronology the chronology to use, null means ISOChronology in default zone
 @return a suitable field
 */
- (OrgJodaTimeDateTimeField *)getFieldWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Get the name of the field.
 <p>
  By convention, names follow a pattern of "dddOfRrr", where "ddd" represents
  the (singular) duration unit field name and "Rrr" represents the (singular)
  duration range field name. If the range field is not applicable, then
  the name of the field is simply the (singular) duration field name.
 @return field name
 */
- (NSString *)getName;

/*!
 @brief Get the duration range of the field.
 @return duration range of the field, null if unbounded
 */
- (OrgJodaTimeDurationFieldType *)getRangeDurationType;

/*!
 @brief Get the AM(0) PM(1) field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)halfdayOfDay;

/*!
 @brief Get the hour of day (0-23) field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)hourOfDay;

/*!
 @brief Get the hour of am/pm (0-11) field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)hourOfHalfday;

/*!
 @brief Checks whether this field supported in the given Chronology.
 @param chronology the chronology to use, null means ISOChronology in default zone
 @return true if supported
 */
- (jboolean)isSupportedWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/*!
 @brief Get the millis of day field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)millisOfDay;

/*!
 @brief Get the millis of second field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)millisOfSecond;

/*!
 @brief Get the minute of day field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)minuteOfDay;

/*!
 @brief Get the minute of hour field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)minuteOfHour;

/*!
 @brief Get the month of year field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)monthOfYear;

/*!
 @brief Get the second of day field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)secondOfDay;

/*!
 @brief Get the second of minute field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)secondOfMinute;

/*!
 @brief Get a suitable debug string.
 @return debug string
 */
- (NSString *)description;

/*!
 @brief Get the week of a week based year field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)weekOfWeekyear;

/*!
 @brief Get the year of a week based year field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)weekyear;

/*!
 @brief Get the year of a week based year within a century field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)weekyearOfCentury;

/*!
 @brief Get the year field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)year;

/*!
 @brief Get the year of century field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)yearOfCentury;

/*!
 @brief Get the year of era field type.
 @return the DateTimeFieldType constant
 */
+ (OrgJodaTimeDateTimeFieldType *)yearOfEra;

#pragma mark Protected

/*!
 @brief Constructor.
 @param name the name to use
 */
- (instancetype)initWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeDateTimeFieldType)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_ERA(void);
#define OrgJodaTimeDateTimeFieldType_ERA 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, ERA, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_YEAR_OF_ERA(void);
#define OrgJodaTimeDateTimeFieldType_YEAR_OF_ERA 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, YEAR_OF_ERA, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_CENTURY_OF_ERA(void);
#define OrgJodaTimeDateTimeFieldType_CENTURY_OF_ERA 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, CENTURY_OF_ERA, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_YEAR_OF_CENTURY(void);
#define OrgJodaTimeDateTimeFieldType_YEAR_OF_CENTURY 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, YEAR_OF_CENTURY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_YEAR(void);
#define OrgJodaTimeDateTimeFieldType_YEAR 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, YEAR, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_DAY_OF_YEAR(void);
#define OrgJodaTimeDateTimeFieldType_DAY_OF_YEAR 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, DAY_OF_YEAR, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_MONTH_OF_YEAR(void);
#define OrgJodaTimeDateTimeFieldType_MONTH_OF_YEAR 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, MONTH_OF_YEAR, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_DAY_OF_MONTH(void);
#define OrgJodaTimeDateTimeFieldType_DAY_OF_MONTH 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, DAY_OF_MONTH, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_WEEKYEAR_OF_CENTURY(void);
#define OrgJodaTimeDateTimeFieldType_WEEKYEAR_OF_CENTURY 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, WEEKYEAR_OF_CENTURY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_WEEKYEAR(void);
#define OrgJodaTimeDateTimeFieldType_WEEKYEAR 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, WEEKYEAR, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_WEEK_OF_WEEKYEAR(void);
#define OrgJodaTimeDateTimeFieldType_WEEK_OF_WEEKYEAR 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, WEEK_OF_WEEKYEAR, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_DAY_OF_WEEK(void);
#define OrgJodaTimeDateTimeFieldType_DAY_OF_WEEK 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, DAY_OF_WEEK, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_HALFDAY_OF_DAY(void);
#define OrgJodaTimeDateTimeFieldType_HALFDAY_OF_DAY 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, HALFDAY_OF_DAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_HOUR_OF_HALFDAY(void);
#define OrgJodaTimeDateTimeFieldType_HOUR_OF_HALFDAY 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, HOUR_OF_HALFDAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_CLOCKHOUR_OF_HALFDAY(void);
#define OrgJodaTimeDateTimeFieldType_CLOCKHOUR_OF_HALFDAY 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, CLOCKHOUR_OF_HALFDAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_CLOCKHOUR_OF_DAY(void);
#define OrgJodaTimeDateTimeFieldType_CLOCKHOUR_OF_DAY 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, CLOCKHOUR_OF_DAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_HOUR_OF_DAY(void);
#define OrgJodaTimeDateTimeFieldType_HOUR_OF_DAY 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, HOUR_OF_DAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_MINUTE_OF_DAY(void);
#define OrgJodaTimeDateTimeFieldType_MINUTE_OF_DAY 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, MINUTE_OF_DAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_MINUTE_OF_HOUR(void);
#define OrgJodaTimeDateTimeFieldType_MINUTE_OF_HOUR 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, MINUTE_OF_HOUR, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_SECOND_OF_DAY(void);
#define OrgJodaTimeDateTimeFieldType_SECOND_OF_DAY 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, SECOND_OF_DAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_SECOND_OF_MINUTE(void);
#define OrgJodaTimeDateTimeFieldType_SECOND_OF_MINUTE 21
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, SECOND_OF_MINUTE, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_MILLIS_OF_DAY(void);
#define OrgJodaTimeDateTimeFieldType_MILLIS_OF_DAY 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, MILLIS_OF_DAY, jbyte)

/*!
 @brief Ordinal values for standard field types.
 */
inline jbyte OrgJodaTimeDateTimeFieldType_get_MILLIS_OF_SECOND(void);
#define OrgJodaTimeDateTimeFieldType_MILLIS_OF_SECOND 23
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeFieldType, MILLIS_OF_SECOND, jbyte)

FOUNDATION_EXPORT void OrgJodaTimeDateTimeFieldType_initWithNSString_(OrgJodaTimeDateTimeFieldType *self, NSString *name);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_millisOfSecond(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_millisOfDay(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_secondOfMinute(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_secondOfDay(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_minuteOfHour(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_minuteOfDay(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_hourOfDay(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_clockhourOfDay(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_hourOfHalfday(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_clockhourOfHalfday(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_halfdayOfDay(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_dayOfWeek(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_dayOfMonth(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_dayOfYear(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_weekOfWeekyear(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_weekyear(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_weekyearOfCentury(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_monthOfYear(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_year(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_yearOfEra(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_yearOfCentury(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_centuryOfEra(void);

FOUNDATION_EXPORT OrgJodaTimeDateTimeFieldType *OrgJodaTimeDateTimeFieldType_era(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDateTimeFieldType)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeDateTimeFieldType")
