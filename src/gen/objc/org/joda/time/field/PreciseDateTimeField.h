//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/Joda-Time/src/main/java/org/joda/time/field/PreciseDateTimeField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeFieldPreciseDateTimeField_INCLUDE_ALL")
#ifdef OrgJodaTimeFieldPreciseDateTimeField_RESTRICT
#define OrgJodaTimeFieldPreciseDateTimeField_INCLUDE_ALL 0
#else
#define OrgJodaTimeFieldPreciseDateTimeField_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeFieldPreciseDateTimeField_RESTRICT

#if !defined (OrgJodaTimeFieldPreciseDateTimeField_) && (OrgJodaTimeFieldPreciseDateTimeField_INCLUDE_ALL || defined(OrgJodaTimeFieldPreciseDateTimeField_INCLUDE))
#define OrgJodaTimeFieldPreciseDateTimeField_

#define OrgJodaTimeFieldPreciseDurationDateTimeField_RESTRICT 1
#define OrgJodaTimeFieldPreciseDurationDateTimeField_INCLUDE 1
#include "org/joda/time/field/PreciseDurationDateTimeField.h"

@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;

/*!
 @brief Precise datetime field, composed of two precise duration fields.
 <p>
 This DateTimeField is useful for defining DateTimeFields that are composed
 of precise durations, like time of day fields. If either duration field is
 imprecise, then an <code>ImpreciseDateTimeField</code> may be used instead.
 <p>
 PreciseDateTimeField is thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 - seealso: ImpreciseDateTimeField
 */
@interface OrgJodaTimeFieldPreciseDateTimeField : OrgJodaTimeFieldPreciseDurationDateTimeField

#pragma mark Public

/*!
 @brief Constructor.
 @param type  the field type this field uses
 @param unit  precise unit duration, like "seconds()".
 @param range precise range duration, preferably a multiple of the unit,
 like "minutes()".
 @throws IllegalArgumentException if either duration field is imprecise
 @throws IllegalArgumentException if unit milliseconds is less than one
 or effective value range is less than two.
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)unit
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)range;

/*!
 @brief Add to the component of the specified time instant, wrapping around
 within that component if necessary.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
 @param amount  the amount of units to add (can be negative).
 @return the updated time instant.
 */
- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount;

/*!
 @brief Get the amount of fractional units from the specified time instant.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
 @return the amount of fractional units extracted from the input.
 */
- (jint)getWithLong:(jlong)instant;

/*!
 @brief Get the maximum value for the field.
 @return the maximum value
 */
- (jint)getMaximumValue;

/*!
 @brief Returns the range of the field in the field's units.
 <p>
 For example, 60 for seconds per minute. The field is allowed values
 from 0 to range - 1.
 @return unit range
 */
- (jint)getRange;

/*!
 @brief Returns the range duration of this field.
 For example, if this field
 represents "minute of hour", then the range duration field is an hours.
 @return the range duration of this field, or null if field has no range
 */
- (OrgJodaTimeDurationField *)getRangeDurationField;

/*!
 @brief Set the specified amount of units to the specified time instant.
 @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
 @param value  value of units to set.
 @return the updated time instant.
 @throws IllegalArgumentException if value is too large or too small.
 */
- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFieldPreciseDateTimeField)

FOUNDATION_EXPORT void OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeFieldPreciseDateTimeField *self, OrgJodaTimeDateTimeFieldType *type, OrgJodaTimeDurationField *unit, OrgJodaTimeDurationField *range);

FOUNDATION_EXPORT OrgJodaTimeFieldPreciseDateTimeField *new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType *type, OrgJodaTimeDurationField *unit, OrgJodaTimeDurationField *range) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFieldPreciseDateTimeField)

#endif

#pragma pop_macro("OrgJodaTimeFieldPreciseDateTimeField_INCLUDE_ALL")
