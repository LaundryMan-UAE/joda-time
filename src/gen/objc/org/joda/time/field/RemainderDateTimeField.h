//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/joda-time/src/main/java/org/joda/time/field/RemainderDateTimeField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJodaTimeFieldRemainderDateTimeField")
#ifdef RESTRICT_OrgJodaTimeFieldRemainderDateTimeField
#define INCLUDE_ALL_OrgJodaTimeFieldRemainderDateTimeField 0
#else
#define INCLUDE_ALL_OrgJodaTimeFieldRemainderDateTimeField 1
#endif
#undef RESTRICT_OrgJodaTimeFieldRemainderDateTimeField

#if !defined (OrgJodaTimeFieldRemainderDateTimeField_) && (INCLUDE_ALL_OrgJodaTimeFieldRemainderDateTimeField || defined(INCLUDE_OrgJodaTimeFieldRemainderDateTimeField))
#define OrgJodaTimeFieldRemainderDateTimeField_

#define RESTRICT_OrgJodaTimeFieldDecoratedDateTimeField 1
#define INCLUDE_OrgJodaTimeFieldDecoratedDateTimeField 1
#include "org/joda/time/field/DecoratedDateTimeField.h"

@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;
@class OrgJodaTimeFieldDividedDateTimeField;

/*!
 @brief Counterpart remainder datetime field to <code>DividedDateTimeField</code>.The
  field's unit duration is unchanged, but the range duration is scaled
  accordingly.
 <p>
  RemainderDateTimeField is thread-safe and immutable.
 - seealso: DividedDateTimeField
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFieldRemainderDateTimeField : OrgJodaTimeFieldDecoratedDateTimeField {
 @public
  jint iDivisor_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeField_;
}

#pragma mark Public

/*!
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param type the field type this field actually uses
 @param divisor divisor, such as 100 years in a century
 @throw IllegalArgumentExceptionif divisor is less than two
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(jint)divisor;

/*!
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param rangeField the range field
 @param type the field type this field actually uses
 @param divisor divisor, such as 100 years in a century
 @throw IllegalArgumentExceptionif divisor is less than two
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(jint)divisor;

/*!
 @brief Construct a RemainderDateTimeField that compliments the given
  DividedDateTimeField.
 @param dividedField complimentary divided field, like "century()".
 */
- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField;

/*!
 @brief Construct a RemainderDateTimeField that compliments the given
  DividedDateTimeField.
 @param dividedField complimentary divided field, like "century()".
 @param type the field type this field actually uses
 */
- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                            withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Construct a RemainderDateTimeField that compliments the given
  DividedDateTimeField.
 This constructor allows the duration field to be set.
 @param dividedField complimentary divided field, like "century()".
 @param durationField the duration field
 @param type the field type this field actually uses
 */
- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                                withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/*!
 @brief Add the specified amount to the specified time instant, wrapping around
  within the remainder range if necessary.The amount added may be
  negative.
 @param instant the time instant in millis to update.
 @param amount the amount to add (can be negative).
 @return the updated time instant.
 */
- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount;

/*!
 @brief Get the remainder from the specified time instant.
 @param instant the time instant in millis to query.
 @return the remainder extracted from the input.
 */
- (jint)getWithLong:(jlong)instant;

/*!
 @brief Returns the divisor applied, in the field's units.
 @return the divisor
 */
- (jint)getDivisor;

- (OrgJodaTimeDurationField *)getDurationField;

/*!
 @brief Get the maximum value for the field, which is always one less than the
  divisor.
 @return the maximum value
 */
- (jint)getMaximumValue;

/*!
 @brief Get the minimum value for the field, which is always zero.
 @return the minimum value of zero.
 */
- (jint)getMinimumValue;

/*!
 @brief Returns a scaled version of the wrapped field's unit duration field.
 */
- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jlong)remainderWithLong:(jlong)instant;

- (jlong)roundCeilingWithLong:(jlong)instant;

- (jlong)roundFloorWithLong:(jlong)instant;

- (jlong)roundHalfCeilingWithLong:(jlong)instant;

- (jlong)roundHalfEvenWithLong:(jlong)instant;

- (jlong)roundHalfFloorWithLong:(jlong)instant;

/*!
 @brief Set the specified amount of remainder units to the specified time instant.
 @param instant the time instant in millis to update.
 @param value value of remainder units to set.
 @return the updated time instant.
 @throw IllegalArgumentExceptionif value is too large or too small.
 */
- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)arg0
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFieldRemainderDateTimeField)

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldRemainderDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFieldRemainderDateTimeField, iRangeField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT void OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeFieldRemainderDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeFieldType *type, jint divisor);

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *new_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeFieldType *type, jint divisor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeFieldType *type, jint divisor);

FOUNDATION_EXPORT void OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeFieldRemainderDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type, jint divisor);

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *new_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type, jint divisor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type, jint divisor);

FOUNDATION_EXPORT void OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_(OrgJodaTimeFieldRemainderDateTimeField *self, OrgJodaTimeFieldDividedDateTimeField *dividedField);

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *new_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_(OrgJodaTimeFieldDividedDateTimeField *dividedField) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_(OrgJodaTimeFieldDividedDateTimeField *dividedField);

FOUNDATION_EXPORT void OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldRemainderDateTimeField *self, OrgJodaTimeFieldDividedDateTimeField *dividedField, OrgJodaTimeDateTimeFieldType *type);

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *new_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldDividedDateTimeField *dividedField, OrgJodaTimeDateTimeFieldType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldDividedDateTimeField *dividedField, OrgJodaTimeDateTimeFieldType *type);

FOUNDATION_EXPORT void OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldRemainderDateTimeField *self, OrgJodaTimeFieldDividedDateTimeField *dividedField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDateTimeFieldType *type);

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *new_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldDividedDateTimeField *dividedField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDateTimeFieldType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldRemainderDateTimeField *create_OrgJodaTimeFieldRemainderDateTimeField_initWithOrgJodaTimeFieldDividedDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldDividedDateTimeField *dividedField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDateTimeFieldType *type);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFieldRemainderDateTimeField)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJodaTimeFieldRemainderDateTimeField")
