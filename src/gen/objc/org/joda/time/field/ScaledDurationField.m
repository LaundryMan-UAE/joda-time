//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/field/ScaledDurationField.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/field/BaseDurationField.h"
#include "org/joda/time/field/DecoratedDurationField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/ScaledDurationField.h"

@interface OrgJodaTimeFieldScaledDurationField () {
 @public
  jint iScalar_;
}
@end

@implementation OrgJodaTimeFieldScaledDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                         withInt:(jint)scalar {
  if (self = [super initWithOrgJodaTimeDurationField:field withOrgJodaTimeDurationFieldType:type]) {
    if (scalar == 0 || scalar == 1) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The scalar must not be 0 or 1"] autorelease];
    }
    iScalar_ = scalar;
  }
  return self;
}

- (jint)getValueWithLong:(jlong)duration {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration] / iScalar_;
}

- (jlong)getValueAsLongWithLong:(jlong)duration {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration] / iScalar_;
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration withLong:instant] / iScalar_;
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration withLong:instant] / iScalar_;
}

- (jlong)getMillisWithInt:(jint)value {
  jlong scaled = ((jlong) value) * ((jlong) iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled];
}

- (jlong)getMillisWithLong:(jlong)value {
  jlong scaled = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(value, iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  jlong scaled = ((jlong) value) * ((jlong) iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled withLong:instant];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  jlong scaled = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(value, iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled withLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  jlong scaled = ((jlong) value) * ((jlong) iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:scaled];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  jlong scaled = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(value, iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:scaled];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant] / iScalar_;
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant] / iScalar_;
}

- (jlong)getUnitMillis {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getUnitMillis] * iScalar_;
}

- (jint)getScalar {
  return iScalar_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeFieldScaledDurationField class]]) {
    OrgJodaTimeFieldScaledDurationField *other = (OrgJodaTimeFieldScaledDurationField *) check_class_cast(obj, [OrgJodaTimeFieldScaledDurationField class]);
    return ([((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) isEqual:[((OrgJodaTimeFieldScaledDurationField *) nil_chk(other)) getWrappedField]]) && ([self getType] == [other getType]) && (iScalar_ == other->iScalar_);
  }
  return NO;
}

- (NSUInteger)hash {
  jlong scalar = iScalar_;
  jint hash_ = (jint) (scalar ^ (URShift64(scalar, 32)));
  hash_ += ((jint) [((OrgJodaTimeDurationFieldType *) nil_chk([self getType])) hash]);
  hash_ += ((jint) [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) hash]);
  return hash_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldScaledDurationField *)other {
  [super copyAllFieldsTo:other];
  other->iScalar_ = iScalar_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDurationField:withOrgJodaTimeDurationFieldType:withInt:", "ScaledDurationField", NULL, 0x1, NULL },
    { "getValueWithLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:withLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getMillisWithInt:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithInt:withLong:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:withLong:", "getMillis", "J", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getUnitMillis", NULL, "J", 0x1, NULL },
    { "getScalar", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldScaledDurationField_serialVersionUID },
    { "iScalar_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldScaledDurationField = { 1, "ScaledDurationField", "org.joda.time.field", NULL, 0x1, 17, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFieldScaledDurationField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldScaledDurationField)
