//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Mike/Projects/joda-time/src/main/java/org/joda/time/IllegalInstantException.java
//

#ifndef _OrgJodaTimeIllegalInstantException_H_
#define _OrgJodaTimeIllegalInstantException_H_

@class JavaLangThrowable;

#include "J2ObjC_header.h"
#include "java/lang/IllegalArgumentException.h"

#define OrgJodaTimeIllegalInstantException_serialVersionUID 2858712538216LL

/**
 @brief Exception thrown when attempting to create an instant or date-time that cannot exist.
 <p> Classes like <code>DateTime</code> only store valid date-times. One of the cases where validity is important is handling daylight savings time (DST). In many places DST is used, where the local clock moves forward by an hour in spring and back by an hour in autumn/fall. This means that in spring, there is a "gap" where a local time does not exist. <p> This exception refers to this gap, and it means that your application tried to create a date-time inside the gap - a time that did not exist. Since Joda-Time objects must be valid, this is not allowed. <p> Possible solutions may be as follows:<br /> Use <code>LocalDateTime</code>, as all local date-times are valid.<br /> When converting a <code>LocalDate</code> to a <code>DateTime</code>, then use <code>toDateTimeAsStartOfDay()</code> as this handles and manages any gaps.<br /> When parsing, use <code>parseLocalDateTime()</code> if the string being parsed has no time-zone.
 @author Stephen Colebourne
 @since 2.2
 */
@interface OrgJodaTimeIllegalInstantException : JavaLangIllegalArgumentException {
}

/**
 @brief Constructor.
 @param message the message
 */
- (instancetype)initWithNSString:(NSString *)message;

/**
 @brief Constructor.
 @param instantLocal the local instant
 @param zoneId the time-zone ID, may be null
 */
- (instancetype)initWithLong:(jlong)instantLocal
                withNSString:(NSString *)zoneId;

/**
 @brief Checks if the exception is, or has a cause, of <code>IllegalInstantException</code> .
 @param ex the exception to check
 @return true if an <code>IllegalInstantException</code>
 */
+ (jboolean)isIllegalInstantWithJavaLangThrowable:(JavaLangThrowable *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeIllegalInstantException)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT jboolean OrgJodaTimeIllegalInstantException_isIllegalInstantWithJavaLangThrowable_(JavaLangThrowable *ex);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeIllegalInstantException, serialVersionUID, jlong)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeIllegalInstantException)

#endif // _OrgJodaTimeIllegalInstantException_H_
