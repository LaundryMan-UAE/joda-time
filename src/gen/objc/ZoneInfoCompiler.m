//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
//

#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFormatter.h"
#include "DateTimeZone.h"
#include "DateTimeZoneBuilder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "LenientChronology.h"
#include "LocalDate.h"
#include "MutableDateTime.h"
#include "ZoneInfoCompiler.h"
#include "java/io/BufferedReader.h"
#include "java/io/DataOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/TreeMap.h"

BOOL OrgJodaTimeTzZoneInfoCompiler_initialized = NO;

@implementation OrgJodaTimeTzZoneInfoCompiler

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear * OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_;
OrgJodaTimeChronology * OrgJodaTimeTzZoneInfoCompiler_cLenientISO_;
JavaLangThreadLocal * OrgJodaTimeTzZoneInfoCompiler_cVerbose_;

+ (BOOL)verbose {
  return [((JavaLangBoolean *) nil_chk([((JavaLangThreadLocal *) nil_chk(OrgJodaTimeTzZoneInfoCompiler_cVerbose_)) get])) booleanValue];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  if ((int) [((IOSObjectArray *) nil_chk(args)) count] == 0) {
    [OrgJodaTimeTzZoneInfoCompiler printUsage];
    return;
  }
  JavaIoFile *inputDir = nil;
  JavaIoFile *outputDir = nil;
  BOOL verbose = NO;
  int i;
  for (i = 0; i < (int) [args count]; i++) {
    @try {
      if ([@"-src" isEqual:IOSObjectArray_Get(args, i)]) {
        inputDir = [[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, ++i)];
      }
      else if ([@"-dst" isEqual:IOSObjectArray_Get(args, i)]) {
        outputDir = [[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, ++i)];
      }
      else if ([@"-verbose" isEqual:IOSObjectArray_Get(args, i)]) {
        verbose = YES;
      }
      else if ([@"-?" isEqual:IOSObjectArray_Get(args, i)]) {
        [OrgJodaTimeTzZoneInfoCompiler printUsage];
        return;
      }
      else {
        break;
      }
    }
    @catch (JavaLangIndexOutOfBoundsException *e) {
      [OrgJodaTimeTzZoneInfoCompiler printUsage];
      return;
    }
  }
  if (i >= (int) [args count]) {
    [OrgJodaTimeTzZoneInfoCompiler printUsage];
    return;
  }
  IOSObjectArray *sources = [IOSObjectArray arrayWithLength:(int) [args count] - i type:[IOSClass classWithClass:[JavaIoFile class]]];
  for (int j = 0; i < (int) [args count]; i++, j++) {
    (void) IOSObjectArray_Set(sources, j, inputDir == nil ? [[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, i)] : [[JavaIoFile alloc] initWithJavaIoFile:inputDir withNSString:IOSObjectArray_Get(args, i)]);
  }
  [((JavaLangThreadLocal *) nil_chk(OrgJodaTimeTzZoneInfoCompiler_cVerbose_)) setWithId:[JavaLangBoolean valueOfWithBoolean:verbose]];
  OrgJodaTimeTzZoneInfoCompiler *zic = [[OrgJodaTimeTzZoneInfoCompiler alloc] init];
  (void) [zic compileWithJavaIoFile:outputDir withJavaIoFileArray:sources];
}

+ (void)printUsage {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"where possible options include:"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"  -src <directory>    Specify where to read source files"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"  -dst <directory>    Specify where to write generated files"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"  -verbose            Output verbosely (default false)"];
}

+ (OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)getStartOfYear {
  if (OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_ == nil) {
    OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_ = [[OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear alloc] init];
  }
  return OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_;
}

+ (OrgJodaTimeChronology *)getLenientISOChronology {
  if (OrgJodaTimeTzZoneInfoCompiler_cLenientISO_ == nil) {
    OrgJodaTimeTzZoneInfoCompiler_cLenientISO_ = [OrgJodaTimeChronoLenientChronology getInstanceWithOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceUTC]];
  }
  return OrgJodaTimeTzZoneInfoCompiler_cLenientISO_;
}

+ (void)writeZoneInfoMapWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout
                                   withJavaUtilMap:(id<JavaUtilMap>)zimap {
  id<JavaUtilMap> idToIndex = [[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilMap>) nil_chk(zimap)) size]];
  JavaUtilTreeMap *indexToId = [[JavaUtilTreeMap alloc] init];
  short int count = 0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([zimap entrySet])) {
    NSString *id_ = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
    if (![idToIndex containsKeyWithId:id_]) {
      JavaLangShort *index = [JavaLangShort valueOfWithShort:count];
      (void) [idToIndex putWithId:id_ withId:index];
      (void) [indexToId putWithId:index withId:id_];
      if (++count == 0) {
        @throw [[JavaLangInternalError alloc] initWithNSString:@"Too many time zone ids"];
      }
    }
    id_ = [((OrgJodaTimeDateTimeZone *) nil_chk(((OrgJodaTimeDateTimeZone *) check_class_cast([entry_ getValue], [OrgJodaTimeDateTimeZone class])))) getID];
    if (![idToIndex containsKeyWithId:id_]) {
      JavaLangShort *index = [JavaLangShort valueOfWithShort:count];
      (void) [idToIndex putWithId:id_ withId:index];
      (void) [indexToId putWithId:index withId:id_];
      if (++count == 0) {
        @throw [[JavaLangInternalError alloc] initWithNSString:@"Too many time zone ids"];
      }
    }
  }
  [((JavaIoDataOutputStream *) nil_chk(dout)) writeShortWithInt:[indexToId size]];
  for (NSString * __strong id_ in nil_chk([indexToId values])) {
    [dout writeUTFWithNSString:id_];
  }
  [dout writeShortWithInt:[zimap size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([zimap entrySet])) {
    NSString *id_ = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    [dout writeShortWithInt:[((JavaLangShort *) nil_chk([idToIndex getWithId:id_])) shortValue]];
    id_ = [((OrgJodaTimeDateTimeZone *) nil_chk([entry_ getValue])) getID];
    [dout writeShortWithInt:[((JavaLangShort *) nil_chk([idToIndex getWithId:id_])) shortValue]];
  }
}

+ (int)parseYearWithNSString:(NSString *)str
                     withInt:(int)def {
  str = [((NSString *) nil_chk(str)) lowercaseString];
  if ([((NSString *) nil_chk(str)) isEqual:@"minimum"] || [str isEqual:@"min"]) {
    return JavaLangInteger_MIN_VALUE;
  }
  else if ([str isEqual:@"maximum"] || [str isEqual:@"max"]) {
    return JavaLangInteger_MAX_VALUE;
  }
  else if ([str isEqual:@"only"]) {
    return def;
  }
  return [JavaLangInteger parseIntWithNSString:str];
}

+ (int)parseMonthWithNSString:(NSString *)str {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) monthOfYear];
  return [field getWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(field)) setWithLong:0 withNSString:str withJavaUtilLocale:JavaUtilLocale_get_ENGLISH_()]];
}

+ (int)parseDayOfWeekWithNSString:(NSString *)str {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) dayOfWeek];
  return [field getWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(field)) setWithLong:0 withNSString:str withJavaUtilLocale:JavaUtilLocale_get_ENGLISH_()]];
}

+ (NSString *)parseOptionalWithNSString:(NSString *)str {
  return ([((NSString *) nil_chk(str)) isEqual:@"-"]) ? nil : str;
}

+ (int)parseTimeWithNSString:(NSString *)str {
  OrgJodaTimeFormatDateTimeFormatter *p = [OrgJodaTimeFormatISODateTimeFormat hourMinuteSecondFraction];
  OrgJodaTimeMutableDateTime *mdt = [[OrgJodaTimeMutableDateTime alloc] initWithLong:0 withOrgJodaTimeChronology:[OrgJodaTimeTzZoneInfoCompiler getLenientISOChronology]];
  int pos = 0;
  if ([((NSString *) nil_chk(str)) hasPrefix:@"-"]) {
    pos = 1;
  }
  int newPos = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) parseIntoWithOrgJodaTimeReadWritableInstant:mdt withNSString:str withInt:pos];
  if (newPos == ~pos) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:str];
  }
  int millis = (int) [mdt getMillis];
  if (pos == 1) {
    millis = -millis;
  }
  return millis;
}

+ (unichar)parseZoneCharWithChar:(unichar)c {
  switch (c) {
    case 's':
    case 'S':
    return 's';
    case 'u':
    case 'U':
    case 'g':
    case 'G':
    case 'z':
    case 'Z':
    return 'u';
    case 'w':
    case 'W':
    default:
    return 'w';
  }
}

+ (BOOL)testWithNSString:(NSString *)id_
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)tz {
  if (![((NSString *) nil_chk(id_)) isEqual:[((OrgJodaTimeDateTimeZone *) nil_chk(tz)) getID]]) {
    return YES;
  }
  long long int millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) year])) setWithLong:0 withInt:1850];
  long long int end = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) year])) setWithLong:0 withInt:2050];
  int offset = [tz getOffsetWithLong:millis];
  NSString *key = [tz getNameKeyWithLong:millis];
  id<JavaUtilList> transitions = [[JavaUtilArrayList alloc] init];
  while (YES) {
    long long int next = [tz nextTransitionWithLong:millis];
    if (next == millis || next > end) {
      break;
    }
    millis = next;
    int nextOffset = [tz getOffsetWithLong:millis];
    NSString *nextKey = [tz getNameKeyWithLong:millis];
    if (offset == nextOffset && [((NSString *) nil_chk(key)) isEqual:nextKey]) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"*d* Error in %@ %@", [tz getID], [[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceUTC]]]];
      return NO;
    }
    if (nextKey == nil || (((int) [nextKey length]) < 3 && ![@"??" isEqual:nextKey])) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"*s* Error in %@ %@, nameKey=%@", [tz getID], [[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceUTC]], nextKey]];
      return NO;
    }
    [transitions addWithId:[JavaLangLong valueOfWithLong:millis]];
    offset = nextOffset;
    key = nextKey;
  }
  millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) year])) setWithLong:0 withInt:2050];
  end = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) year])) setWithLong:0 withInt:1850];
  for (int i = [transitions size]; --i >= 0; ) {
    long long int prev = [tz previousTransitionWithLong:millis];
    if (prev == millis || prev < end) {
      break;
    }
    millis = prev;
    long long int trans = [((JavaLangLong *) nil_chk([transitions getWithInt:i])) longLongValue];
    if (trans - 1 != millis) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"*r* Error in %@ %@ != %@", [tz getID], [[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceUTC]], [[OrgJodaTimeDateTime alloc] initWithLong:trans - 1 withOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceUTC]]]];
      return NO;
    }
  }
  return YES;
}

- (instancetype)init {
  if (self = [super init]) {
    iRuleSets_ = [[JavaUtilHashMap alloc] init];
    iZones_ = [[JavaUtilArrayList alloc] init];
    iLinks_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id<JavaUtilMap>)compileWithJavaIoFile:(JavaIoFile *)outputDir
                     withJavaIoFileArray:(IOSObjectArray *)sources {
  if (sources != nil) {
    for (int i = 0; i < (int) [sources count]; i++) {
      JavaIoBufferedReader *in = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoFileReader alloc] initWithJavaIoFile:IOSObjectArray_Get(sources, i)]];
      [self parseDataFileWithJavaIoBufferedReader:in];
      [in close];
    }
  }
  if (outputDir != nil) {
    if (![outputDir exists]) {
      if (![outputDir mkdirs]) {
        @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Destination directory doesn't exist and cannot be created: %@", outputDir]];
      }
    }
    if (![outputDir isDirectory]) {
      @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Destination is not a directory: %@", outputDir]];
    }
  }
  id<JavaUtilMap> map = [[JavaUtilTreeMap alloc] init];
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Writing zoneinfo files"];
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(iZones_)) size]; i++) {
    OrgJodaTimeTzZoneInfoCompiler_Zone *zone = [iZones_ getWithInt:i];
    OrgJodaTimeTzDateTimeZoneBuilder *builder = [[OrgJodaTimeTzDateTimeZoneBuilder alloc] init];
    [((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(zone)) addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:builder withJavaUtilMap:iRuleSets_];
    OrgJodaTimeDateTimeZone *original = [builder toDateTimeZoneWithNSString:zone->iName_ withBoolean:YES];
    OrgJodaTimeDateTimeZone *tz = original;
    if ([OrgJodaTimeTzZoneInfoCompiler testWithNSString:[((OrgJodaTimeDateTimeZone *) nil_chk(tz)) getID] withOrgJodaTimeDateTimeZone:tz]) {
      (void) [map putWithId:[tz getID] withId:tz];
      if (outputDir != nil) {
        if ([OrgJodaTimeTzZoneInfoCompiler verbose]) {
          [JavaLangSystem_get_out_() printlnWithNSString:[NSString stringWithFormat:@"Writing %@", [tz getID]]];
        }
        JavaIoFile *file = [[JavaIoFile alloc] initWithJavaIoFile:outputDir withNSString:[tz getID]];
        if (![((JavaIoFile *) nil_chk([file getParentFile])) exists]) {
          [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs];
        }
        JavaIoOutputStream *out = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:file];
        @try {
          [builder writeToWithNSString:zone->iName_ withJavaIoOutputStream:out];
        }
        @finally {
          [out close];
        }
        JavaIoInputStream *in = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
        OrgJodaTimeDateTimeZone *tz2 = [OrgJodaTimeTzDateTimeZoneBuilder readFromWithJavaIoInputStream:in withNSString:[tz getID]];
        [in close];
        if (![((OrgJodaTimeDateTimeZone *) nil_chk(original)) isEqual:tz2]) {
          [JavaLangSystem_get_out_() printlnWithNSString:[NSString stringWithFormat:@"*e* Error in %@: Didn't read properly from file", [tz getID]]];
        }
      }
    }
  }
  for (int pass = 0; pass < 2; pass++) {
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(iLinks_)) size]; i += 2) {
      NSString *id_ = [iLinks_ getWithInt:i];
      NSString *alias = [iLinks_ getWithInt:i + 1];
      OrgJodaTimeDateTimeZone *tz = [map getWithId:id_];
      if (tz == nil) {
        if (pass > 0) {
          [JavaLangSystem_get_out_() printlnWithNSString:[NSString stringWithFormat:@"Cannot find time zone '%@' to link alias '%@' to", id_, alias]];
        }
      }
      else {
        (void) [map putWithId:alias withId:tz];
      }
    }
  }
  if (outputDir != nil) {
    [JavaLangSystem_get_out_() printlnWithNSString:@"Writing ZoneInfoMap"];
    JavaIoFile *file = [[JavaIoFile alloc] initWithJavaIoFile:outputDir withNSString:@"ZoneInfoMap"];
    if (![((JavaIoFile *) nil_chk([file getParentFile])) exists]) {
      [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs];
    }
    JavaIoOutputStream *out = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:file];
    JavaIoDataOutputStream *dout = [[JavaIoDataOutputStream alloc] initWithJavaIoOutputStream:out];
    @try {
      id<JavaUtilMap> zimap = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()];
      [zimap putAllWithJavaUtilMap:map];
      [OrgJodaTimeTzZoneInfoCompiler writeZoneInfoMapWithJavaIoDataOutputStream:dout withJavaUtilMap:zimap];
    }
    @finally {
      [dout close];
    }
  }
  return map;
}

- (void)parseDataFileWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  OrgJodaTimeTzZoneInfoCompiler_Zone *zone = nil;
  NSString *line;
  while ((line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine]) != nil) {
    NSString *trimmed = [((NSString *) nil_chk(line)) trim];
    if (((int) [((NSString *) nil_chk(trimmed)) length]) == 0 || [trimmed charAtWithInt:0] == '#') {
      continue;
    }
    int index = [line indexOf:'#'];
    if (index >= 0) {
      line = [line substring:0 endIndex:index];
    }
    JavaUtilStringTokenizer *st = [[JavaUtilStringTokenizer alloc] initWithNSString:line withNSString:@" \t"];
    if ([JavaLangCharacter isWhitespaceWithChar:[((NSString *) nil_chk(line)) charAtWithInt:0]] && [st hasMoreTokens]) {
      if (zone != nil) {
        [zone chainWithJavaUtilStringTokenizer:st];
      }
      continue;
    }
    else {
      if (zone != nil) {
        [((id<JavaUtilList>) nil_chk(iZones_)) addWithId:zone];
      }
      zone = nil;
    }
    if ([st hasMoreTokens]) {
      NSString *token = [st nextToken];
      if ([((NSString *) nil_chk(token)) equalsIgnoreCase:@"Rule"]) {
        OrgJodaTimeTzZoneInfoCompiler_Rule *r = [[OrgJodaTimeTzZoneInfoCompiler_Rule alloc] initWithJavaUtilStringTokenizer:st];
        OrgJodaTimeTzZoneInfoCompiler_RuleSet *rs = [((id<JavaUtilMap>) nil_chk(iRuleSets_)) getWithId:r->iName_];
        if (rs == nil) {
          rs = [[OrgJodaTimeTzZoneInfoCompiler_RuleSet alloc] initWithOrgJodaTimeTzZoneInfoCompiler_Rule:r];
          (void) [iRuleSets_ putWithId:r->iName_ withId:rs];
        }
        else {
          [rs addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:r];
        }
      }
      else if ([token equalsIgnoreCase:@"Zone"]) {
        zone = [[OrgJodaTimeTzZoneInfoCompiler_Zone alloc] initWithJavaUtilStringTokenizer:st];
      }
      else if ([token equalsIgnoreCase:@"Link"]) {
        [((id<JavaUtilList>) nil_chk(iLinks_)) addWithId:[st nextToken]];
        [iLinks_ addWithId:[st nextToken]];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"Unknown line: %@", line]];
      }
    }
  }
  if (zone != nil) {
    [((id<JavaUtilList>) nil_chk(iZones_)) addWithId:zone];
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeTzZoneInfoCompiler class]) {
    OrgJodaTimeTzZoneInfoCompiler_cVerbose_ = [[OrgJodaTimeTzZoneInfoCompiler_$1 alloc] init];
    OrgJodaTimeTzZoneInfoCompiler_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler *)other {
  [super copyAllFieldsTo:other];
  other->iLinks_ = iLinks_;
  other->iRuleSets_ = iRuleSets_;
  other->iZones_ = iZones_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "verbose", NULL, "Z", 0x9, NULL },
    { "mainWithNSStringArray:", "main", "V", 0x9, "Ljava.lang.Exception;" },
    { "printUsage", NULL, "V", 0xa, NULL },
    { "getStartOfYear", NULL, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", 0x8, NULL },
    { "getLenientISOChronology", NULL, "Lorg.joda.time.Chronology;", 0x8, NULL },
    { "writeZoneInfoMapWithJavaIoDataOutputStream:withJavaUtilMap:", "writeZoneInfoMap", "V", 0x8, "Ljava.io.IOException;" },
    { "parseYearWithNSString:withInt:", "parseYear", "I", 0x8, NULL },
    { "parseMonthWithNSString:", "parseMonth", "I", 0x8, NULL },
    { "parseDayOfWeekWithNSString:", "parseDayOfWeek", "I", 0x8, NULL },
    { "parseOptionalWithNSString:", "parseOptional", "Ljava.lang.String;", 0x8, NULL },
    { "parseTimeWithNSString:", "parseTime", "I", 0x8, NULL },
    { "parseZoneCharWithChar:", "parseZoneChar", "C", 0x8, NULL },
    { "testWithNSString:withOrgJodaTimeDateTimeZone:", "test", "Z", 0x8, NULL },
    { "init", "ZoneInfoCompiler", NULL, 0x1, NULL },
    { "compileWithJavaIoFile:withJavaIoFileArray:", "compile", "Ljava.util.Map;", 0x1, "Ljava.io.IOException;" },
    { "parseDataFileWithJavaIoBufferedReader:", "parseDataFile", "V", 0x1, "Ljava.io.IOException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cStartOfYear_", NULL, 0x8, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", &OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_,  },
    { "cLenientISO_", NULL, 0x8, "Lorg.joda.time.Chronology;", &OrgJodaTimeTzZoneInfoCompiler_cLenientISO_,  },
    { "cVerbose_", NULL, 0x8, "Ljava.lang.ThreadLocal;", &OrgJodaTimeTzZoneInfoCompiler_cVerbose_,  },
    { "iRuleSets_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "iZones_", NULL, 0x2, "Ljava.util.List;", NULL,  },
    { "iLinks_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler = { "ZoneInfoCompiler", "org.joda.time.tz", NULL, 0x1, 16, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler;
}

@end

@implementation OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear

- (instancetype)init {
  if (self = [super init]) {
    iMonthOfYear_ = 1;
    iDayOfMonth_ = 1;
    iDayOfWeek_ = 0;
    iAdvanceDayOfWeek_ = NO;
    iMillisOfDay_ = 0;
    iZoneChar_ = 'w';
  }
  return self;
}

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (self = [super init]) {
    int month = 1;
    int day = 1;
    int dayOfWeek = 0;
    int millis = 0;
    BOOL advance = NO;
    unichar zoneChar = 'w';
    if ([((JavaUtilStringTokenizer *) nil_chk(st)) hasMoreTokens]) {
      month = [OrgJodaTimeTzZoneInfoCompiler parseMonthWithNSString:[st nextToken]];
      if ([st hasMoreTokens]) {
        NSString *str = [st nextToken];
        if ([((NSString *) nil_chk(str)) hasPrefix:@"last"]) {
          day = -1;
          dayOfWeek = [OrgJodaTimeTzZoneInfoCompiler parseDayOfWeekWithNSString:[str substring:4]];
          advance = NO;
        }
        else {
          @try {
            day = [JavaLangInteger parseIntWithNSString:str];
            dayOfWeek = 0;
            advance = NO;
          }
          @catch (JavaLangNumberFormatException *e) {
            int index = [str indexOfString:@">="];
            if (index > 0) {
              day = [JavaLangInteger parseIntWithNSString:[str substring:index + 2]];
              dayOfWeek = [OrgJodaTimeTzZoneInfoCompiler parseDayOfWeekWithNSString:[str substring:0 endIndex:index]];
              advance = YES;
            }
            else {
              index = [str indexOfString:@"<="];
              if (index > 0) {
                day = [JavaLangInteger parseIntWithNSString:[str substring:index + 2]];
                dayOfWeek = [OrgJodaTimeTzZoneInfoCompiler parseDayOfWeekWithNSString:[str substring:0 endIndex:index]];
                advance = NO;
              }
              else {
                @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:str];
              }
            }
          }
        }
        if ([st hasMoreTokens]) {
          str = [st nextToken];
          zoneChar = [OrgJodaTimeTzZoneInfoCompiler parseZoneCharWithChar:[str charAtWithInt:((int) [((NSString *) nil_chk(str)) length]) - 1]];
          if ([str isEqual:@"24:00"]) {
            OrgJodaTimeLocalDate *date = (day == -1 ? [((OrgJodaTimeLocalDate *) [[OrgJodaTimeLocalDate alloc] initWithInt:2001 withInt:month withInt:1]) plusMonthsWithInt:1] : [((OrgJodaTimeLocalDate *) [[OrgJodaTimeLocalDate alloc] initWithInt:2001 withInt:month withInt:day]) plusDaysWithInt:1]);
            advance = (day != -1 && dayOfWeek != 0);
            month = [date getMonthOfYear];
            day = [date getDayOfMonth];
            if (dayOfWeek != 0) {
              dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;
            }
          }
          else {
            millis = [OrgJodaTimeTzZoneInfoCompiler parseTimeWithNSString:str];
          }
        }
      }
    }
    iMonthOfYear_ = month;
    iDayOfMonth_ = day;
    iDayOfWeek_ = dayOfWeek;
    iAdvanceDayOfWeek_ = advance;
    iMillisOfDay_ = millis;
    iZoneChar_ = zoneChar;
  }
  return self;
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameKey
                                                 withInt:(int)saveMillis
                                                 withInt:(int)fromYear
                                                 withInt:(int)toYear {
  (void) [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) addRecurringSavingsWithNSString:nameKey withInt:saveMillis withInt:fromYear withInt:toYear withChar:iZoneChar_ withInt:iMonthOfYear_ withInt:iDayOfMonth_ withInt:iDayOfWeek_ withBoolean:iAdvanceDayOfWeek_ withInt:iMillisOfDay_];
}

- (void)addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                               withInt:(int)year {
  (void) [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) addCutoverWithInt:year withChar:iZoneChar_ withInt:iMonthOfYear_ withInt:iDayOfMonth_ withInt:iDayOfWeek_ withBoolean:iAdvanceDayOfWeek_ withInt:iMillisOfDay_];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"MonthOfYear: %d\nDayOfMonth: %d\nDayOfWeek: %d\nAdvanceDayOfWeek: %@\nMillisOfDay: %d\nZoneChar: %C\n", iMonthOfYear_, iDayOfMonth_, iDayOfWeek_, [JavaLangBoolean toStringWithBoolean:iAdvanceDayOfWeek_], iMillisOfDay_, iZoneChar_];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)other {
  [super copyAllFieldsTo:other];
  other->iAdvanceDayOfWeek_ = iAdvanceDayOfWeek_;
  other->iDayOfMonth_ = iDayOfMonth_;
  other->iDayOfWeek_ = iDayOfWeek_;
  other->iMillisOfDay_ = iMillisOfDay_;
  other->iMonthOfYear_ = iMonthOfYear_;
  other->iZoneChar_ = iZoneChar_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "DateTimeOfYear", NULL, 0x0, NULL },
    { "initWithJavaUtilStringTokenizer:", "DateTimeOfYear", NULL, 0x0, NULL },
    { "addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:withInt:withInt:withInt:", "addRecurring", "V", 0x1, NULL },
    { "addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:withInt:", "addCutover", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iMonthOfYear_", NULL, 0x11, "I", NULL,  },
    { "iDayOfMonth_", NULL, 0x11, "I", NULL,  },
    { "iDayOfWeek_", NULL, 0x11, "I", NULL,  },
    { "iAdvanceDayOfWeek_", NULL, 0x11, "Z", NULL,  },
    { "iMillisOfDay_", NULL, 0x11, "I", NULL,  },
    { "iZoneChar_", NULL, 0x11, "C", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear = { "DateTimeOfYear", "org.joda.time.tz", "ZoneInfoCompiler", 0x8, 5, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;
}

@end

@implementation OrgJodaTimeTzZoneInfoCompiler_Rule

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (self = [super init]) {
    iName_ = [((NSString *) nil_chk([((JavaUtilStringTokenizer *) nil_chk(st)) nextToken])) intern];
    iFromYear_ = [OrgJodaTimeTzZoneInfoCompiler parseYearWithNSString:[st nextToken] withInt:0];
    iToYear_ = [OrgJodaTimeTzZoneInfoCompiler parseYearWithNSString:[st nextToken] withInt:iFromYear_];
    if (iToYear_ < iFromYear_) {
      @throw [[JavaLangIllegalArgumentException alloc] init];
    }
    iType_ = [OrgJodaTimeTzZoneInfoCompiler parseOptionalWithNSString:[st nextToken]];
    iDateTimeOfYear_ = [[OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear alloc] initWithJavaUtilStringTokenizer:st];
    iSaveMillis_ = [OrgJodaTimeTzZoneInfoCompiler parseTimeWithNSString:[st nextToken]];
    iLetterS_ = [OrgJodaTimeTzZoneInfoCompiler parseOptionalWithNSString:[st nextToken]];
  }
  return self;
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat {
  NSString *nameKey = [self formatNameWithNSString:nameFormat];
  [((OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *) nil_chk(iDateTimeOfYear_)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:nameKey withInt:iSaveMillis_ withInt:iFromYear_ withInt:iToYear_];
}

- (NSString *)formatNameWithNSString:(NSString *)nameFormat {
  int index = [((NSString *) nil_chk(nameFormat)) indexOf:'/'];
  if (index > 0) {
    if (iSaveMillis_ == 0) {
      return [((NSString *) nil_chk([nameFormat substring:0 endIndex:index])) intern];
    }
    else {
      return [((NSString *) nil_chk([nameFormat substring:index + 1])) intern];
    }
  }
  index = [nameFormat indexOfString:@"%s"];
  if (index < 0) {
    return nameFormat;
  }
  NSString *left = [nameFormat substring:0 endIndex:index];
  NSString *right = [nameFormat substring:index + 2];
  NSString *name;
  if (iLetterS_ == nil) {
    name = [((NSString *) nil_chk(left)) concat:right];
  }
  else {
    name = [NSString stringWithFormat:@"%@%@%@", left, iLetterS_, right];
  }
  return [((NSString *) nil_chk(name)) intern];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@%@\nFromYear: %d\nToYear: %d\nType: %@\n%@SaveMillis: %d\nLetterS: %@\n", @"[Rule]\nName: ", iName_, iFromYear_, iToYear_, iType_, iDateTimeOfYear_, iSaveMillis_, iLetterS_];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_Rule *)other {
  [super copyAllFieldsTo:other];
  other->iDateTimeOfYear_ = iDateTimeOfYear_;
  other->iFromYear_ = iFromYear_;
  other->iLetterS_ = iLetterS_;
  other->iName_ = iName_;
  other->iSaveMillis_ = iSaveMillis_;
  other->iToYear_ = iToYear_;
  other->iType_ = iType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilStringTokenizer:", "Rule", NULL, 0x0, NULL },
    { "addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:", "addRecurring", "V", 0x1, NULL },
    { "formatNameWithNSString:", "formatName", "Ljava.lang.String;", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iName_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iFromYear_", NULL, 0x11, "I", NULL,  },
    { "iToYear_", NULL, 0x11, "I", NULL,  },
    { "iType_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iDateTimeOfYear_", NULL, 0x11, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", NULL,  },
    { "iSaveMillis_", NULL, 0x11, "I", NULL,  },
    { "iLetterS_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_Rule = { "Rule", "org.joda.time.tz", "ZoneInfoCompiler", 0xa, 4, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_Rule;
}

@end

@implementation OrgJodaTimeTzZoneInfoCompiler_RuleSet

- (instancetype)initWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule {
  if (self = [super init]) {
    iRules_ = [[JavaUtilArrayList alloc] init];
    [iRules_ addWithId:rule];
  }
  return self;
}

- (void)addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule {
  if (!([((NSString *) nil_chk(((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk(rule))->iName_)) isEqual:((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk([((id<JavaUtilList>) nil_chk(iRules_)) getWithInt:0]))->iName_])) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Rule name mismatch"];
  }
  [iRules_ addWithId:rule];
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat {
  for (int i = 0; i < [((id<JavaUtilList>) nil_chk(iRules_)) size]; i++) {
    OrgJodaTimeTzZoneInfoCompiler_Rule *rule = [iRules_ getWithInt:i];
    [((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk(rule)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:nameFormat];
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_RuleSet *)other {
  [super copyAllFieldsTo:other];
  other->iRules_ = iRules_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeTzZoneInfoCompiler_Rule:", "RuleSet", NULL, 0x0, NULL },
    { "addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:", "addRule", "V", 0x0, NULL },
    { "addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:", "addRecurring", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iRules_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_RuleSet = { "RuleSet", "org.joda.time.tz", "ZoneInfoCompiler", 0xa, 3, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_RuleSet;
}

@end

@implementation OrgJodaTimeTzZoneInfoCompiler_Zone

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  return [self initOrgJodaTimeTzZoneInfoCompiler_ZoneWithNSString:[((JavaUtilStringTokenizer *) nil_chk(st)) nextToken] withJavaUtilStringTokenizer:st];
}

- (instancetype)initOrgJodaTimeTzZoneInfoCompiler_ZoneWithNSString:(NSString *)name
                                       withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (self = [super init]) {
    iName_ = [((NSString *) nil_chk(name)) intern];
    iOffsetMillis_ = [OrgJodaTimeTzZoneInfoCompiler parseTimeWithNSString:[((JavaUtilStringTokenizer *) nil_chk(st)) nextToken]];
    iRules_ = [OrgJodaTimeTzZoneInfoCompiler parseOptionalWithNSString:[st nextToken]];
    iFormat_ = [((NSString *) nil_chk([st nextToken])) intern];
    int year = JavaLangInteger_MAX_VALUE;
    OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *dtOfYear = [OrgJodaTimeTzZoneInfoCompiler getStartOfYear];
    if ([st hasMoreTokens]) {
      year = [JavaLangInteger parseIntWithNSString:[st nextToken]];
      if ([st hasMoreTokens]) {
        dtOfYear = [[OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear alloc] initWithJavaUtilStringTokenizer:st];
      }
    }
    iUntilYear_ = year;
    iUntilDateTimeOfYear_ = dtOfYear;
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
     withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  return [self initOrgJodaTimeTzZoneInfoCompiler_ZoneWithNSString:name withJavaUtilStringTokenizer:st];
}

- (void)chainWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (iNext_ != nil) {
    [iNext_ chainWithJavaUtilStringTokenizer:st];
  }
  else {
    iNext_ = [[OrgJodaTimeTzZoneInfoCompiler_Zone alloc] initWithNSString:iName_ withJavaUtilStringTokenizer:st];
  }
}

- (void)addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                         withJavaUtilMap:(id<JavaUtilMap>)ruleSets {
  [OrgJodaTimeTzZoneInfoCompiler_Zone addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:self withOrgJodaTimeTzDateTimeZoneBuilder:builder withJavaUtilMap:ruleSets];
}

+ (void)addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:(OrgJodaTimeTzZoneInfoCompiler_Zone *)zone
                      withOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                           withJavaUtilMap:(id<JavaUtilMap>)ruleSets {
  for (; zone != nil; zone = zone->iNext_) {
    (void) [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) setStandardOffsetWithInt:((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(zone))->iOffsetMillis_];
    if (zone->iRules_ == nil) {
      (void) [builder setFixedSavingsWithNSString:zone->iFormat_ withInt:0];
    }
    else {
      @try {
        int saveMillis = [OrgJodaTimeTzZoneInfoCompiler parseTimeWithNSString:zone->iRules_];
        (void) [builder setFixedSavingsWithNSString:zone->iFormat_ withInt:saveMillis];
      }
      @catch (JavaLangException *e) {
        OrgJodaTimeTzZoneInfoCompiler_RuleSet *rs = [((id<JavaUtilMap>) nil_chk(ruleSets)) getWithId:zone->iRules_];
        if (rs == nil) {
          @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Rules not found: %@", zone->iRules_]];
        }
        [((OrgJodaTimeTzZoneInfoCompiler_RuleSet *) nil_chk(rs)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:zone->iFormat_];
      }
    }
    if (zone->iUntilYear_ == JavaLangInteger_MAX_VALUE) {
      break;
    }
    [((OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *) nil_chk(zone->iUntilDateTimeOfYear_)) addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:builder withInt:zone->iUntilYear_];
  }
}

- (NSString *)description {
  NSString *str = [NSString stringWithFormat:@"%@%@\nOffsetMillis: %d\nRules: %@\nFormat: %@\nUntilYear: %d\n%@", @"[Zone]\nName: ", iName_, iOffsetMillis_, iRules_, iFormat_, iUntilYear_, iUntilDateTimeOfYear_];
  if (iNext_ == nil) {
    return str;
  }
  return [NSString stringWithFormat:@"%@...\n%@", str, [((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(iNext_)) description]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_Zone *)other {
  [super copyAllFieldsTo:other];
  other->iFormat_ = iFormat_;
  other->iName_ = iName_;
  other->iNext_ = iNext_;
  other->iOffsetMillis_ = iOffsetMillis_;
  other->iRules_ = iRules_;
  other->iUntilDateTimeOfYear_ = iUntilDateTimeOfYear_;
  other->iUntilYear_ = iUntilYear_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilStringTokenizer:", "Zone", NULL, 0x0, NULL },
    { "initWithNSString:withJavaUtilStringTokenizer:", "Zone", NULL, 0x2, NULL },
    { "chainWithJavaUtilStringTokenizer:", "chain", "V", 0x0, NULL },
    { "addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:withJavaUtilMap:", "addToBuilder", "V", 0x1, NULL },
    { "addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:withOrgJodaTimeTzDateTimeZoneBuilder:withJavaUtilMap:", "addToBuilder", "V", 0xa, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iName_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iOffsetMillis_", NULL, 0x11, "I", NULL,  },
    { "iRules_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iFormat_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iUntilYear_", NULL, 0x11, "I", NULL,  },
    { "iUntilDateTimeOfYear_", NULL, 0x11, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", NULL,  },
    { "iNext_", NULL, 0x2, "Lorg.joda.time.tz.ZoneInfoCompiler$Zone;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_Zone = { "Zone", "org.joda.time.tz", "ZoneInfoCompiler", 0xa, 6, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_Zone;
}

@end

@implementation OrgJodaTimeTzZoneInfoCompiler_$1

- (JavaLangBoolean *)initialValue {
  return JavaLangBoolean_get_FALSE__();
}

- (instancetype)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "Ljava.lang.Boolean;", 0x4, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Boolean;"};
  static J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_$1 = { "$1", "org.joda.time.tz", "ZoneInfoCompiler", 0x8000, 2, methods, 0, NULL, 1, superclass_type_args};
  return &_OrgJodaTimeTzZoneInfoCompiler_$1;
}

@end
