//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
//

#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFormatter.h"
#include "DateTimeZone.h"
#include "DateTimeZoneBuilder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "LenientChronology.h"
#include "LocalDate.h"
#include "MutableDateTime.h"
#include "ZoneInfoCompiler.h"
#include "java/io/BufferedReader.h"
#include "java/io/DataOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/TreeMap.h"

__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_printUsage();
__attribute__((unused)) static NSString *OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(OrgJodaTimeTzZoneInfoCompiler_Rule *self, NSString *nameFormat);
__attribute__((unused)) static void OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(OrgJodaTimeTzZoneInfoCompiler_Zone *zone, OrgJodaTimeTzDateTimeZoneBuilder *builder, id<JavaUtilMap> ruleSets);

@interface OrgJodaTimeTzZoneInfoCompiler () {
 @public
  id<JavaUtilMap> iRuleSets_;
  id<JavaUtilList> iZones_;
  id<JavaUtilList> iLinks_;
}

+ (void)printUsage;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, iRuleSets_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, iZones_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, iLinks_, id<JavaUtilList>)

@interface OrgJodaTimeTzZoneInfoCompiler_Rule ()

- (NSString *)formatNameWithNSString:(NSString *)nameFormat;
@end

@interface OrgJodaTimeTzZoneInfoCompiler_RuleSet () {
 @public
  id<JavaUtilList> iRules_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_RuleSet, iRules_, id<JavaUtilList>)

@interface OrgJodaTimeTzZoneInfoCompiler_Zone () {
 @public
  OrgJodaTimeTzZoneInfoCompiler_Zone *iNext_;
}
- (instancetype)initWithNSString:(NSString *)name
     withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

+ (void)addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:(OrgJodaTimeTzZoneInfoCompiler_Zone *)zone
                      withOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                           withJavaUtilMap:(id<JavaUtilMap>)ruleSets;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iNext_, OrgJodaTimeTzZoneInfoCompiler_Zone *)

BOOL OrgJodaTimeTzZoneInfoCompiler_initialized = NO;

@implementation OrgJodaTimeTzZoneInfoCompiler

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear * OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_;
OrgJodaTimeChronology * OrgJodaTimeTzZoneInfoCompiler_cLenientISO_;
JavaLangThreadLocal * OrgJodaTimeTzZoneInfoCompiler_cVerbose_;

+ (jboolean)verbose {
  return OrgJodaTimeTzZoneInfoCompiler_verbose();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgJodaTimeTzZoneInfoCompiler_mainWithNSStringArray_(args);
}

+ (void)printUsage {
  OrgJodaTimeTzZoneInfoCompiler_printUsage();
}

+ (OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)getStartOfYear {
  return OrgJodaTimeTzZoneInfoCompiler_getStartOfYear();
}

+ (OrgJodaTimeChronology *)getLenientISOChronology {
  return OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology();
}

+ (void)writeZoneInfoMapWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout
                                   withJavaUtilMap:(id<JavaUtilMap>)zimap {
  OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(dout, zimap);
}

+ (jint)parseYearWithNSString:(NSString *)str
                      withInt:(jint)def {
  return OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_(str, def);
}

+ (jint)parseMonthWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_(str);
}

+ (jint)parseDayOfWeekWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_(str);
}

+ (NSString *)parseOptionalWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_(str);
}

+ (jint)parseTimeWithNSString:(NSString *)str {
  return OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(str);
}

+ (jchar)parseZoneCharWithChar:(jchar)c {
  return OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_(c);
}

+ (jboolean)testWithNSString:(NSString *)id_
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)tz {
  return OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_(id_, tz);
}

- (instancetype)init {
  if (self = [super init]) {
    OrgJodaTimeTzZoneInfoCompiler_setAndConsume_iRuleSets_(self, [[JavaUtilHashMap alloc] init]);
    OrgJodaTimeTzZoneInfoCompiler_setAndConsume_iZones_(self, [[JavaUtilArrayList alloc] init]);
    OrgJodaTimeTzZoneInfoCompiler_setAndConsume_iLinks_(self, [[JavaUtilArrayList alloc] init]);
  }
  return self;
}

- (id<JavaUtilMap>)compileWithJavaIoFile:(JavaIoFile *)outputDir
                     withJavaIoFileArray:(IOSObjectArray *)sources {
  if (sources != nil) {
    for (jint i = 0; i < sources->size_; i++) {
      JavaIoBufferedReader *in = [[[JavaIoBufferedReader alloc] initWithJavaIoReader:[[[JavaIoFileReader alloc] initWithJavaIoFile:IOSObjectArray_Get(sources, i)] autorelease]] autorelease];
      [self parseDataFileWithJavaIoBufferedReader:in];
      [in close];
    }
  }
  if (outputDir != nil) {
    if (![outputDir exists]) {
      if (![outputDir mkdirs]) {
        @throw [[[JavaIoIOException alloc] initWithNSString:JreStrcat("$@", @"Destination directory doesn't exist and cannot be created: ", outputDir)] autorelease];
      }
    }
    if (![outputDir isDirectory]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:JreStrcat("$@", @"Destination is not a directory: ", outputDir)] autorelease];
    }
  }
  id<JavaUtilMap> map = [[[JavaUtilTreeMap alloc] init] autorelease];
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Writing zoneinfo files"];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(iZones_)) size]; i++) {
    OrgJodaTimeTzZoneInfoCompiler_Zone *zone = [iZones_ getWithInt:i];
    OrgJodaTimeTzDateTimeZoneBuilder *builder = [[[OrgJodaTimeTzDateTimeZoneBuilder alloc] init] autorelease];
    [((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(zone)) addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:builder withJavaUtilMap:iRuleSets_];
    OrgJodaTimeDateTimeZone *original = [builder toDateTimeZoneWithNSString:zone->iName_ withBoolean:YES];
    OrgJodaTimeDateTimeZone *tz = original;
    if (OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_([((OrgJodaTimeDateTimeZone *) nil_chk(tz)) getID], tz)) {
      [map putWithId:[tz getID] withId:tz];
      if (outputDir != nil) {
        if (OrgJodaTimeTzZoneInfoCompiler_verbose()) {
          [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"Writing ", [tz getID])];
        }
        JavaIoFile *file = [[[JavaIoFile alloc] initWithJavaIoFile:outputDir withNSString:[tz getID]] autorelease];
        if (![((JavaIoFile *) nil_chk([file getParentFile])) exists]) {
          [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs];
        }
        JavaIoOutputStream *out = [[[JavaIoFileOutputStream alloc] initWithJavaIoFile:file] autorelease];
        @try {
          [builder writeToWithNSString:zone->iName_ withJavaIoOutputStream:out];
        }
        @finally {
          [out close];
        }
        JavaIoInputStream *in = [[[JavaIoFileInputStream alloc] initWithJavaIoFile:file] autorelease];
        OrgJodaTimeDateTimeZone *tz2 = OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoInputStream_withNSString_(in, [tz getID]);
        [in close];
        if (![((OrgJodaTimeDateTimeZone *) nil_chk(original)) isEqual:tz2]) {
          [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$$", @"*e* Error in ", [tz getID], @": Didn't read properly from file")];
        }
      }
    }
  }
  for (jint pass = 0; pass < 2; pass++) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(iLinks_)) size]; i += 2) {
      NSString *id_ = [iLinks_ getWithInt:i];
      NSString *alias = [iLinks_ getWithInt:i + 1];
      OrgJodaTimeDateTimeZone *tz = [map getWithId:id_];
      if (tz == nil) {
        if (pass > 0) {
          [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$$$$", @"Cannot find time zone '", id_, @"' to link alias '", alias, @"' to")];
        }
      }
      else {
        [map putWithId:alias withId:tz];
      }
    }
  }
  if (outputDir != nil) {
    [JavaLangSystem_get_out_() printlnWithNSString:@"Writing ZoneInfoMap"];
    JavaIoFile *file = [[[JavaIoFile alloc] initWithJavaIoFile:outputDir withNSString:@"ZoneInfoMap"] autorelease];
    if (![((JavaIoFile *) nil_chk([file getParentFile])) exists]) {
      [((JavaIoFile *) nil_chk([file getParentFile])) mkdirs];
    }
    JavaIoOutputStream *out = [[[JavaIoFileOutputStream alloc] initWithJavaIoFile:file] autorelease];
    JavaIoDataOutputStream *dout = [[[JavaIoDataOutputStream alloc] initWithJavaIoOutputStream:out] autorelease];
    @try {
      id<JavaUtilMap> zimap = [[[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()] autorelease];
      [zimap putAllWithJavaUtilMap:map];
      OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(dout, zimap);
    }
    @finally {
      [dout close];
    }
  }
  return map;
}

- (void)parseDataFileWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  OrgJodaTimeTzZoneInfoCompiler_Zone *zone = nil;
  NSString *line;
  while ((line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine]) != nil) {
    NSString *trimmed = [((NSString *) nil_chk(line)) trim];
    if (((jint) [((NSString *) nil_chk(trimmed)) length]) == 0 || [trimmed charAtWithInt:0] == '#') {
      continue;
    }
    jint index = [line indexOf:'#'];
    if (index >= 0) {
      line = [line substring:0 endIndex:index];
    }
    JavaUtilStringTokenizer *st = [[[JavaUtilStringTokenizer alloc] initWithNSString:line withNSString:@" \t"] autorelease];
    if (JavaLangCharacter_isWhitespaceWithChar_([((NSString *) nil_chk(line)) charAtWithInt:0]) && [st hasMoreTokens]) {
      if (zone != nil) {
        [zone chainWithJavaUtilStringTokenizer:st];
      }
      continue;
    }
    else {
      if (zone != nil) {
        [((id<JavaUtilList>) nil_chk(iZones_)) addWithId:zone];
      }
      zone = nil;
    }
    if ([st hasMoreTokens]) {
      NSString *token = [st nextToken];
      if ([((NSString *) nil_chk(token)) equalsIgnoreCase:@"Rule"]) {
        OrgJodaTimeTzZoneInfoCompiler_Rule *r = [[[OrgJodaTimeTzZoneInfoCompiler_Rule alloc] initWithJavaUtilStringTokenizer:st] autorelease];
        OrgJodaTimeTzZoneInfoCompiler_RuleSet *rs = [((id<JavaUtilMap>) nil_chk(iRuleSets_)) getWithId:r->iName_];
        if (rs == nil) {
          rs = [[[OrgJodaTimeTzZoneInfoCompiler_RuleSet alloc] initWithOrgJodaTimeTzZoneInfoCompiler_Rule:r] autorelease];
          [iRuleSets_ putWithId:r->iName_ withId:rs];
        }
        else {
          [rs addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:r];
        }
      }
      else if ([token equalsIgnoreCase:@"Zone"]) {
        zone = [[[OrgJodaTimeTzZoneInfoCompiler_Zone alloc] initWithJavaUtilStringTokenizer:st] autorelease];
      }
      else if ([token equalsIgnoreCase:@"Link"]) {
        [((id<JavaUtilList>) nil_chk(iLinks_)) addWithId:[st nextToken]];
        [iLinks_ addWithId:[st nextToken]];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"Unknown line: ", line)];
      }
    }
  }
  if (zone != nil) {
    [((id<JavaUtilList>) nil_chk(iZones_)) addWithId:zone];
  }
}

- (void)dealloc {
  RELEASE_(iRuleSets_);
  RELEASE_(iZones_);
  RELEASE_(iLinks_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzZoneInfoCompiler_set_iRuleSets_(other, iRuleSets_);
  OrgJodaTimeTzZoneInfoCompiler_set_iZones_(other, iZones_);
  OrgJodaTimeTzZoneInfoCompiler_set_iLinks_(other, iLinks_);
}

+ (void)initialize {
  if (self == [OrgJodaTimeTzZoneInfoCompiler class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeTzZoneInfoCompiler_cVerbose_, nil, [[OrgJodaTimeTzZoneInfoCompiler_$1 alloc] init]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeTzZoneInfoCompiler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "verbose", NULL, "Z", 0x9, NULL },
    { "mainWithNSStringArray:", "main", "V", 0x9, "Ljava.lang.Exception;" },
    { "printUsage", NULL, "V", 0xa, NULL },
    { "getStartOfYear", NULL, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", 0x8, NULL },
    { "getLenientISOChronology", NULL, "Lorg.joda.time.Chronology;", 0x8, NULL },
    { "writeZoneInfoMapWithJavaIoDataOutputStream:withJavaUtilMap:", "writeZoneInfoMap", "V", 0x8, "Ljava.io.IOException;" },
    { "parseYearWithNSString:withInt:", "parseYear", "I", 0x8, NULL },
    { "parseMonthWithNSString:", "parseMonth", "I", 0x8, NULL },
    { "parseDayOfWeekWithNSString:", "parseDayOfWeek", "I", 0x8, NULL },
    { "parseOptionalWithNSString:", "parseOptional", "Ljava.lang.String;", 0x8, NULL },
    { "parseTimeWithNSString:", "parseTime", "I", 0x8, NULL },
    { "parseZoneCharWithChar:", "parseZoneChar", "C", 0x8, NULL },
    { "testWithNSString:withOrgJodaTimeDateTimeZone:", "test", "Z", 0x8, NULL },
    { "init", "ZoneInfoCompiler", NULL, 0x1, NULL },
    { "compileWithJavaIoFile:withJavaIoFileArray:", "compile", "Ljava.util.Map;", 0x1, "Ljava.io.IOException;" },
    { "parseDataFileWithJavaIoBufferedReader:", "parseDataFile", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cStartOfYear_", NULL, 0x8, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", &OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_,  },
    { "cLenientISO_", NULL, 0x8, "Lorg.joda.time.Chronology;", &OrgJodaTimeTzZoneInfoCompiler_cLenientISO_,  },
    { "cVerbose_", NULL, 0x8, "Ljava.lang.ThreadLocal;", &OrgJodaTimeTzZoneInfoCompiler_cVerbose_,  },
    { "iRuleSets_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "iZones_", NULL, 0x2, "Ljava.util.List;", NULL,  },
    { "iLinks_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler = { 1, "ZoneInfoCompiler", "org.joda.time.tz", NULL, 0x1, 16, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler;
}

@end

jboolean OrgJodaTimeTzZoneInfoCompiler_verbose() {
  OrgJodaTimeTzZoneInfoCompiler_init();
  return [((JavaLangBoolean *) nil_chk([((JavaLangThreadLocal *) nil_chk(OrgJodaTimeTzZoneInfoCompiler_cVerbose_)) get])) booleanValue];
}

void OrgJodaTimeTzZoneInfoCompiler_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    OrgJodaTimeTzZoneInfoCompiler_printUsage();
    return;
  }
  JavaIoFile *inputDir = nil;
  JavaIoFile *outputDir = nil;
  jboolean verbose = NO;
  jint i;
  for (i = 0; i < args->size_; i++) {
    @try {
      if ([@"-src" isEqual:IOSObjectArray_Get(args, i)]) {
        inputDir = [[[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, ++i)] autorelease];
      }
      else if ([@"-dst" isEqual:IOSObjectArray_Get(args, i)]) {
        outputDir = [[[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, ++i)] autorelease];
      }
      else if ([@"-verbose" isEqual:IOSObjectArray_Get(args, i)]) {
        verbose = YES;
      }
      else if ([@"-?" isEqual:IOSObjectArray_Get(args, i)]) {
        OrgJodaTimeTzZoneInfoCompiler_printUsage();
        return;
      }
      else {
        break;
      }
    }
    @catch (JavaLangIndexOutOfBoundsException *e) {
      OrgJodaTimeTzZoneInfoCompiler_printUsage();
      return;
    }
  }
  if (i >= args->size_) {
    OrgJodaTimeTzZoneInfoCompiler_printUsage();
    return;
  }
  IOSObjectArray *sources = [IOSObjectArray arrayWithLength:args->size_ - i type:JavaIoFile_class_()];
  for (jint j = 0; i < args->size_; i++, j++) {
    IOSObjectArray_Set(sources, j, inputDir == nil ? [[[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, i)] autorelease] : [[[JavaIoFile alloc] initWithJavaIoFile:inputDir withNSString:IOSObjectArray_Get(args, i)] autorelease]);
  }
  [((JavaLangThreadLocal *) nil_chk(OrgJodaTimeTzZoneInfoCompiler_cVerbose_)) setWithId:JavaLangBoolean_valueOfWithBoolean_(verbose)];
  OrgJodaTimeTzZoneInfoCompiler *zic = [[[OrgJodaTimeTzZoneInfoCompiler alloc] init] autorelease];
  [zic compileWithJavaIoFile:outputDir withJavaIoFileArray:sources];
}

void OrgJodaTimeTzZoneInfoCompiler_printUsage() {
  OrgJodaTimeTzZoneInfoCompiler_init();
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"where possible options include:"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"  -src <directory>    Specify where to read source files"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"  -dst <directory>    Specify where to write generated files"];
  [JavaLangSystem_get_out_() printlnWithNSString:@"  -verbose            Output verbosely (default false)"];
}

OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_getStartOfYear() {
  OrgJodaTimeTzZoneInfoCompiler_init();
  if (OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_ == nil) {
    JreStrongAssignAndConsume(&OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_, nil, [[OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear alloc] init]);
  }
  return OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_;
}

OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology() {
  OrgJodaTimeTzZoneInfoCompiler_init();
  if (OrgJodaTimeTzZoneInfoCompiler_cLenientISO_ == nil) {
    JreStrongAssign(&OrgJodaTimeTzZoneInfoCompiler_cLenientISO_, nil, OrgJodaTimeChronoLenientChronology_getInstanceWithOrgJodaTimeChronology_(OrgJodaTimeChronoISOChronology_getInstanceUTC()));
  }
  return OrgJodaTimeTzZoneInfoCompiler_cLenientISO_;
}

void OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(JavaIoDataOutputStream *dout, id<JavaUtilMap> zimap) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  id<JavaUtilMap> idToIndex = [[[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilMap>) nil_chk(zimap)) size]] autorelease];
  JavaUtilTreeMap *indexToId = [[[JavaUtilTreeMap alloc] init] autorelease];
  jshort count = 0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([zimap entrySet])) {
    NSString *id_ = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
    if (![idToIndex containsKeyWithId:id_]) {
      JavaLangShort *index = JavaLangShort_valueOfWithShort_(count);
      [idToIndex putWithId:id_ withId:index];
      [indexToId putWithId:index withId:id_];
      if (++count == 0) {
        @throw [[[JavaLangInternalError alloc] initWithNSString:@"Too many time zone ids"] autorelease];
      }
    }
    id_ = [((OrgJodaTimeDateTimeZone *) nil_chk(((OrgJodaTimeDateTimeZone *) check_class_cast([entry_ getValue], [OrgJodaTimeDateTimeZone class])))) getID];
    if (![idToIndex containsKeyWithId:id_]) {
      JavaLangShort *index = JavaLangShort_valueOfWithShort_(count);
      [idToIndex putWithId:id_ withId:index];
      [indexToId putWithId:index withId:id_];
      if (++count == 0) {
        @throw [[[JavaLangInternalError alloc] initWithNSString:@"Too many time zone ids"] autorelease];
      }
    }
  }
  [((JavaIoDataOutputStream *) nil_chk(dout)) writeShortWithInt:[indexToId size]];
  for (NSString * __strong id_ in nil_chk([indexToId values])) {
    [dout writeUTFWithNSString:id_];
  }
  [dout writeShortWithInt:[zimap size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([zimap entrySet])) {
    NSString *id_ = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    [dout writeShortWithInt:[((JavaLangShort *) nil_chk([idToIndex getWithId:id_])) shortValue]];
    id_ = [((OrgJodaTimeDateTimeZone *) nil_chk([entry_ getValue])) getID];
    [dout writeShortWithInt:[((JavaLangShort *) nil_chk([idToIndex getWithId:id_])) shortValue]];
  }
}

jint OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_(NSString *str, jint def) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  str = [((NSString *) nil_chk(str)) lowercaseString];
  if ([((NSString *) nil_chk(str)) isEqual:@"minimum"] || [str isEqual:@"min"]) {
    return JavaLangInteger_MIN_VALUE;
  }
  else if ([str isEqual:@"maximum"] || [str isEqual:@"max"]) {
    return JavaLangInteger_MAX_VALUE;
  }
  else if ([str isEqual:@"only"]) {
    return def;
  }
  return JavaLangInteger_parseIntWithNSString_(str);
}

jint OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) monthOfYear];
  return [field getWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(field)) setWithLong:0 withNSString:str withJavaUtilLocale:JavaUtilLocale_get_ENGLISH_()]];
}

jint OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) dayOfWeek];
  return [field getWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(field)) setWithLong:0 withNSString:str withJavaUtilLocale:JavaUtilLocale_get_ENGLISH_()]];
}

NSString *OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  return ([((NSString *) nil_chk(str)) isEqual:@"-"]) ? nil : str;
}

jint OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(NSString *str) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  OrgJodaTimeFormatDateTimeFormatter *p = OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondFraction();
  OrgJodaTimeMutableDateTime *mdt = [[[OrgJodaTimeMutableDateTime alloc] initWithLong:0 withOrgJodaTimeChronology:OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology()] autorelease];
  jint pos = 0;
  if ([((NSString *) nil_chk(str)) hasPrefix:@"-"]) {
    pos = 1;
  }
  jint newPos = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) parseIntoWithOrgJodaTimeReadWritableInstant:mdt withNSString:str withInt:pos];
  if (newPos == ~pos) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:str] autorelease];
  }
  jint millis = (jint) [mdt getMillis];
  if (pos == 1) {
    millis = -millis;
  }
  return millis;
}

jchar OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_(jchar c) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  switch (c) {
    case 's':
    case 'S':
    return 's';
    case 'u':
    case 'U':
    case 'g':
    case 'G':
    case 'z':
    case 'Z':
    return 'u';
    case 'w':
    case 'W':
    default:
    return 'w';
  }
}

jboolean OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_(NSString *id_, OrgJodaTimeDateTimeZone *tz) {
  OrgJodaTimeTzZoneInfoCompiler_init();
  if (![((NSString *) nil_chk(id_)) isEqual:[((OrgJodaTimeDateTimeZone *) nil_chk(tz)) getID]]) {
    return YES;
  }
  jlong millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:1850];
  jlong end = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:2050];
  jint offset = [tz getOffsetWithLong:millis];
  NSString *key = [tz getNameKeyWithLong:millis];
  id<JavaUtilList> transitions = [[[JavaUtilArrayList alloc] init] autorelease];
  while (YES) {
    jlong next = [tz nextTransitionWithLong:millis];
    if (next == millis || next > end) {
      break;
    }
    millis = next;
    jint nextOffset = [tz getOffsetWithLong:millis];
    NSString *nextKey = [tz getNameKeyWithLong:millis];
    if (offset == nextOffset && [((NSString *) nil_chk(key)) isEqual:nextKey]) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$C@", @"*d* Error in ", [tz getID], ' ', [[[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease])];
      return NO;
    }
    if (nextKey == nil || (((jint) [nextKey length]) < 3 && ![@"??" isEqual:nextKey])) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$C@$$", @"*s* Error in ", [tz getID], ' ', [[[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease], @", nameKey=", nextKey)];
      return NO;
    }
    [transitions addWithId:JavaLangLong_valueOfWithLong_(millis)];
    offset = nextOffset;
    key = nextKey;
  }
  millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:2050];
  end = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) setWithLong:0 withInt:1850];
  for (jint i = [transitions size]; --i >= 0; ) {
    jlong prev = [tz previousTransitionWithLong:millis];
    if (prev == millis || prev < end) {
      break;
    }
    millis = prev;
    jlong trans = [((JavaLangLong *) nil_chk([transitions getWithInt:i])) longLongValue];
    if (trans - 1 != millis) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$C@$@", @"*r* Error in ", [tz getID], ' ', [[[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease], @" != ", [[[OrgJodaTimeDateTime alloc] initWithLong:trans - 1 withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease])];
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler)

@implementation OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear

- (instancetype)init {
  if (self = [super init]) {
    iMonthOfYear_ = 1;
    iDayOfMonth_ = 1;
    iDayOfWeek_ = 0;
    iAdvanceDayOfWeek_ = NO;
    iMillisOfDay_ = 0;
    iZoneChar_ = 'w';
  }
  return self;
}

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (self = [super init]) {
    jint month = 1;
    jint day = 1;
    jint dayOfWeek = 0;
    jint millis = 0;
    jboolean advance = NO;
    jchar zoneChar = 'w';
    if ([((JavaUtilStringTokenizer *) nil_chk(st)) hasMoreTokens]) {
      month = OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_([st nextToken]);
      if ([st hasMoreTokens]) {
        NSString *str = [st nextToken];
        if ([((NSString *) nil_chk(str)) hasPrefix:@"last"]) {
          day = -1;
          dayOfWeek = OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_([str substring:4]);
          advance = NO;
        }
        else {
          @try {
            day = JavaLangInteger_parseIntWithNSString_(str);
            dayOfWeek = 0;
            advance = NO;
          }
          @catch (JavaLangNumberFormatException *e) {
            jint index = [str indexOfString:@">="];
            if (index > 0) {
              day = JavaLangInteger_parseIntWithNSString_([str substring:index + 2]);
              dayOfWeek = OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_([str substring:0 endIndex:index]);
              advance = YES;
            }
            else {
              index = [str indexOfString:@"<="];
              if (index > 0) {
                day = JavaLangInteger_parseIntWithNSString_([str substring:index + 2]);
                dayOfWeek = OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_([str substring:0 endIndex:index]);
                advance = NO;
              }
              else {
                @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:str] autorelease];
              }
            }
          }
        }
        if ([st hasMoreTokens]) {
          str = [st nextToken];
          zoneChar = OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_([str charAtWithInt:((jint) [((NSString *) nil_chk(str)) length]) - 1]);
          if ([str isEqual:@"24:00"]) {
            OrgJodaTimeLocalDate *date = (day == -1 ? [((OrgJodaTimeLocalDate *) [[[OrgJodaTimeLocalDate alloc] initWithInt:2001 withInt:month withInt:1] autorelease]) plusMonthsWithInt:1] : [((OrgJodaTimeLocalDate *) [[[OrgJodaTimeLocalDate alloc] initWithInt:2001 withInt:month withInt:day] autorelease]) plusDaysWithInt:1]);
            advance = (day != -1 && dayOfWeek != 0);
            month = [date getMonthOfYear];
            day = [date getDayOfMonth];
            if (dayOfWeek != 0) {
              dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;
            }
          }
          else {
            millis = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(str);
          }
        }
      }
    }
    iMonthOfYear_ = month;
    iDayOfMonth_ = day;
    iDayOfWeek_ = dayOfWeek;
    iAdvanceDayOfWeek_ = advance;
    iMillisOfDay_ = millis;
    iZoneChar_ = zoneChar;
  }
  return self;
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameKey
                                                 withInt:(jint)saveMillis
                                                 withInt:(jint)fromYear
                                                 withInt:(jint)toYear {
  [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) addRecurringSavingsWithNSString:nameKey withInt:saveMillis withInt:fromYear withInt:toYear withChar:iZoneChar_ withInt:iMonthOfYear_ withInt:iDayOfMonth_ withInt:iDayOfWeek_ withBoolean:iAdvanceDayOfWeek_ withInt:iMillisOfDay_];
}

- (void)addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                               withInt:(jint)year {
  [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) addCutoverWithInt:year withChar:iZoneChar_ withInt:iMonthOfYear_ withInt:iDayOfMonth_ withInt:iDayOfWeek_ withBoolean:iAdvanceDayOfWeek_ withInt:iMillisOfDay_];
}

- (NSString *)description {
  return JreStrcat("$I$I$I$Z$I$CC", @"MonthOfYear: ", iMonthOfYear_, @"\nDayOfMonth: ", iDayOfMonth_, @"\nDayOfWeek: ", iDayOfWeek_, @"\nAdvanceDayOfWeek: ", iAdvanceDayOfWeek_, @"\nMillisOfDay: ", iMillisOfDay_, @"\nZoneChar: ", iZoneChar_, 0x000a);
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)other {
  [super copyAllFieldsTo:other];
  other->iMonthOfYear_ = iMonthOfYear_;
  other->iDayOfMonth_ = iDayOfMonth_;
  other->iDayOfWeek_ = iDayOfWeek_;
  other->iAdvanceDayOfWeek_ = iAdvanceDayOfWeek_;
  other->iMillisOfDay_ = iMillisOfDay_;
  other->iZoneChar_ = iZoneChar_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DateTimeOfYear", NULL, 0x0, NULL },
    { "initWithJavaUtilStringTokenizer:", "DateTimeOfYear", NULL, 0x0, NULL },
    { "addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:withInt:withInt:withInt:", "addRecurring", "V", 0x1, NULL },
    { "addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:withInt:", "addCutover", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMonthOfYear_", NULL, 0x11, "I", NULL,  },
    { "iDayOfMonth_", NULL, 0x11, "I", NULL,  },
    { "iDayOfWeek_", NULL, 0x11, "I", NULL,  },
    { "iAdvanceDayOfWeek_", NULL, 0x11, "Z", NULL,  },
    { "iMillisOfDay_", NULL, 0x11, "I", NULL,  },
    { "iZoneChar_", NULL, 0x11, "C", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear = { 1, "DateTimeOfYear", "org.joda.time.tz", "ZoneInfoCompiler", 0x8, 5, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear)

@implementation OrgJodaTimeTzZoneInfoCompiler_Rule

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (self = [super init]) {
    OrgJodaTimeTzZoneInfoCompiler_Rule_set_iName_(self, [((NSString *) nil_chk([((JavaUtilStringTokenizer *) nil_chk(st)) nextToken])) intern]);
    iFromYear_ = OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_([st nextToken], 0);
    iToYear_ = OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_([st nextToken], iFromYear_);
    if (iToYear_ < iFromYear_) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    OrgJodaTimeTzZoneInfoCompiler_Rule_set_iType_(self, OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_([st nextToken]));
    OrgJodaTimeTzZoneInfoCompiler_Rule_setAndConsume_iDateTimeOfYear_(self, [[OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear alloc] initWithJavaUtilStringTokenizer:st]);
    iSaveMillis_ = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_([st nextToken]);
    OrgJodaTimeTzZoneInfoCompiler_Rule_set_iLetterS_(self, OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_([st nextToken]));
  }
  return self;
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat {
  NSString *nameKey = OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(self, nameFormat);
  [((OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *) nil_chk(iDateTimeOfYear_)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:nameKey withInt:iSaveMillis_ withInt:iFromYear_ withInt:iToYear_];
}

- (NSString *)formatNameWithNSString:(NSString *)nameFormat {
  return OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(self, nameFormat);
}

- (NSString *)description {
  return JreStrcat("$$$I$I$$C@$I$$C", @"[Rule]\nName: ", iName_, @"\nFromYear: ", iFromYear_, @"\nToYear: ", iToYear_, @"\nType: ", iType_, 0x000a, iDateTimeOfYear_, @"SaveMillis: ", iSaveMillis_, @"\nLetterS: ", iLetterS_, 0x000a);
}

- (void)dealloc {
  RELEASE_(iName_);
  RELEASE_(iType_);
  RELEASE_(iDateTimeOfYear_);
  RELEASE_(iLetterS_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_Rule *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzZoneInfoCompiler_Rule_set_iName_(other, iName_);
  other->iFromYear_ = iFromYear_;
  other->iToYear_ = iToYear_;
  OrgJodaTimeTzZoneInfoCompiler_Rule_set_iType_(other, iType_);
  OrgJodaTimeTzZoneInfoCompiler_Rule_set_iDateTimeOfYear_(other, iDateTimeOfYear_);
  other->iSaveMillis_ = iSaveMillis_;
  OrgJodaTimeTzZoneInfoCompiler_Rule_set_iLetterS_(other, iLetterS_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilStringTokenizer:", "Rule", NULL, 0x0, NULL },
    { "addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:", "addRecurring", "V", 0x1, NULL },
    { "formatNameWithNSString:", "formatName", "Ljava.lang.String;", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iName_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iFromYear_", NULL, 0x11, "I", NULL,  },
    { "iToYear_", NULL, 0x11, "I", NULL,  },
    { "iType_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iDateTimeOfYear_", NULL, 0x11, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", NULL,  },
    { "iSaveMillis_", NULL, 0x11, "I", NULL,  },
    { "iLetterS_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_Rule = { 1, "Rule", "org.joda.time.tz", "ZoneInfoCompiler", 0xa, 4, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_Rule;
}

@end

NSString *OrgJodaTimeTzZoneInfoCompiler_Rule_formatNameWithNSString_(OrgJodaTimeTzZoneInfoCompiler_Rule *self, NSString *nameFormat) {
  jint index = [((NSString *) nil_chk(nameFormat)) indexOf:'/'];
  if (index > 0) {
    if (self->iSaveMillis_ == 0) {
      return [((NSString *) nil_chk([nameFormat substring:0 endIndex:index])) intern];
    }
    else {
      return [((NSString *) nil_chk([nameFormat substring:index + 1])) intern];
    }
  }
  index = [nameFormat indexOfString:@"%s"];
  if (index < 0) {
    return nameFormat;
  }
  NSString *left = [nameFormat substring:0 endIndex:index];
  NSString *right = [nameFormat substring:index + 2];
  NSString *name;
  if (self->iLetterS_ == nil) {
    name = [((NSString *) nil_chk(left)) concat:right];
  }
  else {
    name = JreStrcat("$$$", left, self->iLetterS_, right);
  }
  return [((NSString *) nil_chk(name)) intern];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_Rule)

@implementation OrgJodaTimeTzZoneInfoCompiler_RuleSet

- (instancetype)initWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule {
  if (self = [super init]) {
    OrgJodaTimeTzZoneInfoCompiler_RuleSet_setAndConsume_iRules_(self, [[JavaUtilArrayList alloc] init]);
    [iRules_ addWithId:rule];
  }
  return self;
}

- (void)addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule {
  if (!([((NSString *) nil_chk(((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk(rule))->iName_)) isEqual:((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk([((id<JavaUtilList>) nil_chk(iRules_)) getWithInt:0]))->iName_])) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Rule name mismatch"] autorelease];
  }
  [iRules_ addWithId:rule];
}

- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(iRules_)) size]; i++) {
    OrgJodaTimeTzZoneInfoCompiler_Rule *rule = [iRules_ getWithInt:i];
    [((OrgJodaTimeTzZoneInfoCompiler_Rule *) nil_chk(rule)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:nameFormat];
  }
}

- (void)dealloc {
  RELEASE_(iRules_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_RuleSet *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzZoneInfoCompiler_RuleSet_set_iRules_(other, iRules_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeTzZoneInfoCompiler_Rule:", "RuleSet", NULL, 0x0, NULL },
    { "addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:", "addRule", "V", 0x0, NULL },
    { "addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:withNSString:", "addRecurring", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iRules_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_RuleSet = { 1, "RuleSet", "org.joda.time.tz", "ZoneInfoCompiler", 0xa, 3, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_RuleSet;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_RuleSet)

@implementation OrgJodaTimeTzZoneInfoCompiler_Zone

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  return [self initOrgJodaTimeTzZoneInfoCompiler_ZoneWithNSString:[((JavaUtilStringTokenizer *) nil_chk(st)) nextToken] withJavaUtilStringTokenizer:st];
}

- (instancetype)initOrgJodaTimeTzZoneInfoCompiler_ZoneWithNSString:(NSString *)name
                                       withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (self = [super init]) {
    OrgJodaTimeTzZoneInfoCompiler_Zone_set_iName_(self, [((NSString *) nil_chk(name)) intern]);
    iOffsetMillis_ = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_([((JavaUtilStringTokenizer *) nil_chk(st)) nextToken]);
    OrgJodaTimeTzZoneInfoCompiler_Zone_set_iRules_(self, OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_([st nextToken]));
    OrgJodaTimeTzZoneInfoCompiler_Zone_set_iFormat_(self, [((NSString *) nil_chk([st nextToken])) intern]);
    jint year = JavaLangInteger_MAX_VALUE;
    OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *dtOfYear = OrgJodaTimeTzZoneInfoCompiler_getStartOfYear();
    if ([st hasMoreTokens]) {
      year = JavaLangInteger_parseIntWithNSString_([st nextToken]);
      if ([st hasMoreTokens]) {
        dtOfYear = [[[OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear alloc] initWithJavaUtilStringTokenizer:st] autorelease];
      }
    }
    iUntilYear_ = year;
    OrgJodaTimeTzZoneInfoCompiler_Zone_set_iUntilDateTimeOfYear_(self, dtOfYear);
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
     withJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  return [self initOrgJodaTimeTzZoneInfoCompiler_ZoneWithNSString:name withJavaUtilStringTokenizer:st];
}

- (void)chainWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st {
  if (iNext_ != nil) {
    [iNext_ chainWithJavaUtilStringTokenizer:st];
  }
  else {
    OrgJodaTimeTzZoneInfoCompiler_Zone_setAndConsume_iNext_(self, [[OrgJodaTimeTzZoneInfoCompiler_Zone alloc] initWithNSString:iName_ withJavaUtilStringTokenizer:st]);
  }
}

- (void)addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                         withJavaUtilMap:(id<JavaUtilMap>)ruleSets {
  OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(self, builder, ruleSets);
}

+ (void)addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:(OrgJodaTimeTzZoneInfoCompiler_Zone *)zone
                      withOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                           withJavaUtilMap:(id<JavaUtilMap>)ruleSets {
  OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(zone, builder, ruleSets);
}

- (NSString *)description {
  NSString *str = JreStrcat("$$$I$$$$$IC@", @"[Zone]\nName: ", iName_, @"\nOffsetMillis: ", iOffsetMillis_, @"\nRules: ", iRules_, @"\nFormat: ", iFormat_, @"\nUntilYear: ", iUntilYear_, 0x000a, iUntilDateTimeOfYear_);
  if (iNext_ == nil) {
    return str;
  }
  return JreStrcat("$$$", str, @"...\n", [((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(iNext_)) description]);
}

- (void)dealloc {
  RELEASE_(iName_);
  RELEASE_(iRules_);
  RELEASE_(iFormat_);
  RELEASE_(iUntilDateTimeOfYear_);
  RELEASE_(iNext_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzZoneInfoCompiler_Zone *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzZoneInfoCompiler_Zone_set_iName_(other, iName_);
  other->iOffsetMillis_ = iOffsetMillis_;
  OrgJodaTimeTzZoneInfoCompiler_Zone_set_iRules_(other, iRules_);
  OrgJodaTimeTzZoneInfoCompiler_Zone_set_iFormat_(other, iFormat_);
  other->iUntilYear_ = iUntilYear_;
  OrgJodaTimeTzZoneInfoCompiler_Zone_set_iUntilDateTimeOfYear_(other, iUntilDateTimeOfYear_);
  OrgJodaTimeTzZoneInfoCompiler_Zone_set_iNext_(other, iNext_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilStringTokenizer:", "Zone", NULL, 0x0, NULL },
    { "initWithNSString:withJavaUtilStringTokenizer:", "Zone", NULL, 0x2, NULL },
    { "chainWithJavaUtilStringTokenizer:", "chain", "V", 0x0, NULL },
    { "addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:withJavaUtilMap:", "addToBuilder", "V", 0x1, NULL },
    { "addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone:withOrgJodaTimeTzDateTimeZoneBuilder:withJavaUtilMap:", "addToBuilder", "V", 0xa, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iName_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iOffsetMillis_", NULL, 0x11, "I", NULL,  },
    { "iRules_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iFormat_", NULL, 0x11, "Ljava.lang.String;", NULL,  },
    { "iUntilYear_", NULL, 0x11, "I", NULL,  },
    { "iUntilDateTimeOfYear_", NULL, 0x11, "Lorg.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;", NULL,  },
    { "iNext_", NULL, 0x2, "Lorg.joda.time.tz.ZoneInfoCompiler$Zone;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_Zone = { 1, "Zone", "org.joda.time.tz", "ZoneInfoCompiler", 0xa, 6, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeTzZoneInfoCompiler_Zone;
}

@end

void OrgJodaTimeTzZoneInfoCompiler_Zone_addToBuilderWithOrgJodaTimeTzZoneInfoCompiler_Zone_withOrgJodaTimeTzDateTimeZoneBuilder_withJavaUtilMap_(OrgJodaTimeTzZoneInfoCompiler_Zone *zone, OrgJodaTimeTzDateTimeZoneBuilder *builder, id<JavaUtilMap> ruleSets) {
  OrgJodaTimeTzZoneInfoCompiler_Zone_init();
  for (; zone != nil; zone = zone->iNext_) {
    [((OrgJodaTimeTzDateTimeZoneBuilder *) nil_chk(builder)) setStandardOffsetWithInt:((OrgJodaTimeTzZoneInfoCompiler_Zone *) nil_chk(zone))->iOffsetMillis_];
    if (zone->iRules_ == nil) {
      [builder setFixedSavingsWithNSString:zone->iFormat_ withInt:0];
    }
    else {
      @try {
        jint saveMillis = OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(zone->iRules_);
        [builder setFixedSavingsWithNSString:zone->iFormat_ withInt:saveMillis];
      }
      @catch (JavaLangException *e) {
        OrgJodaTimeTzZoneInfoCompiler_RuleSet *rs = [((id<JavaUtilMap>) nil_chk(ruleSets)) getWithId:zone->iRules_];
        if (rs == nil) {
          @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"Rules not found: ", zone->iRules_)] autorelease];
        }
        [((OrgJodaTimeTzZoneInfoCompiler_RuleSet *) nil_chk(rs)) addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:builder withNSString:zone->iFormat_];
      }
    }
    if (zone->iUntilYear_ == JavaLangInteger_MAX_VALUE) {
      break;
    }
    [((OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *) nil_chk(zone->iUntilDateTimeOfYear_)) addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:builder withInt:zone->iUntilYear_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_Zone)

@implementation OrgJodaTimeTzZoneInfoCompiler_$1

- (JavaLangBoolean *)initialValue {
  return JavaLangBoolean_get_FALSE__();
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "Ljava.lang.Boolean;", 0x4, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Boolean;"};
  static const J2ObjcClassInfo _OrgJodaTimeTzZoneInfoCompiler_$1 = { 1, "$1", "org.joda.time.tz", "ZoneInfoCompiler", 0x8000, 2, methods, 0, NULL, 1, superclass_type_args};
  return &_OrgJodaTimeTzZoneInfoCompiler_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzZoneInfoCompiler_$1)
