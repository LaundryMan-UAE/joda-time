//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/format/ISODateTimeFormat.java
//

#ifndef _OrgJodaTimeFormatISODateTimeFormat_H_
#define _OrgJodaTimeFormatISODateTimeFormat_H_

@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeFormatDateTimeFormatterBuilder;
@protocol JavaUtilCollection;

#import "JreEmulation.h"

/**
 @brief Factory that creates instances of DateTimeFormatter based on the ISO8601 standard.
 <p> Date-time formatting is performed by the DateTimeFormatter class. Three classes provide factory methods to create formatters, and this is one. The others are DateTimeFormat and DateTimeFormatterBuilder . <p> ISO8601 is the international standard for data interchange. It defines a framework, rather than an absolute standard. As a result this provider has a number of methods that represent common uses of the framework. The most common formats are #date() date , #time() time , and #dateTime() dateTime . <p> For example, to format a date time in ISO format: <pre> DateTime dt = new DateTime(); DateTimeFormatter fmt = ISODateTimeFormat.dateTime(); String str = fmt.print(dt); </pre> <p> Note that these formatters mostly follow the ISO8601 standard for printing. For parsing, the formatters are more lenient and allow formats that are not in strict compliance with the standard. <p> It is important to understand that these formatters are not linked to the <code>ISOChronology</code>. These formatters may be used with any chronology, however there may be certain side effects with more unusual chronologies. For example, the ISO formatters rely on dayOfWeek being single digit, dayOfMonth being two digit and dayOfYear being three digit. A chronology with a ten day week would thus cause issues. However, in general, it is safe to use these formatters with other chronologies. <p> ISODateTimeFormat is thread-safe and immutable, and the formatters it returns are as well.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFormatISODateTimeFormat : NSObject {
}

/**
 @brief Constructor.
 @since 1.1 (previously private)
 */
- (instancetype)init;

/**
 @brief Returns a formatter that outputs only those fields specified.
 <p> This method examines the fields provided and returns an ISO-style formatter that best fits. This can be useful for outputting less-common ISO styles, such as YearMonth (YYYY-MM) or MonthDay (--MM-DD). <p> The list provided may have overlapping fields, such as dayOfWeek and dayOfMonth. In this case, the style is chosen based on the following list, thus in the example, the calendar style is chosen as dayOfMonth is higher in priority than dayOfWeek: <ul> <li>monthOfYear - calendar date style <li>dayOfYear - ordinal date style <li>weekOfWeekYear - week date style <li>dayOfMonth - calendar date style <li>dayOfWeek - week date style <li>year <li>weekyear </ul> The supported formats are: <pre> Extended      Basic       Fields 2005-03-25    20050325    year/monthOfYear/dayOfMonth 2005-03       2005-03     year/monthOfYear 2005--25      2005--25    year/dayOfMonth 2005          2005        year --03-25       --0325      monthOfYear/dayOfMonth --03          --03        monthOfYear ---03         ---03       dayOfMonth 2005-084      2005084     year/dayOfYear -084          -084        dayOfYear 2005-W12-5    2005W125    weekyear/weekOfWeekyear/dayOfWeek 2005-W-5      2005W-5     weekyear/dayOfWeek 2005-W12      2005W12     weekyear/weekOfWeekyear -W12-5        -W125       weekOfWeekyear/dayOfWeek -W12          -W12        weekOfWeekyear -W-5          -W-5        dayOfWeek 10:20:30.040  102030.040  hour/minute/second/milli 10:20:30      102030      hour/minute/second 10:20         1020        hour/minute 10            10          hour -20:30.040    -2030.040   minute/second/milli -20:30        -2030       minute/second -20           -20         minute --30.040      --30.040    second/milli --30          --30        second ---.040       ---.040     milli 10-30.040     10-30.040   hour/second/milli 10:20-.040    1020-.040   hour/minute/milli 10-30         10-30       hour/second 10--.040      10--.040    hour/milli -20-.040      -20-.040    minute/milli plus datetime formats like {date}T{time} </pre> * indiates that this is not an official ISO format and can be excluded by passing in <code>strictISO</code> as <code>true</code>. <p> This method can side effect the input collection of fields. If the input collection is modifiable, then each field that was added to the formatter will be removed from the collection, including any duplicates. If the input collection is unmodifiable then no side effect occurs. <p> This side effect processing is useful if you need to know whether all the fields were converted into the formatter or not. To achieve this, pass in a modifiable list, and check that it is empty on exit.
 @param fields the fields to get a formatter for, not null, updated by the method call unless unmodifiable, removing those fields built in the formatter
 @param extended true to use the extended format (with separators)
 @param strictISO true to stick exactly to ISO8601, false to include additional formats
 @return a suitable formatter
 @throws IllegalArgumentException if there is no format for the fields
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)forFieldsWithJavaUtilCollection:(id<JavaUtilCollection>)fields
                                                            withBoolean:(jboolean)extended
                                                            withBoolean:(jboolean)strictISO;

/**
 @brief Creates a date using the calendar date format.
 Specification reference: 5.2.1.
 @param bld the builder
 @param fields the fields
 @param extended true to use extended format
 @param strictISO true to only allow ISO formats
 @return true if reduced precision
 @since 1.1
 */
+ (jboolean)dateByMonthWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)bld
                                              withJavaUtilCollection:(id<JavaUtilCollection>)fields
                                                         withBoolean:(jboolean)extended
                                                         withBoolean:(jboolean)strictISO;

/**
 @brief Creates a date using the ordinal date format.
 Specification reference: 5.2.2.
 @param bld the builder
 @param fields the fields
 @param extended true to use extended format
 @param strictISO true to only allow ISO formats
 @since 1.1
 */
+ (jboolean)dateByOrdinalWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)bld
                                                withJavaUtilCollection:(id<JavaUtilCollection>)fields
                                                           withBoolean:(jboolean)extended
                                                           withBoolean:(jboolean)strictISO;

/**
 @brief Creates a date using the calendar date format.
 Specification reference: 5.2.3.
 @param bld the builder
 @param fields the fields
 @param extended true to use extended format
 @param strictISO true to only allow ISO formats
 @since 1.1
 */
+ (jboolean)dateByWeekWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)bld
                                             withJavaUtilCollection:(id<JavaUtilCollection>)fields
                                                        withBoolean:(jboolean)extended
                                                        withBoolean:(jboolean)strictISO;

/**
 @brief Adds the time fields to the builder.
 Specification reference: 5.3.1.
 @param bld the builder
 @param fields the fields
 @param extended whether to use the extended format
 @param strictISO whether to be strict
 @param reducedPrec whether the date was reduced precision
 @param datePresent whether there was a date
 @since 1.1
 */
+ (void)timeWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)bld
                                   withJavaUtilCollection:(id<JavaUtilCollection>)fields
                                              withBoolean:(jboolean)extended
                                              withBoolean:(jboolean)strictISO
                                              withBoolean:(jboolean)reducedPrec
                                              withBoolean:(jboolean)datePresent;

/**
 @brief Checks that the iso only flag is not set, throwing an exception if it is.
 @param fields the fields
 @param strictISO true if only ISO formats allowed
 @since 1.1
 */
+ (void)checkNotStrictISOWithJavaUtilCollection:(id<JavaUtilCollection>)fields
                                    withBoolean:(jboolean)strictISO;

/**
 @brief Appends the separator if necessary.
 @param bld the builder
 @param extended whether to append the separator
 @param sep the separator
 @since 1.1
 */
+ (void)appendSeparatorWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)bld
                                                         withBoolean:(jboolean)extended;

/**
 @brief Returns a generic ISO date parser for parsing dates with a possible zone.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> It accepts formats described by the following syntax: <pre> date              = date-element ['T' offset] date-element      = std-date-element | ord-date-element | week-date-element std-date-element  = yyyy ['-' MM ['-' dd]] ord-date-element  = yyyy ['-' DDD] week-date-element = xxxx '-W' ww ['-' e] offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]]) </pre>
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateParser;

/**
 @brief Returns a generic ISO date parser for parsing local dates.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> This parser is initialised with the local (UTC) time zone. <p> It accepts formats described by the following syntax: <pre> date-element      = std-date-element | ord-date-element | week-date-element std-date-element  = yyyy ['-' MM ['-' dd]] ord-date-element  = yyyy ['-' DDD] week-date-element = xxxx '-W' ww ['-' e] </pre>
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)localDateParser;

/**
 @brief Returns a generic ISO date parser for parsing dates.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> It accepts formats described by the following syntax: <pre> date-element      = std-date-element | ord-date-element | week-date-element std-date-element  = yyyy ['-' MM ['-' dd]] ord-date-element  = yyyy ['-' DDD] week-date-element = xxxx '-W' ww ['-' e] </pre>
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateElementParser;

/**
 @brief Returns a generic ISO time parser for parsing times with a possible zone.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> It accepts formats described by the following syntax: <pre> time           = ['T'] time-element [offset] time-element   = HH [minute-element] | [fraction] minute-element = ':' mm [second-element] | [fraction] second-element = ':' ss [fraction] fraction       = ('.' | ',') digit+ offset         = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]]) </pre>
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)timeParser;

/**
 @brief Returns a generic ISO time parser for parsing local times.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> This parser is initialised with the local (UTC) time zone. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> It accepts formats described by the following syntax: <pre> time           = ['T'] time-element time-element   = HH [minute-element] | [fraction] minute-element = ':' mm [second-element] | [fraction] second-element = ':' ss [fraction] fraction       = ('.' | ',') digit+ </pre>
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)localTimeParser;

/**
 @brief Returns a generic ISO time parser.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> It accepts formats described by the following syntax: <pre> time-element   = HH [minute-element] | [fraction] minute-element = ':' mm [second-element] | [fraction] second-element = ':' ss [fraction] fraction       = ('.' | ',') digit+ </pre>
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)timeElementParser;

/**
 @brief Returns a generic ISO datetime parser which parses either a date or a time or both.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> It accepts formats described by the following syntax: <pre> datetime          = time | date-opt-time time              = 'T' time-element [offset] date-opt-time     = date-element ['T' [time-element] [offset]] date-element      = std-date-element | ord-date-element | week-date-element std-date-element  = yyyy ['-' MM ['-' dd]] ord-date-element  = yyyy ['-' DDD] week-date-element = xxxx '-W' ww ['-' e] time-element      = HH [minute-element] | [fraction] minute-element    = ':' mm [second-element] | [fraction] second-element    = ':' ss [fraction] fraction          = ('.' | ',') digit+ offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]]) </pre>
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateTimeParser;

/**
 @brief Returns a generic ISO datetime parser where the date is mandatory and the time is optional.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> This parser can parse zoned datetimes. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> It accepts formats described by the following syntax: <pre> date-opt-time     = date-element ['T' [time-element] [offset]] date-element      = std-date-element | ord-date-element | week-date-element std-date-element  = yyyy ['-' MM ['-' dd]] ord-date-element  = yyyy ['-' DDD] week-date-element = xxxx '-W' ww ['-' e] time-element      = HH [minute-element] | [fraction] minute-element    = ':' mm [second-element] | [fraction] second-element    = ':' ss [fraction] fraction          = ('.' | ',') digit+ </pre>
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateOptionalTimeParser;

/**
 @brief Returns a generic ISO datetime parser where the date is mandatory and the time is optional.
 <p> The returned formatter can only be used for parsing, printing is unsupported. <p> This parser only parses local datetimes. This parser is initialised with the local (UTC) time zone. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> It accepts formats described by the following syntax: <pre> datetime          = date-element ['T' time-element] date-element      = std-date-element | ord-date-element | week-date-element std-date-element  = yyyy ['-' MM ['-' dd]] ord-date-element  = yyyy ['-' DDD] week-date-element = xxxx '-W' ww ['-' e] time-element      = HH [minute-element] | [fraction] minute-element    = ':' mm [second-element] | [fraction] second-element    = ':' ss [fraction] fraction          = ('.' | ',') digit+ </pre>
 @since 1.3
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)localDateOptionalTimeParser;

/**
 @brief Returns a formatter for a full date as four digit year, two digit month of year, and two digit day of month (yyyy-MM-dd).
 <p> The returned formatter prints and parses only this format. See #dateParser() for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-MM-dd
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)date;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit fraction of second, and time zone offset (HH:mm:ss.SSSZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds. See #timeParser() for a more flexible parser that accepts different formats.
 @return a formatter for HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)time;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and time zone offset (HH:mm:ssZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds. See #timeParser() for a more flexible parser that accepts different formats.
 @return a formatter for HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)timeNoMillis;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit fraction of second, and time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds. See #timeParser() for a more flexible parser that accepts different formats.
 @return a formatter for 'T'HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)tTime;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and time zone offset prefixed by 'T' ('T'HH:mm:ssZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds. See #timeParser() for a more flexible parser that accepts different formats.
 @return a formatter for 'T'HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)tTimeNoMillis;

/**
 @brief Returns a formatter that combines a full date and time, separated by a 'T' (yyyy-MM-dd'T'HH:mm:ss.SSSZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds. See #dateTimeParser() for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateTime;

/**
 @brief Returns a formatter that combines a full date and time without millis, separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds. See #dateTimeParser() for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateTimeNoMillis;

/**
 @brief Returns a formatter for a full ordinal date, using a four digit year and three digit dayOfYear (yyyy-DDD).
 <p> The returned formatter prints and parses only this format. See #dateParser() for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-DDD
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDate;

/**
 @brief Returns a formatter for a full ordinal date and time, using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds. See #dateTimeParser() for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDateTime;

/**
 @brief Returns a formatter for a full ordinal date and time without millis, using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds. See #dateTimeParser() for a more flexible parser that accepts different formats.
 @return a formatter for yyyy-DDD'T'HH:mm:ssZZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDateTimeNoMillis;

/**
 @brief Returns a formatter for a full date as four digit weekyear, two digit week of weekyear, and one digit day of week (xxxx-'W'ww-e).
 <p> The returned formatter prints and parses only this format. See #dateParser() for a more flexible parser that accepts different formats.
 @return a formatter for xxxx-'W'ww-e
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekDate;

/**
 @brief Returns a formatter that combines a full weekyear date and time, separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds. See #dateTimeParser() for a more flexible parser that accepts different formats.
 @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekDateTime;

/**
 @brief Returns a formatter that combines a full weekyear date and time without millis, separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ssZZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds. See #dateTimeParser() for a more flexible parser that accepts different formats.
 @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekDateTimeNoMillis;

/**
 @brief Returns a basic formatter for a full date as four digit year, two digit month of year, and two digit day of month (yyyyMMdd).
 <p> The returned formatter prints and parses only this format.
 @return a formatter for yyyyMMdd
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicDate;

/**
 @brief Returns a basic formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit millis, and time zone offset (HHmmss.SSSZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTime;

/**
 @brief Returns a basic formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and time zone offset (HHmmssZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTimeNoMillis;

/**
 @brief Returns a basic formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit millis, and time zone offset prefixed by 'T' ('T'HHmmss.SSSZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for 'T'HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTTime;

/**
 @brief Returns a basic formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and time zone offset prefixed by 'T' ('T'HHmmssZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for 'T'HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicTTimeNoMillis;

/**
 @brief Returns a basic formatter that combines a basic date and time, separated by a 'T' (yyyyMMdd'T'HHmmss.SSSZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for yyyyMMdd'T'HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicDateTime;

/**
 @brief Returns a basic formatter that combines a basic date and time without millis, separated by a 'T' (yyyyMMdd'T'HHmmssZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for yyyyMMdd'T'HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicDateTimeNoMillis;

/**
 @brief Returns a formatter for a full ordinal date, using a four digit year and three digit dayOfYear (yyyyDDD).
 <p> The returned formatter prints and parses only this format.
 @return a formatter for yyyyDDD
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDate;

/**
 @brief Returns a formatter for a full ordinal date and time, using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmss.SSSZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for yyyyDDD'T'HHmmss.SSSZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDateTime;

/**
 @brief Returns a formatter for a full ordinal date and time without millis, using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmssZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for yyyyDDD'T'HHmmssZ
 @since 1.1
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDateTimeNoMillis;

/**
 @brief Returns a basic formatter for a full date as four digit weekyear, two digit week of weekyear, and one digit day of week (xxxx'W'wwe).
 <p> The returned formatter prints and parses only this format.
 @return a formatter for xxxx'W'wwe
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDate;

/**
 @brief Returns a basic formatter that combines a basic weekyear date and time, separated by a 'T' (xxxx'W'wwe'T'HHmmss.SSSZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which includes milliseconds.
 @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDateTime;

/**
 @brief Returns a basic formatter that combines a basic weekyear date and time without millis, separated by a 'T' (xxxx'W'wwe'T'HHmmssZ).
 <p> The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero. The parser is strict by default, thus time string <code>24:00</code> cannot be parsed. <p> The returned formatter prints and parses only this format, which excludes milliseconds.
 @return a formatter for xxxx'W'wwe'T'HHmmssZ
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDateTimeNoMillis;

/**
 @brief Returns a formatter for a four digit year.
 (yyyy)
 @return a formatter for yyyy
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)year;

/**
 @brief Returns a formatter for a four digit year and two digit month of year.
 (yyyy-MM)
 @return a formatter for yyyy-MM
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)yearMonth;

/**
 @brief Returns a formatter for a four digit year, two digit month of year, and two digit day of month.
 (yyyy-MM-dd)
 @return a formatter for yyyy-MM-dd
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)yearMonthDay;

/**
 @brief Returns a formatter for a four digit weekyear.
 (xxxx)
 @return a formatter for xxxx
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekyear;

/**
 @brief Returns a formatter for a four digit weekyear and two digit week of weekyear.
 (xxxx-'W'ww)
 @return a formatter for xxxx-'W'ww
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearWeek;

/**
 @brief Returns a formatter for a four digit weekyear, two digit week of weekyear, and one digit day of week.
 (xxxx-'W'ww-e)
 @return a formatter for xxxx-'W'ww-e
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearWeekDay;

/**
 @brief Returns a formatter for a two digit hour of day.
 (HH)
 @return a formatter for HH
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hour;

/**
 @brief Returns a formatter for a two digit hour of day and two digit minute of hour.
 (HH:mm)
 @return a formatter for HH:mm
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinute;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, and two digit second of minute.
 (HH:mm:ss)
 @return a formatter for HH:mm:ss
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecond;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and three digit fraction of second (HH:mm:ss.SSS).
 Parsing will parse up to 3 fractional second digits.
 @return a formatter for HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecondMillis;

/**
 @brief Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, and three digit fraction of second (HH:mm:ss.SSS).
 Parsing will parse up to 9 fractional second digits, throwing away all except the first three.
 @return a formatter for HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecondFraction;

/**
 @brief Returns a formatter that combines a full date and two digit hour of day.
 (yyyy-MM-dd'T'HH)
 @return a formatter for yyyy-MM-dd'T'HH
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHour;

/**
 @brief Returns a formatter that combines a full date, two digit hour of day, and two digit minute of hour.
 (yyyy-MM-dd'T'HH:mm)
 @return a formatter for yyyy-MM-dd'T'HH:mm
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinute;

/**
 @brief Returns a formatter that combines a full date, two digit hour of day, two digit minute of hour, and two digit second of minute.
 (yyyy-MM-dd'T'HH:mm:ss)
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecond;

/**
 @brief Returns a formatter that combines a full date, two digit hour of day, two digit minute of hour, two digit second of minute, and three digit fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS).
 Parsing will parse up to 3 fractional second digits.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecondMillis;

/**
 @brief Returns a formatter that combines a full date, two digit hour of day, two digit minute of hour, two digit second of minute, and three digit fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS).
 Parsing will parse up to 9 fractional second digits, throwing away all except the first three.
 @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecondFraction;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFormatISODateTimeFormat_init() {}
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_forFieldsWithJavaUtilCollection_withBoolean_withBoolean_(id<JavaUtilCollection> fields, jboolean extended, jboolean strictISO);
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_localDateParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateElementParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_timeParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_localTimeParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_timeElementParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateTimeParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateOptionalTimeParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_date();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_time();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_timeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_tTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_tTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_ordinalDate();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_ordinalDateTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_ordinalDateTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekDate();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekDateTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekDateTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicDate();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicTTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicDateTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicDateTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDate();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDateTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicOrdinalDateTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicWeekDate();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicWeekDateTime();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_basicWeekDateTimeNoMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_year();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_yearMonth();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_yearMonthDay();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekyear();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekyearWeek();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_weekyearWeekDay();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hour();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinute();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecond();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_hourMinuteSecondFraction();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHour();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinute();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecond();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecondMillis();
FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_dateHourMinuteSecondFraction();

@interface OrgJodaTimeFormatISODateTimeFormat_Constants : NSObject {
}

+ (OrgJodaTimeFormatDateTimeFormatter *)dateParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)localDateParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateElementParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)timeParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)localTimeParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)timeElementParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateTimeParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateOptionalTimeParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)localDateOptionalTimeParser;

+ (OrgJodaTimeFormatDateTimeFormatter *)time;

+ (OrgJodaTimeFormatDateTimeFormatter *)timeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)tTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)tTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDate;

+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDateTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)ordinalDateTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)weekDateTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)weekDateTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicDate;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicTTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicTTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicDateTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicDateTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDate;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDateTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicOrdinalDateTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDate;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDateTime;

+ (OrgJodaTimeFormatDateTimeFormatter *)basicWeekDateTimeNoMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)yearMonth;

+ (OrgJodaTimeFormatDateTimeFormatter *)yearMonthDay;

+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearWeek;

+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearWeekDay;

+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinute;

+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecond;

+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecondMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)hourMinuteSecondFraction;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateHour;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinute;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecond;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecondMillis;

+ (OrgJodaTimeFormatDateTimeFormatter *)dateHourMinuteSecondFraction;

+ (OrgJodaTimeFormatDateTimeFormatter *)yearElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)monthElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)dayOfMonthElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)weekyearElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)weekElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)dayOfWeekElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)dayOfYearElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)literalTElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)hourElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)minuteElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)secondElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)fractionElement;

+ (OrgJodaTimeFormatDateTimeFormatter *)offsetElement;

- (instancetype)init;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeFormatISODateTimeFormat_Constants_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeFormatISODateTimeFormat_Constants)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ye_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ye_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_mye_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, mye_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dme_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dme_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_we_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, we_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_wwe_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, wwe_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dwe_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dwe_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dye_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dye_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_hde_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, hde_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_mhe_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, mhe_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_sme_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, sme_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_fse_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, fse_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ze_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ze_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_lte_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, lte_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ym_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ym_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ymd_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ymd_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ww_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ww_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_wwd_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, wwd_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_hm_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, hm_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_hms_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, hms_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_hmsl_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, hmsl_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_hmsf_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, hmsf_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dh_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dh_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dhm_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dhm_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dhms_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dhms_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dhmsl_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dhmsl_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dhmsf_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dhmsf_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_t_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, t_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_tx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, tx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_tt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, tt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ttx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ttx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dtx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dtx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_wdt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, wdt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_wdtx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, wdtx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_od_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, od_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_odt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, odt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_odtx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, odtx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bd_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bd_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_btx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, btx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_btt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, btt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bttx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bttx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bdt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bdt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bdtx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bdtx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bod_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bod_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bodt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bodt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bodtx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bodtx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bwd_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bwd_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bwdt_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bwdt_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_bwdtx_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, bwdtx_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dpe_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dpe_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_tpe_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, tpe_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dp_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ldp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ldp_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_tp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, tp_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ltp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ltp_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dtp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dtp_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_dotp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, dotp_, OrgJodaTimeFormatDateTimeFormatter *)

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatISODateTimeFormat_Constants_ldotp_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatISODateTimeFormat_Constants, ldotp_, OrgJodaTimeFormatDateTimeFormatter *)

#endif // _OrgJodaTimeFormatISODateTimeFormat_H_
