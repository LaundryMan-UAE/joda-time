//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/tz/DefaultNameProvider.java
//

#include "DateTimeUtils.h"
#include "DefaultNameProvider.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

@implementation OrgJodaTimeTzDefaultNameProvider

- (instancetype)init {
  if (self = [super init]) {
    OrgJodaTimeTzDefaultNameProvider_set_iByLocaleCache_(self, [self createCache]);
  }
  return self;
}

- (NSString *)getShortNameWithJavaUtilLocale:(JavaUtilLocale *)locale
                                withNSString:(NSString *)id_
                                withNSString:(NSString *)nameKey {
  IOSObjectArray *nameSet = [self getNameSetWithJavaUtilLocale:locale withNSString:id_ withNSString:nameKey];
  return nameSet == nil ? nil : IOSObjectArray_Get(nameSet, 0);
}

- (NSString *)getNameWithJavaUtilLocale:(JavaUtilLocale *)locale
                           withNSString:(NSString *)id_
                           withNSString:(NSString *)nameKey {
  IOSObjectArray *nameSet = [self getNameSetWithJavaUtilLocale:locale withNSString:id_ withNSString:nameKey];
  return nameSet == nil ? nil : IOSObjectArray_Get(nameSet, 1);
}

- (IOSObjectArray *)getNameSetWithJavaUtilLocale:(JavaUtilLocale *)locale
                                    withNSString:(NSString *)id_
                                    withNSString:(NSString *)nameKey {
  @synchronized(self) {
    if (locale == nil || id_ == nil || nameKey == nil) {
      return nil;
    }
    id<JavaUtilMap> byIdCache = [((JavaUtilHashMap *) nil_chk(iByLocaleCache_)) getWithId:locale];
    if (byIdCache == nil) {
      [iByLocaleCache_ putWithId:locale withId:byIdCache = [self createCache]];
    }
    id<JavaUtilMap> byNameKeyCache = [((id<JavaUtilMap>) nil_chk(byIdCache)) getWithId:id_];
    if (byNameKeyCache == nil) {
      [byIdCache putWithId:id_ withId:byNameKeyCache = [self createCache]];
      IOSObjectArray *zoneStringsEn = [((JavaTextDateFormatSymbols *) nil_chk(OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(JavaUtilLocale_get_ENGLISH_()))) getZoneStrings];
      IOSObjectArray *setEn = nil;
      {
        IOSObjectArray *a__ = zoneStringsEn;
        IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *strings = *b__++;
          if (strings != nil && strings->size_ == 5 && [((NSString *) nil_chk(id_)) isEqual:IOSObjectArray_Get(strings, 0)]) {
            setEn = strings;
            break;
          }
        }
      }
      IOSObjectArray *zoneStringsLoc = [((JavaTextDateFormatSymbols *) nil_chk(OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(locale))) getZoneStrings];
      IOSObjectArray *setLoc = nil;
      {
        IOSObjectArray *a__ = zoneStringsLoc;
        IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *strings = *b__++;
          if (strings != nil && strings->size_ == 5 && [((NSString *) nil_chk(id_)) isEqual:IOSObjectArray_Get(strings, 0)]) {
            setLoc = strings;
            break;
          }
        }
      }
      if (setEn != nil && setLoc != nil) {
        [((id<JavaUtilMap>) nil_chk(byNameKeyCache)) putWithId:IOSObjectArray_Get(setEn, 2) withId:[IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(setLoc, 2), IOSObjectArray_Get(setLoc, 1) } count:2 type:[IOSClass classWithClass:[NSString class]]]];
        if ([((NSString *) nil_chk(IOSObjectArray_Get(setEn, 2))) isEqual:IOSObjectArray_Get(setEn, 4)]) {
          [byNameKeyCache putWithId:JreStrcat("$$", IOSObjectArray_Get(setEn, 4), @"-Summer") withId:[IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(setLoc, 4), IOSObjectArray_Get(setLoc, 3) } count:2 type:[IOSClass classWithClass:[NSString class]]]];
        }
        else {
          [byNameKeyCache putWithId:IOSObjectArray_Get(setEn, 4) withId:[IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(setLoc, 4), IOSObjectArray_Get(setLoc, 3) } count:2 type:[IOSClass classWithClass:[NSString class]]]];
        }
      }
    }
    return (IOSObjectArray *) check_class_cast([((id<JavaUtilMap>) nil_chk(byNameKeyCache)) getWithId:nameKey], [IOSObjectArray class]);
  }
}

- (JavaUtilHashMap *)createCache {
  return [[[JavaUtilHashMap alloc] initWithInt:7] autorelease];
}

- (void)dealloc {
  OrgJodaTimeTzDefaultNameProvider_set_iByLocaleCache_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDefaultNameProvider *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzDefaultNameProvider_set_iByLocaleCache_(other, iByLocaleCache_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DefaultNameProvider", NULL, 0x1, NULL },
    { "getShortNameWithJavaUtilLocale:withNSString:withNSString:", "getShortName", "Ljava.lang.String;", 0x1, NULL },
    { "getNameWithJavaUtilLocale:withNSString:withNSString:", "getName", "Ljava.lang.String;", 0x1, NULL },
    { "getNameSetWithJavaUtilLocale:withNSString:withNSString:", "getNameSet", "[Ljava.lang.String;", 0x22, NULL },
    { "createCache", NULL, "Ljava.util.HashMap;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iByLocaleCache_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDefaultNameProvider = { "DefaultNameProvider", "org.joda.time.tz", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeTzDefaultNameProvider;
}

@end
