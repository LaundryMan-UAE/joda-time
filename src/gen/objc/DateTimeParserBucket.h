//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/format/DateTimeParserBucket.java
//

#ifndef _OrgJodaTimeFormatDateTimeParserBucket_H_
#define _OrgJodaTimeFormatDateTimeParserBucket_H_

@class IOSObjectArray;
@class JavaLangInteger;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;
@class OrgJodaTimeFormatDateTimeParserBucket_SavedField;
@protocol JavaLangCharSequence;
@protocol OrgJodaTimeFormatDateTimeParser;
@protocol OrgJodaTimeFormatInternalParser;

#import "JreEmulation.h"
#include "java/lang/Comparable.h"

/**
 @brief DateTimeParserBucket is an advanced class, intended mainly for parser implementations.
 It can also be used during normal parsing operations to capture more information about the parse. <p> This class allows fields to be saved in any order, but be physically set in a consistent order. This is useful for parsing against formats that allow field values to contradict each other. <p> Field values are applied in an order where the "larger" fields are set first, making their value less likely to stick.  A field is larger than another when it's range duration is longer. If both ranges are the same, then the larger field has the longer duration. If it cannot be determined which field is larger, then the fields are set in the order they were saved. <p> For example, these fields were saved in this order: dayOfWeek, monthOfYear, dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek. <p> DateTimeParserBucket is mutable and not thread-safe.
 @author Brian S O'Neill
 @author Fredrik Borgh
 @since 1.0
 */
@interface OrgJodaTimeFormatDateTimeParserBucket : NSObject {
 @public
  /**
   @brief The chronology to use for parsing.
   */
  OrgJodaTimeChronology *iChrono_;
  /**
   @brief The initial millis.
   */
  long long int iMillis_;
  /**
   @brief The locale to use for parsing.
   */
  JavaUtilLocale *iLocale_;
  /**
   @brief Used for parsing month/day without year.
   */
  int iDefaultYear_;
  /**
   @brief The default zone from the constructor.
   */
  OrgJodaTimeDateTimeZone *iDefaultZone_;
  /**
   @brief The default pivot year from the constructor.
   */
  JavaLangInteger *iDefaultPivotYear_;
  /**
   @brief The parsed zone, initialised to formatter zone.
   */
  OrgJodaTimeDateTimeZone *iZone_;
  /**
   @brief The parsed offset.
   */
  JavaLangInteger *iOffset_;
  /**
   @brief Used for parsing two-digit years.
   */
  JavaLangInteger *iPivotYear_;
  IOSObjectArray *iSavedFields_;
  int iSavedFieldsCount_;
  BOOL iSavedFieldsShared_;
  id iSavedState_;
}

/**
 @brief Constructs a bucket.
 @param instantLocal the initial millis from 1970-01-01T00:00:00, local time
 @param chrono the chronology to use
 @param locale the locale to use
 */
- (instancetype)initWithLong:(long long int)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Constructs a bucket, with the option of specifying the pivot year for two-digit year parsing.
 @param instantLocal the initial millis from 1970-01-01T00:00:00, local time
 @param chrono the chronology to use
 @param locale the locale to use
 @param pivotYear the pivot year to use when parsing two-digit years
 @since 1.1
 */
- (instancetype)initWithLong:(long long int)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear;

/**
 @brief Constructs a bucket, with the option of specifying the pivot year for two-digit year parsing.
 @param instantLocal the initial millis from 1970-01-01T00:00:00, local time
 @param chrono the chronology to use
 @param locale the locale to use
 @param pivotYear the pivot year to use when parsing two-digit years
 @param defaultYear the default year to use when parsing month-day
 @since 2.0
 */
- (instancetype)initWithLong:(long long int)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear
                     withInt:(int)defaultYear;

/**
 @brief Resets the state back to that when the object was constructed.
 <p> This resets the state of the bucket, allowing a single bucket to be re-used for many parses. The bucket must not be shared between threads.
 @since 2.4
 */
- (void)reset;

/**
 @brief Parses a datetime from the given text, returning the number of milliseconds since the epoch, 1970-01-01T00:00:00Z.
 <p> This parses the text using the parser into this bucket. The bucket is reset before parsing begins, allowing the bucket to be re-used. The bucket must not be shared between threads.
 @param parser the parser to use, see DateTimeFormatter#getParser() , not null
 @param text text to parse, not null
 @return parsed value expressed in milliseconds since the epoch
 @throws UnsupportedOperationException if parsing is not supported
 @throws IllegalArgumentException if the text to parse is invalid
 @since 2.4
 */
- (long long int)parseMillisWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser
                                       withJavaLangCharSequence:(id<JavaLangCharSequence>)text;

- (long long int)doParseMillisWithOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                         withJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/**
 @brief Gets the chronology of the bucket, which will be a local (UTC) chronology.
 */
- (OrgJodaTimeChronology *)getChronology;

/**
 @brief Returns the locale to be used during parsing.
 @return the locale to use
 */
- (JavaUtilLocale *)getLocale;

/**
 @brief Returns the time zone used by computeMillis.
 */
- (OrgJodaTimeDateTimeZone *)getZone;

/**
 @brief Set a time zone to be used when computeMillis is called.
 */
- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Returns the time zone offset in milliseconds used by computeMillis.
 */
- (int)getOffset;

/**
 @brief Returns the time zone offset in milliseconds used by computeMillis.
 */
- (JavaLangInteger *)getOffsetInteger;

/**
 @brief Set a time zone offset to be used when computeMillis is called.
 */
- (void)setOffsetWithInt:(int)offset;

/**
 @brief Set a time zone offset to be used when computeMillis is called.
 */
- (void)setOffsetWithJavaLangInteger:(JavaLangInteger *)offset;

/**
 @brief Returns the default year used when information is incomplete.
 <p> This is used for two-digit years and when the largest parsed field is months or days. <p> A null value for two-digit years means to use the value from DateTimeFormatterBuilder. A null value for month/day only parsing will cause the default of 2000 to be used.
 @return Integer value of the pivot year, null if not set
 @since 1.1
 */
- (JavaLangInteger *)getPivotYear;

/**
 @brief Sets the pivot year to use when parsing two digit years.
 <p> If the value is set to null, this will indicate that default behaviour should be used.
 @param pivotYear the pivot year to use
 @since 1.1
 */
- (void)setPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear;

/**
 @brief Saves a datetime field value.
 @param field the field, whose chronology must match that of this bucket
 @param value the value
 */
- (void)saveFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(int)value;

/**
 @brief Saves a datetime field value.
 @param fieldType the field type
 @param value the value
 */
- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                          withInt:(int)value;

/**
 @brief Saves a datetime field text value.
 @param fieldType the field type
 @param text the text value
 @param locale the locale to use
 */
- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                     withNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obtainSaveField;

/**
 @brief Saves the state of this bucket, returning it in an opaque object.
 Call restoreState to undo any changes that were made since the state was saved. Calls to saveState may be nested.
 @return opaque saved state, which may be passed to restoreState
 */
- (id)saveState;

/**
 @brief Restores the state of this bucket from a previously saved state.
 The state object passed into this method is not consumed, and it can be used later to restore to that state again.
 @param savedState opaque saved state, returned from saveState
 @return true state object is valid and state restored
 */
- (BOOL)restoreStateWithId:(id)savedState;

/**
 @brief Computes the parsed datetime by setting the saved fields.
 This method is idempotent, but it is not thread-safe.
 @return milliseconds since 1970-01-01T00:00:00Z
 @throws IllegalArgumentException if any field is out of range
 */
- (long long int)computeMillis;

/**
 @brief Computes the parsed datetime by setting the saved fields.
 This method is idempotent, but it is not thread-safe.
 @param resetFields false by default, but when true, unsaved field values are cleared
 @return milliseconds since 1970-01-01T00:00:00Z
 @throws IllegalArgumentException if any field is out of range
 */
- (long long int)computeMillisWithBoolean:(BOOL)resetFields;

/**
 @brief Computes the parsed datetime by setting the saved fields.
 This method is idempotent, but it is not thread-safe.
 @param resetFields false by default, but when true, unsaved field values are cleared
 @param text optional text being parsed, to be included in any error message
 @return milliseconds since 1970-01-01T00:00:00Z
 @throws IllegalArgumentException if any field is out of range
 @since 1.3
 */
- (long long int)computeMillisWithBoolean:(BOOL)resetFields
                             withNSString:(NSString *)text;

/**
 @brief Computes the parsed datetime by setting the saved fields.
 This method is idempotent, but it is not thread-safe.
 @param resetFields false by default, but when true, unsaved field values are cleared
 @param text optional text being parsed, to be included in any error message
 @return milliseconds since 1970-01-01T00:00:00Z
 @throws IllegalArgumentException if any field is out of range
 @since 2.4
 */
- (long long int)computeMillisWithBoolean:(BOOL)resetFields
                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/**
 @brief Sorts elements [0,high).
 Calling java.util.Arrays isn't always the right choice since it always creates an internal copy of the array, even if it doesn't need to. If the array slice is small enough, an insertion sort is chosen instead, but it doesn't need a copy! <p> This method has a modified version of that insertion sort, except it doesn't create an unnecessary array copy. If high is over 10, then java.util.Arrays is called, which will perform a merge sort, which is faster than insertion sort on large lists. <p> The end result is much greater performance when computeMillis is called. Since the amount of saved fields is small, the insertion sort is a better choice. Additional performance is gained since there is no extra array allocation and copying. Also, the insertion sort here does not perform any casting operations. The version in java.util.Arrays performs casts within the insertion sort loop.
 */
+ (void)sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:(IOSObjectArray *)array
                                                              withInt:(int)high;

+ (int)compareReverseWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)a
                     withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)b;

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFormatDateTimeParserBucket_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iChrono_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iDefaultZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iDefaultPivotYear_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iOffset_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iPivotYear_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iSavedFields_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iSavedState_, id)

@interface OrgJodaTimeFormatDateTimeParserBucket_SavedState : NSObject {
 @public
  OrgJodaTimeFormatDateTimeParserBucket *this$0_;
  OrgJodaTimeDateTimeZone *iZone_;
  JavaLangInteger *iOffset_;
  IOSObjectArray *iSavedFields_;
  int iSavedFieldsCount_;
}

- (instancetype)initWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)outer$;

- (BOOL)restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)enclosing;

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket_SavedState *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFormatDateTimeParserBucket_SavedState_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedState, this$0_, OrgJodaTimeFormatDateTimeParserBucket *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedState, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedState, iOffset_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedState, iSavedFields_, IOSObjectArray *)

@interface OrgJodaTimeFormatDateTimeParserBucket_SavedField : NSObject < JavaLangComparable > {
 @public
  OrgJodaTimeDateTimeField *iField_;
  int iValue_;
  NSString *iText_;
  JavaUtilLocale *iLocale_;
}

- (instancetype)init;

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                   withInt:(int)value OBJC_METHOD_FAMILY_NONE;

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                              withNSString:(NSString *)text
                        withJavaUtilLocale:(JavaUtilLocale *)locale OBJC_METHOD_FAMILY_NONE;

- (long long int)setWithLong:(long long int)millis
                 withBoolean:(BOOL)reset;

/**
 @brief The field with the longer range duration is ordered first, where null is considered infinite.
 If the ranges match, then the field with the longer duration is ordered first.
 */
- (int)compareToWithId:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obj;

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFormatDateTimeParserBucket_SavedField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedField, iField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedField, iText_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedField, iLocale_, JavaUtilLocale *)

#endif // _OrgJodaTimeFormatDateTimeParserBucket_H_
