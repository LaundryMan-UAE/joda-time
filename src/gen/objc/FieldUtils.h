//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/FieldUtils.java
//

#ifndef _OrgJodaTimeFieldFieldUtils_H_
#define _OrgJodaTimeFieldFieldUtils_H_

@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;

#import "JreEmulation.h"

/**
 @brief General utilities that don't fit elsewhere.
 <p> FieldUtils is thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeFieldFieldUtils : NSObject {
}

/**
 @brief Restricted constructor.
 */
- (instancetype)init;

/**
 @brief Negates the input throwing an exception if it can't negate it.
 @param value the value to negate
 @return the negated value
 @throws ArithmeticException if the value is Integer.MIN_VALUE
 @since 1.1
 */
+ (int)safeNegateWithInt:(int)value;

/**
 @brief Add two values throwing an exception if overflow occurs.
 @param val1 the first value
 @param val2 the second value
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 */
+ (int)safeAddWithInt:(int)val1
              withInt:(int)val2;

/**
 @brief Add two values throwing an exception if overflow occurs.
 @param val1 the first value
 @param val2 the second value
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 */
+ (long long int)safeAddWithLong:(long long int)val1
                        withLong:(long long int)val2;

/**
 @brief Subtracts two values throwing an exception if overflow occurs.
 @param val1 the first value, to be taken away from
 @param val2 the second value, the amount to take away
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 */
+ (long long int)safeSubtractWithLong:(long long int)val1
                             withLong:(long long int)val2;

/**
 @brief Multiply two values throwing an exception if overflow occurs.
 @param val1 the first value
 @param val2 the second value
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 @since 1.2
 */
+ (int)safeMultiplyWithInt:(int)val1
                   withInt:(int)val2;

/**
 @brief Multiply two values throwing an exception if overflow occurs.
 @param val1 the first value
 @param val2 the second value
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 @since 1.2
 */
+ (long long int)safeMultiplyWithLong:(long long int)val1
                              withInt:(int)val2;

/**
 @brief Multiply two values throwing an exception if overflow occurs.
 @param val1 the first value
 @param val2 the second value
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 */
+ (long long int)safeMultiplyWithLong:(long long int)val1
                             withLong:(long long int)val2;

/**
 @brief Divides the dividend by the divisor throwing an exception if overflow occurs or the divisor is zero.
 @param dividend the dividend
 @param divisor the divisor
 @return the new total
 @throws ArithmeticException if the operation overflows or the divisor is zero
 */
+ (long long int)safeDivideWithLong:(long long int)dividend
                           withLong:(long long int)divisor;

/**
 @brief Casts to an int throwing an exception if overflow occurs.
 @param value the value
 @return the value as an int
 @throws ArithmeticException if the value is too big or too small
 */
+ (int)safeToIntWithLong:(long long int)value;

/**
 @brief Multiply two values to return an int throwing an exception if overflow occurs.
 @param val1 the first value
 @param val2 the second value
 @return the new total
 @throws ArithmeticException if the value is too big or too small
 */
+ (int)safeMultiplyToIntWithLong:(long long int)val1
                        withLong:(long long int)val2;

/**
 @brief Verify that input values are within specified bounds.
 @param value the value to check
 @param lowerBound the lower bound allowed for value
 @param upperBound the upper bound allowed for value
 @throws IllegalFieldValueException if value is not in the specified bounds
 */
+ (void)verifyValueBoundsWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                              withInt:(int)value
                                              withInt:(int)lowerBound
                                              withInt:(int)upperBound;

/**
 @brief Verify that input values are within specified bounds.
 @param value the value to check
 @param lowerBound the lower bound allowed for value
 @param upperBound the upper bound allowed for value
 @throws IllegalFieldValueException if value is not in the specified bounds
 @since 1.1
 */
+ (void)verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                  withInt:(int)value
                                                  withInt:(int)lowerBound
                                                  withInt:(int)upperBound;

/**
 @brief Verify that input values are within specified bounds.
 @param value the value to check
 @param lowerBound the lower bound allowed for value
 @param upperBound the upper bound allowed for value
 @throws IllegalFieldValueException if value is not in the specified bounds
 */
+ (void)verifyValueBoundsWithNSString:(NSString *)fieldName
                              withInt:(int)value
                              withInt:(int)lowerBound
                              withInt:(int)upperBound;

/**
 @brief Utility method used by addWrapField implementations to ensure the new value lies within the field's legal value range.
 @param currentValue the current value of the data, which may lie outside the wrapped value range
 @param wrapValue the value to add to current value before wrapping.  This may be negative.
 @param minValue the wrap range minimum value.
 @param maxValue the wrap range maximum value.  This must be greater than minValue (checked by the method).
 @return the wrapped value
 @throws IllegalArgumentException if minValue is greater than or equal to maxValue
 */
+ (int)getWrappedValueWithInt:(int)currentValue
                      withInt:(int)wrapValue
                      withInt:(int)minValue
                      withInt:(int)maxValue;

/**
 @brief Utility method that ensures the given value lies within the field's legal value range.
 @param value the value to fit into the wrapped value range
 @param minValue the wrap range minimum value.
 @param maxValue the wrap range maximum value.  This must be greater than minValue (checked by the method).
 @return the wrapped value
 @throws IllegalArgumentException if minValue is greater than or equal to maxValue
 */
+ (int)getWrappedValueWithInt:(int)value
                      withInt:(int)minValue
                      withInt:(int)maxValue;

/**
 @brief Compares two objects as equals handling null.
 @param object1 the first object
 @param object2 the second object
 @return true if equal
 @since 1.4
 */
+ (BOOL)equalsWithId:(id)object1
              withId:(id)object2;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFieldFieldUtils_init() {}

#endif // _OrgJodaTimeFieldFieldUtils_H_
