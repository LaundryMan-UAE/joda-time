//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/OffsetDateTimeField.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DecoratedDateTimeField.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "OffsetDateTimeField.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"

@implementation OrgJodaTimeFieldOffsetDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                         withInt:(int)offset {
  return [self initOrgJodaTimeFieldOffsetDateTimeFieldWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:(field == nil ? nil : [field getType]) withInt:offset withInt:JavaLangInteger_MIN_VALUE withInt:JavaLangInteger_MAX_VALUE];
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)offset {
  return [self initOrgJodaTimeFieldOffsetDateTimeFieldWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:type withInt:offset withInt:JavaLangInteger_MIN_VALUE withInt:JavaLangInteger_MAX_VALUE];
}

- (instancetype)initOrgJodaTimeFieldOffsetDateTimeFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                                                            withInt:(int)offset
                                                                            withInt:(int)minValue
                                                                            withInt:(int)maxValue {
  if (self = [super initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:type]) {
    if (offset == 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The offset cannot be zero"];
    }
    iOffset_ = offset;
    if (minValue < ([((OrgJodaTimeDateTimeField *) nil_chk(field)) getMinimumValue] + offset)) {
      iMin_ = [field getMinimumValue] + offset;
    }
    else {
      iMin_ = minValue;
    }
    if (maxValue > ([field getMaximumValue] + offset)) {
      iMax_ = [field getMaximumValue] + offset;
    }
    else {
      iMax_ = maxValue;
    }
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)offset
                                         withInt:(int)minValue
                                         withInt:(int)maxValue {
  return [self initOrgJodaTimeFieldOffsetDateTimeFieldWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:type withInt:offset withInt:minValue withInt:maxValue];
}

- (int)getWithLong:(long long int)instant {
  return [super getWithLong:instant] + iOffset_;
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount {
  instant = [super addWithLong:instant withInt:amount];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:[self getWithLong:instant] withInt:iMin_ withInt:iMax_];
  return instant;
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount {
  instant = [super addWithLong:instant withLong:amount];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:[self getWithLong:instant] withInt:iMin_ withInt:iMax_];
  return instant;
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount {
  return [self setWithLong:instant withInt:[OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:[self getWithLong:instant] withInt:amount withInt:iMin_ withInt:iMax_]];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:value withInt:iMin_ withInt:iMax_];
  return [super setWithLong:instant withInt:value - iOffset_];
}

- (BOOL)isLeapWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) isLeapWithLong:instant];
}

- (int)getLeapAmountWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getLeapAmountWithLong:instant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getLeapDurationField];
}

- (int)getMinimumValue {
  return iMin_;
}

- (int)getMaximumValue {
  return iMax_;
}

- (long long int)roundFloorWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
}

- (long long int)roundHalfFloorWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfFloorWithLong:instant];
}

- (long long int)roundHalfCeilingWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfCeilingWithLong:instant];
}

- (long long int)roundHalfEvenWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfEvenWithLong:instant];
}

- (long long int)remainderWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
}

- (int)getOffset {
  return iOffset_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldOffsetDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iMax_ = iMax_;
  other->iMin_ = iMin_;
  other->iOffset_ = iOffset_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeField:withInt:", "OffsetDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeFieldType:withInt:", "OffsetDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeFieldType:withInt:withInt:withInt:", "OffsetDateTimeField", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "roundHalfFloorWithLong:", "roundHalfFloor", "J", 0x1, NULL },
    { "roundHalfCeilingWithLong:", "roundHalfCeiling", "J", 0x1, NULL },
    { "roundHalfEvenWithLong:", "roundHalfEven", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "getOffset", NULL, "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_OffsetDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldOffsetDateTimeField_serialVersionUID },
    { "iOffset_", NULL, 0x12, "I", NULL,  },
    { "iMin_", NULL, 0x12, "I", NULL,  },
    { "iMax_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldOffsetDateTimeField = { "OffsetDateTimeField", "org.joda.time.field", NULL, 0x1, 20, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFieldOffsetDateTimeField;
}

@end
