//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/format/DateTimeFormatter.java
//

#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFormatter.h"
#include "DateTimeParser.h"
#include "DateTimeParserBucket.h"
#include "DateTimeParserInternalParser.h"
#include "DateTimePrinter.h"
#include "DateTimePrinterInternalPrinter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "FormatUtils.h"
#include "IOSClass.h"
#include "InternalParser.h"
#include "InternalParserDateTimeParser.h"
#include "InternalPrinter.h"
#include "InternalPrinterDateTimePrinter.h"
#include "LocalDate.h"
#include "LocalDateTime.h"
#include "LocalTime.h"
#include "MutableDateTime.h"
#include "ReadWritableInstant.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeFormatDateTimeFormatter

- (instancetype)initWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                     withOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  return [self initOrgJodaTimeFormatDateTimeFormatterWithOrgJodaTimeFormatInternalPrinter:[OrgJodaTimeFormatDateTimePrinterInternalPrinter ofWithOrgJodaTimeFormatDateTimePrinter:printer] withOrgJodaTimeFormatInternalParser:[OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:parser]];
}

- (instancetype)initOrgJodaTimeFormatDateTimeFormatterWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                                                       withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  if (self = [super init]) {
    iPrinter_ = printer;
    iParser_ = parser;
    iLocale_ = nil;
    iOffsetParsed_ = NO;
    iChrono_ = nil;
    iZone_ = nil;
    iPivotYear_ = nil;
    iDefaultYear_ = 2000;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  return [self initOrgJodaTimeFormatDateTimeFormatterWithOrgJodaTimeFormatInternalPrinter:printer withOrgJodaTimeFormatInternalParser:parser];
}

- (instancetype)initWithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                     withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                             withBoolean:(BOOL)offsetParsed
                               withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                             withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                     withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                 withInt:(int)defaultYear {
  if (self = [super init]) {
    iPrinter_ = printer;
    iParser_ = parser;
    iLocale_ = locale;
    iOffsetParsed_ = offsetParsed;
    iChrono_ = chrono;
    iZone_ = zone;
    iPivotYear_ = pivotYear;
    iDefaultYear_ = defaultYear;
  }
  return self;
}

- (BOOL)isPrinter {
  return (iPrinter_ != nil);
}

- (id<OrgJodaTimeFormatDateTimePrinter>)getPrinter {
  return [OrgJodaTimeFormatInternalPrinterDateTimePrinter ofWithOrgJodaTimeFormatInternalPrinter:iPrinter_];
}

- (id<OrgJodaTimeFormatInternalPrinter>)getPrinter0 {
  return iPrinter_;
}

- (BOOL)isParser {
  return (iParser_ != nil);
}

- (id<OrgJodaTimeFormatDateTimeParser>)getParser {
  return [OrgJodaTimeFormatInternalParserDateTimeParser ofWithOrgJodaTimeFormatInternalParser:iParser_];
}

- (id<OrgJodaTimeFormatInternalParser>)getParser0 {
  return iParser_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == [self getLocale] || (locale != nil && [locale isEqual:[self getLocale]])) {
    return self;
  }
  return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:locale withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withOffsetParsed {
  if (iOffsetParsed_ == YES) {
    return self;
  }
  return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:YES withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:nil withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
}

- (BOOL)isOffsetParsed {
  return iOffsetParsed_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (iChrono_ == chrono) {
    return self;
  }
  return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:chrono withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
}

- (OrgJodaTimeChronology *)getChronology {
  return iChrono_;
}

- (OrgJodaTimeChronology *)getChronolgy {
  return iChrono_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withZoneUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
}

- (OrgJodaTimeFormatDateTimeFormatter *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (iZone_ == zone) {
    return self;
  }
  return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:NO withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:zone withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return iZone_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear {
  if (iPivotYear_ == pivotYear || (iPivotYear_ != nil && [iPivotYear_ isEqual:pivotYear])) {
    return self;
  }
  return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:pivotYear withInt:iDefaultYear_];
}

- (OrgJodaTimeFormatDateTimeFormatter *)withPivotYearWithInt:(int)pivotYear {
  return [self withPivotYearWithJavaLangInteger:[JavaLangInteger valueOfWithInt:pivotYear]];
}

- (JavaLangInteger *)getPivotYear {
  return iPivotYear_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)withDefaultYearWithInt:(int)defaultYear {
  return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:iPrinter_ withOrgJodaTimeFormatInternalParser:iParser_ withJavaUtilLocale:iLocale_ withBoolean:iOffsetParsed_ withOrgJodaTimeChronology:iChrono_ withOrgJodaTimeDateTimeZone:iZone_ withJavaLangInteger:iPivotYear_ withInt:defaultYear];
}

- (int)getDefaultYear {
  return iDefaultYear_;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadableInstant:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(outArg, @protocol(JavaLangAppendable)) withOrgJodaTimeReadableInstant:instant];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  long long int millis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:instant];
  OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:instant];
  [self printToWithJavaLangAppendable:appendable withLong:millis withOrgJodaTimeChronology:chrono];
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                               withLong:(long long int)instant {
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withLong:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                       withLong:(long long int)instant {
  [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(outArg, @protocol(JavaLangAppendable)) withLong:instant];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant {
  [self printToWithJavaLangAppendable:appendable withLong:instant withOrgJodaTimeChronology:nil];
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
         withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadablePartial:partial];
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
 withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(outArg, @protocol(JavaLangAppendable)) withOrgJodaTimeReadablePartial:partial];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  id<OrgJodaTimeFormatInternalPrinter> printer = [self requirePrinter];
  if (partial == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The partial must not be null"];
  }
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:iLocale_];
}

- (NSString *)printWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithInt:[((id<OrgJodaTimeFormatInternalPrinter>) nil_chk([self requirePrinter])) estimatePrintedLength]];
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadableInstant:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (NSString *)printWithLong:(long long int)instant {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithInt:[((id<OrgJodaTimeFormatInternalPrinter>) nil_chk([self requirePrinter])) estimatePrintedLength]];
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withLong:instant];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (NSString *)printWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithInt:[((id<OrgJodaTimeFormatInternalPrinter>) nil_chk([self requirePrinter])) estimatePrintedLength]];
  @try {
    [self printToWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withOrgJodaTimeReadablePartial:partial];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [buf description];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  id<OrgJodaTimeFormatInternalPrinter> printer = [self requirePrinter];
  chrono = [self selectChronologyWithOrgJodaTimeChronology:chrono];
  OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone];
  int offset = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getOffsetWithLong:instant];
  long long int adjustedInstant = instant + offset;
  if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
    zone = OrgJodaTimeDateTimeZone_get_UTC_();
    offset = 0;
    adjustedInstant = instant;
  }
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) printToWithJavaLangAppendable:appendable withLong:adjustedInstant withOrgJodaTimeChronology:[chrono withUTC] withInt:offset withOrgJodaTimeDateTimeZone:zone withJavaUtilLocale:iLocale_];
}

- (id<OrgJodaTimeFormatInternalPrinter>)requirePrinter {
  id<OrgJodaTimeFormatInternalPrinter> printer = iPrinter_;
  if (printer == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Printing not supported"];
  }
  return printer;
}

- (int)parseIntoWithOrgJodaTimeReadWritableInstant:(id<OrgJodaTimeReadWritableInstant>)instant
                                      withNSString:(NSString *)text
                                           withInt:(int)position {
  id<OrgJodaTimeFormatInternalParser> parser = [self requireParser];
  if (instant == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Instant must not be null"];
  }
  long long int instantMillis = [((id<OrgJodaTimeReadWritableInstant>) nil_chk(instant)) getMillis];
  OrgJodaTimeChronology *chrono = [instant getChronology];
  int defaultYear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono])) year])) getWithLong:instantMillis];
  long long int instantLocal = instantMillis + [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) getZone])) getOffsetWithLong:instantMillis];
  chrono = [self selectChronologyWithOrgJodaTimeChronology:chrono];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:defaultYear];
  int newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  [instant setMillisWithLong:[bucket computeMillisWithBoolean:NO withNSString:text]];
  if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
    int parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
    OrgJodaTimeDateTimeZone *parsedZone = [OrgJodaTimeDateTimeZone forOffsetMillisWithInt:parsedOffset];
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
  }
  else if ([bucket getZone] != nil) {
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
  }
  [instant setChronologyWithOrgJodaTimeChronology:chrono];
  if (iZone_ != nil) {
    [instant setZoneWithOrgJodaTimeDateTimeZone:iZone_];
  }
  return newPos;
}

- (long long int)parseMillisWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = [self requireParser];
  OrgJodaTimeChronology *chrono = [self selectChronologyWithOrgJodaTimeChronology:iChrono_];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
  return [bucket doParseMillisWithOrgJodaTimeFormatInternalParser:parser withJavaLangCharSequence:text];
}

- (OrgJodaTimeLocalDate *)parseLocalDateWithNSString:(NSString *)text {
  return [((OrgJodaTimeLocalDateTime *) nil_chk([self parseLocalDateTimeWithNSString:text])) toLocalDate];
}

- (OrgJodaTimeLocalTime *)parseLocalTimeWithNSString:(NSString *)text {
  return [((OrgJodaTimeLocalDateTime *) nil_chk([self parseLocalDateTimeWithNSString:text])) toLocalTime];
}

- (OrgJodaTimeLocalDateTime *)parseLocalDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = [self requireParser];
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self selectChronologyWithOrgJodaTimeChronology:nil])) withUTC];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
  int newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= ((int) [((NSString *) nil_chk(text)) length])) {
      long long int millis = [bucket computeMillisWithBoolean:YES withNSString:text];
      if ([bucket getOffsetInteger] != nil) {
        int parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = [OrgJodaTimeDateTimeZone forOffsetMillisWithInt:parsedOffset];
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      return [[OrgJodaTimeLocalDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:chrono];
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[OrgJodaTimeFormatFormatUtils createErrorMessageWithNSString:text withInt:newPos]];
}

- (OrgJodaTimeDateTime *)parseDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = [self requireParser];
  OrgJodaTimeChronology *chrono = [self selectChronologyWithOrgJodaTimeChronology:nil];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
  int newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= ((int) [((NSString *) nil_chk(text)) length])) {
      long long int millis = [bucket computeMillisWithBoolean:YES withNSString:text];
      if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
        int parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = [OrgJodaTimeDateTimeZone forOffsetMillisWithInt:parsedOffset];
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      OrgJodaTimeDateTime *dt = [[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:chrono];
      if (iZone_ != nil) {
        dt = [dt withZoneWithOrgJodaTimeDateTimeZone:iZone_];
      }
      return dt;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[OrgJodaTimeFormatFormatUtils createErrorMessageWithNSString:text withInt:newPos]];
}

- (OrgJodaTimeMutableDateTime *)parseMutableDateTimeWithNSString:(NSString *)text {
  id<OrgJodaTimeFormatInternalParser> parser = [self requireParser];
  OrgJodaTimeChronology *chrono = [self selectChronologyWithOrgJodaTimeChronology:nil];
  OrgJodaTimeFormatDateTimeParserBucket *bucket = [[OrgJodaTimeFormatDateTimeParserBucket alloc] initWithLong:0 withOrgJodaTimeChronology:chrono withJavaUtilLocale:iLocale_ withJavaLangInteger:iPivotYear_ withInt:iDefaultYear_];
  int newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= ((int) [((NSString *) nil_chk(text)) length])) {
      long long int millis = [bucket computeMillisWithBoolean:YES withNSString:text];
      if (iOffsetParsed_ && [bucket getOffsetInteger] != nil) {
        int parsedOffset = [((JavaLangInteger *) nil_chk([bucket getOffsetInteger])) intValue];
        OrgJodaTimeDateTimeZone *parsedZone = [OrgJodaTimeDateTimeZone forOffsetMillisWithInt:parsedOffset];
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:parsedZone];
      }
      else if ([bucket getZone] != nil) {
        chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:[bucket getZone]];
      }
      OrgJodaTimeMutableDateTime *dt = [[OrgJodaTimeMutableDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:chrono];
      if (iZone_ != nil) {
        [dt setZoneWithOrgJodaTimeDateTimeZone:iZone_];
      }
      return dt;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[OrgJodaTimeFormatFormatUtils createErrorMessageWithNSString:text withInt:newPos]];
}

- (id<OrgJodaTimeFormatInternalParser>)requireParser {
  id<OrgJodaTimeFormatInternalParser> parser = iParser_;
  if (parser == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Parsing not supported"];
  }
  return parser;
}

- (OrgJodaTimeChronology *)selectChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
  if (iChrono_ != nil) {
    chrono = iChrono_;
  }
  if (iZone_ != nil) {
    chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:iZone_];
  }
  return chrono;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatter *)other {
  [super copyAllFieldsTo:other];
  other->iChrono_ = iChrono_;
  other->iDefaultYear_ = iDefaultYear_;
  other->iLocale_ = iLocale_;
  other->iOffsetParsed_ = iOffsetParsed_;
  other->iParser_ = iParser_;
  other->iPivotYear_ = iPivotYear_;
  other->iPrinter_ = iPrinter_;
  other->iZone_ = iZone_;
}
+ (IOSObjectArray *)__annotations_getChronolgy {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParser:", "DateTimeFormatter", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:", "DateTimeFormatter", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:withJavaUtilLocale:withBoolean:withOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:withJavaLangInteger:withInt:", "DateTimeFormatter", NULL, 0x2, NULL },
    { "isPrinter", NULL, "Z", 0x1, NULL },
    { "getPrinter", NULL, "Lorg.joda.time.format.DateTimePrinter;", 0x1, NULL },
    { "getPrinter0", NULL, "Lorg.joda.time.format.InternalPrinter;", 0x0, NULL },
    { "isParser", NULL, "Z", 0x1, NULL },
    { "getParser", NULL, "Lorg.joda.time.format.DateTimeParser;", 0x1, NULL },
    { "getParser0", NULL, "Lorg.joda.time.format.InternalParser;", 0x0, NULL },
    { "withLocaleWithJavaUtilLocale:", "withLocale", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "withOffsetParsed", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "isOffsetParsed", NULL, "Z", 0x1, NULL },
    { "withChronologyWithOrgJodaTimeChronology:", "withChronology", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getChronolgy", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneUTC", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "withPivotYearWithJavaLangInteger:", "withPivotYear", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "withPivotYearWithInt:", "withPivotYear", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getPivotYear", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "withDefaultYearWithInt:", "withDefaultYear", "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "getDefaultYear", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadableInstant:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadableInstant:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadableInstant:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangStringBuffer:withLong:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withLong:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withLong:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePartial:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePartial:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printWithOrgJodaTimeReadableInstant:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "printWithLong:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "printWithOrgJodaTimeReadablePartial:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:", "printTo", "V", 0x2, "Ljava.io.IOException;" },
    { "requirePrinter", NULL, "Lorg.joda.time.format.InternalPrinter;", 0x2, NULL },
    { "parseIntoWithOrgJodaTimeReadWritableInstant:withNSString:withInt:", "parseInto", "I", 0x1, NULL },
    { "parseMillisWithNSString:", "parseMillis", "J", 0x1, NULL },
    { "parseLocalDateWithNSString:", "parseLocalDate", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "parseLocalTimeWithNSString:", "parseLocalTime", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "parseLocalDateTimeWithNSString:", "parseLocalDateTime", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "parseDateTimeWithNSString:", "parseDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "parseMutableDateTimeWithNSString:", "parseMutableDateTime", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "requireParser", NULL, "Lorg.joda.time.format.InternalParser;", 0x2, NULL },
    { "selectChronologyWithOrgJodaTimeChronology:", "selectChronology", "Lorg.joda.time.Chronology;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iPrinter_", NULL, 0x12, "Lorg.joda.time.format.InternalPrinter;", NULL,  },
    { "iParser_", NULL, 0x12, "Lorg.joda.time.format.InternalParser;", NULL,  },
    { "iLocale_", NULL, 0x12, "Ljava.util.Locale;", NULL,  },
    { "iOffsetParsed_", NULL, 0x12, "Z", NULL,  },
    { "iChrono_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iZone_", NULL, 0x12, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iPivotYear_", NULL, 0x12, "Ljava.lang.Integer;", NULL,  },
    { "iDefaultYear_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatter = { "DateTimeFormatter", "org.joda.time.format", NULL, 0x1, 47, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatter;
}

@end
