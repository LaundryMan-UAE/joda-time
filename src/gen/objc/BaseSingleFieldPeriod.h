//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java
//

#ifndef _OrgJodaTimeBaseBaseSingleFieldPeriod_H_
#define _OrgJodaTimeBaseBaseSingleFieldPeriod_H_

@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeMutablePeriod;
@class OrgJodaTimePeriod;
@class OrgJodaTimePeriodType;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadablePartial;

#import "JreEmulation.h"
#include "ReadablePeriod.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"

#define OrgJodaTimeBaseBaseSingleFieldPeriod_START_1972 63072000000LL
#define OrgJodaTimeBaseBaseSingleFieldPeriod_serialVersionUID 9386874258972LL

/**
 @brief BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that manages a single duration field, such as days or minutes.
 <p> This class should generally not be used directly by API users. The ReadablePeriod interface should be used when different kinds of period objects are to be referenced. <p> BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.
 @author Stephen Colebourne
 @since 1.4
 */
@interface OrgJodaTimeBaseBaseSingleFieldPeriod : NSObject < OrgJodaTimeReadablePeriod, JavaLangComparable, JavaIoSerializable > {
 @public
  /**
   @brief The period in the units of this period.
   */
  int iPeriod_;
}

/**
 @brief Calculates the number of whole units between the two specified datetimes.
 @param start the start instant, validated to not be null
 @param end the end instant, validated to not be null
 @param field the field type to use, must not be null
 @return the period
 @throws IllegalArgumentException if the instants are null or invalid
 */
+ (int)betweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
              withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end
            withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field;

/**
 @brief Calculates the number of whole units between the two specified partial datetimes.
 <p> The two partials must contain the same fields, for example you can specify two <code>LocalDate</code> objects.
 @param start the start partial date, validated to not be null
 @param end the end partial date, validated to not be null
 @param zeroInstance the zero instance constant, must not be null
 @return the period
 @throws IllegalArgumentException if the partials are null or invalid
 */
+ (int)betweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
              withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end
               withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)zeroInstance;

/**
 @brief Creates a new instance representing the number of complete standard length units in the specified period.
 <p> This factory method converts all fields from the period to hours using standardised durations for each field. Only those fields which have a precise duration in the ISO UTC chronology can be converted. <ul> <li>One week consists of 7 days. <li>One day consists of 24 hours. <li>One hour consists of 60 minutes. <li>One minute consists of 60 seconds. <li>One second consists of 1000 milliseconds. </ul> Months and Years are imprecise and periods containing these values cannot be converted.
 @param period the period to get the number of hours from, must not be null
 @param millisPerUnit the number of milliseconds in one standard unit of this period
 @throws IllegalArgumentException if the period contains imprecise duration values
 */
+ (int)standardPeriodInWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                            withLong:(long long int)millisPerUnit;

/**
 @brief Creates a new instance representing the specified period.
 @param period the period to represent
 */
- (instancetype)initWithInt:(int)period;

/**
 @brief Gets the amount of this period.
 @return the period value
 */
- (int)getValue;

/**
 @brief Sets the amount of this period.
 To make a subclass immutable you must declare it final, or block this method.
 @param value the period value
 */
- (void)setValueWithInt:(int)value;

/**
 @brief Gets the single duration field type.
 @return the duration field type, not null
 */
- (OrgJodaTimeDurationFieldType *)getFieldType;

/**
 @brief Gets the period type which matches the duration field type.
 @return the period type, not null
 */
- (OrgJodaTimePeriodType *)getPeriodType;

/**
 @brief Gets the number of fields that this period supports, which is one.
 @return the number of fields supported, which is one
 */
- (int)size;

/**
 @brief Gets the field type at the specified index.
 <p> The only index supported by this period is zero which returns the field type of this class.
 @param index the index to retrieve, which must be zero
 @return the field at the specified index
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (OrgJodaTimeDurationFieldType *)getFieldTypeWithInt:(int)index;

/**
 @brief Gets the value at the specified index.
 <p> The only index supported by this period is zero.
 @param index the index to retrieve, which must be zero
 @return the value of the field at the specified index
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (int)getValueWithInt:(int)index;

/**
 @brief Gets the value of a duration field represented by this period.
 <p> If the field type specified does not match the type used by this class then zero is returned.
 @param type the field type to query, null returns zero
 @return the value of that field, zero if field not supported
 */
- (int)getWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

/**
 @brief Checks whether the duration field specified is supported by this period.
 @param type the type to check, may be null which returns false
 @return true if the field is supported
 */
- (BOOL)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

/**
 @brief Get this period as an immutable <code>Period</code> object.
 The period will use <code>PeriodType.standard()</code>.
 @return a <code>Period</code> representing the same number of days
 */
- (OrgJodaTimePeriod *)toPeriod;

/**
 @brief Get this object as a <code>MutablePeriod</code>.
 <p> This will always return a new <code>MutablePeriod</code> with the same fields. The period will use <code>PeriodType.standard()</code>.
 @return a MutablePeriod using the same field set and values
 */
- (OrgJodaTimeMutablePeriod *)toMutablePeriod;

/**
 @brief Compares this object with the specified object for equality based on the value of each field.
 All ReadablePeriod instances are accepted, but only those with a matching <code>PeriodType</code> can return true.
 @param period a readable period to check against
 @return true if all the field values are equal, false if not or the period is null or of an incorrect type
 */
- (BOOL)isEqual:(id)period;

/**
 @brief Gets a hash code for the period as defined by ReadablePeriod.
 @return a hash code
 */
- (NSUInteger)hash;

/**
 @brief Compares this period to another object of the same class.
 @param other the other period, must not be null
 @return zero if equal, positive if greater, negative if less
 @throws NullPointerException if the other period is null
 @throws ClassCastException if the other period is of a different type
 */
- (int)compareToWithId:(OrgJodaTimeBaseBaseSingleFieldPeriod *)other;

- (NSString *)description;

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBaseSingleFieldPeriod *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeBaseBaseSingleFieldPeriod_init() {}

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeBaseBaseSingleFieldPeriod, serialVersionUID, long long int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeBaseBaseSingleFieldPeriod, START_1972, long long int)

#endif // _OrgJodaTimeBaseBaseSingleFieldPeriod_H_
