//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicChronology.java
//

#include "AssembledChronology.h"
#include "BasicChronology.h"
#include "BasicDayOfMonthDateTimeField.h"
#include "BasicDayOfYearDateTimeField.h"
#include "BasicWeekOfWeekyearDateTimeField.h"
#include "BasicWeekyearDateTimeField.h"
#include "BasicYearDateTimeField.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DividedDateTimeField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "GJDayOfWeekDateTimeField.h"
#include "GJEraDateTimeField.h"
#include "GJLocaleSymbols.h"
#include "GJMonthOfYearDateTimeField.h"
#include "GJYearOfEraDateTimeField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "MillisDurationField.h"
#include "OffsetDateTimeField.h"
#include "PreciseDateTimeField.h"
#include "PreciseDurationField.h"
#include "RemainderDateTimeField.h"
#include "ZeroIsMaxDateTimeField.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"

BOOL OrgJodaTimeChronoBasicChronology_initialized = NO;

@implementation OrgJodaTimeChronoBasicChronology

OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cMillisField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cSecondsField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cMinutesField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cHoursField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cHalfdaysField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cDaysField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cWeeksField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMillisOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cSecondOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cHourOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_;

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(int)minDaysInFirstWeek {
  if (self = [super initWithOrgJodaTimeChronology:base withId:param]) {
    iYearInfoCache_ = [IOSObjectArray arrayWithLength:OrgJodaTimeChronoBasicChronology_CACHE_SIZE type:[IOSClass classWithClass:[OrgJodaTimeChronoBasicChronology_YearInfo class]]];
    if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid min days in first week: %d", minDaysInFirstWeek]];
    }
    iMinDaysInFirstWeek_ = minDaysInFirstWeek;
  }
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return OrgJodaTimeDateTimeZone_get_UTC_();
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfDay] withInt:millisOfDay withInt:0 withInt:OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1];
  return [self getDateMidnightMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth] + millisOfDay;
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType hourOfDay] withInt:hourOfDay withInt:0 withInt:23];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType minuteOfHour] withInt:minuteOfHour withInt:0 withInt:59];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType secondOfMinute] withInt:secondOfMinute withInt:0 withInt:59];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfSecond] withInt:millisOfSecond withInt:0 withInt:999];
  return [self getDateMidnightMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth] + hourOfDay * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR + minuteOfHour * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE + secondOfMinute * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND + millisOfSecond;
}

- (int)getMinimumDaysInFirstWeek {
  return iMinDaysInFirstWeek_;
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj != nil && [self getClass] == [obj getClass]) {
    OrgJodaTimeChronoBasicChronology *chrono = (OrgJodaTimeChronoBasicChronology *) check_class_cast(obj, [OrgJodaTimeChronoBasicChronology class]);
    return [self getMinimumDaysInFirstWeek] == [chrono getMinimumDaysInFirstWeek] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((int) [((NSString *) nil_chk([[self getClass] getName])) hash]) * 11 + ((int) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) + [self getMinimumDaysInFirstWeek];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:60];
  NSString *name = [[self getClass] getName];
  int index = [((NSString *) nil_chk(name)) lastIndexOf:'.'];
  if (index >= 0) {
    name = [name substring:index + 1];
  }
  (void) [sb appendWithNSString:name];
  (void) [sb appendWithChar:'['];
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  if (zone != nil) {
    (void) [sb appendWithNSString:[zone getID]];
  }
  if ([self getMinimumDaysInFirstWeek] != 4) {
    (void) [sb appendWithNSString:@",mdfw="];
    (void) [sb appendWithInt:[self getMinimumDaysInFirstWeek]];
  }
  (void) [sb appendWithChar:']'];
  return [sb description];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->millis_ = OrgJodaTimeChronoBasicChronology_cMillisField_;
  fields->seconds_ = OrgJodaTimeChronoBasicChronology_cSecondsField_;
  fields->minutes_ = OrgJodaTimeChronoBasicChronology_cMinutesField_;
  fields->hours_ = OrgJodaTimeChronoBasicChronology_cHoursField_;
  fields->halfdays_ = OrgJodaTimeChronoBasicChronology_cHalfdaysField_;
  fields->days_ = OrgJodaTimeChronoBasicChronology_cDaysField_;
  fields->weeks_ = OrgJodaTimeChronoBasicChronology_cWeeksField_;
  fields->millisOfSecond_ = OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_;
  fields->millisOfDay_ = OrgJodaTimeChronoBasicChronology_cMillisOfDayField_;
  fields->secondOfMinute_ = OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_;
  fields->secondOfDay_ = OrgJodaTimeChronoBasicChronology_cSecondOfDayField_;
  fields->minuteOfHour_ = OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_;
  fields->minuteOfDay_ = OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_;
  fields->hourOfDay_ = OrgJodaTimeChronoBasicChronology_cHourOfDayField_;
  fields->hourOfHalfday_ = OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_;
  fields->clockhourOfDay_ = OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_;
  fields->clockhourOfHalfday_ = OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_;
  fields->halfdayOfDay_ = OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_;
  fields->year_ = [[OrgJodaTimeChronoBasicYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self];
  fields->yearOfEra_ = [[OrgJodaTimeChronoGJYearOfEraDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->year_ withOrgJodaTimeChronoBasicChronology:self];
  OrgJodaTimeDateTimeField *field = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->yearOfEra_ withInt:99];
  fields->centuryOfEra_ = [[OrgJodaTimeFieldDividedDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType centuryOfEra] withInt:100];
  fields->centuries_ = [fields->centuryOfEra_ getDurationField];
  field = [[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *) check_class_cast(fields->centuryOfEra_, [OrgJodaTimeFieldDividedDateTimeField class])];
  fields->yearOfCentury_ = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType yearOfCentury] withInt:1];
  fields->era_ = [[OrgJodaTimeChronoGJEraDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self];
  fields->dayOfWeek_ = [[OrgJodaTimeChronoGJDayOfWeekDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->days_];
  fields->dayOfMonth_ = [[OrgJodaTimeChronoBasicDayOfMonthDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->days_];
  fields->dayOfYear_ = [[OrgJodaTimeChronoBasicDayOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->days_];
  fields->monthOfYear_ = [[OrgJodaTimeChronoGJMonthOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self];
  fields->weekyear_ = [[OrgJodaTimeChronoBasicWeekyearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self];
  fields->weekOfWeekyear_ = [[OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->weeks_];
  field = [[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->weekyear_ withOrgJodaTimeDurationField:fields->centuries_ withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyearOfCentury] withInt:100];
  fields->weekyearOfCentury_ = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyearOfCentury] withInt:1];
  fields->years_ = [fields->year_ getDurationField];
  fields->months_ = [fields->monthOfYear_ getDurationField];
  fields->weekyears_ = [fields->weekyear_ getDurationField];
}

- (int)getDaysInYearMax {
  return 366;
}

- (int)getDaysInYearWithInt:(int)year {
  return [self isLeapYearWithInt:year] ? 366 : 365;
}

- (int)getWeeksInYearWithInt:(int)year {
  long long int firstWeekMillis1 = [self getFirstWeekOfYearMillisWithInt:year];
  long long int firstWeekMillis2 = [self getFirstWeekOfYearMillisWithInt:year + 1];
  return (int) ((firstWeekMillis2 - firstWeekMillis1) / OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK);
}

- (long long int)getFirstWeekOfYearMillisWithInt:(int)year {
  long long int jan1millis = [self getYearMillisWithInt:year];
  int jan1dayOfWeek = [self getDayOfWeekWithLong:jan1millis];
  if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek_)) {
    return jan1millis + (8 - jan1dayOfWeek) * (long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
  else {
    return jan1millis - (jan1dayOfWeek - 1) * (long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
}

- (long long int)getYearMillisWithInt:(int)year {
  return ((OrgJodaTimeChronoBasicChronology_YearInfo *) nil_chk([self getYearInfoWithInt:year]))->iFirstDayMillis_;
}

- (long long int)getYearMonthMillisWithInt:(int)year
                                   withInt:(int)month {
  long long int millis = [self getYearMillisWithInt:year];
  millis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return millis;
}

- (long long int)getYearMonthDayMillisWithInt:(int)year
                                      withInt:(int)month
                                      withInt:(int)dayOfMonth {
  long long int millis = [self getYearMillisWithInt:year];
  millis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return millis + (dayOfMonth - 1) * (long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (int)getYearWithLong:(long long int)instant {
  long long int unitMillis = [self getAverageMillisPerYearDividedByTwo];
  long long int i2 = (instant >> 1) + [self getApproxMillisAtEpochDividedByTwo];
  if (i2 < 0) {
    i2 = i2 - unitMillis + 1;
  }
  int year = (int) (i2 / unitMillis);
  long long int yearStart = [self getYearMillisWithInt:year];
  long long int diff = instant - yearStart;
  if (diff < 0) {
    year--;
  }
  else if (diff >= OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 365LL) {
    long long int oneYear;
    if ([self isLeapYearWithInt:year]) {
      oneYear = OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 366LL;
    }
    else {
      oneYear = OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 365LL;
    }
    yearStart += oneYear;
    if (yearStart <= instant) {
      year++;
    }
  }
  return year;
}

- (int)getMonthOfYearWithLong:(long long int)millis {
  return [self getMonthOfYearWithLong:millis withInt:[self getYearWithLong:millis]];
}

- (int)getMonthOfYearWithLong:(long long int)millis
                      withInt:(int)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getDayOfMonthWithLong:(long long int)millis {
  int year = [self getYearWithLong:millis];
  int month = [self getMonthOfYearWithLong:millis withInt:year];
  return [self getDayOfMonthWithLong:millis withInt:year withInt:month];
}

- (int)getDayOfMonthWithLong:(long long int)millis
                     withInt:(int)year {
  int month = [self getMonthOfYearWithLong:millis withInt:year];
  return [self getDayOfMonthWithLong:millis withInt:year withInt:month];
}

- (int)getDayOfMonthWithLong:(long long int)millis
                     withInt:(int)year
                     withInt:(int)month {
  long long int dateMillis = [self getYearMillisWithInt:year];
  dateMillis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return (int) ((millis - dateMillis) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) + 1;
}

- (int)getDayOfYearWithLong:(long long int)instant {
  return [self getDayOfYearWithLong:instant withInt:[self getYearWithLong:instant]];
}

- (int)getDayOfYearWithLong:(long long int)instant
                    withInt:(int)year {
  long long int yearStart = [self getYearMillisWithInt:year];
  return (int) ((instant - yearStart) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) + 1;
}

- (int)getWeekyearWithLong:(long long int)instant {
  int year = [self getYearWithLong:instant];
  int week = [self getWeekOfWeekyearWithLong:instant withInt:year];
  if (week == 1) {
    return [self getYearWithLong:instant + OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK];
  }
  else if (week > 51) {
    return [self getYearWithLong:instant - (2 * OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK)];
  }
  else {
    return year;
  }
}

- (int)getWeekOfWeekyearWithLong:(long long int)instant {
  return [self getWeekOfWeekyearWithLong:instant withInt:[self getYearWithLong:instant]];
}

- (int)getWeekOfWeekyearWithLong:(long long int)instant
                         withInt:(int)year {
  long long int firstWeekMillis1 = [self getFirstWeekOfYearMillisWithInt:year];
  if (instant < firstWeekMillis1) {
    return [self getWeeksInYearWithInt:year - 1];
  }
  long long int firstWeekMillis2 = [self getFirstWeekOfYearMillisWithInt:year + 1];
  if (instant >= firstWeekMillis2) {
    return 1;
  }
  return (int) ((instant - firstWeekMillis1) / OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK) + 1;
}

- (int)getDayOfWeekWithLong:(long long int)instant {
  long long int daysSince19700101;
  if (instant >= 0) {
    daysSince19700101 = instant / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
  else {
    daysSince19700101 = (instant - (OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1)) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
    if (daysSince19700101 < -3) {
      return 7 + (int) ((daysSince19700101 + 4) % 7);
    }
  }
  return 1 + (int) ((daysSince19700101 + 3) % 7);
}

- (int)getMillisOfDayWithLong:(long long int)instant {
  if (instant >= 0) {
    return (int) (instant % OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  }
  else {
    return (OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1) + (int) ((instant + 1) % OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  }
}

- (int)getDaysInMonthMax {
  return 31;
}

- (int)getDaysInMonthMaxWithLong:(long long int)instant {
  int thisYear = [self getYearWithLong:instant];
  int thisMonth = [self getMonthOfYearWithLong:instant withInt:thisYear];
  return [self getDaysInYearMonthWithInt:thisYear withInt:thisMonth];
}

- (int)getDaysInMonthMaxForSetWithLong:(long long int)instant
                               withInt:(int)value {
  return [self getDaysInMonthMaxWithLong:instant];
}

- (long long int)getDateMidnightMillisWithInt:(int)year
                                      withInt:(int)monthOfYear
                                      withInt:(int)dayOfMonth {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year] withInt:year withInt:[self getMinYear] withInt:[self getMaxYear]];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType monthOfYear] withInt:monthOfYear withInt:1 withInt:[self getMaxMonthWithInt:year]];
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfMonth] withInt:dayOfMonth withInt:1 withInt:[self getDaysInYearMonthWithInt:year withInt:monthOfYear]];
  return [self getYearMonthDayMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth];
}

- (long long int)getYearDifferenceWithLong:(long long int)minuendInstant
                                  withLong:(long long int)subtrahendInstant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isLeapYearWithInt:(int)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isLeapDayWithLong:(long long int)instant {
  return NO;
}

- (int)getDaysInYearMonthWithInt:(int)year
                         withInt:(int)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getDaysInMonthMaxWithInt:(int)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)getTotalMillisByYearMonthWithInt:(int)year
                                          withInt:(int)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)calculateFirstDayOfYearMillisWithInt:(int)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMinYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMaxYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMaxMonthWithInt:(int)year {
  return [self getMaxMonth];
}

- (int)getMaxMonth {
  return 12;
}

- (long long int)getAverageMillisPerYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)getAverageMillisPerYearDividedByTwo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)getAverageMillisPerMonth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)getApproxMillisAtEpochDividedByTwo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)setYearWithLong:(long long int)instant
                         withInt:(int)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeChronoBasicChronology_YearInfo *)getYearInfoWithInt:(int)year {
  OrgJodaTimeChronoBasicChronology_YearInfo *info = IOSObjectArray_Get(nil_chk(iYearInfoCache_), year & OrgJodaTimeChronoBasicChronology_CACHE_MASK);
  if (info == nil || info->iYear_ != year) {
    info = [[OrgJodaTimeChronoBasicChronology_YearInfo alloc] initWithInt:year withLong:[self calculateFirstDayOfYearMillisWithInt:year]];
    (void) IOSObjectArray_Set(iYearInfoCache_, year & OrgJodaTimeChronoBasicChronology_CACHE_MASK, info);
  }
  return info;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoBasicChronology class]) {
    {
      OrgJodaTimeChronoBasicChronology_cMillisField_ = OrgJodaTimeFieldMillisDurationField_get_INSTANCE_();
      OrgJodaTimeChronoBasicChronology_cSecondsField_ = [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds] withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND];
      OrgJodaTimeChronoBasicChronology_cMinutesField_ = [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType minutes] withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE];
      OrgJodaTimeChronoBasicChronology_cHoursField_ = [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType hours] withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR];
      OrgJodaTimeChronoBasicChronology_cHalfdaysField_ = [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType halfdays] withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY / 2];
      OrgJodaTimeChronoBasicChronology_cDaysField_ = [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType days] withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY];
      OrgJodaTimeChronoBasicChronology_cWeeksField_ = [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType weeks] withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK];
      OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfSecond] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMillisField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cSecondsField_];
      OrgJodaTimeChronoBasicChronology_cMillisOfDayField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfDay] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMillisField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_];
      OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType secondOfMinute] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cSecondsField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMinutesField_];
      OrgJodaTimeChronoBasicChronology_cSecondOfDayField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType secondOfDay] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cSecondsField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_];
      OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType minuteOfHour] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMinutesField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHoursField_];
      OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType minuteOfDay] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMinutesField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_];
      OrgJodaTimeChronoBasicChronology_cHourOfDayField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType hourOfDay] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHoursField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_];
      OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_ = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType hourOfHalfday] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHoursField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHalfdaysField_];
      OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_ = [[OrgJodaTimeFieldZeroIsMaxDateTimeField alloc] initWithOrgJodaTimeDateTimeField:OrgJodaTimeChronoBasicChronology_cHourOfDayField_ withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType clockhourOfDay]];
      OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_ = [[OrgJodaTimeFieldZeroIsMaxDateTimeField alloc] initWithOrgJodaTimeDateTimeField:OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_ withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType clockhourOfHalfday]];
      OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_ = [[OrgJodaTimeChronoBasicChronology_HalfdayField alloc] init];
    }
    OrgJodaTimeChronoBasicChronology_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicChronology *)other {
  [super copyAllFieldsTo:other];
  other->iMinDaysInFirstWeek_ = iMinDaysInFirstWeek_;
  other->iYearInfoCache_ = iYearInfoCache_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withId:withInt:", "BasicChronology", NULL, 0x0, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getMinimumDaysInFirstWeek", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "getDaysInYearMax", NULL, "I", 0x0, NULL },
    { "getDaysInYearWithInt:", "getDaysInYear", "I", 0x0, NULL },
    { "getWeeksInYearWithInt:", "getWeeksInYear", "I", 0x0, NULL },
    { "getFirstWeekOfYearMillisWithInt:", "getFirstWeekOfYearMillis", "J", 0x0, NULL },
    { "getYearMillisWithInt:", "getYearMillis", "J", 0x0, NULL },
    { "getYearMonthMillisWithInt:withInt:", "getYearMonthMillis", "J", 0x0, NULL },
    { "getYearMonthDayMillisWithInt:withInt:withInt:", "getYearMonthDayMillis", "J", 0x0, NULL },
    { "getYearWithLong:", "getYear", "I", 0x0, NULL },
    { "getMonthOfYearWithLong:", "getMonthOfYear", "I", 0x0, NULL },
    { "getMonthOfYearWithLong:withInt:", "getMonthOfYear", "I", 0x400, NULL },
    { "getDayOfMonthWithLong:", "getDayOfMonth", "I", 0x0, NULL },
    { "getDayOfMonthWithLong:withInt:", "getDayOfMonth", "I", 0x0, NULL },
    { "getDayOfMonthWithLong:withInt:withInt:", "getDayOfMonth", "I", 0x0, NULL },
    { "getDayOfYearWithLong:", "getDayOfYear", "I", 0x0, NULL },
    { "getDayOfYearWithLong:withInt:", "getDayOfYear", "I", 0x0, NULL },
    { "getWeekyearWithLong:", "getWeekyear", "I", 0x0, NULL },
    { "getWeekOfWeekyearWithLong:", "getWeekOfWeekyear", "I", 0x0, NULL },
    { "getWeekOfWeekyearWithLong:withInt:", "getWeekOfWeekyear", "I", 0x0, NULL },
    { "getDayOfWeekWithLong:", "getDayOfWeek", "I", 0x0, NULL },
    { "getMillisOfDayWithLong:", "getMillisOfDay", "I", 0x0, NULL },
    { "getDaysInMonthMax", NULL, "I", 0x0, NULL },
    { "getDaysInMonthMaxWithLong:", "getDaysInMonthMax", "I", 0x0, NULL },
    { "getDaysInMonthMaxForSetWithLong:withInt:", "getDaysInMonthMaxForSet", "I", 0x0, NULL },
    { "getDateMidnightMillisWithInt:withInt:withInt:", "getDateMidnightMillis", "J", 0x0, NULL },
    { "getYearDifferenceWithLong:withLong:", "getYearDifference", "J", 0x400, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x400, NULL },
    { "isLeapDayWithLong:", "isLeapDay", "Z", 0x0, NULL },
    { "getDaysInYearMonthWithInt:withInt:", "getDaysInYearMonth", "I", 0x400, NULL },
    { "getDaysInMonthMaxWithInt:", "getDaysInMonthMax", "I", 0x400, NULL },
    { "getTotalMillisByYearMonthWithInt:withInt:", "getTotalMillisByYearMonth", "J", 0x400, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x400, NULL },
    { "getMinYear", NULL, "I", 0x400, NULL },
    { "getMaxYear", NULL, "I", 0x400, NULL },
    { "getMaxMonthWithInt:", "getMaxMonth", "I", 0x0, NULL },
    { "getMaxMonth", NULL, "I", 0x0, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x400, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x400, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x400, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x400, NULL },
    { "setYearWithLong:withInt:", "setYear", "J", 0x400, NULL },
    { "getYearInfoWithInt:", "getYearInfo", "Lorg.joda.time.chrono.BasicChronology$YearInfo;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_BasicChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicChronology_serialVersionUID },
    { "cMillisField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cMillisField_,  },
    { "cSecondsField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cSecondsField_,  },
    { "cMinutesField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cMinutesField_,  },
    { "cHoursField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cHoursField_,  },
    { "cHalfdaysField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cHalfdaysField_,  },
    { "cDaysField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cDaysField_,  },
    { "cWeeksField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cWeeksField_,  },
    { "cMillisOfSecondField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_,  },
    { "cMillisOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMillisOfDayField_,  },
    { "cSecondOfMinuteField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_,  },
    { "cSecondOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cSecondOfDayField_,  },
    { "cMinuteOfHourField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_,  },
    { "cMinuteOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_,  },
    { "cHourOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cHourOfDayField_,  },
    { "cHourOfHalfdayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_,  },
    { "cClockhourOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_,  },
    { "cClockhourOfHalfdayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_,  },
    { "cHalfdayOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_,  },
    { "CACHE_SIZE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBasicChronology_CACHE_SIZE },
    { "CACHE_MASK_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBasicChronology_CACHE_MASK },
    { "iYearInfoCache_", NULL, 0x92, "[Lorg.joda.time.chrono.BasicChronology$YearInfo;", NULL,  },
    { "iMinDaysInFirstWeek_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology = { "BasicChronology", "org.joda.time.chrono", NULL, 0x400, 50, methods, 23, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicChronology;
}

@end

@implementation OrgJodaTimeChronoBasicChronology_HalfdayField

- (instancetype)init {
  return [super initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType halfdayOfDay] withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_get_cHalfdaysField_() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_get_cDaysField_()];
}

- (NSString *)getAsTextWithInt:(int)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk([OrgJodaTimeChronoGJLocaleSymbols forLocaleWithJavaUtilLocale:locale])) halfdayValueToTextWithInt:fieldValue];
}

- (long long int)setWithLong:(long long int)millis
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self setWithLong:millis withInt:[((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk([OrgJodaTimeChronoGJLocaleSymbols forLocaleWithJavaUtilLocale:locale])) halfdayTextToValueWithNSString:text]];
}

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk([OrgJodaTimeChronoGJLocaleSymbols forLocaleWithJavaUtilLocale:locale])) getHalfdayMaxTextLength];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "HalfdayField", NULL, 0x0, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_HalfdayField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicChronology_HalfdayField_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology_HalfdayField = { "HalfdayField", "org.joda.time.chrono", "BasicChronology", 0xa, 4, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicChronology_HalfdayField;
}

@end

@implementation OrgJodaTimeChronoBasicChronology_YearInfo

- (instancetype)initWithInt:(int)year
                   withLong:(long long int)firstDayMillis {
  if (self = [super init]) {
    iYear_ = year;
    iFirstDayMillis_ = firstDayMillis;
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicChronology_YearInfo *)other {
  [super copyAllFieldsTo:other];
  other->iFirstDayMillis_ = iFirstDayMillis_;
  other->iYear_ = iYear_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withLong:", "YearInfo", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iYear_", NULL, 0x11, "I", NULL,  },
    { "iFirstDayMillis_", NULL, 0x11, "J", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology_YearInfo = { "YearInfo", "org.joda.time.chrono", "BasicChronology", 0xa, 1, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicChronology_YearInfo;
}

@end
