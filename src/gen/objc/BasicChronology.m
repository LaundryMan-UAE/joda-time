//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/BasicChronology.java
//

#include "AssembledChronology.h"
#include "BasicChronology.h"
#include "BasicDayOfMonthDateTimeField.h"
#include "BasicDayOfYearDateTimeField.h"
#include "BasicWeekOfWeekyearDateTimeField.h"
#include "BasicWeekyearDateTimeField.h"
#include "BasicYearDateTimeField.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DividedDateTimeField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "GJDayOfWeekDateTimeField.h"
#include "GJEraDateTimeField.h"
#include "GJLocaleSymbols.h"
#include "GJMonthOfYearDateTimeField.h"
#include "GJYearOfEraDateTimeField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "MillisDurationField.h"
#include "OffsetDateTimeField.h"
#include "PreciseDateTimeField.h"
#include "PreciseDurationField.h"
#include "RemainderDateTimeField.h"
#include "ZeroIsMaxDateTimeField.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"

BOOL OrgJodaTimeChronoBasicChronology_initialized = NO;

@implementation OrgJodaTimeChronoBasicChronology

OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cMillisField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cSecondsField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cMinutesField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cHoursField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cHalfdaysField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cDaysField_;
OrgJodaTimeDurationField * OrgJodaTimeChronoBasicChronology_cWeeksField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMillisOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cSecondOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cHourOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_;
OrgJodaTimeDateTimeField * OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_;

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek {
  if (self = [super initWithOrgJodaTimeChronology:base withId:param]) {
    OrgJodaTimeChronoBasicChronology_setAndConsume_iYearInfoCache_(self, [IOSObjectArray newArrayWithLength:OrgJodaTimeChronoBasicChronology_CACHE_SIZE type:[IOSClass classWithClass:[OrgJodaTimeChronoBasicChronology_YearInfo class]]]);
    if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Invalid min days in first week: ", minDaysInFirstWeek)] autorelease];
    }
    iMinDaysInFirstWeek_ = minDaysInFirstWeek;
  }
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return OrgJodaTimeDateTimeZone_get_UTC_();
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_millisOfDay(), millisOfDay, 0, OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1);
  return [self getDateMidnightMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth] + millisOfDay;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_hourOfDay(), hourOfDay, 0, 23);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_minuteOfHour(), minuteOfHour, 0, 59);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_secondOfMinute(), secondOfMinute, 0, 59);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_millisOfSecond(), millisOfSecond, 0, 999);
  return [self getDateMidnightMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth] + hourOfDay * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR + minuteOfHour * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE + secondOfMinute * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND + millisOfSecond;
}

- (jint)getMinimumDaysInFirstWeek {
  return iMinDaysInFirstWeek_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj != nil && [self getClass] == [obj getClass]) {
    OrgJodaTimeChronoBasicChronology *chrono = (OrgJodaTimeChronoBasicChronology *) check_class_cast(obj, [OrgJodaTimeChronoBasicChronology class]);
    return [self getMinimumDaysInFirstWeek] == [chrono getMinimumDaysInFirstWeek] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([[self getClass] getName])) hash]) * 11 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) + [self getMinimumDaysInFirstWeek];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:60] autorelease];
  NSString *name = [[self getClass] getName];
  jint index = [((NSString *) nil_chk(name)) lastIndexOf:'.'];
  if (index >= 0) {
    name = [name substring:index + 1];
  }
  [sb appendWithNSString:name];
  [sb appendWithChar:'['];
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  if (zone != nil) {
    [sb appendWithNSString:[zone getID]];
  }
  if ([self getMinimumDaysInFirstWeek] != 4) {
    [sb appendWithNSString:@",mdfw="];
    [sb appendWithInt:[self getMinimumDaysInFirstWeek]];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  OrgJodaTimeChronoAssembledChronology_Fields_set_millis_(nil_chk(fields), OrgJodaTimeChronoBasicChronology_cMillisField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_seconds_(fields, OrgJodaTimeChronoBasicChronology_cSecondsField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minutes_(fields, OrgJodaTimeChronoBasicChronology_cMinutesField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hours_(fields, OrgJodaTimeChronoBasicChronology_cHoursField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdays_(fields, OrgJodaTimeChronoBasicChronology_cHalfdaysField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_days_(fields, OrgJodaTimeChronoBasicChronology_cDaysField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weeks_(fields, OrgJodaTimeChronoBasicChronology_cWeeksField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(fields, OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(fields, OrgJodaTimeChronoBasicChronology_cMillisOfDayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(fields, OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(fields, OrgJodaTimeChronoBasicChronology_cSecondOfDayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(fields, OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(fields, OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(fields, OrgJodaTimeChronoBasicChronology_cHourOfDayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(fields, OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(fields, OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(fields, OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(fields, OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_year_(fields, [[OrgJodaTimeChronoBasicYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_yearOfEra_(fields, [[OrgJodaTimeChronoGJYearOfEraDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->year_ withOrgJodaTimeChronoBasicChronology:self]);
  OrgJodaTimeDateTimeField *field = [[[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->yearOfEra_ withInt:99] autorelease];
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_centuryOfEra_(fields, [[OrgJodaTimeFieldDividedDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_centuryOfEra() withInt:100]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(fields, [fields->centuryOfEra_ getDurationField]);
  field = [[[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *) check_class_cast(fields->centuryOfEra_, [OrgJodaTimeFieldDividedDateTimeField class])] autorelease];
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_yearOfCentury_(fields, [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_yearOfCentury() withInt:1]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_era_(fields, [[OrgJodaTimeChronoGJEraDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_dayOfWeek_(fields, [[OrgJodaTimeChronoGJDayOfWeekDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->days_]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_dayOfMonth_(fields, [[OrgJodaTimeChronoBasicDayOfMonthDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->days_]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_dayOfYear_(fields, [[OrgJodaTimeChronoBasicDayOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->days_]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_monthOfYear_(fields, [[OrgJodaTimeChronoGJMonthOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekyear_(fields, [[OrgJodaTimeChronoBasicWeekyearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self]);
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekOfWeekyear_(fields, [[OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withOrgJodaTimeDurationField:fields->weeks_]);
  field = [[[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->weekyear_ withOrgJodaTimeDurationField:fields->centuries_ withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekyearOfCentury() withInt:100] autorelease];
  OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekyearOfCentury_(fields, [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekyearOfCentury() withInt:1]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_years_(fields, [fields->year_ getDurationField]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_months_(fields, [fields->monthOfYear_ getDurationField]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(fields, [fields->weekyear_ getDurationField]);
}

- (jint)getDaysInYearMax {
  return 366;
}

- (jint)getDaysInYearWithInt:(jint)year {
  return [self isLeapYearWithInt:year] ? 366 : 365;
}

- (jint)getWeeksInYearWithInt:(jint)year {
  jlong firstWeekMillis1 = [self getFirstWeekOfYearMillisWithInt:year];
  jlong firstWeekMillis2 = [self getFirstWeekOfYearMillisWithInt:year + 1];
  return (jint) ((firstWeekMillis2 - firstWeekMillis1) / OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK);
}

- (jlong)getFirstWeekOfYearMillisWithInt:(jint)year {
  jlong jan1millis = [self getYearMillisWithInt:year];
  jint jan1dayOfWeek = [self getDayOfWeekWithLong:jan1millis];
  if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek_)) {
    return jan1millis + (8 - jan1dayOfWeek) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
  else {
    return jan1millis - (jan1dayOfWeek - 1) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
}

- (jlong)getYearMillisWithInt:(jint)year {
  return ((OrgJodaTimeChronoBasicChronology_YearInfo *) nil_chk([self getYearInfoWithInt:year]))->iFirstDayMillis_;
}

- (jlong)getYearMonthMillisWithInt:(jint)year
                           withInt:(jint)month {
  jlong millis = [self getYearMillisWithInt:year];
  millis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return millis;
}

- (jlong)getYearMonthDayMillisWithInt:(jint)year
                              withInt:(jint)month
                              withInt:(jint)dayOfMonth {
  jlong millis = [self getYearMillisWithInt:year];
  millis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return millis + (dayOfMonth - 1) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jint)getYearWithLong:(jlong)instant {
  jlong unitMillis = [self getAverageMillisPerYearDividedByTwo];
  jlong i2 = (RShift64(instant, 1)) + [self getApproxMillisAtEpochDividedByTwo];
  if (i2 < 0) {
    i2 = i2 - unitMillis + 1;
  }
  jint year = (jint) (i2 / unitMillis);
  jlong yearStart = [self getYearMillisWithInt:year];
  jlong diff = instant - yearStart;
  if (diff < 0) {
    year--;
  }
  else if (diff >= OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 365LL) {
    jlong oneYear;
    if ([self isLeapYearWithInt:year]) {
      oneYear = OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 366LL;
    }
    else {
      oneYear = OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY * 365LL;
    }
    yearStart += oneYear;
    if (yearStart <= instant) {
      year++;
    }
  }
  return year;
}

- (jint)getMonthOfYearWithLong:(jlong)millis {
  return [self getMonthOfYearWithLong:millis withInt:[self getYearWithLong:millis]];
}

- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getDayOfMonthWithLong:(jlong)millis {
  jint year = [self getYearWithLong:millis];
  jint month = [self getMonthOfYearWithLong:millis withInt:year];
  return [self getDayOfMonthWithLong:millis withInt:year withInt:month];
}

- (jint)getDayOfMonthWithLong:(jlong)millis
                      withInt:(jint)year {
  jint month = [self getMonthOfYearWithLong:millis withInt:year];
  return [self getDayOfMonthWithLong:millis withInt:year withInt:month];
}

- (jint)getDayOfMonthWithLong:(jlong)millis
                      withInt:(jint)year
                      withInt:(jint)month {
  jlong dateMillis = [self getYearMillisWithInt:year];
  dateMillis += [self getTotalMillisByYearMonthWithInt:year withInt:month];
  return (jint) ((millis - dateMillis) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) + 1;
}

- (jint)getDayOfYearWithLong:(jlong)instant {
  return [self getDayOfYearWithLong:instant withInt:[self getYearWithLong:instant]];
}

- (jint)getDayOfYearWithLong:(jlong)instant
                     withInt:(jint)year {
  jlong yearStart = [self getYearMillisWithInt:year];
  return (jint) ((instant - yearStart) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) + 1;
}

- (jint)getWeekyearWithLong:(jlong)instant {
  jint year = [self getYearWithLong:instant];
  jint week = [self getWeekOfWeekyearWithLong:instant withInt:year];
  if (week == 1) {
    return [self getYearWithLong:instant + OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK];
  }
  else if (week > 51) {
    return [self getYearWithLong:instant - (2 * OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK)];
  }
  else {
    return year;
  }
}

- (jint)getWeekOfWeekyearWithLong:(jlong)instant {
  return [self getWeekOfWeekyearWithLong:instant withInt:[self getYearWithLong:instant]];
}

- (jint)getWeekOfWeekyearWithLong:(jlong)instant
                          withInt:(jint)year {
  jlong firstWeekMillis1 = [self getFirstWeekOfYearMillisWithInt:year];
  if (instant < firstWeekMillis1) {
    return [self getWeeksInYearWithInt:year - 1];
  }
  jlong firstWeekMillis2 = [self getFirstWeekOfYearMillisWithInt:year + 1];
  if (instant >= firstWeekMillis2) {
    return 1;
  }
  return (jint) ((instant - firstWeekMillis1) / OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK) + 1;
}

- (jint)getDayOfWeekWithLong:(jlong)instant {
  jlong daysSince19700101;
  if (instant >= 0) {
    daysSince19700101 = instant / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  }
  else {
    daysSince19700101 = (instant - (OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1)) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
    if (daysSince19700101 < -3) {
      return 7 + (jint) ((daysSince19700101 + 4) % 7);
    }
  }
  return 1 + (jint) ((daysSince19700101 + 3) % 7);
}

- (jint)getMillisOfDayWithLong:(jlong)instant {
  if (instant >= 0) {
    return (jint) (instant % OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  }
  else {
    return (OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY - 1) + (jint) ((instant + 1) % OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  }
}

- (jint)getDaysInMonthMax {
  return 31;
}

- (jint)getDaysInMonthMaxWithLong:(jlong)instant {
  jint thisYear = [self getYearWithLong:instant];
  jint thisMonth = [self getMonthOfYearWithLong:instant withInt:thisYear];
  return [self getDaysInYearMonthWithInt:thisYear withInt:thisMonth];
}

- (jint)getDaysInMonthMaxForSetWithLong:(jlong)instant
                                withInt:(jint)value {
  return [self getDaysInMonthMaxWithLong:instant];
}

- (jlong)getDateMidnightMillisWithInt:(jint)year
                              withInt:(jint)monthOfYear
                              withInt:(jint)dayOfMonth {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_year(), year, [self getMinYear], [self getMaxYear]);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_monthOfYear(), monthOfYear, 1, [self getMaxMonthWithInt:year]);
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType_dayOfMonth(), dayOfMonth, 1, [self getDaysInYearMonthWithInt:year withInt:monthOfYear]);
  return [self getYearMonthDayMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth];
}

- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLeapDayWithLong:(jlong)instant {
  return NO;
}

- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getDaysInMonthMaxWithInt:(jint)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMinYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMaxYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMaxMonthWithInt:(jint)year {
  return [self getMaxMonth];
}

- (jint)getMaxMonth {
  return 12;
}

- (jlong)getAverageMillisPerYear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getAverageMillisPerMonth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeChronoBasicChronology_YearInfo *)getYearInfoWithInt:(jint)year {
  OrgJodaTimeChronoBasicChronology_YearInfo *info = IOSObjectArray_Get(nil_chk(iYearInfoCache_), year & OrgJodaTimeChronoBasicChronology_CACHE_MASK);
  if (info == nil || info->iYear_ != year) {
    info = [[[OrgJodaTimeChronoBasicChronology_YearInfo alloc] initWithInt:year withLong:[self calculateFirstDayOfYearMillisWithInt:year]] autorelease];
    IOSObjectArray_Set(iYearInfoCache_, year & OrgJodaTimeChronoBasicChronology_CACHE_MASK, info);
  }
  return info;
}

- (void)dealloc {
  OrgJodaTimeChronoBasicChronology_set_iYearInfoCache_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicChronology *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoBasicChronology_set_iYearInfoCache_(other, iYearInfoCache_);
  other->iMinDaysInFirstWeek_ = iMinDaysInFirstWeek_;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoBasicChronology class]) {
    {
      JreStrongAssign(&OrgJodaTimeChronoBasicChronology_cMillisField_, nil, OrgJodaTimeFieldMillisDurationField_get_INSTANCE_());
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cSecondsField_, nil, [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_seconds() withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMinutesField_, nil, [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_minutes() withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHoursField_, nil, [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_hours() withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHalfdaysField_, nil, [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_halfdays() withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY / 2]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cDaysField_, nil, [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cWeeksField_, nil, [[OrgJodaTimeFieldPreciseDurationField alloc] initWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_weeks() withLong:OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_millisOfSecond() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMillisField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cSecondsField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMillisOfDayField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_millisOfDay() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMillisField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_secondOfMinute() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cSecondsField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMinutesField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cSecondOfDayField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_secondOfDay() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cSecondsField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_minuteOfHour() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMinutesField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHoursField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_minuteOfDay() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cMinutesField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHourOfDayField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_hourOfDay() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHoursField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cDaysField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_, nil, [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_hourOfHalfday() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHoursField_ withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_cHalfdaysField_]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_, nil, [[OrgJodaTimeFieldZeroIsMaxDateTimeField alloc] initWithOrgJodaTimeDateTimeField:OrgJodaTimeChronoBasicChronology_cHourOfDayField_ withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_clockhourOfDay()]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_, nil, [[OrgJodaTimeFieldZeroIsMaxDateTimeField alloc] initWithOrgJodaTimeDateTimeField:OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_ withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_clockhourOfHalfday()]);
      JreStrongAssignAndConsume(&OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_, nil, [[OrgJodaTimeChronoBasicChronology_HalfdayField alloc] init]);
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoBasicChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withId:withInt:", "BasicChronology", NULL, 0x0, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getMinimumDaysInFirstWeek", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "getDaysInYearMax", NULL, "I", 0x0, NULL },
    { "getDaysInYearWithInt:", "getDaysInYear", "I", 0x0, NULL },
    { "getWeeksInYearWithInt:", "getWeeksInYear", "I", 0x0, NULL },
    { "getFirstWeekOfYearMillisWithInt:", "getFirstWeekOfYearMillis", "J", 0x0, NULL },
    { "getYearMillisWithInt:", "getYearMillis", "J", 0x0, NULL },
    { "getYearMonthMillisWithInt:withInt:", "getYearMonthMillis", "J", 0x0, NULL },
    { "getYearMonthDayMillisWithInt:withInt:withInt:", "getYearMonthDayMillis", "J", 0x0, NULL },
    { "getYearWithLong:", "getYear", "I", 0x0, NULL },
    { "getMonthOfYearWithLong:", "getMonthOfYear", "I", 0x0, NULL },
    { "getMonthOfYearWithLong:withInt:", "getMonthOfYear", "I", 0x400, NULL },
    { "getDayOfMonthWithLong:", "getDayOfMonth", "I", 0x0, NULL },
    { "getDayOfMonthWithLong:withInt:", "getDayOfMonth", "I", 0x0, NULL },
    { "getDayOfMonthWithLong:withInt:withInt:", "getDayOfMonth", "I", 0x0, NULL },
    { "getDayOfYearWithLong:", "getDayOfYear", "I", 0x0, NULL },
    { "getDayOfYearWithLong:withInt:", "getDayOfYear", "I", 0x0, NULL },
    { "getWeekyearWithLong:", "getWeekyear", "I", 0x0, NULL },
    { "getWeekOfWeekyearWithLong:", "getWeekOfWeekyear", "I", 0x0, NULL },
    { "getWeekOfWeekyearWithLong:withInt:", "getWeekOfWeekyear", "I", 0x0, NULL },
    { "getDayOfWeekWithLong:", "getDayOfWeek", "I", 0x0, NULL },
    { "getMillisOfDayWithLong:", "getMillisOfDay", "I", 0x0, NULL },
    { "getDaysInMonthMax", NULL, "I", 0x0, NULL },
    { "getDaysInMonthMaxWithLong:", "getDaysInMonthMax", "I", 0x0, NULL },
    { "getDaysInMonthMaxForSetWithLong:withInt:", "getDaysInMonthMaxForSet", "I", 0x0, NULL },
    { "getDateMidnightMillisWithInt:withInt:withInt:", "getDateMidnightMillis", "J", 0x0, NULL },
    { "getYearDifferenceWithLong:withLong:", "getYearDifference", "J", 0x400, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x400, NULL },
    { "isLeapDayWithLong:", "isLeapDay", "Z", 0x0, NULL },
    { "getDaysInYearMonthWithInt:withInt:", "getDaysInYearMonth", "I", 0x400, NULL },
    { "getDaysInMonthMaxWithInt:", "getDaysInMonthMax", "I", 0x400, NULL },
    { "getTotalMillisByYearMonthWithInt:withInt:", "getTotalMillisByYearMonth", "J", 0x400, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x400, NULL },
    { "getMinYear", NULL, "I", 0x400, NULL },
    { "getMaxYear", NULL, "I", 0x400, NULL },
    { "getMaxMonthWithInt:", "getMaxMonth", "I", 0x0, NULL },
    { "getMaxMonth", NULL, "I", 0x0, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x400, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x400, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x400, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x400, NULL },
    { "setYearWithLong:withInt:", "setYear", "J", 0x400, NULL },
    { "getYearInfoWithInt:", "getYearInfo", "Lorg.joda.time.chrono.BasicChronology$YearInfo;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicChronology_serialVersionUID },
    { "cMillisField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cMillisField_,  },
    { "cSecondsField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cSecondsField_,  },
    { "cMinutesField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cMinutesField_,  },
    { "cHoursField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cHoursField_,  },
    { "cHalfdaysField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cHalfdaysField_,  },
    { "cDaysField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cDaysField_,  },
    { "cWeeksField_", NULL, 0x1a, "Lorg.joda.time.DurationField;", &OrgJodaTimeChronoBasicChronology_cWeeksField_,  },
    { "cMillisOfSecondField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_,  },
    { "cMillisOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMillisOfDayField_,  },
    { "cSecondOfMinuteField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_,  },
    { "cSecondOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cSecondOfDayField_,  },
    { "cMinuteOfHourField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_,  },
    { "cMinuteOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_,  },
    { "cHourOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cHourOfDayField_,  },
    { "cHourOfHalfdayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_,  },
    { "cClockhourOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_,  },
    { "cClockhourOfHalfdayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_,  },
    { "cHalfdayOfDayField_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_,  },
    { "CACHE_SIZE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBasicChronology_CACHE_SIZE },
    { "CACHE_MASK_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBasicChronology_CACHE_MASK },
    { "iYearInfoCache_", NULL, 0x92, "[Lorg.joda.time.chrono.BasicChronology$YearInfo;", NULL,  },
    { "iMinDaysInFirstWeek_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology = { "BasicChronology", "org.joda.time.chrono", NULL, 0x400, 50, methods, 23, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicChronology;
}

@end

@implementation OrgJodaTimeChronoBasicChronology_HalfdayField

- (instancetype)init {
  return [super initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_halfdayOfDay() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_get_cHalfdaysField_() withOrgJodaTimeDurationField:OrgJodaTimeChronoBasicChronology_get_cDaysField_()];
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) halfdayValueToTextWithInt:fieldValue];
}

- (jlong)setWithLong:(jlong)millis
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self setWithLong:millis withInt:[((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) halfdayTextToValueWithNSString:text]];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) getHalfdayMaxTextLength];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "HalfdayField", NULL, 0x0, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicChronology_HalfdayField_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology_HalfdayField = { "HalfdayField", "org.joda.time.chrono", "BasicChronology", 0xa, 4, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicChronology_HalfdayField;
}

@end

@implementation OrgJodaTimeChronoBasicChronology_YearInfo

- (instancetype)initWithInt:(jint)year
                   withLong:(jlong)firstDayMillis {
  if (self = [super init]) {
    iYear_ = year;
    iFirstDayMillis_ = firstDayMillis;
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicChronology_YearInfo *)other {
  [super copyAllFieldsTo:other];
  other->iYear_ = iYear_;
  other->iFirstDayMillis_ = iFirstDayMillis_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withLong:", "YearInfo", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iYear_", NULL, 0x11, "I", NULL,  },
    { "iFirstDayMillis_", NULL, 0x11, "J", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicChronology_YearInfo = { "YearInfo", "org.joda.time.chrono", "BasicChronology", 0xa, 1, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicChronology_YearInfo;
}

@end
