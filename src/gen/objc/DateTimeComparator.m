//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/DateTimeComparator.java
//

#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTimeComparator.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "IOSClass.h"
#include "InstantConverter.h"

BOOL OrgJodaTimeDateTimeComparator_initialized = NO;

@implementation OrgJodaTimeDateTimeComparator

OrgJodaTimeDateTimeComparator * OrgJodaTimeDateTimeComparator_ALL_INSTANCE_;
OrgJodaTimeDateTimeComparator * OrgJodaTimeDateTimeComparator_DATE_INSTANCE_;
OrgJodaTimeDateTimeComparator * OrgJodaTimeDateTimeComparator_TIME_INSTANCE_;

+ (OrgJodaTimeDateTimeComparator *)getInstance {
  return OrgJodaTimeDateTimeComparator_ALL_INSTANCE_;
}

+ (OrgJodaTimeDateTimeComparator *)getInstanceWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit {
  return [OrgJodaTimeDateTimeComparator getInstanceWithOrgJodaTimeDateTimeFieldType:lowerLimit withOrgJodaTimeDateTimeFieldType:nil];
}

+ (OrgJodaTimeDateTimeComparator *)getInstanceWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit
                                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)upperLimit {
  if (lowerLimit == nil && upperLimit == nil) {
    return OrgJodaTimeDateTimeComparator_ALL_INSTANCE_;
  }
  if (lowerLimit == [OrgJodaTimeDateTimeFieldType dayOfYear] && upperLimit == nil) {
    return OrgJodaTimeDateTimeComparator_DATE_INSTANCE_;
  }
  if (lowerLimit == nil && upperLimit == [OrgJodaTimeDateTimeFieldType dayOfYear]) {
    return OrgJodaTimeDateTimeComparator_TIME_INSTANCE_;
  }
  return [[OrgJodaTimeDateTimeComparator alloc] initWithOrgJodaTimeDateTimeFieldType:lowerLimit withOrgJodaTimeDateTimeFieldType:upperLimit];
}

+ (OrgJodaTimeDateTimeComparator *)getDateOnlyInstance {
  return OrgJodaTimeDateTimeComparator_DATE_INSTANCE_;
}

+ (OrgJodaTimeDateTimeComparator *)getTimeOnlyInstance {
  return OrgJodaTimeDateTimeComparator_TIME_INSTANCE_;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit
                    withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)upperLimit {
  if (self = [super init]) {
    iLowerLimit_ = lowerLimit;
    iUpperLimit_ = upperLimit;
  }
  return self;
}

- (OrgJodaTimeDateTimeFieldType *)getLowerLimit {
  return iLowerLimit_;
}

- (OrgJodaTimeDateTimeFieldType *)getUpperLimit {
  return iUpperLimit_;
}

- (int)compareWithId:(id)lhsObj
              withId:(id)rhsObj {
  id<OrgJodaTimeConvertInstantConverter> conv = [((OrgJodaTimeConvertConverterManager *) nil_chk([OrgJodaTimeConvertConverterManager getInstance])) getInstantConverterWithId:lhsObj];
  OrgJodaTimeChronology *lhsChrono = [((id<OrgJodaTimeConvertInstantConverter>) nil_chk(conv)) getChronologyWithId:lhsObj withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
  long long int lhsMillis = [conv getInstantMillisWithId:lhsObj withOrgJodaTimeChronology:lhsChrono];
  conv = [((OrgJodaTimeConvertConverterManager *) nil_chk([OrgJodaTimeConvertConverterManager getInstance])) getInstantConverterWithId:rhsObj];
  OrgJodaTimeChronology *rhsChrono = [((id<OrgJodaTimeConvertInstantConverter>) nil_chk(conv)) getChronologyWithId:rhsObj withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
  long long int rhsMillis = [conv getInstantMillisWithId:rhsObj withOrgJodaTimeChronology:rhsChrono];
  if (iLowerLimit_ != nil) {
    lhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iLowerLimit_ getFieldWithOrgJodaTimeChronology:lhsChrono])) roundFloorWithLong:lhsMillis];
    rhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iLowerLimit_ getFieldWithOrgJodaTimeChronology:rhsChrono])) roundFloorWithLong:rhsMillis];
  }
  if (iUpperLimit_ != nil) {
    lhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iUpperLimit_ getFieldWithOrgJodaTimeChronology:lhsChrono])) remainderWithLong:lhsMillis];
    rhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iUpperLimit_ getFieldWithOrgJodaTimeChronology:rhsChrono])) remainderWithLong:rhsMillis];
  }
  if (lhsMillis < rhsMillis) {
    return -1;
  }
  else if (lhsMillis > rhsMillis) {
    return 1;
  }
  else {
    return 0;
  }
}

- (id)readResolve {
  return [OrgJodaTimeDateTimeComparator getInstanceWithOrgJodaTimeDateTimeFieldType:iLowerLimit_ withOrgJodaTimeDateTimeFieldType:iUpperLimit_];
}

- (BOOL)isEqual:(id)object {
  if ([object isKindOfClass:[OrgJodaTimeDateTimeComparator class]]) {
    OrgJodaTimeDateTimeComparator *other = (OrgJodaTimeDateTimeComparator *) check_class_cast(object, [OrgJodaTimeDateTimeComparator class]);
    return (iLowerLimit_ == [((OrgJodaTimeDateTimeComparator *) nil_chk(other)) getLowerLimit] || (iLowerLimit_ != nil && [iLowerLimit_ isEqual:[other getLowerLimit]])) && (iUpperLimit_ == [other getUpperLimit] || (iUpperLimit_ != nil && [iUpperLimit_ isEqual:[other getUpperLimit]]));
  }
  return NO;
}

- (NSUInteger)hash {
  return (iLowerLimit_ == nil ? 0 : ((int) [iLowerLimit_ hash])) + (123 * (iUpperLimit_ == nil ? 0 : ((int) [iUpperLimit_ hash])));
}

- (NSString *)description {
  if (iLowerLimit_ == iUpperLimit_) {
    return [NSString stringWithFormat:@"DateTimeComparator[%@]", (iLowerLimit_ == nil ? @"" : [iLowerLimit_ getName])];
  }
  else {
    return [NSString stringWithFormat:@"DateTimeComparator[%@-%@]", (iLowerLimit_ == nil ? @"" : [iLowerLimit_ getName]), (iUpperLimit_ == nil ? @"" : [iUpperLimit_ getName])];
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeComparator class]) {
    OrgJodaTimeDateTimeComparator_ALL_INSTANCE_ = [[OrgJodaTimeDateTimeComparator alloc] initWithOrgJodaTimeDateTimeFieldType:nil withOrgJodaTimeDateTimeFieldType:nil];
    OrgJodaTimeDateTimeComparator_DATE_INSTANCE_ = [[OrgJodaTimeDateTimeComparator alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfYear] withOrgJodaTimeDateTimeFieldType:nil];
    OrgJodaTimeDateTimeComparator_TIME_INSTANCE_ = [[OrgJodaTimeDateTimeComparator alloc] initWithOrgJodaTimeDateTimeFieldType:nil withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfYear]];
    OrgJodaTimeDateTimeComparator_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeComparator *)other {
  [super copyAllFieldsTo:other];
  other->iLowerLimit_ = iLowerLimit_;
  other->iUpperLimit_ = iUpperLimit_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getInstance", NULL, "Lorg.joda.time.DateTimeComparator;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeFieldType:", "getInstance", "Lorg.joda.time.DateTimeComparator;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDateTimeFieldType:", "getInstance", "Lorg.joda.time.DateTimeComparator;", 0x9, NULL },
    { "getDateOnlyInstance", NULL, "Lorg.joda.time.DateTimeComparator;", 0x9, NULL },
    { "getTimeOnlyInstance", NULL, "Lorg.joda.time.DateTimeComparator;", 0x9, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDateTimeFieldType:", "DateTimeComparator", NULL, 0x4, NULL },
    { "getLowerLimit", NULL, "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "getUpperLimit", NULL, "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDateTimeComparator_serialVersionUID },
    { "ALL_INSTANCE_", NULL, 0x1a, "Lorg.joda.time.DateTimeComparator;", &OrgJodaTimeDateTimeComparator_ALL_INSTANCE_,  },
    { "DATE_INSTANCE_", NULL, 0x1a, "Lorg.joda.time.DateTimeComparator;", &OrgJodaTimeDateTimeComparator_DATE_INSTANCE_,  },
    { "TIME_INSTANCE_", NULL, 0x1a, "Lorg.joda.time.DateTimeComparator;", &OrgJodaTimeDateTimeComparator_TIME_INSTANCE_,  },
    { "iLowerLimit_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
    { "iUpperLimit_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeComparator = { "DateTimeComparator", "org.joda.time", NULL, 0x1, 13, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeComparator;
}

@end
