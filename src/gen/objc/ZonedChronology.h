//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/ZonedChronology.java
//

#ifndef _OrgJodaTimeChronoZonedChronology_H_
#define _OrgJodaTimeChronoZonedChronology_H_

@class IOSIntArray;
@class JavaUtilHashMap;
@class JavaUtilLocale;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;
@protocol OrgJodaTimeReadablePartial;

#import "JreEmulation.h"
#include "AssembledChronology.h"
#include "BaseDateTimeField.h"
#include "BaseDurationField.h"

#define OrgJodaTimeChronoZonedChronology_serialVersionUID -1079258847191166848LL

/**
 @brief Wraps another Chronology to add support for time zones.
 <p> ZonedChronology is thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeChronoZonedChronology : OrgJodaTimeChronoAssembledChronology {
}

/**
 @brief Create a ZonedChronology for any chronology, overriding any time zone it may already have.
 @param base base chronology to wrap
 @param zone the time zone
 @throws IllegalArgumentException if chronology or time zone is null
 */
+ (OrgJodaTimeChronoZonedChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                               withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

+ (BOOL)useTimeArithmeticWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field;

/**
 @brief Restricted constructor
 @param base base chronology to wrap
 @param zone the time zone
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                  withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeDateTimeZone *)getZone;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay;

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond;

- (long long int)getDateTimeMillisWithLong:(long long int)instant
                                   withInt:(int)hourOfDay
                                   withInt:(int)minuteOfHour
                                   withInt:(int)secondOfMinute
                                   withInt:(int)millisOfSecond;

/**
 @param localInstant the instant from 1970-01-01T00:00:00 local time
 @return the instant from 1970-01-01T00:00:00Z
 */
- (long long int)localToUTCWithLong:(long long int)localInstant;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

/**
 @brief A zoned chronology is only equal to a zoned chronology with the same base chronology and zone.
 @param obj the object to compare to
 @return true if equal
 @since 1.4
 */
- (BOOL)isEqual:(id)obj;

/**
 @brief A suitable hashcode for the chronology.
 @return the hashcode
 @since 1.4
 */
- (NSUInteger)hash;

/**
 @brief A debugging string for the chronology.
 @return the debugging string
 */
- (NSString *)description;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoZonedChronology_init() {}

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoZonedChronology, serialVersionUID, long long int)

#define OrgJodaTimeChronoZonedChronology_ZonedDurationField_serialVersionUID -485345310999208286LL

@interface OrgJodaTimeChronoZonedChronology_ZonedDurationField : OrgJodaTimeFieldBaseDurationField {
 @public
  OrgJodaTimeDurationField *iField_;
  BOOL iTimeField_;
  OrgJodaTimeDateTimeZone *iZone_;
}

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (BOOL)isPrecise;

- (long long int)getUnitMillis;

- (int)getValueWithLong:(long long int)duration
               withLong:(long long int)instant;

- (long long int)getValueAsLongWithLong:(long long int)duration
                               withLong:(long long int)instant;

- (long long int)getMillisWithInt:(int)value
                         withLong:(long long int)instant;

- (long long int)getMillisWithLong:(long long int)value
                          withLong:(long long int)instant;

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value;

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value;

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant;

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant;

- (int)getOffsetToAddWithLong:(long long int)instant;

- (int)getOffsetFromLocalToSubtractWithLong:(long long int)instant;

- (long long int)addOffsetWithLong:(long long int)instant;

- (BOOL)isEqual:(id)obj;

- (NSUInteger)hash;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoZonedChronology_ZonedDurationField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoZonedChronology_ZonedDurationField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDurationField, iField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDurationField, iZone_, OrgJodaTimeDateTimeZone *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoZonedChronology_ZonedDurationField, serialVersionUID, long long int)

#define OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_serialVersionUID -3968986277775529794LL

/**
 @brief A DateTimeField that decorates another to add timezone behaviour.
 <p> This class converts passed in instants to local wall time, and vice versa on output.
 */
@interface OrgJodaTimeChronoZonedChronology_ZonedDateTimeField : OrgJodaTimeFieldBaseDateTimeField {
 @public
  OrgJodaTimeDateTimeField *iField_;
  OrgJodaTimeDateTimeZone *iZone_;
  OrgJodaTimeDurationField *iDurationField_;
  BOOL iTimeField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
  OrgJodaTimeDurationField *iLeapDurationField_;
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField;

- (BOOL)isLenient;

- (int)getWithLong:(long long int)instant;

- (NSString *)getAsTextWithLong:(long long int)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithLong:(long long int)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsTextWithInt:(int)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithInt:(int)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value;

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value;

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)value;

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value;

- (long long int)setWithLong:(long long int)instant
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale;

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant;

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant;

- (OrgJodaTimeDurationField *)getDurationField;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (BOOL)isLeapWithLong:(long long int)instant;

- (int)getLeapAmountWithLong:(long long int)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (long long int)roundFloorWithLong:(long long int)instant;

- (long long int)roundCeilingWithLong:(long long int)instant;

- (long long int)remainderWithLong:(long long int)instant;

- (int)getMinimumValue;

- (int)getMinimumValueWithLong:(long long int)instant;

- (int)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant;

- (int)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                        withIntArray:(IOSIntArray *)values;

- (int)getMaximumValue;

- (int)getMaximumValueWithLong:(long long int)instant;

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant;

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                        withIntArray:(IOSIntArray *)values;

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (int)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (int)getOffsetToAddWithLong:(long long int)instant;

- (BOOL)isEqual:(id)obj;

- (NSUInteger)hash;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iRangeDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iLeapDurationField_, OrgJodaTimeDurationField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, serialVersionUID, long long int)

#endif // _OrgJodaTimeChronoZonedChronology_H_
