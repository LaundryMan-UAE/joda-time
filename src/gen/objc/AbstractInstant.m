//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/base/AbstractInstant.java
//

#include "AbstractInstant.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "Instant.h"
#include "J2ObjC_source.h"
#include "MutableDateTime.h"
#include "ReadableInstant.h"
#include "ToString.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Date.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgJodaTimeBaseAbstractInstant

- (instancetype)init {
  return [super init];
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return [((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone];
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return NO;
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
}

- (jint)getWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  if (field == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeField must not be null"] autorelease];
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:[self getMillis]];
}

- (OrgJodaTimeInstant *)toInstant {
  return [[[OrgJodaTimeInstant alloc] initWithLong:[self getMillis]] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTime {
  return [[[OrgJodaTimeDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeDateTimeZone:[self getZone]] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeISO {
  return [[[OrgJodaTimeDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_([self getZone])] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([self getChronology]);
  chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [[[OrgJodaTimeDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:chronology] autorelease];
}

- (OrgJodaTimeMutableDateTime *)toMutableDateTime {
  return [[[OrgJodaTimeMutableDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeDateTimeZone:[self getZone]] autorelease];
}

- (OrgJodaTimeMutableDateTime *)toMutableDateTimeISO {
  return [[[OrgJodaTimeMutableDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_([self getZone])] autorelease];
}

- (OrgJodaTimeMutableDateTime *)toMutableDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([self getChronology]);
  chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeMutableDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeMutableDateTime *)toMutableDateTimeWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [[[OrgJodaTimeMutableDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:chronology] autorelease];
}

- (JavaUtilDate *)toDate {
  return [[[JavaUtilDate alloc] initWithLong:[self getMillis]] autorelease];
}

- (jboolean)isEqual:(id)readableInstant {
  if (self == readableInstant) {
    return YES;
  }
  if ([OrgJodaTimeReadableInstant_class_() isInstance:readableInstant] == NO) {
    return NO;
  }
  id<OrgJodaTimeReadableInstant> otherInstant = (id<OrgJodaTimeReadableInstant>) check_protocol_cast(readableInstant, @protocol(OrgJodaTimeReadableInstant));
  return [self getMillis] == [((id<OrgJodaTimeReadableInstant>) nil_chk(otherInstant)) getMillis] && OrgJodaTimeFieldFieldUtils_equalsWithId_withId_([self getChronology], [otherInstant getChronology]);
}

- (NSUInteger)hash {
  return ((jint) ([self getMillis] ^ (URShift64([self getMillis], 32)))) + (((jint) [((OrgJodaTimeChronology *) nil_chk([self getChronology])) hash]));
}

- (jint)compareToWithId:(id<OrgJodaTimeReadableInstant>)other {
  check_protocol_cast(other, @protocol(OrgJodaTimeReadableInstant));
  if (self == other) {
    return 0;
  }
  jlong otherMillis = [((id<OrgJodaTimeReadableInstant>) nil_chk(other)) getMillis];
  jlong thisMillis = [self getMillis];
  if (thisMillis == otherMillis) {
    return 0;
  }
  if (thisMillis < otherMillis) {
    return -1;
  }
  else {
    return 1;
  }
}

- (jboolean)isAfterWithLong:(jlong)instant {
  return ([self getMillis] > instant);
}

- (jboolean)isAfterNow {
  return [self isAfterWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis()];
}

- (jboolean)isAfterWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  return [self isAfterWithLong:instantMillis];
}

- (jboolean)isBeforeWithLong:(jlong)instant {
  return ([self getMillis] < instant);
}

- (jboolean)isBeforeNow {
  return [self isBeforeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis()];
}

- (jboolean)isBeforeWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  return [self isBeforeWithLong:instantMillis];
}

- (jboolean)isEqualWithLong:(jlong)instant {
  return [self getMillis] == instant;
}

- (jboolean)isEqualNow {
  return [self isEqualWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis()];
}

- (jboolean)isEqualWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  return [self isEqualWithLong:instantMillis];
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_dateTime())) printWithOrgJodaTimeReadableInstant:self];
}

- (NSString *)toStringWithOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  if (formatter == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) printWithOrgJodaTimeReadableInstant:self];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractInstant", NULL, 0x4, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getWithOrgJodaTimeDateTimeFieldType:", "get", "I", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeFieldType:", "isSupported", "Z", 0x1, NULL },
    { "getWithOrgJodaTimeDateTimeField:", "get", "I", 0x1, NULL },
    { "toInstant", NULL, "Lorg.joda.time.Instant;", 0x1, NULL },
    { "toDateTime", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeISO", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeDateTimeZone:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeChronology:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toMutableDateTime", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "toMutableDateTimeISO", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "toMutableDateTimeWithOrgJodaTimeDateTimeZone:", "toMutableDateTime", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "toMutableDateTimeWithOrgJodaTimeChronology:", "toMutableDateTime", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "toDate", NULL, "Ljava.util.Date;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "compareToWithOrgJodaTimeReadableInstant:", "compareTo", "I", 0x1, NULL },
    { "isAfterWithLong:", "isAfter", "Z", 0x1, NULL },
    { "isAfterNow", NULL, "Z", 0x1, NULL },
    { "isAfterWithOrgJodaTimeReadableInstant:", "isAfter", "Z", 0x1, NULL },
    { "isBeforeWithLong:", "isBefore", "Z", 0x1, NULL },
    { "isBeforeNow", NULL, "Z", 0x1, NULL },
    { "isBeforeWithOrgJodaTimeReadableInstant:", "isBefore", "Z", 0x1, NULL },
    { "isEqualWithLong:", "isEqual", "Z", 0x1, NULL },
    { "isEqualNow", NULL, "Z", 0x1, NULL },
    { "isEqualWithOrgJodaTimeReadableInstant:", "isEqual", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithOrgJodaTimeFormatDateTimeFormatter:", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseAbstractInstant = { 1, "AbstractInstant", "org.joda.time.base", NULL, 0x401, 29, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeBaseAbstractInstant;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseAbstractInstant)
