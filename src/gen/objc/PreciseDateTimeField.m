//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/PreciseDateTimeField.java
//

#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "PreciseDateTimeField.h"
#include "PreciseDurationDateTimeField.h"
#include "java/lang/IllegalArgumentException.h"

@implementation OrgJodaTimeFieldPreciseDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)unit
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)range {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:type withOrgJodaTimeDurationField:unit]) {
    if (![((OrgJodaTimeDurationField *) nil_chk(range)) isPrecise]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Range duration field must be precise"];
    }
    long long int rangeMillis = [range getUnitMillis];
    iRange_ = (int) (rangeMillis / [self getUnitMillis]);
    if (iRange_ < 2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The effective range must be at least 2"];
    }
    iRangeField_ = range;
  }
  return self;
}

- (int)getWithLong:(long long int)instant {
  if (instant >= 0) {
    return (int) ((instant / [self getUnitMillis]) % iRange_);
  }
  else {
    return iRange_ - 1 + (int) (((instant + 1) / [self getUnitMillis]) % iRange_);
  }
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount {
  int thisValue = [self getWithLong:instant];
  int wrappedValue = [OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:thisValue withInt:amount withInt:[self getMinimumValue] withInt:[self getMaximumValue]];
  return instant + (wrappedValue - thisValue) * [self getUnitMillis];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:value withInt:[self getMinimumValue] withInt:[self getMaximumValue]];
  return instant + (value - [self getWithLong:instant]) * iUnitMillis_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeField_;
}

- (int)getMaximumValue {
  return iRange_ - 1;
}

- (int)getRange {
  return iRange_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldPreciseDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iRange_ = iRange_;
  other->iRangeField_ = iRangeField_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "PreciseDateTimeField", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "getRange", NULL, "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_PreciseDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldPreciseDateTimeField_serialVersionUID },
    { "iRange_", NULL, 0x12, "I", NULL,  },
    { "iRangeField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldPreciseDateTimeField = { "PreciseDateTimeField", "org.joda.time.field", NULL, 0x1, 7, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFieldPreciseDateTimeField;
}

@end
