//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/LocalTime.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "LocalTime.h"
#include "PartialConverter.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "ToString.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"

@interface OrgJodaTimeLocalTime () {
 @public
  /**
   @brief The local millis from 1970-01-01T00:00:00
   */
  jlong iLocalMillis_;
  /**
   @brief The chronology to use, in UTC
   */
  OrgJodaTimeChronology *iChronology_;
}

/**
 @brief Handle broken serialization from other tools.
 @return the resolved object, not null
 */
- (id)readResolve;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime, iChronology_, OrgJodaTimeChronology *)

@interface OrgJodaTimeLocalTime_Property () {
 @public
  /**
   @brief The instant this property is working against
   */
  OrgJodaTimeLocalTime *iInstant_;
  /**
   @brief The field this property is working against
   */
  OrgJodaTimeDateTimeField *iField_;
}

/**
 @brief Writes the property in a safe serialization format.
 */
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

/**
 @brief Reads the property from a safe serialization format.
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime_Property, iInstant_, OrgJodaTimeLocalTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime_Property, iField_, OrgJodaTimeDateTimeField *)

BOOL OrgJodaTimeLocalTime_initialized = NO;

@implementation OrgJodaTimeLocalTime

OrgJodaTimeLocalTime * OrgJodaTimeLocalTime_MIDNIGHT_;
id<JavaUtilSet> OrgJodaTimeLocalTime_TIME_DURATION_TYPES_;

+ (OrgJodaTimeLocalTime *)now {
  return OrgJodaTimeLocalTime_now();
}

+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalTime_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay {
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(millisOfDay);
}

+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

+ (OrgJodaTimeLocalTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(date);
}

- (instancetype)init {
  return [self initOrgJodaTimeLocalTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeLocalTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(jlong)instant {
  return [self initOrgJodaTimeLocalTimeWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeLocalTimeWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initOrgJodaTimeLocalTimeWithLong:(jlong)instant
                       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withLong:instant];
    chronology = [chronology withUTC];
    iLocalMillis_ = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) millisOfDay])) getWithLong:localMillis];
    OrgJodaTimeLocalTime_set_iChronology_(self, chronology);
  }
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalTimeWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [self initOrgJodaTimeLocalTimeWithId:instant withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
    OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    OrgJodaTimeLocalTime_set_iChronology_(self, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
    IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localTimeParser()];
    iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithLong:0LL withInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
  }
  return self;
}

- (instancetype)initOrgJodaTimeLocalTimeWithId:(id)instant
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
    chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    OrgJodaTimeLocalTime_set_iChronology_(self, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
    IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localTimeParser()];
    iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithLong:0LL withInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
  }
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalTimeWithId:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  return [self initOrgJodaTimeLocalTimeWithInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0 withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  return [self initOrgJodaTimeLocalTimeWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0 withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  return [self initOrgJodaTimeLocalTimeWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initOrgJodaTimeLocalTimeWithInt:(jint)hourOfDay
                                        withInt:(jint)minuteOfHour
                                        withInt:(jint)secondOfMinute
                                        withInt:(jint)millisOfSecond
                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
    jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithLong:0LL withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    OrgJodaTimeLocalTime_set_iChronology_(self, chronology);
    iLocalMillis_ = instant;
  }
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalTimeWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:chronology];
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return [[[OrgJodaTimeLocalTime alloc] initWithLong:iLocalMillis_ withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease];
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_get_UTC_())) isEqual:[((OrgJodaTimeChronology *) nil_chk(iChronology_)) getZone]] == NO) {
    return [[[OrgJodaTimeLocalTime alloc] initWithLong:iLocalMillis_ withOrgJodaTimeChronology:[iChronology_ withUTC]] autorelease];
  }
  return self;
}

- (jint)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalTime_HOUR_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay];
    case OrgJodaTimeLocalTime_MINUTE_OF_HOUR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) minuteOfHour];
    case OrgJodaTimeLocalTime_SECOND_OF_MINUTE:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) secondOfMinute];
    case OrgJodaTimeLocalTime_MILLIS_OF_SECOND:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfSecond];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalTime_HOUR_OF_DAY:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_MINUTE_OF_HOUR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_SECOND_OF_MINUTE:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_MILLIS_OF_SECOND:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return NO;
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:[((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getDurationType]] == NO) {
    return NO;
  }
  OrgJodaTimeDurationFieldType *range = [type getRangeDurationType];
  return ([self isSupportedWithOrgJodaTimeDurationFieldType:range] || range == OrgJodaTimeDurationFieldType_days());
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return NO;
  }
  OrgJodaTimeDurationField *field = [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalTime_TIME_DURATION_TYPES_)) containsWithId:type] || [((OrgJodaTimeDurationField *) nil_chk(field)) getUnitMillis] < [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDurationField *) nil_chk(field)) isSupported];
  }
  return NO;
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return YES;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeLocalTime *other = (OrgJodaTimeLocalTime *) check_class_cast(partial, [OrgJodaTimeLocalTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalTime *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  check_protocol_cast(partial, @protocol(OrgJodaTimeReadablePartial));
  if (self == partial) {
    return 0;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeLocalTime *other = (OrgJodaTimeLocalTime *) check_class_cast(partial, [OrgJodaTimeLocalTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalTime *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeLocalTime *)withLocalMillisWithLong:(jlong)newMillis {
  return (newMillis == [self getLocalMillis] ? self : [[[OrgJodaTimeLocalTime alloc] initWithLong:newMillis withOrgJodaTimeChronology:[self getChronology]] autorelease]);
}

- (OrgJodaTimeLocalTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getLocalMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalTime *)plusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalTime *)minusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  return [[[OrgJodaTimeLocalTime_Property alloc] initWithOrgJodaTimeLocalTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]]] autorelease];
}

- (jint)getHourOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
}

- (jint)getMinuteOfHour {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
}

- (jint)getSecondOfMinute {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfSecond {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalTime *)withHourOfDayWithInt:(jint)hour {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getLocalMillis] withInt:hour]];
}

- (OrgJodaTimeLocalTime *)withMinuteOfHourWithInt:(jint)minute {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getLocalMillis] withInt:minute]];
}

- (OrgJodaTimeLocalTime *)withSecondOfMinuteWithInt:(jint)second {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getLocalMillis] withInt:second]];
}

- (OrgJodaTimeLocalTime *)withMillisOfSecondWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalTime *)withMillisOfDayWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalTime_Property *)hourOfDay {
  return [[[OrgJodaTimeLocalTime_Property alloc] initWithOrgJodaTimeLocalTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]] autorelease];
}

- (OrgJodaTimeLocalTime_Property *)minuteOfHour {
  return [[[OrgJodaTimeLocalTime_Property alloc] initWithOrgJodaTimeLocalTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]] autorelease];
}

- (OrgJodaTimeLocalTime_Property *)secondOfMinute {
  return [[[OrgJodaTimeLocalTime_Property alloc] initWithOrgJodaTimeLocalTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]] autorelease];
}

- (OrgJodaTimeLocalTime_Property *)millisOfSecond {
  return [[[OrgJodaTimeLocalTime_Property alloc] initWithOrgJodaTimeLocalTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]] autorelease];
}

- (OrgJodaTimeLocalTime_Property *)millisOfDay {
  return [[[OrgJodaTimeLocalTime_Property alloc] initWithOrgJodaTimeLocalTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeToday {
  return [self toDateTimeTodayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return [[[OrgJodaTimeDateTime alloc] initWithLong:resolved withOrgJodaTimeChronology:chrono] autorelease];
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_time())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeLocalTime *)other {
  [super copyAllFieldsTo:other];
  other->iLocalMillis_ = iLocalMillis_;
  OrgJodaTimeLocalTime_set_iChronology_(other, iChronology_);
}

+ (void)initialize {
  if (self == [OrgJodaTimeLocalTime class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeLocalTime_MIDNIGHT_, nil, [[OrgJodaTimeLocalTime alloc] initWithInt:0 withInt:0 withInt:0 withInt:0]);
    JreStrongAssignAndConsume(&OrgJodaTimeLocalTime_TIME_DURATION_TYPES_, nil, [[JavaUtilHashSet alloc] init]);
    {
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_millis()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_seconds()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_minutes()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_hours()];
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeLocalTime)
  }
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "fromMillisOfDayWithLong:", "fromMillisOfDay", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "fromMillisOfDayWithLong:withOrgJodaTimeChronology:", "fromMillisOfDay", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.LocalTime;", 0x9, NULL },
    { "init", "LocalTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "LocalTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL },
    { "initWithLong:", "LocalTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "LocalTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL },
    { "initWithId:", "LocalTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "LocalTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "LocalTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:", "LocalTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:", "LocalTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getWithOrgJodaTimeDateTimeFieldType:", "get", "I", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeFieldType:", "isSupported", "Z", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDurationFieldType:", "isSupported", "Z", 0x1, NULL },
    { "getLocalMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "compareToWithOrgJodaTimeReadablePartial:", "compareTo", "I", 0x1, NULL },
    { "withLocalMillisWithLong:", "withLocalMillis", "Lorg.joda.time.LocalTime;", 0x0, NULL },
    { "withFieldsWithOrgJodaTimeReadablePartial:", "withFields", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "plusHoursWithInt:", "plusHours", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "plusMinutesWithInt:", "plusMinutes", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "plusSecondsWithInt:", "plusSeconds", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "plusMillisWithInt:", "plusMillis", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "minusHoursWithInt:", "minusHours", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "minusMinutesWithInt:", "minusMinutes", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "minusSecondsWithInt:", "minusSeconds", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "minusMillisWithInt:", "minusMillis", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.LocalTime$Property;", 0x1, NULL },
    { "getHourOfDay", NULL, "I", 0x1, NULL },
    { "getMinuteOfHour", NULL, "I", 0x1, NULL },
    { "getSecondOfMinute", NULL, "I", 0x1, NULL },
    { "getMillisOfSecond", NULL, "I", 0x1, NULL },
    { "getMillisOfDay", NULL, "I", 0x1, NULL },
    { "withHourOfDayWithInt:", "withHourOfDay", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withMinuteOfHourWithInt:", "withMinuteOfHour", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withSecondOfMinuteWithInt:", "withSecondOfMinute", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withMillisOfSecondWithInt:", "withMillisOfSecond", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withMillisOfDayWithInt:", "withMillisOfDay", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL },
    { "toDateTimeToday", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeTodayWithOrgJodaTimeDateTimeZone:", "toDateTimeToday", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeLocalTime_serialVersionUID },
    { "MIDNIGHT_", NULL, 0x19, "Lorg.joda.time.LocalTime;", &OrgJodaTimeLocalTime_MIDNIGHT_,  },
    { "HOUR_OF_DAY_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalTime_HOUR_OF_DAY },
    { "MINUTE_OF_HOUR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalTime_MINUTE_OF_HOUR },
    { "SECOND_OF_MINUTE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalTime_SECOND_OF_MINUTE },
    { "MILLIS_OF_SECOND_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalTime_MILLIS_OF_SECOND },
    { "TIME_DURATION_TYPES_", NULL, 0x1a, "Ljava.util.Set;", &OrgJodaTimeLocalTime_TIME_DURATION_TYPES_,  },
    { "iLocalMillis_", NULL, 0x12, "J", NULL,  },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalTime = { 1, "LocalTime", "org.joda.time", NULL, 0x11, 69, methods, 9, fields, 0, NULL};
  return &_OrgJodaTimeLocalTime;
}

@end

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_now() {
  OrgJodaTimeLocalTime_init();
  return [[[OrgJodaTimeLocalTime alloc] init] autorelease];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_init();
  if (zone == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Zone must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalTime alloc] initWithOrgJodaTimeDateTimeZone:zone] autorelease];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime_init();
  if (chronology == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Chronology must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalTime alloc] initWithOrgJodaTimeChronology:chronology] autorelease];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalTime_init();
  return OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localTimeParser());
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalTime_init();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalTimeWithNSString:str];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(jlong millisOfDay) {
  OrgJodaTimeLocalTime_init();
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, nil);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(jlong millisOfDay, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeLocalTime_init();
  chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) withUTC];
  return [[[OrgJodaTimeLocalTime alloc] initWithLong:millisOfDay withOrgJodaTimeChronology:chrono] autorelease];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalTime_init();
  if (calendar == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The calendar must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalTime alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY] withInt:[calendar getWithInt:JavaUtilCalendar_MINUTE] withInt:[calendar getWithInt:JavaUtilCalendar_SECOND] withInt:[calendar getWithInt:JavaUtilCalendar_MILLISECOND]] autorelease];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalTime_init();
  if (date == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The date must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalTime alloc] initWithInt:[((JavaUtilDate *) nil_chk(date)) getHours] withInt:[date getMinutes] withInt:[date getSeconds] withInt:(((jint) ([date getTime] % 1000)) + 1000) % 1000] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalTime)

@implementation OrgJodaTimeLocalTime_Property

- (instancetype)initWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  if (self = [super init]) {
    OrgJodaTimeLocalTime_Property_set_iInstant_(self, instant);
    OrgJodaTimeLocalTime_Property_set_iField_(self, field);
  }
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  OrgJodaTimeLocalTime_Property_set_iInstant_(self, (OrgJodaTimeLocalTime *) check_class_cast([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalTime class]));
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) check_class_cast([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  OrgJodaTimeLocalTime_Property_set_iField_(self, [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology]]);
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalTime *)getLocalTime {
  return iInstant_;
}

- (OrgJodaTimeLocalTime *)addCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)addCopyWithLong:(jlong)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withLong:value]];
}

- (OrgJodaTimeLocalTime *)addNoWrapToCopyWithInt:(jint)value {
  jlong millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value];
  jlong rounded = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([iInstant_ getChronology])) millisOfDay])) getWithLong:millis];
  if (rounded != millis) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The addition exceeded the boundaries of LocalTime"] autorelease];
  }
  return [iInstant_ withLocalMillisWithLong:millis];
}

- (OrgJodaTimeLocalTime *)addWrapFieldToCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)setCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalTime *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalTime *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalTime *)roundFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfEvenCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (void)dealloc {
  RELEASE_(iInstant_);
  RELEASE_(iField_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeLocalTime_Property *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeLocalTime_Property_set_iInstant_(other, iInstant_);
  OrgJodaTimeLocalTime_Property_set_iField_(other, iField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeLocalTime:withOrgJodaTimeDateTimeField:", "Property", NULL, 0x0, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x4, NULL },
    { "getLocalTime", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "addCopyWithInt:", "addCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "addCopyWithLong:", "addCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "addNoWrapToCopyWithInt:", "addNoWrapToCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "roundFloorCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "roundCeilingCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "roundHalfFloorCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "roundHalfCeilingCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "roundHalfEvenCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeLocalTime_Property_serialVersionUID },
    { "iInstant_", NULL, 0x82, "Lorg.joda.time.LocalTime;", NULL,  },
    { "iField_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalTime_Property = { 1, "Property", "org.joda.time", "LocalTime", 0x19, 21, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeLocalTime_Property;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalTime_Property)
