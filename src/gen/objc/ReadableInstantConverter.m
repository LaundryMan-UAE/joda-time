//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/convert/ReadableInstantConverter.java
//

#include "Chronology.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "ReadableInstant.h"
#include "ReadableInstantConverter.h"

BOOL OrgJodaTimeConvertReadableInstantConverter_initialized = NO;

@implementation OrgJodaTimeConvertReadableInstantConverter

OrgJodaTimeConvertReadableInstantConverter * OrgJodaTimeConvertReadableInstantConverter_INSTANCE_;

- (instancetype)init {
  return [super init];
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                   withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(((id<OrgJodaTimeReadableInstant>) check_protocol_cast(object, @protocol(OrgJodaTimeReadableInstant))))) getChronology];
  if (chrono == nil) {
    return [OrgJodaTimeChronoISOChronology getInstanceWithOrgJodaTimeDateTimeZone:zone];
  }
  OrgJodaTimeDateTimeZone *chronoZone = [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone];
  if (chronoZone != zone) {
    chrono = [chrono withZoneWithOrgJodaTimeDateTimeZone:zone];
    if (chrono == nil) {
      return [OrgJodaTimeChronoISOChronology getInstanceWithOrgJodaTimeDateTimeZone:zone];
    }
  }
  return chrono;
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (chrono == nil) {
    chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(((id<OrgJodaTimeReadableInstant>) check_protocol_cast(object, @protocol(OrgJodaTimeReadableInstant))))) getChronology];
    chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
  }
  return chrono;
}

- (long long int)getInstantMillisWithId:(id)object
              withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [((id<OrgJodaTimeReadableInstant>) nil_chk(((id<OrgJodaTimeReadableInstant>) check_protocol_cast(object, @protocol(OrgJodaTimeReadableInstant))))) getMillis];
}

- (IOSClass *)getSupportedType {
  return [IOSClass classWithProtocol:@protocol(OrgJodaTimeReadableInstant)];
}

+ (void)initialize {
  if (self == [OrgJodaTimeConvertReadableInstantConverter class]) {
    OrgJodaTimeConvertReadableInstantConverter_INSTANCE_ = [[OrgJodaTimeConvertReadableInstantConverter alloc] init];
    OrgJodaTimeConvertReadableInstantConverter_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "ReadableInstantConverter", NULL, 0x4, NULL },
    { "getChronologyWithId:withOrgJodaTimeDateTimeZone:", "getChronology", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getChronologyWithId:withOrgJodaTimeChronology:", "getChronology", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getInstantMillisWithId:withOrgJodaTimeChronology:", "getInstantMillis", "J", 0x1, NULL },
    { "getSupportedType", NULL, "Ljava.lang.Class;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x18, "Lorg.joda.time.convert.ReadableInstantConverter;", &OrgJodaTimeConvertReadableInstantConverter_INSTANCE_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeConvertReadableInstantConverter = { "ReadableInstantConverter", "org.joda.time.convert", NULL, 0x0, 5, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeConvertReadableInstantConverter;
}

@end
