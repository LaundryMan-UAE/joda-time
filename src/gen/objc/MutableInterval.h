//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/MutableInterval.java
//

#ifndef _OrgJodaTimeMutableInterval_H_
#define _OrgJodaTimeMutableInterval_H_

@class OrgJodaTimeChronology;
@protocol OrgJodaTimeReadableDuration;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadableInterval;
@protocol OrgJodaTimeReadablePeriod;

#include "BaseInterval.h"
#include "J2ObjC_header.h"
#include "ReadWritableInterval.h"
#include "java/io/Serializable.h"

#define OrgJodaTimeMutableInterval_serialVersionUID -5982824024992428470LL

/**
 @brief MutableInterval is the standard implementation of a mutable time interval.
 <p> A time interval represents a period of time between two instants. Intervals are inclusive of the start instant and exclusive of the end. The end instant is always greater than or equal to the start instant. <p> Intervals have a fixed millisecond duration. This is the difference between the start and end instants. The duration is represented separately by ReadableDuration . As a result, intervals are not comparable. To compare the length of two intervals, you should compare their durations. <p> An interval can also be converted to a ReadablePeriod . This represents the difference between the start and end points in terms of fields such as years and days. <p> If performing significant calculations on an interval, it may be faster to convert an Interval object to a MutableInterval one. <p> MutableInterval is mutable and not thread-safe, unless concurrent threads are not invoking mutator methods.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeMutableInterval : OrgJodaTimeBaseBaseInterval < OrgJodaTimeReadWritableInterval, NSCopying, JavaIoSerializable > {
}

/**
 @brief Parses a <code>MutableInterval</code> from the specified string.
 <p> The String formats are described by ISODateTimeFormat#dateTimeParser() and ISOPeriodFormat#standard() , and may be 'datetime/datetime', 'datetime/period' or 'period/datetime'.
 @param str the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeMutableInterval *)parseWithNSString:(NSString *)str;

/**
 @brief Constructs a zero length time interval from 1970-01-01 to 1970-01-01.
 */
- (instancetype)init;

/**
 @brief Constructs an interval from a start and end instant with the ISO default chronology.
 @param startInstant start of this interval, as milliseconds from 1970-01-01T00:00:00Z.
 @param endInstant end of this interval, as milliseconds from 1970-01-01T00:00:00Z.
 @throws IllegalArgumentException if the end is before the start
 */
- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant;

/**
 @brief Constructs an interval from a start and end instant with a chronology.
 @param chronology the chronology to use, null is ISO default
 @param startInstant start of this interval, as milliseconds from 1970-01-01T00:00:00Z.
 @param endInstant end of this interval, as milliseconds from 1970-01-01T00:00:00Z.
 @throws IllegalArgumentException if the end is before the start
 */
- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs an interval from a start and end instant.
 <p> The chronology used is that of the start instant.
 @param start start of this interval, null means now
 @param end end of this interval, null means now
 @throws IllegalArgumentException if the end is before the start
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/**
 @brief Constructs an interval from a start instant and a duration.
 @param start start of this interval, null means now
 @param duration the duration of this interval, null means zero length
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the end instant exceeds the capacity of a long
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/**
 @brief Constructs an interval from a millisecond duration and an end instant.
 @param duration the duration of this interval, null means zero length
 @param end end of this interval, null means now
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the start instant exceeds the capacity of a long
 */
- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/**
 @brief Constructs an interval from a start instant and a time period.
 <p> When forming the interval, the chronology from the instant is used if present, otherwise the chronology of the period is used.
 @param start start of this interval, null means now
 @param period the period of this interval, null means zero length
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the end instant exceeds the capacity of a long
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                     withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Constructs an interval from a time period and an end instant.
 <p> When forming the interval, the chronology from the instant is used if present, otherwise the chronology of the period is used.
 @param period the period of this interval, null means zero length
 @param end end of this interval, null means now
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the start instant exceeds the capacity of a long
 */
- (instancetype)initWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                   withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/**
 @brief Constructs a time interval by converting or copying from another object.
 <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadableInterval and String. The String formats are described by ISODateTimeFormat#dateTimeParser() and ISOPeriodFormat#standard() , and may be 'datetime/datetime', 'datetime/period' or 'period/datetime'.
 @param interval the time interval to copy
 @throws IllegalArgumentException if the interval is invalid
 */
- (instancetype)initWithId:(id)interval;

/**
 @brief Constructs a time interval by converting or copying from another object, overriding the chronology.
 <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadableInterval and String. The String formats are described by ISODateTimeFormat#dateTimeParser() and ISOPeriodFormat#standard() , and may be 'datetime/datetime', 'datetime/period' or 'period/datetime'.
 @param interval the time interval to copy
 @param chronology the chronology to use, null means ISO default
 @throws IllegalArgumentException if the interval is invalid
 */
- (instancetype)initWithId:(id)interval
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Sets this interval from two millisecond instants retaining the chronology.
 @param startInstant the start of the time interval
 @param endInstant the start of the time interval
 @throws IllegalArgumentException if the end is before the start
 */
- (void)setIntervalWithLong:(jlong)startInstant
                   withLong:(jlong)endInstant;

/**
 @brief Sets this interval to be the same as another.
 @param interval the interval to copy
 @throws IllegalArgumentException if the interval is null
 */
- (void)setIntervalWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval;

/**
 @brief Sets this interval from two instants, replacing the chronology with that from the start instant.
 @param start the start of the time interval
 @param end the start of the time interval
 @throws IllegalArgumentException if the end is before the start
 */
- (void)setIntervalWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                   withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/**
 @brief Sets the chronology of this time interval.
 @param chrono the chronology to use, null means ISO default
 */
- (void)setChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/**
 @brief Sets the start of this time interval.
 @param startInstant the start of the time interval, millisecond instant from 1970-01-01T00:00:00Z
 @throws IllegalArgumentException if the end is before the start
 */
- (void)setStartMillisWithLong:(jlong)startInstant;

/**
 @brief Sets the start of this time interval as an Instant.
 @param start the start of the time interval, null means now
 @throws IllegalArgumentException if the end is before the start
 */
- (void)setStartWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start;

/**
 @brief Sets the end of this time interval.
 @param endInstant the end of the time interval, millisecond instant from 1970-01-01T00:00:00Z
 @throws IllegalArgumentException if the end is before the start
 */
- (void)setEndMillisWithLong:(jlong)endInstant;

/**
 @brief Sets the end of this time interval as an Instant.
 @param end the end of the time interval, null means now
 @throws IllegalArgumentException if the end is before the start
 */
- (void)setEndWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/**
 @brief Sets the duration of this time interval, preserving the start instant.
 @param duration new duration for interval
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the end instant exceeds the capacity of a long
 */
- (void)setDurationAfterStartWithLong:(jlong)duration;

/**
 @brief Sets the duration of this time interval, preserving the end instant.
 @param duration new duration for interval
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the start instant exceeds the capacity of a long
 */
- (void)setDurationBeforeEndWithLong:(jlong)duration;

/**
 @brief Sets the duration of this time interval, preserving the start instant.
 @param duration new duration for interval, null means zero length
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the end instant exceeds the capacity of a long
 */
- (void)setDurationAfterStartWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/**
 @brief Sets the duration of this time interval, preserving the end instant.
 @param duration new duration for interval, null means zero length
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the start instant exceeds the capacity of a long
 */
- (void)setDurationBeforeEndWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/**
 @brief Sets the period of this time interval, preserving the start instant and using the ISOChronology in the default zone for calculations.
 @param period new period for interval, null means zero length
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the end instant exceeds the capacity of a long
 */
- (void)setPeriodAfterStartWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Sets the period of this time interval, preserving the end instant and using the ISOChronology in the default zone for calculations.
 @param period new period for interval, null means zero length
 @throws IllegalArgumentException if the end is before the start
 @throws ArithmeticException if the start instant exceeds the capacity of a long
 */
- (void)setPeriodBeforeEndWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Clone this object without having to cast the returned object.
 @return a clone of the this object.
 */
- (OrgJodaTimeMutableInterval *)copy__ OBJC_METHOD_FAMILY_NONE;

/**
 @brief Clone this object.
 @return a clone of this object.
 */
- (id)clone;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeMutableInterval)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT OrgJodaTimeMutableInterval *OrgJodaTimeMutableInterval_parseWithNSString_(NSString *str);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeMutableInterval, serialVersionUID, jlong)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeMutableInterval)

#endif // _OrgJodaTimeMutableInterval_H_
