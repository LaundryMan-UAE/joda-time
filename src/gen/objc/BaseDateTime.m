//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/base/BaseDateTime.java
//

#include "BaseDateTime.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTimeField.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "ISOChronology.h"
#include "InstantConverter.h"
#include "J2ObjC_source.h"

@interface OrgJodaTimeBaseBaseDateTime () {
 @public
  /**
   @brief The millis from 1970-01-01T00:00:00Z
   */
  jlong iMillis_;
  /**
   @brief The chronology to use
   */
  OrgJodaTimeChronology *iChronology_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeBaseBaseDateTime, iChronology_, OrgJodaTimeChronology *)

@implementation OrgJodaTimeBaseBaseDateTime

- (instancetype)init {
  return [self initOrgJodaTimeBaseBaseDateTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeBaseBaseDateTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeBaseBaseDateTimeWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(jlong)instant {
  return [self initOrgJodaTimeBaseBaseDateTimeWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeBaseBaseDateTimeWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initOrgJodaTimeBaseBaseDateTimeWithLong:(jlong)instant
                              withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    OrgJodaTimeBaseBaseDateTime_set_iChronology_(self, [self checkChronologyWithOrgJodaTimeChronology:chronology]);
    iMillis_ = [self checkInstantWithLong:instant withOrgJodaTimeChronology:iChronology_];
    if ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(iChronology_)) year])) isSupported]) {
      [((OrgJodaTimeDateTimeField *) nil_chk([iChronology_ year])) setWithLong:iMillis_ withInt:[((OrgJodaTimeDateTimeField *) nil_chk([iChronology_ year])) getWithLong:iMillis_]];
    }
  }
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeBaseBaseDateTimeWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super init]) {
    id<OrgJodaTimeConvertInstantConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getInstantConverterWithId:instant];
    OrgJodaTimeChronology *chrono = [self checkChronologyWithOrgJodaTimeChronology:[((id<OrgJodaTimeConvertInstantConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone]];
    OrgJodaTimeBaseBaseDateTime_set_iChronology_(self, chrono);
    iMillis_ = [self checkInstantWithLong:[converter getInstantMillisWithId:instant withOrgJodaTimeChronology:chrono] withOrgJodaTimeChronology:chrono];
  }
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    id<OrgJodaTimeConvertInstantConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getInstantConverterWithId:instant];
    OrgJodaTimeBaseBaseDateTime_set_iChronology_(self, [self checkChronologyWithOrgJodaTimeChronology:[((id<OrgJodaTimeConvertInstantConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology]]);
    iMillis_ = [self checkInstantWithLong:[converter getInstantMillisWithId:instant withOrgJodaTimeChronology:chronology] withOrgJodaTimeChronology:iChronology_];
  }
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  return [self initOrgJodaTimeBaseBaseDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeBaseBaseDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initOrgJodaTimeBaseBaseDateTimeWithInt:(jint)year
                                               withInt:(jint)monthOfYear
                                               withInt:(jint)dayOfMonth
                                               withInt:(jint)hourOfDay
                                               withInt:(jint)minuteOfHour
                                               withInt:(jint)secondOfMinute
                                               withInt:(jint)millisOfSecond
                             withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    OrgJodaTimeBaseBaseDateTime_set_iChronology_(self, [self checkChronologyWithOrgJodaTimeChronology:chronology]);
    jlong instant = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    iMillis_ = [self checkInstantWithLong:instant withOrgJodaTimeChronology:iChronology_];
  }
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeBaseBaseDateTimeWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeChronology *)checkChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
}

- (jlong)checkInstantWithLong:(jlong)instant
    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return instant;
}

- (jlong)getMillis {
  return iMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (void)setMillisWithLong:(jlong)instant {
  iMillis_ = [self checkInstantWithLong:instant withOrgJodaTimeChronology:iChronology_];
}

- (void)setChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeBaseBaseDateTime_set_iChronology_(self, [self checkChronologyWithOrgJodaTimeChronology:chronology]);
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBaseDateTime *)other {
  [super copyAllFieldsTo:other];
  other->iMillis_ = iMillis_;
  OrgJodaTimeBaseBaseDateTime_set_iChronology_(other, iChronology_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithLong:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:", "BaseDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "BaseDateTime", NULL, 0x1, NULL },
    { "checkChronologyWithOrgJodaTimeChronology:", "checkChronology", "Lorg.joda.time.Chronology;", 0x4, NULL },
    { "checkInstantWithLong:withOrgJodaTimeChronology:", "checkInstant", "J", 0x4, NULL },
    { "getMillis", NULL, "J", 0x1, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "setMillisWithLong:", "setMillis", "V", 0x4, NULL },
    { "setChronologyWithOrgJodaTimeChronology:", "setChronology", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBaseDateTime_serialVersionUID },
    { "iMillis_", NULL, 0x42, "J", NULL,  },
    { "iChronology_", NULL, 0x42, "Lorg.joda.time.Chronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseBaseDateTime = { 1, "BaseDateTime", "org.joda.time.base", NULL, 0x401, 17, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeBaseBaseDateTime;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseBaseDateTime)
