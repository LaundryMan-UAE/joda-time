//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/convert/ReadableIntervalConverter.java
//

#include "Chronology.h"
#include "DateTimeUtils.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "ReadWritableInterval.h"
#include "ReadWritablePeriod.h"
#include "ReadableInterval.h"
#include "ReadableIntervalConverter.h"

BOOL OrgJodaTimeConvertReadableIntervalConverter_initialized = NO;

@implementation OrgJodaTimeConvertReadableIntervalConverter

OrgJodaTimeConvertReadableIntervalConverter * OrgJodaTimeConvertReadableIntervalConverter_INSTANCE_;

- (instancetype)init {
  return [super init];
}

- (long long int)getDurationMillisWithId:(id)object {
  return [((id<OrgJodaTimeReadableInterval>) nil_chk((((id<OrgJodaTimeReadableInterval>) check_protocol_cast(object, @protocol(OrgJodaTimeReadableInterval)))))) toDurationMillis];
}

- (void)setIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)writablePeriod
                                          withId:(id)object
                       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  id<OrgJodaTimeReadableInterval> interval = (id<OrgJodaTimeReadableInterval>) check_protocol_cast(object, @protocol(OrgJodaTimeReadableInterval));
  chrono = (chrono != nil ? chrono : [OrgJodaTimeDateTimeUtils getIntervalChronologyWithOrgJodaTimeReadableInterval:interval]);
  long long int start = [((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getStartMillis];
  long long int end = [interval getEndMillis];
  IOSIntArray *values = [chrono getWithOrgJodaTimeReadablePeriod:writablePeriod withLong:start withLong:end];
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(values)) count]; i++) {
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(writablePeriod)) setValueWithInt:i withInt:IOSIntArray_Get(values, i)];
  }
}

- (BOOL)isReadableIntervalWithId:(id)object
       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return YES;
}

- (void)setIntoWithOrgJodaTimeReadWritableInterval:(id<OrgJodaTimeReadWritableInterval>)writableInterval
                                            withId:(id)object
                         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  id<OrgJodaTimeReadableInterval> input = (id<OrgJodaTimeReadableInterval>) check_protocol_cast(object, @protocol(OrgJodaTimeReadableInterval));
  [((id<OrgJodaTimeReadWritableInterval>) nil_chk(writableInterval)) setIntervalWithOrgJodaTimeReadableInterval:input];
  if (chrono != nil) {
    [writableInterval setChronologyWithOrgJodaTimeChronology:chrono];
  }
  else {
    [writableInterval setChronologyWithOrgJodaTimeChronology:[((id<OrgJodaTimeReadableInterval>) nil_chk(input)) getChronology]];
  }
}

- (IOSClass *)getSupportedType {
  return [IOSClass classWithProtocol:@protocol(OrgJodaTimeReadableInterval)];
}

+ (void)initialize {
  if (self == [OrgJodaTimeConvertReadableIntervalConverter class]) {
    OrgJodaTimeConvertReadableIntervalConverter_INSTANCE_ = [[OrgJodaTimeConvertReadableIntervalConverter alloc] init];
    OrgJodaTimeConvertReadableIntervalConverter_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "ReadableIntervalConverter", NULL, 0x4, NULL },
    { "getDurationMillisWithId:", "getDurationMillis", "J", 0x1, NULL },
    { "setIntoWithOrgJodaTimeReadWritablePeriod:withId:withOrgJodaTimeChronology:", "setInto", "V", 0x1, NULL },
    { "isReadableIntervalWithId:withOrgJodaTimeChronology:", "isReadableInterval", "Z", 0x1, NULL },
    { "setIntoWithOrgJodaTimeReadWritableInterval:withId:withOrgJodaTimeChronology:", "setInto", "V", 0x1, NULL },
    { "getSupportedType", NULL, "Ljava.lang.Class;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x18, "Lorg.joda.time.convert.ReadableIntervalConverter;", &OrgJodaTimeConvertReadableIntervalConverter_INSTANCE_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeConvertReadableIntervalConverter = { "ReadableIntervalConverter", "org.joda.time.convert", NULL, 0x0, 6, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeConvertReadableIntervalConverter;
}

@end
