//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/GJChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "GJCacheKey.h"
#include "GJChronology.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISODateTimeFormat.h"
#include "IllegalFieldValueException.h"
#include "Instant.h"
#include "JulianChronology.h"
#include "LocalDate.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "ZonedChronology.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

BOOL OrgJodaTimeChronoGJChronology_initialized = NO;

@implementation OrgJodaTimeChronoGJChronology

OrgJodaTimeInstant * OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoGJChronology_cCache_;

+ (long long int)convertByYearWithLong:(long long int)instant
             withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
             withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to {
  return [((OrgJodaTimeChronology *) nil_chk(to)) getDateTimeMillisWithInt:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(from)) year])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from monthOfYear])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from dayOfMonth])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from millisOfDay])) getWithLong:instant]];
}

+ (long long int)convertByWeekyearWithLong:(long long int)instant
                 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
                 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to {
  long long int newInstant;
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(to)) weekyear])) setWithLong:0 withInt:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(from)) weekyear])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to weekOfWeekyear])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from weekOfWeekyear])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to dayOfWeek])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from dayOfWeek])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to millisOfDay])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from millisOfDay])) getWithLong:instant]];
  return newInstant;
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceUTC {
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withOrgJodaTimeReadableInstant:OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_ withInt:4];
}

+ (OrgJodaTimeChronoGJChronology *)getInstance {
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:[OrgJodaTimeDateTimeZone getDefault] withOrgJodaTimeReadableInstant:OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_ withInt:4];
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeReadableInstant:OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_ withInt:4];
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover {
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeReadableInstant:gregorianCutover withInt:4];
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover
                                                                  withInt:(int)minDaysInFirstWeek {
  zone = [OrgJodaTimeDateTimeUtils getZoneWithOrgJodaTimeDateTimeZone:zone];
  OrgJodaTimeInstant *cutoverInstant;
  if (gregorianCutover == nil) {
    cutoverInstant = OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_;
  }
  else {
    cutoverInstant = [gregorianCutover toInstant];
    OrgJodaTimeLocalDate *cutoverDate = [[OrgJodaTimeLocalDate alloc] initWithLong:[((OrgJodaTimeInstant *) nil_chk(cutoverInstant)) getMillis] withOrgJodaTimeChronology:[OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone]];
    if ([cutoverDate getYear] <= 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Cutover too early. Must be on or after 0001-01-01."];
    }
  }
  OrgJodaTimeChronoGJCacheKey *cacheKey = [[OrgJodaTimeChronoGJCacheKey alloc] initWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeInstant:cutoverInstant withInt:minDaysInFirstWeek];
  OrgJodaTimeChronoGJChronology *chrono = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoGJChronology_cCache_)) getWithId:cacheKey];
  if (chrono == nil) {
    if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
      chrono = [[OrgJodaTimeChronoGJChronology alloc] initWithOrgJodaTimeChronoJulianChronology:[OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withInt:minDaysInFirstWeek] withOrgJodaTimeChronoGregorianChronology:[OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withInt:minDaysInFirstWeek] withOrgJodaTimeInstant:cutoverInstant];
    }
    else {
      chrono = [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withOrgJodaTimeReadableInstant:cutoverInstant withInt:minDaysInFirstWeek];
      chrono = [[OrgJodaTimeChronoGJChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoZonedChronology getInstanceWithOrgJodaTimeChronology:chrono withOrgJodaTimeDateTimeZone:zone] withOrgJodaTimeChronoJulianChronology:((OrgJodaTimeChronoGJChronology *) nil_chk(chrono))->iJulianChronology_ withOrgJodaTimeChronoGregorianChronology:chrono->iGregorianChronology_ withOrgJodaTimeInstant:chrono->iCutoverInstant_];
    }
    OrgJodaTimeChronoGJChronology *oldChrono = [OrgJodaTimeChronoGJChronology_cCache_ putIfAbsentWithId:cacheKey withId:chrono];
    if (oldChrono != nil) {
      chrono = oldChrono;
    }
  }
  return chrono;
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                 withLong:(long long int)gregorianCutover
                                                                  withInt:(int)minDaysInFirstWeek {
  OrgJodaTimeInstant *cutoverInstant;
  if (gregorianCutover == [((OrgJodaTimeInstant *) nil_chk(OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_)) getMillis]) {
    cutoverInstant = nil;
  }
  else {
    cutoverInstant = [[OrgJodaTimeInstant alloc] initWithLong:gregorianCutover];
  }
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeReadableInstant:cutoverInstant withInt:minDaysInFirstWeek];
}

- (instancetype)initWithOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
                 withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                                   withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant {
  return [super initWithOrgJodaTimeChronology:nil withId:[IOSObjectArray arrayWithObjects:(id[]){ julian, gregorian, cutoverInstant } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
        withOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
     withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                       withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant {
  return [super initWithOrgJodaTimeChronology:base withId:[IOSObjectArray arrayWithObjects:(id[]){ julian, gregorian, cutoverInstant } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (id)readResolve {
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:[self getZone] withOrgJodaTimeReadableInstant:iCutoverInstant_ withInt:[self getMinimumDaysInFirstWeek]];
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return OrgJodaTimeDateTimeZone_get_UTC_();
}

- (OrgJodaTimeChronology *)withUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return [OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeReadableInstant:iCutoverInstant_ withInt:[self getMinimumDaysInFirstWeek]];
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  long long int instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  if (instant < iCutoverMillis_) {
    instant = [((OrgJodaTimeChronoJulianChronology *) nil_chk(iJulianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
    if (instant >= iCutoverMillis_) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Specified date does not exist"];
    }
  }
  return instant;
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  long long int instant;
  @try {
    instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  @catch (OrgJodaTimeIllegalFieldValueException *ex) {
    if (monthOfYear != 2 || dayOfMonth != 29) {
      @throw ex;
    }
    instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:28 withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    if (instant >= iCutoverMillis_) {
      @throw ex;
    }
  }
  if (instant < iCutoverMillis_) {
    instant = [((OrgJodaTimeChronoJulianChronology *) nil_chk(iJulianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    if (instant >= iCutoverMillis_) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Specified date does not exist"];
    }
  }
  return instant;
}

- (OrgJodaTimeInstant *)getGregorianCutover {
  return iCutoverInstant_;
}

- (int)getMinimumDaysInFirstWeek {
  return [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getMinimumDaysInFirstWeek];
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoGJChronology class]]) {
    OrgJodaTimeChronoGJChronology *chrono = (OrgJodaTimeChronoGJChronology *) check_class_cast(obj, [OrgJodaTimeChronoGJChronology class]);
    return iCutoverMillis_ == ((OrgJodaTimeChronoGJChronology *) nil_chk(chrono))->iCutoverMillis_ && [self getMinimumDaysInFirstWeek] == [chrono getMinimumDaysInFirstWeek] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((int) [@"GJ" hash]) * 11 + ((int) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) + [self getMinimumDaysInFirstWeek] + ((int) [((OrgJodaTimeInstant *) nil_chk(iCutoverInstant_)) hash]);
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithInt:60];
  (void) [sb appendWithNSString:@"GJChronology"];
  (void) [sb appendWithChar:'['];
  (void) [sb appendWithNSString:[((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getID]];
  if (iCutoverMillis_ != [((OrgJodaTimeInstant *) nil_chk(OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_)) getMillis]) {
    (void) [sb appendWithNSString:@",cutover="];
    OrgJodaTimeFormatDateTimeFormatter *printer;
    if ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self withUTC])) dayOfYear])) remainderWithLong:iCutoverMillis_] == 0) {
      printer = [OrgJodaTimeFormatISODateTimeFormat date];
    }
    else {
      printer = [OrgJodaTimeFormatISODateTimeFormat dateTime];
    }
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(printer)) withChronologyWithOrgJodaTimeChronology:[self withUTC]])) printToWithJavaLangStringBuffer:sb withLong:iCutoverMillis_];
  }
  if ([self getMinimumDaysInFirstWeek] != 4) {
    (void) [sb appendWithNSString:@",mdfw="];
    (void) [sb appendWithInt:[self getMinimumDaysInFirstWeek]];
  }
  (void) [sb appendWithChar:']'];
  return [sb description];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  IOSObjectArray *params = (IOSObjectArray *) check_class_cast([self getParam], [IOSObjectArray class]);
  OrgJodaTimeChronoJulianChronology *julian = (OrgJodaTimeChronoJulianChronology *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [OrgJodaTimeChronoJulianChronology class]);
  OrgJodaTimeChronoGregorianChronology *gregorian = (OrgJodaTimeChronoGregorianChronology *) check_class_cast(IOSObjectArray_Get(params, 1), [OrgJodaTimeChronoGregorianChronology class]);
  OrgJodaTimeInstant *cutoverInstant = (OrgJodaTimeInstant *) check_class_cast(IOSObjectArray_Get(params, 2), [OrgJodaTimeInstant class]);
  iCutoverMillis_ = [((OrgJodaTimeInstant *) nil_chk(cutoverInstant)) getMillis];
  iJulianChronology_ = julian;
  iGregorianChronology_ = gregorian;
  iCutoverInstant_ = cutoverInstant;
  if ([self getBase] != nil) {
    return;
  }
  if ([((OrgJodaTimeChronoJulianChronology *) nil_chk(julian)) getMinimumDaysInFirstWeek] != [((OrgJodaTimeChronoGregorianChronology *) nil_chk(gregorian)) getMinimumDaysInFirstWeek]) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  iGapDuration_ = iCutoverMillis_ - [self julianToGregorianByYearWithLong:iCutoverMillis_];
  [((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields)) copyFieldsFromWithOrgJodaTimeChronology:gregorian];
  if ([((OrgJodaTimeDateTimeField *) nil_chk([gregorian millisOfDay])) getWithLong:iCutoverMillis_] == 0) {
    fields->millisOfSecond_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian millisOfSecond] withOrgJodaTimeDateTimeField:fields->millisOfSecond_ withLong:iCutoverMillis_];
    fields->millisOfDay_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian millisOfDay] withOrgJodaTimeDateTimeField:fields->millisOfDay_ withLong:iCutoverMillis_];
    fields->secondOfMinute_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian secondOfMinute] withOrgJodaTimeDateTimeField:fields->secondOfMinute_ withLong:iCutoverMillis_];
    fields->secondOfDay_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian secondOfDay] withOrgJodaTimeDateTimeField:fields->secondOfDay_ withLong:iCutoverMillis_];
    fields->minuteOfHour_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian minuteOfHour] withOrgJodaTimeDateTimeField:fields->minuteOfHour_ withLong:iCutoverMillis_];
    fields->minuteOfDay_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian minuteOfDay] withOrgJodaTimeDateTimeField:fields->minuteOfDay_ withLong:iCutoverMillis_];
    fields->hourOfDay_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian hourOfDay] withOrgJodaTimeDateTimeField:fields->hourOfDay_ withLong:iCutoverMillis_];
    fields->hourOfHalfday_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian hourOfHalfday] withOrgJodaTimeDateTimeField:fields->hourOfHalfday_ withLong:iCutoverMillis_];
    fields->clockhourOfDay_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian clockhourOfDay] withOrgJodaTimeDateTimeField:fields->clockhourOfDay_ withLong:iCutoverMillis_];
    fields->clockhourOfHalfday_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian clockhourOfHalfday] withOrgJodaTimeDateTimeField:fields->clockhourOfHalfday_ withLong:iCutoverMillis_];
    fields->halfdayOfDay_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian halfdayOfDay] withOrgJodaTimeDateTimeField:fields->halfdayOfDay_ withLong:iCutoverMillis_];
  }
  {
    fields->era_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian era] withOrgJodaTimeDateTimeField:fields->era_ withLong:iCutoverMillis_];
  }
  {
    fields->year_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian year] withOrgJodaTimeDateTimeField:fields->year_ withLong:iCutoverMillis_];
    fields->years_ = [fields->year_ getDurationField];
    fields->yearOfEra_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian yearOfEra] withOrgJodaTimeDateTimeField:fields->yearOfEra_ withOrgJodaTimeDurationField:fields->years_ withLong:iCutoverMillis_];
    fields->centuryOfEra_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian centuryOfEra] withOrgJodaTimeDateTimeField:fields->centuryOfEra_ withLong:iCutoverMillis_];
    fields->centuries_ = [fields->centuryOfEra_ getDurationField];
    fields->yearOfCentury_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian yearOfCentury] withOrgJodaTimeDateTimeField:fields->yearOfCentury_ withOrgJodaTimeDurationField:fields->years_ withOrgJodaTimeDurationField:fields->centuries_ withLong:iCutoverMillis_];
    fields->monthOfYear_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian monthOfYear] withOrgJodaTimeDateTimeField:fields->monthOfYear_ withOrgJodaTimeDurationField:nil withOrgJodaTimeDurationField:fields->years_ withLong:iCutoverMillis_];
    fields->months_ = [fields->monthOfYear_ getDurationField];
    fields->weekyear_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian weekyear] withOrgJodaTimeDateTimeField:fields->weekyear_ withOrgJodaTimeDurationField:nil withLong:iCutoverMillis_ withBoolean:YES];
    fields->weekyears_ = [fields->weekyear_ getDurationField];
    fields->weekyearOfCentury_ = [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian weekyearOfCentury] withOrgJodaTimeDateTimeField:fields->weekyearOfCentury_ withOrgJodaTimeDurationField:fields->weekyears_ withOrgJodaTimeDurationField:fields->centuries_ withLong:iCutoverMillis_];
  }
  {
    long long int cutover = [((OrgJodaTimeDateTimeField *) nil_chk([gregorian year])) roundCeilingWithLong:iCutoverMillis_];
    fields->dayOfYear_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian dayOfYear] withOrgJodaTimeDateTimeField:fields->dayOfYear_ withOrgJodaTimeDurationField:fields->years_ withLong:cutover withBoolean:NO];
  }
  {
    long long int cutover = [((OrgJodaTimeDateTimeField *) nil_chk([gregorian weekyear])) roundCeilingWithLong:iCutoverMillis_];
    fields->weekOfWeekyear_ = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian weekOfWeekyear] withOrgJodaTimeDateTimeField:fields->weekOfWeekyear_ withOrgJodaTimeDurationField:fields->weekyears_ withLong:cutover withBoolean:YES];
  }
  {
    OrgJodaTimeChronoGJChronology_CutoverField *cf = [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian dayOfMonth] withOrgJodaTimeDateTimeField:fields->dayOfMonth_ withLong:iCutoverMillis_];
    cf->iRangeDurationField_ = fields->months_;
    fields->dayOfMonth_ = cf;
  }
}

- (long long int)julianToGregorianByYearWithLong:(long long int)instant {
  return [OrgJodaTimeChronoGJChronology convertByYearWithLong:instant withOrgJodaTimeChronology:iJulianChronology_ withOrgJodaTimeChronology:iGregorianChronology_];
}

- (long long int)gregorianToJulianByYearWithLong:(long long int)instant {
  return [OrgJodaTimeChronoGJChronology convertByYearWithLong:instant withOrgJodaTimeChronology:iGregorianChronology_ withOrgJodaTimeChronology:iJulianChronology_];
}

- (long long int)julianToGregorianByWeekyearWithLong:(long long int)instant {
  return [OrgJodaTimeChronoGJChronology convertByWeekyearWithLong:instant withOrgJodaTimeChronology:iJulianChronology_ withOrgJodaTimeChronology:iGregorianChronology_];
}

- (long long int)gregorianToJulianByWeekyearWithLong:(long long int)instant {
  return [OrgJodaTimeChronoGJChronology convertByWeekyearWithLong:instant withOrgJodaTimeChronology:iGregorianChronology_ withOrgJodaTimeChronology:iJulianChronology_];
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGJChronology class]) {
    OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_ = [[OrgJodaTimeInstant alloc] initWithLong:-12219292800000LL];
    OrgJodaTimeChronoGJChronology_cCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    OrgJodaTimeChronoGJChronology_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology *)other {
  [super copyAllFieldsTo:other];
  other->iCutoverInstant_ = iCutoverInstant_;
  other->iCutoverMillis_ = iCutoverMillis_;
  other->iGapDuration_ = iGapDuration_;
  other->iGregorianChronology_ = iGregorianChronology_;
  other->iJulianChronology_ = iJulianChronology_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "convertByYearWithLong:withOrgJodaTimeChronology:withOrgJodaTimeChronology:", "convertByYear", "J", 0xa, NULL },
    { "convertByWeekyearWithLong:withOrgJodaTimeChronology:withOrgJodaTimeChronology:", "convertByWeekyear", "J", 0xa, NULL },
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeReadableInstant:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeReadableInstant:withInt:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withLong:withInt:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronoJulianChronology:withOrgJodaTimeChronoGregorianChronology:withOrgJodaTimeInstant:", "GJChronology", NULL, 0x2, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeChronoJulianChronology:withOrgJodaTimeChronoGregorianChronology:withOrgJodaTimeInstant:", "GJChronology", NULL, 0x2, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getGregorianCutover", NULL, "Lorg.joda.time.Instant;", 0x1, NULL },
    { "getMinimumDaysInFirstWeek", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "julianToGregorianByYearWithLong:", "julianToGregorianByYear", "J", 0x0, NULL },
    { "gregorianToJulianByYearWithLong:", "gregorianToJulianByYear", "J", 0x0, NULL },
    { "julianToGregorianByWeekyearWithLong:", "julianToGregorianByWeekyear", "J", 0x0, NULL },
    { "gregorianToJulianByWeekyearWithLong:", "gregorianToJulianByWeekyear", "J", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_GJChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_serialVersionUID },
    { "DEFAULT_CUTOVER_", NULL, 0x18, "Lorg.joda.time.Instant;", &OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_,  },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoGJChronology_cCache_,  },
    { "iJulianChronology_", NULL, 0x2, "Lorg.joda.time.chrono.JulianChronology;", NULL,  },
    { "iGregorianChronology_", NULL, 0x2, "Lorg.joda.time.chrono.GregorianChronology;", NULL,  },
    { "iCutoverInstant_", NULL, 0x2, "Lorg.joda.time.Instant;", NULL,  },
    { "iCutoverMillis_", NULL, 0x2, "J", NULL,  },
    { "iGapDuration_", NULL, 0x2, "J", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoGJChronology = { "GJChronology", "org.joda.time.chrono", NULL, 0x11, 26, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology;
}

@end

@implementation OrgJodaTimeChronoGJChronology_CutoverField

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(long long int)cutoverMillis {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withLong:cutoverMillis withBoolean:NO];
}

- (instancetype)initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                                                                       withLong:(long long int)cutoverMillis
                                                                                    withBoolean:(BOOL)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:nil withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(long long int)cutoverMillis
                                          withBoolean:(BOOL)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (instancetype)initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                                                   withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                                                                       withLong:(long long int)cutoverMillis
                                                                                    withBoolean:(BOOL)convertByWeekyear {
  this$0_ = outer$;
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(gregorianField)) getType]]) {
    iJulianField_ = julianField;
    iGregorianField_ = gregorianField;
    iCutover_ = cutoverMillis;
    iConvertByWeekyear_ = convertByWeekyear;
    iDurationField_ = [gregorianField getDurationField];
    if (rangeField == nil) {
      rangeField = [gregorianField getRangeDurationField];
      if (rangeField == nil) {
        rangeField = [((OrgJodaTimeDateTimeField *) nil_chk(julianField)) getRangeDurationField];
      }
    }
    iRangeDurationField_ = rangeField;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                             withLong:(long long int)cutoverMillis
                                          withBoolean:(BOOL)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:rangeField withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (BOOL)isLenient {
  return NO;
}

- (int)getWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getWithLong:instant];
  }
}

- (NSString *)getAsTextWithLong:(long long int)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)getAsTextWithInt:(int)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(long long int)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)getAsShortTextWithInt:(int)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withInt:value];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withLong:value];
}

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(int)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(int)valueToAdd {
  if (valueToAdd == 0) {
    return values;
  }
  if ([OrgJodaTimeDateTimeUtils isContiguousWithOrgJodaTimeReadablePartial:partial]) {
    long long int instant = 0LL;
    for (int i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
      instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:this$0_])) setWithLong:instant withInt:IOSIntArray_Get(nil_chk(values), i)];
    }
    instant = [self addWithLong:instant withInt:valueToAdd];
    return [this$0_ getWithOrgJodaTimeReadablePartial:partial withLong:instant];
  }
  else {
    return [super addWithOrgJodaTimeReadablePartial:partial withInt:fieldIndex withIntArray:values withInt:valueToAdd];
  }
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) setWithLong:instant withInt:value];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
      if ([self getWithLong:instant] != value) {
        @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[iGregorianField_ getType] withNSNumber:[JavaLangInteger valueOfWithInt:value] withNSNumber:nil withNSNumber:nil];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) setWithLong:instant withInt:value];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
      if ([self getWithLong:instant] != value) {
        @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[iJulianField_ getType] withNSNumber:[JavaLangInteger valueOfWithInt:value] withNSNumber:nil withNSNumber:nil];
      }
    }
  }
  return instant;
}

- (long long int)setWithLong:(long long int)instant
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (BOOL)isLeapWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) isLeapWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) isLeapWithLong:instant];
  }
}

- (int)getLeapAmountWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getLeapAmountWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getLeapAmountWithLong:instant];
  }
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getLeapDurationField];
}

- (int)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValue];
}

- (int)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithOrgJodaTimeReadablePartial:partial];
}

- (int)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                        withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values];
}

- (int)getMinimumValueWithLong:(long long int)instant {
  if (instant < iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithLong:instant];
  }
  int min = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMinimumValueWithLong:instant];
  instant = [iGregorianField_ setWithLong:instant withInt:min];
  if (instant < iCutover_) {
    min = [iGregorianField_ getWithLong:iCutover_];
  }
  return min;
}

- (int)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValue];
}

- (int)getMaximumValueWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValueWithLong:instant];
  }
  int max = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumValueWithLong:instant];
  instant = [iJulianField_ setWithLong:instant withInt:max];
  if (instant >= iCutover_) {
    max = [iJulianField_ getWithLong:[iJulianField_ addWithLong:iCutover_ withInt:-1]];
  }
  return max;
}

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  long long int instant = [((OrgJodaTimeChronoGJChronology *) nil_chk([OrgJodaTimeChronoGJChronology getInstanceUTC])) setWithOrgJodaTimeReadablePartial:partial withLong:0LL];
  return [self getMaximumValueWithLong:instant];
}

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                        withIntArray:(IOSIntArray *)values {
  OrgJodaTimeChronology *chrono = [OrgJodaTimeChronoGJChronology getInstanceUTC];
  long long int instant = 0LL;
  for (int i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:chrono];
    if (IOSIntArray_Get(nil_chk(values), i) <= [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMaximumValueWithLong:instant]) {
      instant = [field setWithLong:instant withInt:IOSIntArray_Get(values, i)];
    }
  }
  return [self getMaximumValueWithLong:instant];
}

- (long long int)roundFloorWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) roundFloorWithLong:instant];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) roundFloorWithLong:instant];
  }
  return instant;
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) roundCeilingWithLong:instant];
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) roundCeilingWithLong:instant];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaLangMath maxWithInt:[((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumTextLengthWithJavaUtilLocale:locale] withInt:[((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumTextLengthWithJavaUtilLocale:locale]];
}

- (int)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaLangMath maxWithInt:[((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale] withInt:[((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale]];
}

- (long long int)julianToGregorianWithLong:(long long int)instant {
  if (iConvertByWeekyear_) {
    return [this$0_ julianToGregorianByWeekyearWithLong:instant];
  }
  else {
    return [this$0_ julianToGregorianByYearWithLong:instant];
  }
}

- (long long int)gregorianToJulianWithLong:(long long int)instant {
  if (iConvertByWeekyear_) {
    return [this$0_ gregorianToJulianByWeekyearWithLong:instant];
  }
  else {
    return [this$0_ gregorianToJulianByYearWithLong:instant];
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_CutoverField *)other {
  [super copyAllFieldsTo:other];
  other->iConvertByWeekyear_ = iConvertByWeekyear_;
  other->iCutover_ = iCutover_;
  other->iDurationField_ = iDurationField_;
  other->iGregorianField_ = iGregorianField_;
  other->iJulianField_ = iJulianField_;
  other->iRangeDurationField_ = iRangeDurationField_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:", "CutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:withBoolean:", "CutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:withBoolean:", "CutoverField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithInt:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "add", "[I", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL },
    { "julianToGregorianWithLong:", "julianToGregorian", "J", 0x4, NULL },
    { "gregorianToJulianWithLong:", "gregorianToJulian", "J", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.GJChronology;", NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_CutoverField_serialVersionUID },
    { "iJulianField_", NULL, 0x10, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iGregorianField_", NULL, 0x10, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iCutover_", NULL, 0x10, "J", NULL,  },
    { "iConvertByWeekyear_", NULL, 0x10, "Z", NULL,  },
    { "iDurationField_", NULL, 0x4, "Lorg.joda.time.DurationField;", NULL,  },
    { "iRangeDurationField_", NULL, 0x4, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_CutoverField = { "CutoverField", "org.joda.time.chrono", "GJChronology", 0x2, 35, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology_CutoverField;
}

@end

@implementation OrgJodaTimeChronoGJChronology_ImpreciseCutoverField

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(long long int)cutoverMillis {
  return [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:nil withLong:cutoverMillis withBoolean:NO];
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(long long int)cutoverMillis {
  return [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:durationField withLong:cutoverMillis withBoolean:NO];
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                                             withLong:(long long int)cutoverMillis {
  if (self = [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:durationField withLong:cutoverMillis withBoolean:NO]) {
    iRangeDurationField_ = rangeDurationField;
  }
  return self;
}

- (instancetype)initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                                                                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                                                                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                                                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                                                                                withLong:(long long int)cutoverMillis
                                                                                             withBoolean:(BOOL)convertByWeekyear {
  this$1_ = outer$;
  if (self = [super initWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withLong:cutoverMillis withBoolean:convertByWeekyear]) {
    if (durationField == nil) {
      durationField = [[OrgJodaTimeChronoGJChronology_LinkedDurationField alloc] initWithOrgJodaTimeDurationField:iDurationField_ withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:self];
    }
    iDurationField_ = durationField;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(long long int)cutoverMillis
                                          withBoolean:(BOOL)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:durationField withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withInt:value];
    if (instant < iCutover_) {
      if (instant + this$1_->iGapDuration_ < iCutover_) {
        if (iConvertByWeekyear_) {
          int wyear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) getWithLong:instant];
          if (wyear <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ weekyear])) addWithLong:instant withInt:-1];
          }
        }
        else {
          int year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) getWithLong:instant];
          if (year <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ year])) addWithLong:instant withInt:-1];
          }
        }
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) addWithLong:instant withInt:value];
    if (instant >= iCutover_) {
      if (instant - this$1_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withLong:value];
    if (instant < iCutover_) {
      if (instant + this$1_->iGapDuration_ < iCutover_) {
        if (iConvertByWeekyear_) {
          int wyear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) getWithLong:instant];
          if (wyear <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ weekyear])) addWithLong:instant withInt:-1];
          }
        }
        else {
          int year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) getWithLong:instant];
          if (year <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ year])) addWithLong:instant withInt:-1];
          }
        }
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) addWithLong:instant withLong:value];
    if (instant >= iCutover_) {
      if (instant - this$1_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  if (minuendInstant >= iCutover_) {
    if (subtrahendInstant >= iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self gregorianToJulianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
  }
  else {
    if (subtrahendInstant < iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self julianToGregorianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
  }
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  if (minuendInstant >= iCutover_) {
    if (subtrahendInstant >= iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self gregorianToJulianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
  }
  else {
    if (subtrahendInstant < iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self julianToGregorianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
  }
}

- (int)getMinimumValueWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMinimumValueWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithLong:instant];
  }
}

- (int)getMaximumValueWithLong:(long long int)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValueWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumValueWithLong:instant];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withLong:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:withBoolean:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lorg.joda.time.chrono.GJChronology;", NULL,  },
    { "serialVersionUID_ImpreciseCutoverField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_ImpreciseCutoverField = { "ImpreciseCutoverField", "org.joda.time.chrono", "GJChronology", 0x12, 10, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField;
}

@end

@implementation OrgJodaTimeChronoGJChronology_LinkedDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)dateTimeField {
  if (self = [super initWithOrgJodaTimeDurationField:durationField withOrgJodaTimeDurationFieldType:[((OrgJodaTimeDurationField *) nil_chk(durationField)) getType]]) {
    iField_LinkedDurationField_ = dateTimeField;
  }
  return self;
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) addWithLong:instant withInt:value];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) addWithLong:instant withLong:value];
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_LinkedDurationField *)other {
  [super copyAllFieldsTo:other];
  other->iField_LinkedDurationField_ = iField_LinkedDurationField_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDurationField:withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:", "LinkedDurationField", NULL, 0x0, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_LinkedDurationField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_LinkedDurationField_serialVersionUID },
    { "iField_LinkedDurationField_", "iField", 0x12, "Lorg.joda.time.chrono.GJChronology$ImpreciseCutoverField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_LinkedDurationField = { "LinkedDurationField", "org.joda.time.chrono", "GJChronology", 0xa, 5, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology_LinkedDurationField;
}

@end
