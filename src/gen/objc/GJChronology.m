//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/GJChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "GJCacheKey.h"
#include "GJChronology.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISODateTimeFormat.h"
#include "IllegalFieldValueException.h"
#include "Instant.h"
#include "J2ObjC_source.h"
#include "JulianChronology.h"
#include "LocalDate.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "ZonedChronology.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

__attribute__((unused)) static jlong OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to);
__attribute__((unused)) static jlong OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to);

@interface OrgJodaTimeChronoGJChronology () {
 @public
  OrgJodaTimeChronoJulianChronology *iJulianChronology_;
  OrgJodaTimeChronoGregorianChronology *iGregorianChronology_;
  OrgJodaTimeInstant *iCutoverInstant_;
  jlong iCutoverMillis_;
  jlong iGapDuration_;
}

/**
 @brief Convert a datetime from one chronology to another.
 */
+ (jlong)convertByYearWithLong:(jlong)instant
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to;

/**
 @brief Convert a datetime from one chronology to another.
 */
+ (jlong)convertByWeekyearWithLong:(jlong)instant
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to;
- (instancetype)initWithOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
                 withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                                   withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant;
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
        withOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
     withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                       withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant;

/**
 @brief Serialization singleton
 */
- (id)readResolve;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iJulianChronology_, OrgJodaTimeChronoJulianChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iGregorianChronology_, OrgJodaTimeChronoGregorianChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iCutoverInstant_, OrgJodaTimeInstant *)

@interface OrgJodaTimeChronoGJChronology_CutoverField () {
 @public
  OrgJodaTimeChronoGJChronology *this$0_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, this$0_, OrgJodaTimeChronoGJChronology *)

@interface OrgJodaTimeChronoGJChronology_ImpreciseCutoverField () {
 @public
  OrgJodaTimeChronoGJChronology *this$1_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, this$1_, OrgJodaTimeChronoGJChronology *)

@interface OrgJodaTimeChronoGJChronology_LinkedDurationField () {
 @public
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *iField_LinkedDurationField_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_LinkedDurationField, iField_LinkedDurationField_, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)

BOOL OrgJodaTimeChronoGJChronology_initialized = NO;

@implementation OrgJodaTimeChronoGJChronology

OrgJodaTimeInstant * OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoGJChronology_cCache_;

+ (jlong)convertByYearWithLong:(jlong)instant
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to {
  return OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, from, to);
}

+ (jlong)convertByWeekyearWithLong:(jlong)instant
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to {
  return OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, from, to);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceUTC {
  return OrgJodaTimeChronoGJChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoGJChronology *)getInstance {
  return OrgJodaTimeChronoGJChronology_getInstance();
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_(zone, gregorianCutover);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover
                                                                  withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, gregorianCutover, minDaysInFirstWeek);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                 withLong:(jlong)gregorianCutover
                                                                  withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withLong_withInt_(zone, gregorianCutover, minDaysInFirstWeek);
}

- (instancetype)initWithOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
                 withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                                   withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant {
  return [super initWithOrgJodaTimeChronology:nil withId:[IOSObjectArray arrayWithObjects:(id[]){ julian, gregorian, cutoverInstant } count:3 type:NSObject_class_()]];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
        withOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
     withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                       withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant {
  return [super initWithOrgJodaTimeChronology:base withId:[IOSObjectArray arrayWithObjects:(id[]){ julian, gregorian, cutoverInstant } count:3 type:NSObject_class_()]];
}

- (id)readResolve {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_([self getZone], iCutoverInstant_, [self getMinimumDaysInFirstWeek]);
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return OrgJodaTimeDateTimeZone_get_UTC_();
}

- (OrgJodaTimeChronology *)withUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, iCutoverInstant_, [self getMinimumDaysInFirstWeek]);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  jlong instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  if (instant < iCutoverMillis_) {
    instant = [((OrgJodaTimeChronoJulianChronology *) nil_chk(iJulianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
    if (instant >= iCutoverMillis_) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Specified date does not exist"] autorelease];
    }
  }
  return instant;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  jlong instant;
  @try {
    instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  @catch (OrgJodaTimeIllegalFieldValueException *ex) {
    if (monthOfYear != 2 || dayOfMonth != 29) {
      @throw ex;
    }
    instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:28 withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    if (instant >= iCutoverMillis_) {
      @throw ex;
    }
  }
  if (instant < iCutoverMillis_) {
    instant = [((OrgJodaTimeChronoJulianChronology *) nil_chk(iJulianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    if (instant >= iCutoverMillis_) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Specified date does not exist"] autorelease];
    }
  }
  return instant;
}

- (OrgJodaTimeInstant *)getGregorianCutover {
  return iCutoverInstant_;
}

- (jint)getMinimumDaysInFirstWeek {
  return [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getMinimumDaysInFirstWeek];
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoGJChronology class]]) {
    OrgJodaTimeChronoGJChronology *chrono = (OrgJodaTimeChronoGJChronology *) check_class_cast(obj, [OrgJodaTimeChronoGJChronology class]);
    return iCutoverMillis_ == ((OrgJodaTimeChronoGJChronology *) nil_chk(chrono))->iCutoverMillis_ && [self getMinimumDaysInFirstWeek] == [chrono getMinimumDaysInFirstWeek] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [@"GJ" hash]) * 11 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) + [self getMinimumDaysInFirstWeek] + ((jint) [((OrgJodaTimeInstant *) nil_chk(iCutoverInstant_)) hash]);
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] initWithInt:60] autorelease];
  [sb appendWithNSString:@"GJChronology"];
  [sb appendWithChar:'['];
  [sb appendWithNSString:[((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getID]];
  if (iCutoverMillis_ != [((OrgJodaTimeInstant *) nil_chk(OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_)) getMillis]) {
    [sb appendWithNSString:@",cutover="];
    OrgJodaTimeFormatDateTimeFormatter *printer;
    if ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self withUTC])) dayOfYear])) remainderWithLong:iCutoverMillis_] == 0) {
      printer = OrgJodaTimeFormatISODateTimeFormat_date();
    }
    else {
      printer = OrgJodaTimeFormatISODateTimeFormat_dateTime();
    }
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(printer)) withChronologyWithOrgJodaTimeChronology:[self withUTC]])) printToWithJavaLangStringBuffer:sb withLong:iCutoverMillis_];
  }
  if ([self getMinimumDaysInFirstWeek] != 4) {
    [sb appendWithNSString:@",mdfw="];
    [sb appendWithInt:[self getMinimumDaysInFirstWeek]];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  IOSObjectArray *params = (IOSObjectArray *) check_class_cast([self getParam], [IOSObjectArray class]);
  OrgJodaTimeChronoJulianChronology *julian = (OrgJodaTimeChronoJulianChronology *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [OrgJodaTimeChronoJulianChronology class]);
  OrgJodaTimeChronoGregorianChronology *gregorian = (OrgJodaTimeChronoGregorianChronology *) check_class_cast(IOSObjectArray_Get(params, 1), [OrgJodaTimeChronoGregorianChronology class]);
  OrgJodaTimeInstant *cutoverInstant = (OrgJodaTimeInstant *) check_class_cast(IOSObjectArray_Get(params, 2), [OrgJodaTimeInstant class]);
  iCutoverMillis_ = [((OrgJodaTimeInstant *) nil_chk(cutoverInstant)) getMillis];
  OrgJodaTimeChronoGJChronology_set_iJulianChronology_(self, julian);
  OrgJodaTimeChronoGJChronology_set_iGregorianChronology_(self, gregorian);
  OrgJodaTimeChronoGJChronology_set_iCutoverInstant_(self, cutoverInstant);
  if ([self getBase] != nil) {
    return;
  }
  if ([((OrgJodaTimeChronoJulianChronology *) nil_chk(julian)) getMinimumDaysInFirstWeek] != [((OrgJodaTimeChronoGregorianChronology *) nil_chk(gregorian)) getMinimumDaysInFirstWeek]) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  iGapDuration_ = iCutoverMillis_ - [self julianToGregorianByYearWithLong:iCutoverMillis_];
  [((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields)) copyFieldsFromWithOrgJodaTimeChronology:gregorian];
  if ([((OrgJodaTimeDateTimeField *) nil_chk([gregorian millisOfDay])) getWithLong:iCutoverMillis_] == 0) {
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_millisOfSecond_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian millisOfSecond] withOrgJodaTimeDateTimeField:fields->millisOfSecond_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_millisOfDay_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian millisOfDay] withOrgJodaTimeDateTimeField:fields->millisOfDay_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_secondOfMinute_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian secondOfMinute] withOrgJodaTimeDateTimeField:fields->secondOfMinute_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_secondOfDay_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian secondOfDay] withOrgJodaTimeDateTimeField:fields->secondOfDay_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_minuteOfHour_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian minuteOfHour] withOrgJodaTimeDateTimeField:fields->minuteOfHour_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_minuteOfDay_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian minuteOfDay] withOrgJodaTimeDateTimeField:fields->minuteOfDay_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_hourOfDay_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian hourOfDay] withOrgJodaTimeDateTimeField:fields->hourOfDay_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_hourOfHalfday_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian hourOfHalfday] withOrgJodaTimeDateTimeField:fields->hourOfHalfday_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_clockhourOfDay_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian clockhourOfDay] withOrgJodaTimeDateTimeField:fields->clockhourOfDay_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_clockhourOfHalfday_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian clockhourOfHalfday] withOrgJodaTimeDateTimeField:fields->clockhourOfHalfday_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_halfdayOfDay_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian halfdayOfDay] withOrgJodaTimeDateTimeField:fields->halfdayOfDay_ withLong:iCutoverMillis_]);
  }
  {
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_era_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian era] withOrgJodaTimeDateTimeField:fields->era_ withLong:iCutoverMillis_]);
  }
  {
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_year_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian year] withOrgJodaTimeDateTimeField:fields->year_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_years_(fields, [fields->year_ getDurationField]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_yearOfEra_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian yearOfEra] withOrgJodaTimeDateTimeField:fields->yearOfEra_ withOrgJodaTimeDurationField:fields->years_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_centuryOfEra_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian centuryOfEra] withOrgJodaTimeDateTimeField:fields->centuryOfEra_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(fields, [fields->centuryOfEra_ getDurationField]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_yearOfCentury_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian yearOfCentury] withOrgJodaTimeDateTimeField:fields->yearOfCentury_ withOrgJodaTimeDurationField:fields->years_ withOrgJodaTimeDurationField:fields->centuries_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_monthOfYear_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian monthOfYear] withOrgJodaTimeDateTimeField:fields->monthOfYear_ withOrgJodaTimeDurationField:nil withOrgJodaTimeDurationField:fields->years_ withLong:iCutoverMillis_]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_months_(fields, [fields->monthOfYear_ getDurationField]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekyear_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian weekyear] withOrgJodaTimeDateTimeField:fields->weekyear_ withOrgJodaTimeDurationField:nil withLong:iCutoverMillis_ withBoolean:YES]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(fields, [fields->weekyear_ getDurationField]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekyearOfCentury_(fields, [[OrgJodaTimeChronoGJChronology_ImpreciseCutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian weekyearOfCentury] withOrgJodaTimeDateTimeField:fields->weekyearOfCentury_ withOrgJodaTimeDurationField:fields->weekyears_ withOrgJodaTimeDurationField:fields->centuries_ withLong:iCutoverMillis_]);
  }
  {
    jlong cutover = [((OrgJodaTimeDateTimeField *) nil_chk([gregorian year])) roundCeilingWithLong:iCutoverMillis_];
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_dayOfYear_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian dayOfYear] withOrgJodaTimeDateTimeField:fields->dayOfYear_ withOrgJodaTimeDurationField:fields->years_ withLong:cutover withBoolean:NO]);
  }
  {
    jlong cutover = [((OrgJodaTimeDateTimeField *) nil_chk([gregorian weekyear])) roundCeilingWithLong:iCutoverMillis_];
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekOfWeekyear_(fields, [[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian weekOfWeekyear] withOrgJodaTimeDateTimeField:fields->weekOfWeekyear_ withOrgJodaTimeDurationField:fields->weekyears_ withLong:cutover withBoolean:YES]);
  }
  {
    OrgJodaTimeChronoGJChronology_CutoverField *cf = [[[OrgJodaTimeChronoGJChronology_CutoverField alloc] initWithOrgJodaTimeChronoGJChronology:self withOrgJodaTimeDateTimeField:[julian dayOfMonth] withOrgJodaTimeDateTimeField:fields->dayOfMonth_ withLong:iCutoverMillis_] autorelease];
    OrgJodaTimeChronoGJChronology_CutoverField_set_iRangeDurationField_(cf, fields->months_);
    OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(fields, cf);
  }
}

- (jlong)julianToGregorianByYearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iJulianChronology_, iGregorianChronology_);
}

- (jlong)gregorianToJulianByYearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iGregorianChronology_, iJulianChronology_);
}

- (jlong)julianToGregorianByWeekyearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iJulianChronology_, iGregorianChronology_);
}

- (jlong)gregorianToJulianByWeekyearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iGregorianChronology_, iJulianChronology_);
}

- (void)dealloc {
  RELEASE_(iJulianChronology_);
  RELEASE_(iGregorianChronology_);
  RELEASE_(iCutoverInstant_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoGJChronology_set_iJulianChronology_(other, iJulianChronology_);
  OrgJodaTimeChronoGJChronology_set_iGregorianChronology_(other, iGregorianChronology_);
  OrgJodaTimeChronoGJChronology_set_iCutoverInstant_(other, iCutoverInstant_);
  other->iCutoverMillis_ = iCutoverMillis_;
  other->iGapDuration_ = iGapDuration_;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGJChronology class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_, nil, [[OrgJodaTimeInstant alloc] initWithLong:-12219292800000LL]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoGJChronology_cCache_, nil, [[JavaUtilConcurrentConcurrentHashMap alloc] init]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoGJChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertByYearWithLong:withOrgJodaTimeChronology:withOrgJodaTimeChronology:", "convertByYear", "J", 0xa, NULL },
    { "convertByWeekyearWithLong:withOrgJodaTimeChronology:withOrgJodaTimeChronology:", "convertByWeekyear", "J", 0xa, NULL },
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeReadableInstant:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeReadableInstant:withInt:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withLong:withInt:", "getInstance", "Lorg.joda.time.chrono.GJChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronoJulianChronology:withOrgJodaTimeChronoGregorianChronology:withOrgJodaTimeInstant:", "GJChronology", NULL, 0x2, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeChronoJulianChronology:withOrgJodaTimeChronoGregorianChronology:withOrgJodaTimeInstant:", "GJChronology", NULL, 0x2, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getGregorianCutover", NULL, "Lorg.joda.time.Instant;", 0x1, NULL },
    { "getMinimumDaysInFirstWeek", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "julianToGregorianByYearWithLong:", "julianToGregorianByYear", "J", 0x0, NULL },
    { "gregorianToJulianByYearWithLong:", "gregorianToJulianByYear", "J", 0x0, NULL },
    { "julianToGregorianByWeekyearWithLong:", "julianToGregorianByWeekyear", "J", 0x0, NULL },
    { "gregorianToJulianByWeekyearWithLong:", "gregorianToJulianByWeekyear", "J", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_serialVersionUID },
    { "DEFAULT_CUTOVER_", NULL, 0x18, "Lorg.joda.time.Instant;", &OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_,  },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoGJChronology_cCache_,  },
    { "iJulianChronology_", NULL, 0x2, "Lorg.joda.time.chrono.JulianChronology;", NULL,  },
    { "iGregorianChronology_", NULL, 0x2, "Lorg.joda.time.chrono.GregorianChronology;", NULL,  },
    { "iCutoverInstant_", NULL, 0x2, "Lorg.joda.time.Instant;", NULL,  },
    { "iCutoverMillis_", NULL, 0x2, "J", NULL,  },
    { "iGapDuration_", NULL, 0x2, "J", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology = { 1, "GJChronology", "org.joda.time.chrono", NULL, 0x11, 26, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology;
}

@end

jlong OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to) {
  OrgJodaTimeChronoGJChronology_init();
  return [((OrgJodaTimeChronology *) nil_chk(to)) getDateTimeMillisWithInt:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(from)) year])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from monthOfYear])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from dayOfMonth])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from millisOfDay])) getWithLong:instant]];
}

jlong OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to) {
  OrgJodaTimeChronoGJChronology_init();
  jlong newInstant;
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(to)) weekyear])) setWithLong:0 withInt:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(from)) weekyear])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to weekOfWeekyear])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from weekOfWeekyear])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to dayOfWeek])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from dayOfWeek])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to millisOfDay])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from millisOfDay])) getWithLong:instant]];
  return newInstant;
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceUTC() {
  OrgJodaTimeChronoGJChronology_init();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone_get_UTC_(), OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstance() {
  OrgJodaTimeChronoGJChronology_init();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone_getDefault(), OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoGJChronology_init();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_(OrgJodaTimeDateTimeZone *zone, id<OrgJodaTimeReadableInstant> gregorianCutover) {
  OrgJodaTimeChronoGJChronology_init();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, gregorianCutover, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone *zone, id<OrgJodaTimeReadableInstant> gregorianCutover, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGJChronology_init();
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeInstant *cutoverInstant;
  if (gregorianCutover == nil) {
    cutoverInstant = OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_;
  }
  else {
    cutoverInstant = [gregorianCutover toInstant];
    OrgJodaTimeLocalDate *cutoverDate = [[[OrgJodaTimeLocalDate alloc] initWithLong:[((OrgJodaTimeInstant *) nil_chk(cutoverInstant)) getMillis] withOrgJodaTimeChronology:OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)] autorelease];
    if ([cutoverDate getYear] <= 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Cutover too early. Must be on or after 0001-01-01."] autorelease];
    }
  }
  OrgJodaTimeChronoGJCacheKey *cacheKey = [[[OrgJodaTimeChronoGJCacheKey alloc] initWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeInstant:cutoverInstant withInt:minDaysInFirstWeek] autorelease];
  OrgJodaTimeChronoGJChronology *chrono = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoGJChronology_cCache_)) getWithId:cacheKey];
  if (chrono == nil) {
    if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
      chrono = [[[OrgJodaTimeChronoGJChronology alloc] initWithOrgJodaTimeChronoJulianChronology:OrgJodaTimeChronoJulianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek) withOrgJodaTimeChronoGregorianChronology:OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek) withOrgJodaTimeInstant:cutoverInstant] autorelease];
    }
    else {
      chrono = OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone_get_UTC_(), cutoverInstant, minDaysInFirstWeek);
      chrono = [[[OrgJodaTimeChronoGJChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone) withOrgJodaTimeChronoJulianChronology:((OrgJodaTimeChronoGJChronology *) nil_chk(chrono))->iJulianChronology_ withOrgJodaTimeChronoGregorianChronology:chrono->iGregorianChronology_ withOrgJodaTimeInstant:chrono->iCutoverInstant_] autorelease];
    }
    OrgJodaTimeChronoGJChronology *oldChrono = [OrgJodaTimeChronoGJChronology_cCache_ putIfAbsentWithId:cacheKey withId:chrono];
    if (oldChrono != nil) {
      chrono = oldChrono;
    }
  }
  return chrono;
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withLong_withInt_(OrgJodaTimeDateTimeZone *zone, jlong gregorianCutover, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGJChronology_init();
  OrgJodaTimeInstant *cutoverInstant;
  if (gregorianCutover == [((OrgJodaTimeInstant *) nil_chk(OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_)) getMillis]) {
    cutoverInstant = nil;
  }
  else {
    cutoverInstant = [[[OrgJodaTimeInstant alloc] initWithLong:gregorianCutover] autorelease];
  }
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, cutoverInstant, minDaysInFirstWeek);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology)

@implementation OrgJodaTimeChronoGJChronology_CutoverField

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withLong:cutoverMillis withBoolean:NO];
}

- (instancetype)initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                                                                       withLong:(jlong)cutoverMillis
                                                                                    withBoolean:(jboolean)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:nil withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (instancetype)initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                                                                   withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                                                   withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                                                                       withLong:(jlong)cutoverMillis
                                                                                    withBoolean:(jboolean)convertByWeekyear {
  OrgJodaTimeChronoGJChronology_CutoverField_set_this$0_(self, outer$);
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(gregorianField)) getType]]) {
    OrgJodaTimeChronoGJChronology_CutoverField_set_iJulianField_(self, julianField);
    OrgJodaTimeChronoGJChronology_CutoverField_set_iGregorianField_(self, gregorianField);
    iCutover_ = cutoverMillis;
    iConvertByWeekyear_ = convertByWeekyear;
    OrgJodaTimeChronoGJChronology_CutoverField_set_iDurationField_(self, [gregorianField getDurationField]);
    if (rangeField == nil) {
      rangeField = [gregorianField getRangeDurationField];
      if (rangeField == nil) {
        rangeField = [((OrgJodaTimeDateTimeField *) nil_chk(julianField)) getRangeDurationField];
      }
    }
    OrgJodaTimeChronoGJChronology_CutoverField_set_iRangeDurationField_(self, rangeField);
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_CutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:rangeField withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (jboolean)isLenient {
  return NO;
}

- (jint)getWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getWithLong:instant];
  }
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withInt:value];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withLong:value];
}

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(jint)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(jint)valueToAdd {
  if (valueToAdd == 0) {
    return values;
  }
  if (OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(partial)) {
    jlong instant = 0LL;
    for (jint i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
      instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:this$0_])) setWithLong:instant withInt:IOSIntArray_Get(nil_chk(values), i)];
    }
    instant = [self addWithLong:instant withInt:valueToAdd];
    return [this$0_ getWithOrgJodaTimeReadablePartial:partial withLong:instant];
  }
  else {
    return [super addWithOrgJodaTimeReadablePartial:partial withInt:fieldIndex withIntArray:values withInt:valueToAdd];
  }
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) setWithLong:instant withInt:value];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
      if ([self getWithLong:instant] != value) {
        @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[iGregorianField_ getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:nil withNSNumber:nil] autorelease];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) setWithLong:instant withInt:value];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
      if ([self getWithLong:instant] != value) {
        @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[iJulianField_ getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:nil withNSNumber:nil] autorelease];
      }
    }
  }
  return instant;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) isLeapWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) isLeapWithLong:instant];
  }
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getLeapAmountWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getLeapAmountWithLong:instant];
  }
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getLeapDurationField];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValue];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithOrgJodaTimeReadablePartial:partial];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values];
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  if (instant < iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithLong:instant];
  }
  jint min = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMinimumValueWithLong:instant];
  instant = [iGregorianField_ setWithLong:instant withInt:min];
  if (instant < iCutover_) {
    min = [iGregorianField_ getWithLong:iCutover_];
  }
  return min;
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValue];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValueWithLong:instant];
  }
  jint max = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumValueWithLong:instant];
  instant = [iJulianField_ setWithLong:instant withInt:max];
  if (instant >= iCutover_) {
    max = [iJulianField_ getWithLong:[iJulianField_ addWithLong:iCutover_ withInt:-1]];
  }
  return max;
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  jlong instant = [((OrgJodaTimeChronoGJChronology *) nil_chk(OrgJodaTimeChronoGJChronology_getInstanceUTC())) setWithOrgJodaTimeReadablePartial:partial withLong:0LL];
  return [self getMaximumValueWithLong:instant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values {
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoGJChronology_getInstanceUTC();
  jlong instant = 0LL;
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:chrono];
    if (IOSIntArray_Get(nil_chk(values), i) <= [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMaximumValueWithLong:instant]) {
      instant = [field setWithLong:instant withInt:IOSIntArray_Get(values, i)];
    }
  }
  return [self getMaximumValueWithLong:instant];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) roundFloorWithLong:instant];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) roundFloorWithLong:instant];
  }
  return instant;
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) roundCeilingWithLong:instant];
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) roundCeilingWithLong:instant];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return JavaLangMath_maxWithInt_withInt_([((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumTextLengthWithJavaUtilLocale:locale], [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumTextLengthWithJavaUtilLocale:locale]);
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return JavaLangMath_maxWithInt_withInt_([((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale], [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale]);
}

- (jlong)julianToGregorianWithLong:(jlong)instant {
  if (iConvertByWeekyear_) {
    return [this$0_ julianToGregorianByWeekyearWithLong:instant];
  }
  else {
    return [this$0_ julianToGregorianByYearWithLong:instant];
  }
}

- (jlong)gregorianToJulianWithLong:(jlong)instant {
  if (iConvertByWeekyear_) {
    return [this$0_ gregorianToJulianByWeekyearWithLong:instant];
  }
  else {
    return [this$0_ gregorianToJulianByYearWithLong:instant];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(iJulianField_);
  RELEASE_(iGregorianField_);
  RELEASE_(iDurationField_);
  RELEASE_(iRangeDurationField_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_CutoverField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoGJChronology_CutoverField_set_this$0_(other, this$0_);
  OrgJodaTimeChronoGJChronology_CutoverField_set_iJulianField_(other, iJulianField_);
  OrgJodaTimeChronoGJChronology_CutoverField_set_iGregorianField_(other, iGregorianField_);
  other->iCutover_ = iCutover_;
  other->iConvertByWeekyear_ = iConvertByWeekyear_;
  OrgJodaTimeChronoGJChronology_CutoverField_set_iDurationField_(other, iDurationField_);
  OrgJodaTimeChronoGJChronology_CutoverField_set_iRangeDurationField_(other, iRangeDurationField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:", "CutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:withBoolean:", "CutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:withBoolean:", "CutoverField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithInt:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "add", "[I", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL },
    { "julianToGregorianWithLong:", "julianToGregorian", "J", 0x4, NULL },
    { "gregorianToJulianWithLong:", "gregorianToJulian", "J", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.GJChronology;", NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_CutoverField_serialVersionUID },
    { "iJulianField_", NULL, 0x10, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iGregorianField_", NULL, 0x10, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iCutover_", NULL, 0x10, "J", NULL,  },
    { "iConvertByWeekyear_", NULL, 0x10, "Z", NULL,  },
    { "iDurationField_", NULL, 0x4, "Lorg.joda.time.DurationField;", NULL,  },
    { "iRangeDurationField_", NULL, 0x4, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_CutoverField = { 1, "CutoverField", "org.joda.time.chrono", "GJChronology", 0x2, 35, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology_CutoverField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology_CutoverField)

@implementation OrgJodaTimeChronoGJChronology_ImpreciseCutoverField

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis {
  return [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:nil withLong:cutoverMillis withBoolean:NO];
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis {
  return [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:durationField withLong:cutoverMillis withBoolean:NO];
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                                             withLong:(jlong)cutoverMillis {
  if (self = [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:durationField withLong:cutoverMillis withBoolean:NO]) {
    OrgJodaTimeChronoGJChronology_CutoverField_set_iRangeDurationField_(self, rangeDurationField);
  }
  return self;
}

- (instancetype)initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                                                                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                                                                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                                                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                                                                                withLong:(jlong)cutoverMillis
                                                                                             withBoolean:(jboolean)convertByWeekyear {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_set_this$1_(self, outer$);
  if (self = [super initWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withLong:cutoverMillis withBoolean:convertByWeekyear]) {
    if (durationField == nil) {
      durationField = [[[OrgJodaTimeChronoGJChronology_LinkedDurationField alloc] initWithOrgJodaTimeDurationField:iDurationField_ withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:self] autorelease];
    }
    OrgJodaTimeChronoGJChronology_CutoverField_set_iDurationField_(self, durationField);
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear {
  return [self initOrgJodaTimeChronoGJChronology_ImpreciseCutoverFieldWithOrgJodaTimeChronoGJChronology:outer$ withOrgJodaTimeDateTimeField:julianField withOrgJodaTimeDateTimeField:gregorianField withOrgJodaTimeDurationField:durationField withLong:cutoverMillis withBoolean:convertByWeekyear];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withInt:value];
    if (instant < iCutover_) {
      if (instant + this$1_->iGapDuration_ < iCutover_) {
        if (iConvertByWeekyear_) {
          jint wyear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) getWithLong:instant];
          if (wyear <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ weekyear])) addWithLong:instant withInt:-1];
          }
        }
        else {
          jint year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) getWithLong:instant];
          if (year <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ year])) addWithLong:instant withInt:-1];
          }
        }
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) addWithLong:instant withInt:value];
    if (instant >= iCutover_) {
      if (instant - this$1_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withLong:value];
    if (instant < iCutover_) {
      if (instant + this$1_->iGapDuration_ < iCutover_) {
        if (iConvertByWeekyear_) {
          jint wyear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) getWithLong:instant];
          if (wyear <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ weekyear])) addWithLong:instant withInt:-1];
          }
        }
        else {
          jint year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) getWithLong:instant];
          if (year <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([this$1_->iGregorianChronology_ year])) addWithLong:instant withInt:-1];
          }
        }
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) addWithLong:instant withLong:value];
    if (instant >= iCutover_) {
      if (instant - this$1_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  if (minuendInstant >= iCutover_) {
    if (subtrahendInstant >= iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self gregorianToJulianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
  }
  else {
    if (subtrahendInstant < iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self julianToGregorianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
  }
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  if (minuendInstant >= iCutover_) {
    if (subtrahendInstant >= iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self gregorianToJulianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
  }
  else {
    if (subtrahendInstant < iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self julianToGregorianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
  }
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMinimumValueWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithLong:instant];
  }
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValueWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumValueWithLong:instant];
  }
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_set_this$1_(other, this$1_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withLong:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:withBoolean:", "ImpreciseCutoverField", NULL, 0x0, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lorg.joda.time.chrono.GJChronology;", NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_ImpreciseCutoverField = { 1, "ImpreciseCutoverField", "org.joda.time.chrono", "GJChronology", 0x12, 10, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField)

@implementation OrgJodaTimeChronoGJChronology_LinkedDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)dateTimeField {
  if (self = [super initWithOrgJodaTimeDurationField:durationField withOrgJodaTimeDurationFieldType:[((OrgJodaTimeDurationField *) nil_chk(durationField)) getType]]) {
    OrgJodaTimeChronoGJChronology_LinkedDurationField_set_iField_LinkedDurationField_(self, dateTimeField);
  }
  return self;
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) addWithLong:instant withInt:value];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) addWithLong:instant withLong:value];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (void)dealloc {
  RELEASE_(iField_LinkedDurationField_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_LinkedDurationField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoGJChronology_LinkedDurationField_set_iField_LinkedDurationField_(other, iField_LinkedDurationField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDurationField:withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:", "LinkedDurationField", NULL, 0x0, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGJChronology_LinkedDurationField_serialVersionUID },
    { "iField_LinkedDurationField_", "iField", 0x12, "Lorg.joda.time.chrono.GJChronology$ImpreciseCutoverField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_LinkedDurationField = { 1, "LinkedDurationField", "org.joda.time.chrono", "GJChronology", 0xa, 5, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJChronology_LinkedDurationField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology_LinkedDurationField)
