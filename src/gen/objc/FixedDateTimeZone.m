//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/tz/FixedDateTimeZone.java
//

#include "DateTimeZone.h"
#include "FixedDateTimeZone.h"
#include "java/util/SimpleTimeZone.h"
#include "java/util/TimeZone.h"

@implementation OrgJodaTimeTzFixedDateTimeZone

- (instancetype)initWithNSString:(NSString *)id_
                    withNSString:(NSString *)nameKey
                         withInt:(int)wallOffset
                         withInt:(int)standardOffset {
  if (self = [super initWithNSString:id_]) {
    iNameKey_ = nameKey;
    iWallOffset_ = wallOffset;
    iStandardOffset_ = standardOffset;
  }
  return self;
}

- (NSString *)getNameKeyWithLong:(long long int)instant {
  return iNameKey_;
}

- (int)getOffsetWithLong:(long long int)instant {
  return iWallOffset_;
}

- (int)getStandardOffsetWithLong:(long long int)instant {
  return iStandardOffset_;
}

- (int)getOffsetFromLocalWithLong:(long long int)instantLocal {
  return iWallOffset_;
}

- (BOOL)isFixed {
  return YES;
}

- (long long int)nextTransitionWithLong:(long long int)instant {
  return instant;
}

- (long long int)previousTransitionWithLong:(long long int)instant {
  return instant;
}

- (JavaUtilTimeZone *)toTimeZone {
  NSString *id_ = [self getID];
  if (((int) [((NSString *) nil_chk(id_)) length]) == 6 && ([id_ hasPrefix:@"+"] || [id_ hasPrefix:@"-"])) {
    return [JavaUtilTimeZone getTimeZoneWithNSString:[NSString stringWithFormat:@"GMT%@", [self getID]]];
  }
  return [[JavaUtilSimpleTimeZone alloc] initWithInt:iWallOffset_ withNSString:[self getID]];
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeTzFixedDateTimeZone class]]) {
    OrgJodaTimeTzFixedDateTimeZone *other = (OrgJodaTimeTzFixedDateTimeZone *) check_class_cast(obj, [OrgJodaTimeTzFixedDateTimeZone class]);
    return [((NSString *) nil_chk([self getID])) isEqual:[((OrgJodaTimeTzFixedDateTimeZone *) nil_chk(other)) getID]] && iStandardOffset_ == other->iStandardOffset_ && iWallOffset_ == other->iWallOffset_;
  }
  return NO;
}

- (NSUInteger)hash {
  return ((int) [((NSString *) nil_chk([self getID])) hash]) + 37 * iStandardOffset_ + 31 * iWallOffset_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzFixedDateTimeZone *)other {
  [super copyAllFieldsTo:other];
  other->iNameKey_ = iNameKey_;
  other->iStandardOffset_ = iStandardOffset_;
  other->iWallOffset_ = iWallOffset_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:withInt:", "FixedDateTimeZone", NULL, 0x1, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x1, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x1, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x1, NULL },
    { "getOffsetFromLocalWithLong:", "getOffsetFromLocal", "I", 0x1, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL },
    { "nextTransitionWithLong:", "nextTransition", "J", 0x1, NULL },
    { "previousTransitionWithLong:", "previousTransition", "J", 0x1, NULL },
    { "toTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_FixedDateTimeZone_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeTzFixedDateTimeZone_serialVersionUID },
    { "iNameKey_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iWallOffset_", NULL, 0x12, "I", NULL,  },
    { "iStandardOffset_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzFixedDateTimeZone = { "FixedDateTimeZone", "org.joda.time.tz", NULL, 0x11, 11, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeTzFixedDateTimeZone;
}

@end
