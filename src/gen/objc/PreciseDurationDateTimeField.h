//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java
//

#ifndef _OrgJodaTimeFieldPreciseDurationDateTimeField_H_
#define _OrgJodaTimeFieldPreciseDurationDateTimeField_H_

@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;

#import "JreEmulation.h"
#include "BaseDateTimeField.h"

#define OrgJodaTimeFieldPreciseDurationDateTimeField_serialVersionUID 5004523158306266035LL

/**
 @brief Precise datetime field, which has a precise unit duration field.
 <p> PreciseDurationDateTimeField is thread-safe and immutable, and its subclasses must be as well.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFieldPreciseDurationDateTimeField : OrgJodaTimeFieldBaseDateTimeField {
 @public
  /**
   @brief The fractional unit in millis
   */
  long long int iUnitMillis_;
  OrgJodaTimeDurationField *iUnitField_;
}

/**
 @brief Constructor.
 @param type the field type
 @param unit precise unit duration, like "days()".
 @throws IllegalArgumentException if duration field is imprecise
 @throws IllegalArgumentException if unit milliseconds is less than one
 */
- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)unit;

/**
 @brief Returns false by default.
 */
- (BOOL)isLenient;

/**
 @brief Set the specified amount of units to the specified time instant.
 @param instant the milliseconds from 1970-01-01T00:00:00Z to set in
 @param value value of units to set.
 @return the updated time instant.
 @throws IllegalArgumentException if value is too large or too small.
 */
- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value;

/**
 @brief This method assumes that this field is properly rounded on 1970-01-01T00:00:00.
 If the rounding alignment differs, override this method as follows: <pre> return super.roundFloor(instant + ALIGNMENT_MILLIS) - ALIGNMENT_MILLIS; </pre>
 */
- (long long int)roundFloorWithLong:(long long int)instant;

/**
 @brief This method assumes that this field is properly rounded on 1970-01-01T00:00:00.
 If the rounding alignment differs, override this method as follows: <pre> return super.roundCeiling(instant + ALIGNMENT_MILLIS) - ALIGNMENT_MILLIS; </pre>
 */
- (long long int)roundCeilingWithLong:(long long int)instant;

/**
 @brief This method assumes that this field is properly rounded on 1970-01-01T00:00:00.
 If the rounding alignment differs, override this method as follows: <pre> return super.remainder(instant + ALIGNMENT_MILLIS); </pre>
 */
- (long long int)remainderWithLong:(long long int)instant;

/**
 @brief Returns the duration per unit value of this field.
 For example, if this field represents "minute of hour", then the duration field is minutes.
 @return the duration of this field, or UnsupportedDurationField if field has no duration
 */
- (OrgJodaTimeDurationField *)getDurationField;

/**
 @brief Get the minimum value for the field.
 @return the minimum value
 */
- (int)getMinimumValue;

- (long long int)getUnitMillis;

/**
 @brief Called by the set method to get the maximum allowed value.
 By default, returns getMaximumValue(instant). Override to provide a faster implementation.
 */
- (int)getMaximumValueForSetWithLong:(long long int)instant
                             withInt:(int)value;

- (void)copyAllFieldsTo:(OrgJodaTimeFieldPreciseDurationDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFieldPreciseDurationDateTimeField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldPreciseDurationDateTimeField, iUnitField_, OrgJodaTimeDurationField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFieldPreciseDurationDateTimeField, serialVersionUID, long long int)

#endif // _OrgJodaTimeFieldPreciseDurationDateTimeField_H_
