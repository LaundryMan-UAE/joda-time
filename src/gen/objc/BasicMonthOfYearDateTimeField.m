//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
//

#include "BaseDateTimeField.h"
#include "BasicChronology.h"
#include "BasicMonthOfYearDateTimeField.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeUtils.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "IOSPrimitiveArray.h"
#include "ImpreciseDateTimeField.h"
#include "ReadablePartial.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@implementation OrgJodaTimeChronoBasicMonthOfYearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology
                                                 withInt:(int)leapMonth {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType monthOfYear] withLong:[((OrgJodaTimeChronoBasicChronology *) nil_chk(chronology)) getAverageMillisPerMonth]]) {
    iChronology_ = chronology;
    iMax_ = [iChronology_ getMaxMonth];
    iLeapMonth_ = leapMonth;
  }
  return self;
}

- (BOOL)isLenient {
  return NO;
}

- (int)getWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMonthOfYearWithLong:instant];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)months {
  if (months == 0) {
    return instant;
  }
  long long int timePart = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMillisOfDayWithLong:instant];
  int thisYear = [iChronology_ getYearWithLong:instant];
  int thisMonth = [iChronology_ getMonthOfYearWithLong:instant withInt:thisYear];
  int yearToUse;
  int monthToUse = thisMonth - 1 + months;
  if (monthToUse >= 0) {
    yearToUse = thisYear + (monthToUse / iMax_);
    monthToUse = (monthToUse % iMax_) + 1;
  }
  else {
    yearToUse = thisYear + (monthToUse / iMax_) - 1;
    monthToUse = [JavaLangMath absWithInt:monthToUse];
    int remMonthToUse = monthToUse % iMax_;
    if (remMonthToUse == 0) {
      remMonthToUse = iMax_;
    }
    monthToUse = iMax_ - remMonthToUse + 1;
    if (monthToUse == 1) {
      yearToUse += 1;
    }
  }
  int dayToUse = [iChronology_ getDayOfMonthWithLong:instant withInt:thisYear withInt:thisMonth];
  int maxDay = [iChronology_ getDaysInYearMonthWithInt:yearToUse withInt:monthToUse];
  if (dayToUse > maxDay) {
    dayToUse = maxDay;
  }
  long long int datePart = [iChronology_ getYearMonthDayMillisWithInt:yearToUse withInt:monthToUse withInt:dayToUse];
  return datePart + timePart;
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)months {
  int i_months = (int) months;
  if (i_months == months) {
    return [self addWithLong:instant withInt:i_months];
  }
  long long int timePart = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMillisOfDayWithLong:instant];
  int thisYear = [iChronology_ getYearWithLong:instant];
  int thisMonth = [iChronology_ getMonthOfYearWithLong:instant withInt:thisYear];
  long long int yearToUse;
  long long int monthToUse = thisMonth - 1 + months;
  if (monthToUse >= 0) {
    yearToUse = thisYear + (monthToUse / iMax_);
    monthToUse = (monthToUse % iMax_) + 1;
  }
  else {
    yearToUse = thisYear + (monthToUse / iMax_) - 1;
    monthToUse = [JavaLangMath absWithLong:monthToUse];
    int remMonthToUse = (int) (monthToUse % iMax_);
    if (remMonthToUse == 0) {
      remMonthToUse = iMax_;
    }
    monthToUse = iMax_ - remMonthToUse + 1;
    if (monthToUse == 1) {
      yearToUse += 1;
    }
  }
  if (yearToUse < [iChronology_ getMinYear] || yearToUse > [iChronology_ getMaxYear]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Magnitude of add amount is too large: %lld", months]];
  }
  int i_yearToUse = (int) yearToUse;
  int i_monthToUse = (int) monthToUse;
  int dayToUse = [iChronology_ getDayOfMonthWithLong:instant withInt:thisYear withInt:thisMonth];
  int maxDay = [iChronology_ getDaysInYearMonthWithInt:i_yearToUse withInt:i_monthToUse];
  if (dayToUse > maxDay) {
    dayToUse = maxDay;
  }
  long long int datePart = [iChronology_ getYearMonthDayMillisWithInt:i_yearToUse withInt:i_monthToUse withInt:dayToUse];
  return datePart + timePart;
}

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(int)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(int)valueToAdd {
  if (valueToAdd == 0) {
    return values;
  }
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size] > 0 && [((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:0])) isEqual:[OrgJodaTimeDateTimeFieldType monthOfYear]] && fieldIndex == 0) {
    int curMonth0 = [partial getValueWithInt:0] - 1;
    int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
    return [self setWithOrgJodaTimeReadablePartial:partial withInt:0 withIntArray:values withInt:newMonth];
  }
  if ([OrgJodaTimeDateTimeUtils isContiguousWithOrgJodaTimeReadablePartial:partial]) {
    long long int instant = 0LL;
    for (int i = 0, isize = [partial size]; i < isize; i++) {
      instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:iChronology_])) setWithLong:instant withInt:IOSIntArray_Get(nil_chk(values), i)];
    }
    instant = [self addWithLong:instant withInt:valueToAdd];
    return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWithOrgJodaTimeReadablePartial:partial withLong:instant];
  }
  else {
    return [super addWithOrgJodaTimeReadablePartial:partial withInt:fieldIndex withIntArray:values withInt:valueToAdd];
  }
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)months {
  return [self setWithLong:instant withInt:[OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:[self getWithLong:instant] withInt:months withInt:OrgJodaTimeChronoBasicMonthOfYearDateTimeField_MIN withInt:iMax_]];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[self getDifferenceWithLong:subtrahendInstant withLong:minuendInstant];
  }
  int minuendYear = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:minuendInstant];
  int minuendMonth = [iChronology_ getMonthOfYearWithLong:minuendInstant withInt:minuendYear];
  int subtrahendYear = [iChronology_ getYearWithLong:subtrahendInstant];
  int subtrahendMonth = [iChronology_ getMonthOfYearWithLong:subtrahendInstant withInt:subtrahendYear];
  long long int difference = (minuendYear - subtrahendYear) * ((long long int) iMax_) + minuendMonth - subtrahendMonth;
  int minuendDom = [iChronology_ getDayOfMonthWithLong:minuendInstant withInt:minuendYear withInt:minuendMonth];
  if (minuendDom == [iChronology_ getDaysInYearMonthWithInt:minuendYear withInt:minuendMonth]) {
    int subtrahendDom = [iChronology_ getDayOfMonthWithLong:subtrahendInstant withInt:subtrahendYear withInt:subtrahendMonth];
    if (subtrahendDom > minuendDom) {
      subtrahendInstant = [((OrgJodaTimeDateTimeField *) nil_chk([iChronology_ dayOfMonth])) setWithLong:subtrahendInstant withInt:minuendDom];
    }
  }
  long long int minuendRem = minuendInstant - [iChronology_ getYearMonthMillisWithInt:minuendYear withInt:minuendMonth];
  long long int subtrahendRem = subtrahendInstant - [iChronology_ getYearMonthMillisWithInt:subtrahendYear withInt:subtrahendMonth];
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)month {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:month withInt:OrgJodaTimeChronoBasicMonthOfYearDateTimeField_MIN withInt:iMax_];
  int thisYear = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
  int thisDom = [iChronology_ getDayOfMonthWithLong:instant withInt:thisYear];
  int maxDom = [iChronology_ getDaysInYearMonthWithInt:thisYear withInt:month];
  if (thisDom > maxDom) {
    thisDom = maxDom;
  }
  return [iChronology_ getYearMonthDayMillisWithInt:thisYear withInt:month withInt:thisDom] + [iChronology_ getMillisOfDayWithLong:instant];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) years];
}

- (BOOL)isLeapWithLong:(long long int)instant {
  int thisYear = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
  if ([iChronology_ isLeapYearWithInt:thisYear]) {
    return ([iChronology_ getMonthOfYearWithLong:instant withInt:thisYear] == iLeapMonth_);
  }
  return NO;
}

- (int)getLeapAmountWithLong:(long long int)instant {
  return [self isLeapWithLong:instant] ? 1 : 0;
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) days];
}

- (int)getMinimumValue {
  return OrgJodaTimeChronoBasicMonthOfYearDateTimeField_MIN;
}

- (int)getMaximumValue {
  return iMax_;
}

- (long long int)roundFloorWithLong:(long long int)instant {
  int year = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
  int month = [iChronology_ getMonthOfYearWithLong:instant withInt:year];
  return [iChronology_ getYearMonthMillisWithInt:year withInt:month];
}

- (long long int)remainderWithLong:(long long int)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) monthOfYear];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicMonthOfYearDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
  other->iLeapMonth_ = iLeapMonth_;
  other->iMax_ = iMax_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:withInt:", "BasicMonthOfYearDateTimeField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "add", "[I", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_BasicMonthOfYearDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicMonthOfYearDateTimeField_serialVersionUID },
    { "MIN_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBasicMonthOfYearDateTimeField_MIN },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.chrono.BasicChronology;", NULL,  },
    { "iMax_", NULL, 0x12, "I", NULL,  },
    { "iLeapMonth_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicMonthOfYearDateTimeField = { "BasicMonthOfYearDateTimeField", "org.joda.time.chrono", NULL, 0x0, 18, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicMonthOfYearDateTimeField;
}

@end
