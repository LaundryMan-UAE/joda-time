//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
//

#ifndef _OrgJodaTimeChronoBasicMonthOfYearDateTimeField_H_
#define _OrgJodaTimeChronoBasicMonthOfYearDateTimeField_H_

@class IOSIntArray;
@class OrgJodaTimeChronoBasicChronology;
@class OrgJodaTimeDurationField;
@protocol OrgJodaTimeReadablePartial;

#import "JreEmulation.h"
#include "ImpreciseDateTimeField.h"

#define OrgJodaTimeChronoBasicMonthOfYearDateTimeField_MIN 1
#define OrgJodaTimeChronoBasicMonthOfYearDateTimeField_serialVersionUID -8258715387168736LL

/**
 @brief Provides time calculations for the month of the year component of time.
 @author Guy Allard
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.2, refactored from GJMonthOfYearDateTimeField
 */
@interface OrgJodaTimeChronoBasicMonthOfYearDateTimeField : OrgJodaTimeFieldImpreciseDateTimeField {
 @public
  OrgJodaTimeChronoBasicChronology *iChronology_;
  int iMax_;
  int iLeapMonth_;
}

/**
 @brief Restricted constructor.
 @param leapMonth the month of year that leaps
 */
- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology
                                                 withInt:(int)leapMonth;

- (BOOL)isLenient;

/**
 @brief Get the Month component of the specified time instant.
 @param instant the time instant in millis to query.
 @return the month extracted from the input.
 */
- (int)getWithLong:(long long int)instant;

/**
 @brief Add the specified month to the specified time instant.
 The amount added may be negative.<p> If the new month has less total days than the specified day of the month, this value is coerced to the nearest sane value. e.g.<p> 07-31 - (1 month) = 06-30<p> 03-31 - (1 month) = 02-28 or 02-29 depending<p>
 @param instant the time instant in millis to update.
 @param months the months to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWithLong:(long long int)instant
                     withInt:(int)months;

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)months;

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(int)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(int)valueToAdd;

/**
 @brief Add to the Month component of the specified time instant wrapping around within that component if necessary.
 @param instant the time instant in millis to update.
 @param months the months to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)months;

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant;

/**
 @brief Set the Month component of the specified time instant.
 <p> If the new month has less total days than the specified day of the month, this value is coerced to the nearest sane value. e.g.<p> 07-31 to month 6 = 06-30<p> 03-31 to month 2 = 02-28 or 02-29 depending<p>
 @param instant the time instant in millis to update.
 @param month the month (1,12) to update the time to.
 @return the updated time instant.
 @throws IllegalArgumentException if month is invalid
 */
- (long long int)setWithLong:(long long int)instant
                     withInt:(int)month;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (BOOL)isLeapWithLong:(long long int)instant;

- (int)getLeapAmountWithLong:(long long int)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (int)getMinimumValue;

- (int)getMaximumValue;

- (long long int)roundFloorWithLong:(long long int)instant;

- (long long int)remainderWithLong:(long long int)instant;

/**
 @brief Serialization singleton
 */
- (id)readResolve;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicMonthOfYearDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoBasicMonthOfYearDateTimeField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoBasicMonthOfYearDateTimeField, iChronology_, OrgJodaTimeChronoBasicChronology *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicMonthOfYearDateTimeField, serialVersionUID, long long int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicMonthOfYearDateTimeField, MIN, int)

#endif // _OrgJodaTimeChronoBasicMonthOfYearDateTimeField_H_
