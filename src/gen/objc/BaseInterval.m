//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/base/BaseInterval.java
//

#include "AbstractInterval.h"
#include "BaseInterval.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTimeUtils.h"
#include "FieldUtils.h"
#include "ISOChronology.h"
#include "IntervalConverter.h"
#include "MutableInterval.h"
#include "ReadWritableInterval.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePeriod.h"

@implementation OrgJodaTimeBaseBaseInterval

- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    iChronology_ = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
    [self checkIntervalWithLong:startInstant withLong:endInstant];
    iStartMillis_ = startInstant;
    iEndMillis_ = endInstant;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  if (self = [super init]) {
    if (start == nil && end == nil) {
      iStartMillis_ = iEndMillis_ = [OrgJodaTimeDateTimeUtils currentTimeMillis];
      iChronology_ = [OrgJodaTimeChronoISOChronology getInstance];
    }
    else {
      iChronology_ = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:start];
      iStartMillis_ = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:start];
      iEndMillis_ = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:end];
      [self checkIntervalWithLong:iStartMillis_ withLong:iEndMillis_];
    }
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  if (self = [super init]) {
    iChronology_ = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:start];
    iStartMillis_ = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:start];
    long long int durationMillis = [OrgJodaTimeDateTimeUtils getDurationMillisWithOrgJodaTimeReadableDuration:duration];
    iEndMillis_ = [OrgJodaTimeFieldFieldUtils safeAddWithLong:iStartMillis_ withLong:durationMillis];
    [self checkIntervalWithLong:iStartMillis_ withLong:iEndMillis_];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  if (self = [super init]) {
    iChronology_ = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:end];
    iEndMillis_ = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:end];
    long long int durationMillis = [OrgJodaTimeDateTimeUtils getDurationMillisWithOrgJodaTimeReadableDuration:duration];
    iStartMillis_ = [OrgJodaTimeFieldFieldUtils safeAddWithLong:iEndMillis_ withLong:-durationMillis];
    [self checkIntervalWithLong:iStartMillis_ withLong:iEndMillis_];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                     withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (self = [super init]) {
    OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:start];
    iChronology_ = chrono;
    iStartMillis_ = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:start];
    if (period == nil) {
      iEndMillis_ = iStartMillis_;
    }
    else {
      iEndMillis_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:period withLong:iStartMillis_ withInt:1];
    }
    [self checkIntervalWithLong:iStartMillis_ withLong:iEndMillis_];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                   withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  if (self = [super init]) {
    OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:end];
    iChronology_ = chrono;
    iEndMillis_ = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:end];
    if (period == nil) {
      iStartMillis_ = iEndMillis_;
    }
    else {
      iStartMillis_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:period withLong:iEndMillis_ withInt:-1];
    }
    [self checkIntervalWithLong:iStartMillis_ withLong:iEndMillis_];
  }
  return self;
}

- (instancetype)initWithId:(id)interval
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    id<OrgJodaTimeConvertIntervalConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk([OrgJodaTimeConvertConverterManager getInstance])) getIntervalConverterWithId:interval];
    if ([((id<OrgJodaTimeConvertIntervalConverter>) nil_chk(converter)) isReadableIntervalWithId:interval withOrgJodaTimeChronology:chrono]) {
      id<OrgJodaTimeReadableInterval> input = (id<OrgJodaTimeReadableInterval>) check_protocol_cast(interval, @protocol(OrgJodaTimeReadableInterval));
      iChronology_ = (chrono != nil ? chrono : [((id<OrgJodaTimeReadableInterval>) nil_chk(input)) getChronology]);
      iStartMillis_ = [((id<OrgJodaTimeReadableInterval>) nil_chk(input)) getStartMillis];
      iEndMillis_ = [input getEndMillis];
    }
    else if ([self conformsToProtocol: @protocol(OrgJodaTimeReadWritableInterval)]) {
      [converter setIntoWithOrgJodaTimeReadWritableInterval:(id<OrgJodaTimeReadWritableInterval>) check_protocol_cast(self, @protocol(OrgJodaTimeReadWritableInterval)) withId:interval withOrgJodaTimeChronology:chrono];
    }
    else {
      OrgJodaTimeMutableInterval *mi = [[OrgJodaTimeMutableInterval alloc] init];
      [converter setIntoWithOrgJodaTimeReadWritableInterval:mi withId:interval withOrgJodaTimeChronology:chrono];
      iChronology_ = [mi getChronology];
      iStartMillis_ = [mi getStartMillis];
      iEndMillis_ = [mi getEndMillis];
    }
    [self checkIntervalWithLong:iStartMillis_ withLong:iEndMillis_];
  }
  return self;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (long long int)getStartMillis {
  return iStartMillis_;
}

- (long long int)getEndMillis {
  return iEndMillis_;
}

- (void)setIntervalWithLong:(long long int)startInstant
                   withLong:(long long int)endInstant
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  [self checkIntervalWithLong:startInstant withLong:endInstant];
  iStartMillis_ = startInstant;
  iEndMillis_ = endInstant;
  iChronology_ = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
}

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBaseInterval *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
  other->iEndMillis_ = iEndMillis_;
  other->iStartMillis_ = iStartMillis_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithLong:withLong:withOrgJodaTimeChronology:", "BaseInterval", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "BaseInterval", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableDuration:", "BaseInterval", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableDuration:withOrgJodaTimeReadableInstant:", "BaseInterval", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadablePeriod:", "BaseInterval", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadablePeriod:withOrgJodaTimeReadableInstant:", "BaseInterval", NULL, 0x4, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "BaseInterval", NULL, 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getStartMillis", NULL, "J", 0x1, NULL },
    { "getEndMillis", NULL, "J", 0x1, NULL },
    { "setIntervalWithLong:withLong:withOrgJodaTimeChronology:", "setInterval", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBaseInterval_serialVersionUID },
    { "iChronology_", NULL, 0x42, "Lorg.joda.time.Chronology;", NULL,  },
    { "iStartMillis_", NULL, 0x42, "J", NULL,  },
    { "iEndMillis_", NULL, 0x42, "J", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeBaseBaseInterval = { "BaseInterval", "org.joda.time.base", NULL, 0x401, 11, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeBaseBaseInterval;
}

@end
