//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/Duration.java
//

#ifndef _OrgJodaTimeDuration_H_
#define _OrgJodaTimeDuration_H_

@class OrgJodaTimeDays;
@class OrgJodaTimeHours;
@class OrgJodaTimeMinutes;
@class OrgJodaTimeSeconds;
@protocol OrgJodaTimeReadableInstant;

#import "JreEmulation.h"
#include "BaseDuration.h"
#include "ReadableDuration.h"
#include "java/io/Serializable.h"

#define OrgJodaTimeDuration_serialVersionUID 2471658376918LL

/**
 @brief An immutable duration specifying a length of time in milliseconds.
 <p> A duration is defined by a fixed number of milliseconds. There is no concept of fields, such as days or seconds, as these fields can vary in length. <p> A duration may be converted to a Period to obtain field values. This conversion will typically cause a loss of precision. <p> Duration is thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeDuration : OrgJodaTimeBaseBaseDuration < OrgJodaTimeReadableDuration, JavaIoSerializable > {
}

/**
 @brief Parses a <code>Duration</code> from the specified string.
 <p> This parses the format <code>PTa.bS</code> , as per #toString() .
 @param str the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeDuration *)parseWithNSString:(NSString *)str;

/**
 @brief Create a duration with the specified number of days assuming that there are the standard number of milliseconds in a day.
 <p> This method assumes that there are 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in a second. This will be true for most days, however days with Daylight Savings changes will not have 24 hours, so use this method with care. <p> A Duration is a representation of an amount of time. If you want to express the concept of 'days' you should consider using the Days class.
 @param days the number of standard days in this duration
 @return the duration, never null
 @throws ArithmeticException if the days value is too large
 @since 1.6
 */
+ (OrgJodaTimeDuration *)standardDaysWithLong:(long long int)days;

/**
 @brief Create a duration with the specified number of hours assuming that there are the standard number of milliseconds in an hour.
 <p> This method assumes that there are 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in a second. All currently supplied chronologies use this definition. <p> A Duration is a representation of an amount of time. If you want to express the concept of 'hours' you should consider using the Hours class.
 @param hours the number of standard hours in this duration
 @return the duration, never null
 @throws ArithmeticException if the hours value is too large
 @since 1.6
 */
+ (OrgJodaTimeDuration *)standardHoursWithLong:(long long int)hours;

/**
 @brief Create a duration with the specified number of minutes assuming that there are the standard number of milliseconds in a minute.
 <p> This method assumes that there are 60 seconds in a minute and 1000 milliseconds in a second. All currently supplied chronologies use this definition. <p> A Duration is a representation of an amount of time. If you want to express the concept of 'minutes' you should consider using the Minutes class.
 @param minutes the number of standard minutes in this duration
 @return the duration, never null
 @throws ArithmeticException if the minutes value is too large
 @since 1.6
 */
+ (OrgJodaTimeDuration *)standardMinutesWithLong:(long long int)minutes;

/**
 @brief Create a duration with the specified number of seconds assuming that there are the standard number of milliseconds in a second.
 <p> This method assumes that there are 1000 milliseconds in a second. All currently supplied chronologies use this definition. <p> A Duration is a representation of an amount of time. If you want to express the concept of 'seconds' you should consider using the Seconds class.
 @param seconds the number of standard seconds in this duration
 @return the duration, never null
 @throws ArithmeticException if the seconds value is too large
 @since 1.6
 */
+ (OrgJodaTimeDuration *)standardSecondsWithLong:(long long int)seconds;

/**
 @brief Create a duration with the specified number of milliseconds.
 @param millis the number of standard milliseconds in this duration
 @return the duration, never null
 @since 2.0
 */
+ (OrgJodaTimeDuration *)millisWithLong:(long long int)millis;

/**
 @brief Creates a duration from the given millisecond duration.
 @param duration the duration, in milliseconds
 */
- (instancetype)initWithLong:(long long int)duration;

/**
 @brief Creates a duration from the given interval endpoints.
 @param startInstant interval start, in milliseconds
 @param endInstant interval end, in milliseconds
 @throws ArithmeticException if the duration exceeds a 64-bit long
 */
- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant;

/**
 @brief Creates a duration from the given interval endpoints.
 @param start interval start, null means now
 @param end interval end, null means now
 @throws ArithmeticException if the duration exceeds a 64-bit long
 */
- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end;

/**
 @brief Creates a duration from the specified object using the org.joda.time.convert.ConverterManager ConverterManager .
 @param duration duration to convert
 @throws IllegalArgumentException if duration is invalid
 */
- (instancetype)initWithId:(id)duration;

/**
 @brief Gets the length of this duration in days assuming that there are the standard number of milliseconds in a day.
 <p> This method assumes that there are 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in a second. This will be true for most days, however days with Daylight Savings changes will not have 24 hours, so use this method with care. <p> This returns <code>getMillis() / MILLIS_PER_DAY</code>. The result is an integer division, thus excess milliseconds are truncated.
 @return the length of the duration in standard seconds
 @since 2.0
 */
- (long long int)getStandardDays;

/**
 @brief Gets the length of this duration in hours assuming that there are the standard number of milliseconds in an hour.
 <p> This method assumes that there are 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in a second. All currently supplied chronologies use this definition. <p> This returns <code>getMillis() / MILLIS_PER_HOUR</code>. The result is an integer division, thus excess milliseconds are truncated.
 @return the length of the duration in standard seconds
 @since 2.0
 */
- (long long int)getStandardHours;

/**
 @brief Gets the length of this duration in minutes assuming that there are the standard number of milliseconds in a minute.
 <p> This method assumes that there are 60 seconds in a minute and 1000 milliseconds in a second. All currently supplied chronologies use this definition. <p> This returns <code>getMillis() / 60000</code>. The result is an integer division, thus excess milliseconds are truncated.
 @return the length of the duration in standard seconds
 @since 2.0
 */
- (long long int)getStandardMinutes;

/**
 @brief Gets the length of this duration in seconds assuming that there are the standard number of milliseconds in a second.
 <p> This method assumes that there are 1000 milliseconds in a second. All currently supplied chronologies use this definition. <p> This returns <code>getMillis() / 1000</code>. The result is an integer division, so 2999 millis returns 2 seconds.
 @return the length of the duration in standard seconds
 @since 1.6
 */
- (long long int)getStandardSeconds;

/**
 @brief Get this duration as an immutable <code>Duration</code> object by returning <code>this</code>.
 @return <code>this</code>
 */
- (OrgJodaTimeDuration *)toDuration;

/**
 @brief Converts this duration to a period in days assuming that there are the standard number of milliseconds in a day.
 <p> This method assumes that there are 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in a second. This will be true for most days, however days with Daylight Savings changes will not have 24 hours, so use this method with care.
 @return a period representing the number of standard days in this period, never null
 @throws ArithmeticException if the number of days is too large to be represented
 @since 2.0
 */
- (OrgJodaTimeDays *)toStandardDays;

/**
 @brief Converts this duration to a period in hours assuming that there are the standard number of milliseconds in an hour.
 <p> This method assumes that there are 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in a second. All currently supplied chronologies use this definition.
 @return a period representing the number of standard hours in this period, never null
 @throws ArithmeticException if the number of hours is too large to be represented
 @since 2.0
 */
- (OrgJodaTimeHours *)toStandardHours;

/**
 @brief Converts this duration to a period in minutes assuming that there are the standard number of milliseconds in a minute.
 <p> This method assumes that there are 60 seconds in a minute and 1000 milliseconds in a second. All currently supplied chronologies use this definition.
 @return a period representing the number of standard minutes in this period, never null
 @throws ArithmeticException if the number of minutes is too large to be represented
 @since 2.0
 */
- (OrgJodaTimeMinutes *)toStandardMinutes;

/**
 @brief Converts this duration to a period in seconds assuming that there are the standard number of milliseconds in a second.
 <p> This method assumes that there are 1000 milliseconds in a second. All currently supplied chronologies use this definition.
 @return a period representing the number of standard seconds in this period, never null
 @throws ArithmeticException if the number of seconds is too large to be represented
 @since 1.6
 */
- (OrgJodaTimeSeconds *)toStandardSeconds;

/**
 @brief Creates a new Duration instance with a different millisecond length.
 @param duration the new length of the duration
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)withMillisWithLong:(long long int)duration;

/**
 @brief Returns a new duration with this length plus that specified multiplied by the scalar.
 This instance is immutable and is not altered. <p> If the addition is zero, this instance is returned.
 @param durationToAdd the duration to add to this one
 @param scalar the amount of times to add, such as -1 to subtract once
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)withDurationAddedWithLong:(long long int)durationToAdd
                                           withInt:(int)scalar;

/**
 @brief Returns a new duration with this length plus that specified multiplied by the scalar.
 This instance is immutable and is not altered. <p> If the addition is zero, this instance is returned.
 @param durationToAdd the duration to add to this one, null means zero
 @param scalar the amount of times to add, such as -1 to subtract once
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                  withInt:(int)scalar;

/**
 @brief Returns a new duration with this length plus that specified.
 This instance is immutable and is not altered. <p> If the addition is zero, this instance is returned.
 @param amount the duration to add to this one
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)plusWithLong:(long long int)amount;

/**
 @brief Returns a new duration with this length plus that specified.
 This instance is immutable and is not altered. <p> If the amount is zero, this instance is returned.
 @param amount the duration to add to this one, null means zero
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)amount;

/**
 @brief Returns a new duration with this length minus that specified.
 This instance is immutable and is not altered. <p> If the addition is zero, this instance is returned.
 @param amount the duration to take away from this one
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)minusWithLong:(long long int)amount;

/**
 @brief Returns a new duration with this length minus that specified.
 This instance is immutable and is not altered. <p> If the amount is zero, this instance is returned.
 @param amount the duration to take away from this one, null means zero
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)amount;

/**
 @brief Returns a new duration with this length multiplied by the specified multiplicand.
 This instance is immutable and is not altered. <p> If the multiplicand is one, this instance is returned.
 @param multiplicand the multiplicand to multiply this one by
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)multipliedByWithLong:(long long int)multiplicand;

/**
 @brief Returns a new duration with this length divided by the specified divisor.
 This instance is immutable and is not altered. <p> If the divisor is one, this instance is returned.
 @param divisor the divisor to divide this one by
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)dividedByWithLong:(long long int)divisor;

/**
 @brief Returns a new duration with this length negated.
 This instance is immutable and is not altered.
 @return the new duration instance
 */
- (OrgJodaTimeDuration *)negated;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeDuration_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeDuration)

FOUNDATION_EXPORT OrgJodaTimeDuration *OrgJodaTimeDuration_ZERO_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeDuration, ZERO_, OrgJodaTimeDuration *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeDuration, serialVersionUID, long long int)

#endif // _OrgJodaTimeDuration_H_
