//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
//

#ifndef _OrgJodaTimeTzZoneInfoCompiler_H_
#define _OrgJodaTimeTzZoneInfoCompiler_H_

@class IOSObjectArray;
@class JavaIoBufferedReader;
@class JavaIoDataOutputStream;
@class JavaIoFile;
@class JavaLangBoolean;
@class JavaUtilStringTokenizer;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeTzDateTimeZoneBuilder;
@class OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear;
@protocol JavaUtilList;
@protocol JavaUtilMap;

#include "J2ObjC_header.h"
#include "java/lang/ThreadLocal.h"

/**
 @brief Compiles IANA ZoneInfo database files into binary files for each time zone in the database.
 DateTimeZoneBuilder is used to construct and encode compiled data files. ZoneInfoProvider loads the encoded files and converts them back into DateTimeZone objects. <p> Although this tool is similar to zic, the binary formats are not compatible. The latest IANA time zone database files may be obtained <a href="http://www.iana.org/time-zones">here</a>. <p> ZoneInfoCompiler is mutable and not thread-safe, although the main method may be safely invoked by multiple threads.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeTzZoneInfoCompiler : NSObject {
}

/**
 @brief Gets a flag indicating that verbose logging is required.
 @return true to log verbosely
 */
+ (jboolean)verbose;

/**
 @brief Launches the ZoneInfoCompiler tool.
 <pre> Usage: java org.joda.time.tz.ZoneInfoCompiler &lt;options&gt; &lt;source files&gt; where possible options include: -src &lt;directory&gt;    Specify where to read source files -dst &lt;directory&gt;    Specify where to write generated files -verbose            Output verbosely (default false) </pre>
 */
+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)getStartOfYear;

+ (OrgJodaTimeChronology *)getLenientISOChronology;

/**
 @param zimap maps string ids to DateTimeZone objects.
 */
+ (void)writeZoneInfoMapWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout
                                   withJavaUtilMap:(id<JavaUtilMap>)zimap;

+ (jint)parseYearWithNSString:(NSString *)str
                      withInt:(jint)def;

+ (jint)parseMonthWithNSString:(NSString *)str;

+ (jint)parseDayOfWeekWithNSString:(NSString *)str;

+ (NSString *)parseOptionalWithNSString:(NSString *)str;

+ (jint)parseTimeWithNSString:(NSString *)str;

+ (jchar)parseZoneCharWithChar:(jchar)c;

/**
 @return false if error.
 */
+ (jboolean)testWithNSString:(NSString *)id_
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)tz;

- (instancetype)init;

/**
 @brief Returns a map of ids to DateTimeZones.
 @param outputDir optional directory to write compiled data files to
 @param sources optional list of source files to parse
 */
- (id<JavaUtilMap>)compileWithJavaIoFile:(JavaIoFile *)outputDir
                     withJavaIoFileArray:(IOSObjectArray *)sources;

- (void)parseDataFileWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeTzZoneInfoCompiler_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT jboolean OrgJodaTimeTzZoneInfoCompiler_verbose();

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_mainWithNSStringArray_(IOSObjectArray *args);

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_getStartOfYear();

FOUNDATION_EXPORT OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_getLenientISOChronology();

FOUNDATION_EXPORT void OrgJodaTimeTzZoneInfoCompiler_writeZoneInfoMapWithJavaIoDataOutputStream_withJavaUtilMap_(JavaIoDataOutputStream *dout, id<JavaUtilMap> zimap);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseYearWithNSString_withInt_(NSString *str, jint def);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseMonthWithNSString_(NSString *str);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseDayOfWeekWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *OrgJodaTimeTzZoneInfoCompiler_parseOptionalWithNSString_(NSString *str);

FOUNDATION_EXPORT jint OrgJodaTimeTzZoneInfoCompiler_parseTimeWithNSString_(NSString *str);

FOUNDATION_EXPORT jchar OrgJodaTimeTzZoneInfoCompiler_parseZoneCharWithChar_(jchar c);

FOUNDATION_EXPORT jboolean OrgJodaTimeTzZoneInfoCompiler_testWithNSString_withOrgJodaTimeDateTimeZone_(NSString *id_, OrgJodaTimeDateTimeZone *tz);

FOUNDATION_EXPORT OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *OrgJodaTimeTzZoneInfoCompiler_cStartOfYear_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTzZoneInfoCompiler, cStartOfYear_, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)
J2OBJC_STATIC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, cStartOfYear_, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)

FOUNDATION_EXPORT OrgJodaTimeChronology *OrgJodaTimeTzZoneInfoCompiler_cLenientISO_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTzZoneInfoCompiler, cLenientISO_, OrgJodaTimeChronology *)
J2OBJC_STATIC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, cLenientISO_, OrgJodaTimeChronology *)

FOUNDATION_EXPORT JavaLangThreadLocal *OrgJodaTimeTzZoneInfoCompiler_cVerbose_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeTzZoneInfoCompiler, cVerbose_, JavaLangThreadLocal *)
J2OBJC_STATIC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler, cVerbose_, JavaLangThreadLocal *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler)

@interface OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear : NSObject {
 @public
  jint iMonthOfYear_;
  jint iDayOfMonth_;
  jint iDayOfWeek_;
  jboolean iAdvanceDayOfWeek_;
  jint iMillisOfDay_;
  jchar iZoneChar_;
}

- (instancetype)init;

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

/**
 @brief Adds a recurring savings rule to the builder.
 */
- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameKey
                                                 withInt:(jint)saveMillis
                                                 withInt:(jint)fromYear
                                                 withInt:(jint)toYear;

/**
 @brief Adds a cutover to the builder.
 */
- (void)addCutoverWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                               withInt:(jint)year;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear)

@interface OrgJodaTimeTzZoneInfoCompiler_Rule : NSObject {
 @public
  NSString *iName_;
  jint iFromYear_;
  jint iToYear_;
  NSString *iType_;
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *iDateTimeOfYear_;
  jint iSaveMillis_;
  NSString *iLetterS_;
}

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

/**
 @brief Adds a recurring savings rule to the builder.
 */
- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_Rule)

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iName_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iType_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iDateTimeOfYear_, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Rule, iLetterS_, NSString *)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_Rule)

@interface OrgJodaTimeTzZoneInfoCompiler_RuleSet : NSObject {
}

- (instancetype)initWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule;

- (void)addRuleWithOrgJodaTimeTzZoneInfoCompiler_Rule:(OrgJodaTimeTzZoneInfoCompiler_Rule *)rule;

/**
 @brief Adds recurring savings rules to the builder.
 */
- (void)addRecurringWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                            withNSString:(NSString *)nameFormat;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_RuleSet)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_RuleSet)

@interface OrgJodaTimeTzZoneInfoCompiler_Zone : NSObject {
 @public
  NSString *iName_;
  jint iOffsetMillis_;
  NSString *iRules_;
  NSString *iFormat_;
  jint iUntilYear_;
  OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *iUntilDateTimeOfYear_;
}

- (instancetype)initWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

- (void)chainWithJavaUtilStringTokenizer:(JavaUtilStringTokenizer *)st;

/**
 @brief Adds zone info to the builder.
 */
- (void)addToBuilderWithOrgJodaTimeTzDateTimeZoneBuilder:(OrgJodaTimeTzDateTimeZoneBuilder *)builder
                                         withJavaUtilMap:(id<JavaUtilMap>)ruleSets;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_Zone)

J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iName_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iRules_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iFormat_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzZoneInfoCompiler_Zone, iUntilDateTimeOfYear_, OrgJodaTimeTzZoneInfoCompiler_DateTimeOfYear *)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_Zone)

@interface OrgJodaTimeTzZoneInfoCompiler_$1 : JavaLangThreadLocal {
}

- (JavaLangBoolean *)initialValue OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeTzZoneInfoCompiler_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeTzZoneInfoCompiler_$1)

#endif // _OrgJodaTimeTzZoneInfoCompiler_H_
