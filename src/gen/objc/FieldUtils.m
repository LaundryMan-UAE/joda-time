//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/FieldUtils.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "FieldUtils.h"
#include "IllegalFieldValueException.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"

@implementation OrgJodaTimeFieldFieldUtils

- (instancetype)init {
  return [super init];
}

+ (int)safeNegateWithInt:(int)value {
  if (value == JavaLangInteger_MIN_VALUE) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Integer.MIN_VALUE cannot be negated"];
  }
  return -value;
}

+ (int)safeAddWithInt:(int)val1
              withInt:(int)val2 {
  int sum = val1 + val2;
  if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"The calculation caused an overflow: %d + %d", val1, val2]];
  }
  return sum;
}

+ (long long int)safeAddWithLong:(long long int)val1
                        withLong:(long long int)val2 {
  long long int sum = val1 + val2;
  if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"The calculation caused an overflow: %lld + %lld", val1, val2]];
  }
  return sum;
}

+ (long long int)safeSubtractWithLong:(long long int)val1
                             withLong:(long long int)val2 {
  long long int diff = val1 - val2;
  if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"The calculation caused an overflow: %lld - %lld", val1, val2]];
  }
  return diff;
}

+ (int)safeMultiplyWithInt:(int)val1
                   withInt:(int)val2 {
  long long int total = (long long int) val1 * (long long int) val2;
  if (total < JavaLangInteger_MIN_VALUE || total > JavaLangInteger_MAX_VALUE) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Multiplication overflows an int: %d * %d", val1, val2]];
  }
  return (int) total;
}

+ (long long int)safeMultiplyWithLong:(long long int)val1
                              withInt:(int)val2 {
  switch (val2) {
    case -1:
    if (val1 == JavaLangLong_MIN_VALUE) {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Multiplication overflows a long: %lld * %d", val1, val2]];
    }
    return -val1;
    case 0:
    return 0LL;
    case 1:
    return val1;
  }
  long long int total = val1 * val2;
  if (total / val2 != val1) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Multiplication overflows a long: %lld * %d", val1, val2]];
  }
  return total;
}

+ (long long int)safeMultiplyWithLong:(long long int)val1
                             withLong:(long long int)val2 {
  if (val2 == 1) {
    return val1;
  }
  if (val1 == 1) {
    return val2;
  }
  if (val1 == 0 || val2 == 0) {
    return 0;
  }
  long long int total = val1 * val2;
  if (total / val2 != val1 || (val1 == JavaLangLong_MIN_VALUE && val2 == -1) || (val2 == JavaLangLong_MIN_VALUE && val1 == -1)) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Multiplication overflows a long: %lld * %lld", val1, val2]];
  }
  return total;
}

+ (long long int)safeDivideWithLong:(long long int)dividend
                           withLong:(long long int)divisor {
  if (dividend == JavaLangLong_MIN_VALUE && divisor == -1LL) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Multiplication overflows a long: %lld / %lld", dividend, divisor]];
  }
  return dividend / divisor;
}

+ (int)safeToIntWithLong:(long long int)value {
  if (JavaLangInteger_MIN_VALUE <= value && value <= JavaLangInteger_MAX_VALUE) {
    return (int) value;
  }
  @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Value cannot fit in an int: %lld", value]];
}

+ (int)safeMultiplyToIntWithLong:(long long int)val1
                        withLong:(long long int)val2 {
  long long int val = [OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:val1 withLong:val2];
  return [OrgJodaTimeFieldFieldUtils safeToIntWithLong:val];
}

+ (void)verifyValueBoundsWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                              withInt:(int)value
                                              withInt:(int)lowerBound
                                              withInt:(int)upperBound {
  if ((value < lowerBound) || (value > upperBound)) {
    @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getType] withNSNumber:[JavaLangInteger valueOfWithInt:value] withNSNumber:[JavaLangInteger valueOfWithInt:lowerBound] withNSNumber:[JavaLangInteger valueOfWithInt:upperBound]];
  }
}

+ (void)verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                  withInt:(int)value
                                                  withInt:(int)lowerBound
                                                  withInt:(int)upperBound {
  if ((value < lowerBound) || (value > upperBound)) {
    @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withNSNumber:[JavaLangInteger valueOfWithInt:value] withNSNumber:[JavaLangInteger valueOfWithInt:lowerBound] withNSNumber:[JavaLangInteger valueOfWithInt:upperBound]];
  }
}

+ (void)verifyValueBoundsWithNSString:(NSString *)fieldName
                              withInt:(int)value
                              withInt:(int)lowerBound
                              withInt:(int)upperBound {
  if ((value < lowerBound) || (value > upperBound)) {
    @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithNSString:fieldName withNSNumber:[JavaLangInteger valueOfWithInt:value] withNSNumber:[JavaLangInteger valueOfWithInt:lowerBound] withNSNumber:[JavaLangInteger valueOfWithInt:upperBound]];
  }
}

+ (int)getWrappedValueWithInt:(int)currentValue
                      withInt:(int)wrapValue
                      withInt:(int)minValue
                      withInt:(int)maxValue {
  return [OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:currentValue + wrapValue withInt:minValue withInt:maxValue];
}

+ (int)getWrappedValueWithInt:(int)value
                      withInt:(int)minValue
                      withInt:(int)maxValue {
  if (minValue >= maxValue) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"MIN > MAX"];
  }
  int wrapRange = maxValue - minValue + 1;
  value -= minValue;
  if (value >= 0) {
    return (value % wrapRange) + minValue;
  }
  int remByRange = (-value) % wrapRange;
  if (remByRange == 0) {
    return 0 + minValue;
  }
  return (wrapRange - remByRange) + minValue;
}

+ (BOOL)equalsWithId:(id)object1
              withId:(id)object2 {
  if (object1 == object2) {
    return YES;
  }
  if (object1 == nil || object2 == nil) {
    return NO;
  }
  return [nil_chk(object1) isEqual:object2];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "FieldUtils", NULL, 0x2, NULL },
    { "safeNegateWithInt:", "safeNegate", "I", 0x9, NULL },
    { "safeAddWithInt:withInt:", "safeAdd", "I", 0x9, NULL },
    { "safeAddWithLong:withLong:", "safeAdd", "J", 0x9, NULL },
    { "safeSubtractWithLong:withLong:", "safeSubtract", "J", 0x9, NULL },
    { "safeMultiplyWithInt:withInt:", "safeMultiply", "I", 0x9, NULL },
    { "safeMultiplyWithLong:withInt:", "safeMultiply", "J", 0x9, NULL },
    { "safeMultiplyWithLong:withLong:", "safeMultiply", "J", 0x9, NULL },
    { "safeDivideWithLong:withLong:", "safeDivide", "J", 0x9, NULL },
    { "safeToIntWithLong:", "safeToInt", "I", 0x9, NULL },
    { "safeMultiplyToIntWithLong:withLong:", "safeMultiplyToInt", "I", 0x9, NULL },
    { "verifyValueBoundsWithOrgJodaTimeDateTimeField:withInt:withInt:withInt:", "verifyValueBounds", "V", 0x9, NULL },
    { "verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:withInt:withInt:withInt:", "verifyValueBounds", "V", 0x9, NULL },
    { "verifyValueBoundsWithNSString:withInt:withInt:withInt:", "verifyValueBounds", "V", 0x9, NULL },
    { "getWrappedValueWithInt:withInt:withInt:withInt:", "getWrappedValue", "I", 0x9, NULL },
    { "getWrappedValueWithInt:withInt:withInt:", "getWrappedValue", "I", 0x9, NULL },
    { "equalsWithId:withId:", "equals", "Z", 0x9, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldFieldUtils = { "FieldUtils", "org.joda.time.field", NULL, 0x1, 17, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeFieldFieldUtils;
}

@end
