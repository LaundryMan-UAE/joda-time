//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/field/FieldUtils.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "FieldUtils.h"
#include "IllegalFieldValueException.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"

@interface OrgJodaTimeFieldFieldUtils ()
- (instancetype)init;
@end

@implementation OrgJodaTimeFieldFieldUtils

- (instancetype)init {
  return [super init];
}

+ (jint)safeNegateWithInt:(jint)value {
  return OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(value);
}

+ (jint)safeAddWithInt:(jint)val1
               withInt:(jint)val2 {
  return OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_(val1, val2);
}

+ (jlong)safeAddWithLong:(jlong)val1
                withLong:(jlong)val2 {
  return OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_(val1, val2);
}

+ (jlong)safeSubtractWithLong:(jlong)val1
                     withLong:(jlong)val2 {
  return OrgJodaTimeFieldFieldUtils_safeSubtractWithLong_withLong_(val1, val2);
}

+ (jint)safeMultiplyWithInt:(jint)val1
                    withInt:(jint)val2 {
  return OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_(val1, val2);
}

+ (jlong)safeMultiplyWithLong:(jlong)val1
                      withInt:(jint)val2 {
  return OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(val1, val2);
}

+ (jlong)safeMultiplyWithLong:(jlong)val1
                     withLong:(jlong)val2 {
  return OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withLong_(val1, val2);
}

+ (jlong)safeDivideWithLong:(jlong)dividend
                   withLong:(jlong)divisor {
  return OrgJodaTimeFieldFieldUtils_safeDivideWithLong_withLong_(dividend, divisor);
}

+ (jint)safeToIntWithLong:(jlong)value {
  return OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(value);
}

+ (jint)safeMultiplyToIntWithLong:(jlong)val1
                         withLong:(jlong)val2 {
  return OrgJodaTimeFieldFieldUtils_safeMultiplyToIntWithLong_withLong_(val1, val2);
}

+ (void)verifyValueBoundsWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                              withInt:(jint)value
                                              withInt:(jint)lowerBound
                                              withInt:(jint)upperBound {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(field, value, lowerBound, upperBound);
}

+ (void)verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                  withInt:(jint)value
                                                  withInt:(jint)lowerBound
                                                  withInt:(jint)upperBound {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(fieldType, value, lowerBound, upperBound);
}

+ (void)verifyValueBoundsWithNSString:(NSString *)fieldName
                              withInt:(jint)value
                              withInt:(jint)lowerBound
                              withInt:(jint)upperBound {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithNSString_withInt_withInt_withInt_(fieldName, value, lowerBound, upperBound);
}

+ (jint)getWrappedValueWithInt:(jint)currentValue
                       withInt:(jint)wrapValue
                       withInt:(jint)minValue
                       withInt:(jint)maxValue {
  return OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_withInt_(currentValue, wrapValue, minValue, maxValue);
}

+ (jint)getWrappedValueWithInt:(jint)value
                       withInt:(jint)minValue
                       withInt:(jint)maxValue {
  return OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_(value, minValue, maxValue);
}

+ (jboolean)equalsWithId:(id)object1
                  withId:(id)object2 {
  return OrgJodaTimeFieldFieldUtils_equalsWithId_withId_(object1, object2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FieldUtils", NULL, 0x2, NULL },
    { "safeNegateWithInt:", "safeNegate", "I", 0x9, NULL },
    { "safeAddWithInt:withInt:", "safeAdd", "I", 0x9, NULL },
    { "safeAddWithLong:withLong:", "safeAdd", "J", 0x9, NULL },
    { "safeSubtractWithLong:withLong:", "safeSubtract", "J", 0x9, NULL },
    { "safeMultiplyWithInt:withInt:", "safeMultiply", "I", 0x9, NULL },
    { "safeMultiplyWithLong:withInt:", "safeMultiply", "J", 0x9, NULL },
    { "safeMultiplyWithLong:withLong:", "safeMultiply", "J", 0x9, NULL },
    { "safeDivideWithLong:withLong:", "safeDivide", "J", 0x9, NULL },
    { "safeToIntWithLong:", "safeToInt", "I", 0x9, NULL },
    { "safeMultiplyToIntWithLong:withLong:", "safeMultiplyToInt", "I", 0x9, NULL },
    { "verifyValueBoundsWithOrgJodaTimeDateTimeField:withInt:withInt:withInt:", "verifyValueBounds", "V", 0x9, NULL },
    { "verifyValueBoundsWithOrgJodaTimeDateTimeFieldType:withInt:withInt:withInt:", "verifyValueBounds", "V", 0x9, NULL },
    { "verifyValueBoundsWithNSString:withInt:withInt:withInt:", "verifyValueBounds", "V", 0x9, NULL },
    { "getWrappedValueWithInt:withInt:withInt:withInt:", "getWrappedValue", "I", 0x9, NULL },
    { "getWrappedValueWithInt:withInt:withInt:", "getWrappedValue", "I", 0x9, NULL },
    { "equalsWithId:withId:", "equals", "Z", 0x9, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldFieldUtils = { 1, "FieldUtils", "org.joda.time.field", NULL, 0x1, 17, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeFieldFieldUtils;
}

@end

jint OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(jint value) {
  OrgJodaTimeFieldFieldUtils_init();
  if (value == JavaLangInteger_MIN_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Integer.MIN_VALUE cannot be negated"] autorelease];
  }
  return -value;
}

jint OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_(jint val1, jint val2) {
  OrgJodaTimeFieldFieldUtils_init();
  jint sum = val1 + val2;
  if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$I$I", @"The calculation caused an overflow: ", val1, @" + ", val2)] autorelease];
  }
  return sum;
}

jlong OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_(jlong val1, jlong val2) {
  OrgJodaTimeFieldFieldUtils_init();
  jlong sum = val1 + val2;
  if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J$J", @"The calculation caused an overflow: ", val1, @" + ", val2)] autorelease];
  }
  return sum;
}

jlong OrgJodaTimeFieldFieldUtils_safeSubtractWithLong_withLong_(jlong val1, jlong val2) {
  OrgJodaTimeFieldFieldUtils_init();
  jlong diff = val1 - val2;
  if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J$J", @"The calculation caused an overflow: ", val1, @" - ", val2)] autorelease];
  }
  return diff;
}

jint OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_(jint val1, jint val2) {
  OrgJodaTimeFieldFieldUtils_init();
  jlong total = (jlong) val1 * (jlong) val2;
  if (total < JavaLangInteger_MIN_VALUE || total > JavaLangInteger_MAX_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$I$I", @"Multiplication overflows an int: ", val1, @" * ", val2)] autorelease];
  }
  return (jint) total;
}

jlong OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(jlong val1, jint val2) {
  OrgJodaTimeFieldFieldUtils_init();
  switch (val2) {
    case -1:
    if (val1 == JavaLangLong_MIN_VALUE) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J$I", @"Multiplication overflows a long: ", val1, @" * ", val2)] autorelease];
    }
    return -val1;
    case 0:
    return 0LL;
    case 1:
    return val1;
  }
  jlong total = val1 * val2;
  if (total / val2 != val1) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J$I", @"Multiplication overflows a long: ", val1, @" * ", val2)] autorelease];
  }
  return total;
}

jlong OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withLong_(jlong val1, jlong val2) {
  OrgJodaTimeFieldFieldUtils_init();
  if (val2 == 1) {
    return val1;
  }
  if (val1 == 1) {
    return val2;
  }
  if (val1 == 0 || val2 == 0) {
    return 0;
  }
  jlong total = val1 * val2;
  if (total / val2 != val1 || (val1 == JavaLangLong_MIN_VALUE && val2 == -1) || (val2 == JavaLangLong_MIN_VALUE && val1 == -1)) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J$J", @"Multiplication overflows a long: ", val1, @" * ", val2)] autorelease];
  }
  return total;
}

jlong OrgJodaTimeFieldFieldUtils_safeDivideWithLong_withLong_(jlong dividend, jlong divisor) {
  OrgJodaTimeFieldFieldUtils_init();
  if (dividend == JavaLangLong_MIN_VALUE && divisor == -1LL) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J$J", @"Multiplication overflows a long: ", dividend, @" / ", divisor)] autorelease];
  }
  return dividend / divisor;
}

jint OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(jlong value) {
  OrgJodaTimeFieldFieldUtils_init();
  if (JavaLangInteger_MIN_VALUE <= value && value <= JavaLangInteger_MAX_VALUE) {
    return (jint) value;
  }
  @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$J", @"Value cannot fit in an int: ", value)] autorelease];
}

jint OrgJodaTimeFieldFieldUtils_safeMultiplyToIntWithLong_withLong_(jlong val1, jlong val2) {
  OrgJodaTimeFieldFieldUtils_init();
  jlong val = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withLong_(val1, val2);
  return OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(val);
}

void OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(OrgJodaTimeDateTimeField *field, jint value, jint lowerBound, jint upperBound) {
  OrgJodaTimeFieldFieldUtils_init();
  if ((value < lowerBound) || (value > upperBound)) {
    @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:JavaLangInteger_valueOfWithInt_(lowerBound) withNSNumber:JavaLangInteger_valueOfWithInt_(upperBound)] autorelease];
  }
}

void OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeFieldType_withInt_withInt_withInt_(OrgJodaTimeDateTimeFieldType *fieldType, jint value, jint lowerBound, jint upperBound) {
  OrgJodaTimeFieldFieldUtils_init();
  if ((value < lowerBound) || (value > upperBound)) {
    @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:JavaLangInteger_valueOfWithInt_(lowerBound) withNSNumber:JavaLangInteger_valueOfWithInt_(upperBound)] autorelease];
  }
}

void OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithNSString_withInt_withInt_withInt_(NSString *fieldName, jint value, jint lowerBound, jint upperBound) {
  OrgJodaTimeFieldFieldUtils_init();
  if ((value < lowerBound) || (value > upperBound)) {
    @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithNSString:fieldName withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:JavaLangInteger_valueOfWithInt_(lowerBound) withNSNumber:JavaLangInteger_valueOfWithInt_(upperBound)] autorelease];
  }
}

jint OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_withInt_(jint currentValue, jint wrapValue, jint minValue, jint maxValue) {
  OrgJodaTimeFieldFieldUtils_init();
  return OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_(currentValue + wrapValue, minValue, maxValue);
}

jint OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_(jint value, jint minValue, jint maxValue) {
  OrgJodaTimeFieldFieldUtils_init();
  if (minValue >= maxValue) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"MIN > MAX"] autorelease];
  }
  jint wrapRange = maxValue - minValue + 1;
  value -= minValue;
  if (value >= 0) {
    return (value % wrapRange) + minValue;
  }
  jint remByRange = (-value) % wrapRange;
  if (remByRange == 0) {
    return 0 + minValue;
  }
  return (wrapRange - remByRange) + minValue;
}

jboolean OrgJodaTimeFieldFieldUtils_equalsWithId_withId_(id object1, id object2) {
  OrgJodaTimeFieldFieldUtils_init();
  if (object1 == object2) {
    return YES;
  }
  if (object1 == nil || object2 == nil) {
    return NO;
  }
  return [nil_chk(object1) isEqual:object2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldFieldUtils)
