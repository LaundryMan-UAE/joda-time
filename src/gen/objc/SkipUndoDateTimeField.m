//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DelegatedDateTimeField.h"
#include "FieldUtils.h"
#include "SkipUndoDateTimeField.h"

@implementation OrgJodaTimeFieldSkipUndoDateTimeField

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return [self initOrgJodaTimeFieldSkipUndoDateTimeFieldWithOrgJodaTimeChronology:chronology withOrgJodaTimeDateTimeField:field withInt:0];
}

- (instancetype)initOrgJodaTimeFieldSkipUndoDateTimeFieldWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                                                      withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                                           withInt:(int)skip {
  if (self = [super initWithOrgJodaTimeDateTimeField:field]) {
    iChronology_ = chronology;
    int min = [super getMinimumValue];
    if (min < skip) {
      iMinValue_ = min + 1;
    }
    else if (min == skip + 1) {
      iMinValue_ = skip;
    }
    else {
      iMinValue_ = min;
    }
    iSkip_ = skip;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(int)skip {
  return [self initOrgJodaTimeFieldSkipUndoDateTimeFieldWithOrgJodaTimeChronology:chronology withOrgJodaTimeDateTimeField:field withInt:skip];
}

- (int)getWithLong:(long long int)millis {
  int value = [super getWithLong:millis];
  if (value < iSkip_) {
    value++;
  }
  return value;
}

- (long long int)setWithLong:(long long int)millis
                     withInt:(int)value {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:value withInt:iMinValue_ withInt:[self getMaximumValue]];
  if (value <= iSkip_) {
    value--;
  }
  return [super setWithLong:millis withInt:value];
}

- (int)getMinimumValue {
  return iMinValue_;
}

- (id)readResolve {
  return [((OrgJodaTimeDateTimeFieldType *) nil_chk([self getType])) getFieldWithOrgJodaTimeChronology:iChronology_];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldSkipUndoDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
  other->iMinValue_ = iMinValue_;
  other->iSkip_ = iSkip_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeField:", "SkipUndoDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeField:withInt:", "SkipUndoDateTimeField", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_SkipUndoDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldSkipUndoDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iSkip_", NULL, 0x12, "I", NULL,  },
    { "iMinValue_", NULL, 0x82, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldSkipUndoDateTimeField = { "SkipUndoDateTimeField", "org.joda.time.field", NULL, 0x11, 6, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFieldSkipUndoDateTimeField;
}

@end
