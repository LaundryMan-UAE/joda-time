//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BuddhistChronology.java
//

#include "AssembledChronology.h"
#include "BasicSingleEraDateTimeField.h"
#include "BuddhistChronology.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DelegatedDateTimeField.h"
#include "DividedDateTimeField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "GJChronology.h"
#include "IOSClass.h"
#include "LimitChronology.h"
#include "OffsetDateTimeField.h"
#include "RemainderDateTimeField.h"
#include "SkipUndoDateTimeField.h"
#include "UnsupportedDurationField.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

BOOL OrgJodaTimeChronoBuddhistChronology_initialized = NO;

@implementation OrgJodaTimeChronoBuddhistChronology

OrgJodaTimeDateTimeField * OrgJodaTimeChronoBuddhistChronology_ERA_FIELD_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoBuddhistChronology_cCache_;
OrgJodaTimeChronoBuddhistChronology * OrgJodaTimeChronoBuddhistChronology_INSTANCE_UTC_;

+ (OrgJodaTimeChronoBuddhistChronology *)getInstanceUTC {
  return OrgJodaTimeChronoBuddhistChronology_INSTANCE_UTC_;
}

+ (OrgJodaTimeChronoBuddhistChronology *)getInstance {
  return [OrgJodaTimeChronoBuddhistChronology getInstanceWithOrgJodaTimeDateTimeZone:[OrgJodaTimeDateTimeZone getDefault]];
}

+ (OrgJodaTimeChronoBuddhistChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  OrgJodaTimeChronoBuddhistChronology *chrono = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoBuddhistChronology_cCache_)) getWithId:zone];
  if (chrono == nil) {
    chrono = [[OrgJodaTimeChronoBuddhistChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoGJChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeReadableInstant:nil] withId:nil];
    OrgJodaTimeDateTime *lowerLimit = [[OrgJodaTimeDateTime alloc] initWithInt:1 withInt:1 withInt:1 withInt:0 withInt:0 withInt:0 withInt:0 withOrgJodaTimeChronology:chrono];
    chrono = [[OrgJodaTimeChronoBuddhistChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoLimitChronology getInstanceWithOrgJodaTimeChronology:chrono withOrgJodaTimeReadableDateTime:lowerLimit withOrgJodaTimeReadableDateTime:nil] withId:@""];
    OrgJodaTimeChronoBuddhistChronology *oldChrono = [OrgJodaTimeChronoBuddhistChronology_cCache_ putIfAbsentWithId:zone withId:chrono];
    if (oldChrono != nil) {
      chrono = oldChrono;
    }
  }
  return chrono;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param {
  return [super initWithOrgJodaTimeChronology:base withId:param];
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  return base == nil ? [OrgJodaTimeChronoBuddhistChronology getInstanceUTC] : [OrgJodaTimeChronoBuddhistChronology getInstanceWithOrgJodaTimeDateTimeZone:[base getZone]];
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoBuddhistChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return [OrgJodaTimeChronoBuddhistChronology getInstanceWithOrgJodaTimeDateTimeZone:zone];
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoBuddhistChronology class]]) {
    OrgJodaTimeChronoBuddhistChronology *chrono = (OrgJodaTimeChronoBuddhistChronology *) check_class_cast(obj, [OrgJodaTimeChronoBuddhistChronology class]);
    return [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[((OrgJodaTimeChronoBuddhistChronology *) nil_chk(chrono)) getZone]];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((int) [@"Buddhist" hash]) * 11 + ((int) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]);
}

- (NSString *)description {
  NSString *str = @"BuddhistChronology";
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  if (zone != nil) {
    str = [NSString stringWithFormat:@"%@[%@]", str, [zone getID]];
  }
  return str;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getParam] == nil) {
    ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->eras_ = [OrgJodaTimeFieldUnsupportedDurationField getInstanceWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType eras]];
    OrgJodaTimeDateTimeField *field = fields->year_;
    fields->year_ = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:[[OrgJodaTimeFieldSkipUndoDateTimeField alloc] initWithOrgJodaTimeChronology:self withOrgJodaTimeDateTimeField:field] withInt:OrgJodaTimeChronoBuddhistChronology_BUDDHIST_OFFSET];
    field = fields->yearOfEra_;
    fields->yearOfEra_ = [[OrgJodaTimeFieldDelegatedDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->year_ withOrgJodaTimeDurationField:fields->eras_ withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType yearOfEra]];
    field = fields->weekyear_;
    fields->weekyear_ = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:[[OrgJodaTimeFieldSkipUndoDateTimeField alloc] initWithOrgJodaTimeChronology:self withOrgJodaTimeDateTimeField:field] withInt:OrgJodaTimeChronoBuddhistChronology_BUDDHIST_OFFSET];
    field = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->yearOfEra_ withInt:99];
    fields->centuryOfEra_ = [[OrgJodaTimeFieldDividedDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDurationField:fields->eras_ withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType centuryOfEra] withInt:100];
    fields->centuries_ = [fields->centuryOfEra_ getDurationField];
    field = [[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *) check_class_cast(fields->centuryOfEra_, [OrgJodaTimeFieldDividedDateTimeField class])];
    fields->yearOfCentury_ = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType yearOfCentury] withInt:1];
    field = [[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeDateTimeField:fields->weekyear_ withOrgJodaTimeDurationField:fields->centuries_ withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyearOfCentury] withInt:100];
    fields->weekyearOfCentury_ = [[OrgJodaTimeFieldOffsetDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyearOfCentury] withInt:1];
    fields->era_ = OrgJodaTimeChronoBuddhistChronology_ERA_FIELD_;
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoBuddhistChronology class]) {
    OrgJodaTimeChronoBuddhistChronology_ERA_FIELD_ = [[OrgJodaTimeChronoBasicSingleEraDateTimeField alloc] initWithNSString:@"BE"];
    OrgJodaTimeChronoBuddhistChronology_cCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    OrgJodaTimeChronoBuddhistChronology_INSTANCE_UTC_ = [OrgJodaTimeChronoBuddhistChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
    OrgJodaTimeChronoBuddhistChronology_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.BuddhistChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.BuddhistChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.BuddhistChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withId:", "BuddhistChronology", NULL, 0x2, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_BuddhistChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBuddhistChronology_serialVersionUID },
    { "BE_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBuddhistChronology_BE },
    { "ERA_FIELD_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoBuddhistChronology_ERA_FIELD_,  },
    { "BUDDHIST_OFFSET_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoBuddhistChronology_BUDDHIST_OFFSET },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoBuddhistChronology_cCache_,  },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.BuddhistChronology;", &OrgJodaTimeChronoBuddhistChronology_INSTANCE_UTC_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBuddhistChronology = { "BuddhistChronology", "org.joda.time.chrono", NULL, 0x11, 11, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeChronoBuddhistChronology;
}

@end
