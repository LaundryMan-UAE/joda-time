//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/ZonedChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IllegalFieldValueException.h"
#include "IllegalInstantException.h"
#include "ReadablePartial.h"
#include "ZonedChronology.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeChronoZonedChronology

+ (OrgJodaTimeChronoZonedChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                               withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(base, zone);
}

+ (jboolean)useTimeArithmeticWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  return OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(field);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                  withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithOrgJodaTimeChronology:base withId:zone];
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return (OrgJodaTimeDateTimeZone *) check_class_cast([self getParam], [OrgJodaTimeDateTimeZone class]);
}

- (OrgJodaTimeChronology *)withUTC {
  return [self getBase];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getParam]) {
    return self;
  }
  if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
    return [self getBase];
  }
  return [[[OrgJodaTimeChronoZonedChronology alloc] initWithOrgJodaTimeChronology:[self getBase] withOrgJodaTimeDateTimeZone:zone] autorelease];
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  return [self localToUTCWithLong:[((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay]];
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  return [self localToUTCWithLong:[((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond]];
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  return [self localToUTCWithLong:[((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithLong:instant + [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getOffsetWithLong:instant] withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond]];
}

- (jlong)localToUTCWithLong:(jlong)localInstant {
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getOffsetFromLocalWithLong:localInstant];
  jlong utcInstant = localInstant - offset;
  jint offsetBasedOnUtc = [zone getOffsetWithLong:utcInstant];
  if (offset != offsetBasedOnUtc) {
    @throw [[[OrgJodaTimeIllegalInstantException alloc] initWithLong:localInstant withNSString:[zone getID]] autorelease];
  }
  return utcInstant;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JavaUtilHashMap *converted = [[[JavaUtilHashMap alloc] init] autorelease];
  OrgJodaTimeChronoAssembledChronology_Fields_set_eras_(nil_chk(fields), [self convertFieldWithOrgJodaTimeDurationField:fields->eras_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->centuries_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_years_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->years_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_months_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->months_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->weekyears_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weeks_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->weeks_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_days_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->days_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdays_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->halfdays_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hours_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->hours_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minutes_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->minutes_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_seconds_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->seconds_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millis_(fields, [self convertFieldWithOrgJodaTimeDurationField:fields->millis_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_year_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->year_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfEra_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->yearOfEra_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfCentury_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->yearOfCentury_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuryOfEra_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->centuryOfEra_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_era_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->era_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfWeek_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfWeek_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfMonth_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfYear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfYear_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_monthOfYear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->monthOfYear_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekOfWeekyear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekOfWeekyear_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyear_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekyear_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyearOfCentury_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekyearOfCentury_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->millisOfSecond_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->millisOfDay_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->secondOfMinute_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->secondOfDay_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->minuteOfHour_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->minuteOfDay_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->hourOfDay_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->hourOfHalfday_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->clockhourOfDay_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->clockhourOfHalfday_ withJavaUtilHashMap:converted]);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(fields, [self convertFieldWithOrgJodaTimeDateTimeField:fields->halfdayOfDay_ withJavaUtilHashMap:converted]);
}

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDurationField *) check_class_cast([converted getWithId:field], [OrgJodaTimeDurationField class]);
  }
  OrgJodaTimeChronoZonedChronology_ZonedDurationField *zonedField = [[[OrgJodaTimeChronoZonedChronology_ZonedDurationField alloc] initWithOrgJodaTimeDurationField:field withOrgJodaTimeDateTimeZone:[self getZone]] autorelease];
  [converted putWithId:field withId:zonedField];
  return zonedField;
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDateTimeField *) check_class_cast([converted getWithId:field], [OrgJodaTimeDateTimeField class]);
  }
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *zonedField = [[[OrgJodaTimeChronoZonedChronology_ZonedDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeZone:[self getZone] withOrgJodaTimeDurationField:[self convertFieldWithOrgJodaTimeDurationField:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField] withJavaUtilHashMap:converted] withOrgJodaTimeDurationField:[self convertFieldWithOrgJodaTimeDurationField:[field getRangeDurationField] withJavaUtilHashMap:converted] withOrgJodaTimeDurationField:[self convertFieldWithOrgJodaTimeDurationField:[field getLeapDurationField] withJavaUtilHashMap:converted]] autorelease];
  [converted putWithId:field withId:zonedField];
  return zonedField;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology class]] == NO) {
    return NO;
  }
  OrgJodaTimeChronoZonedChronology *chrono = (OrgJodaTimeChronoZonedChronology *) check_class_cast(obj, [OrgJodaTimeChronoZonedChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoZonedChronology *) nil_chk(chrono)) getBase]] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
}

- (NSUInteger)hash {
  return 326565 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) * 11 + ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
}

- (NSString *)description {
  return JreStrcat("$@$$C", @"ZonedChronology[", [self getBase], @", ", [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getID], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.ZonedChronology;", 0x9, NULL },
    { "useTimeArithmeticWithOrgJodaTimeDurationField:", "useTimeArithmetic", "Z", 0x8, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:", "ZonedChronology", NULL, 0x2, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "localToUTCWithLong:", "localToUTC", "J", 0x2, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "convertFieldWithOrgJodaTimeDurationField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DurationField;", 0x2, NULL },
    { "convertFieldWithOrgJodaTimeDateTimeField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DateTimeField;", 0x2, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology = { "ZonedChronology", "org.joda.time.chrono", NULL, 0x11, 16, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeChronoZonedChronology;
}

@end

OrgJodaTimeChronoZonedChronology *OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology_init();
  if (base == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Must supply a chronology"] autorelease];
  }
  base = [((OrgJodaTimeChronology *) nil_chk(base)) withUTC];
  if (base == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"UTC chronology must not be null"] autorelease];
  }
  if (zone == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"DateTimeZone must not be null"] autorelease];
  }
  return [[[OrgJodaTimeChronoZonedChronology alloc] initWithOrgJodaTimeChronology:base withOrgJodaTimeDateTimeZone:zone] autorelease];
}

jboolean OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field) {
  OrgJodaTimeChronoZonedChronology_init();
  return field != nil && [field getUnitMillis] < OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR * 12;
}

@implementation OrgJodaTimeChronoZonedChronology_ZonedDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super initWithOrgJodaTimeDurationFieldType:[((OrgJodaTimeDurationField *) nil_chk(field)) getType]]) {
    if (![field isSupported]) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    OrgJodaTimeChronoZonedChronology_ZonedDurationField_set_iField_(self, field);
    iTimeField_ = OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(field);
    OrgJodaTimeChronoZonedChronology_ZonedDurationField_set_iZone_(self, zone);
  }
  return self;
}

- (jboolean)isPrecise {
  return iTimeField_ ? [((OrgJodaTimeDurationField *) nil_chk(iField_)) isPrecise] : [((OrgJodaTimeDurationField *) nil_chk(iField_)) isPrecise] && [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) isFixed];
}

- (jlong)getUnitMillis {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getUnitMillis];
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getValueWithLong:duration withLong:[self addOffsetWithLong:instant]];
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getValueAsLongWithLong:duration withLong:[self addOffsetWithLong:instant]];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getMillisWithInt:value withLong:[self addOffsetWithLong:instant]];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getMillisWithLong:value withLong:[self addOffsetWithLong:instant]];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  jint offset = [self getOffsetToAddWithLong:instant];
  instant = [((OrgJodaTimeDurationField *) nil_chk(iField_)) addWithLong:instant + offset withInt:value];
  return instant - (iTimeField_ ? offset : [self getOffsetFromLocalToSubtractWithLong:instant]);
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  jint offset = [self getOffsetToAddWithLong:instant];
  instant = [((OrgJodaTimeDurationField *) nil_chk(iField_)) addWithLong:instant + offset withLong:value];
  return instant - (iTimeField_ ? offset : [self getOffsetFromLocalToSubtractWithLong:instant]);
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  jint offset = [self getOffsetToAddWithLong:subtrahendInstant];
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getDifferenceWithLong:minuendInstant + (iTimeField_ ? offset : [self getOffsetToAddWithLong:minuendInstant]) withLong:subtrahendInstant + offset];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  jint offset = [self getOffsetToAddWithLong:subtrahendInstant];
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getDifferenceAsLongWithLong:minuendInstant + (iTimeField_ ? offset : [self getOffsetToAddWithLong:minuendInstant]) withLong:subtrahendInstant + offset];
}

- (jint)getOffsetToAddWithLong:(jlong)instant {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetWithLong:instant];
  jlong sum = instant + offset;
  if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Adding time zone offset caused overflow"] autorelease];
  }
  return offset;
}

- (jint)getOffsetFromLocalToSubtractWithLong:(jlong)instant {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetFromLocalWithLong:instant];
  jlong diff = instant - offset;
  if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Subtracting time zone offset caused overflow"] autorelease];
  }
  return offset;
}

- (jlong)addOffsetWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology_ZonedDurationField class]]) {
    OrgJodaTimeChronoZonedChronology_ZonedDurationField *other = (OrgJodaTimeChronoZonedChronology_ZonedDurationField *) check_class_cast(obj, [OrgJodaTimeChronoZonedChronology_ZonedDurationField class]);
    return [((OrgJodaTimeDurationField *) nil_chk(iField_)) isEqual:((OrgJodaTimeChronoZonedChronology_ZonedDurationField *) nil_chk(other))->iField_] && [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:other->iZone_];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [((OrgJodaTimeDurationField *) nil_chk(iField_)) hash]) ^ ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

- (void)dealloc {
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_set_iField_(self, nil);
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_set_iZone_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoZonedChronology_ZonedDurationField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_set_iField_(other, iField_);
  other->iTimeField_ = iTimeField_;
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_set_iZone_(other, iZone_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDurationField:withOrgJodaTimeDateTimeZone:", "ZonedDurationField", NULL, 0x0, NULL },
    { "isPrecise", NULL, "Z", 0x1, NULL },
    { "getUnitMillis", NULL, "J", 0x1, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:withLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getMillisWithInt:withLong:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:withLong:", "getMillis", "J", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getOffsetToAddWithLong:", "getOffsetToAdd", "I", 0x2, NULL },
    { "getOffsetFromLocalToSubtractWithLong:", "getOffsetFromLocalToSubtract", "I", 0x2, NULL },
    { "addOffsetWithLong:", "addOffset", "J", 0x2, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_ZonedDurationField_serialVersionUID },
    { "iField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL,  },
    { "iTimeField_", NULL, 0x10, "Z", NULL,  },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology_ZonedDurationField = { "ZonedDurationField", "org.joda.time.chrono", "ZonedChronology", 0x8, 16, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeChronoZonedChronology_ZonedDurationField;
}

@end

@implementation OrgJodaTimeChronoZonedChronology_ZonedDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getType]]) {
    if (![field isSupported]) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iField_(self, field);
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iZone_(self, zone);
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iDurationField_(self, durationField);
    iTimeField_ = OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(durationField);
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iRangeDurationField_(self, rangeDurationField);
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iLeapDurationField_(self, leapDurationField);
  }
  return self;
}

- (jboolean)isLenient {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLenient];
}

- (jint)getWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getWithLong:localInstant];
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsTextWithLong:localInstant withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsShortTextWithLong:localInstant withJavaUtilLocale:locale];
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  if (iTimeField_) {
    jint offset = [self getOffsetToAddWithLong:instant];
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:instant + offset withInt:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:localInstant withInt:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
  }
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  if (iTimeField_) {
    jint offset = [self getOffsetToAddWithLong:instant];
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:instant + offset withLong:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:localInstant withLong:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
  }
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)value {
  if (iTimeField_) {
    jint offset = [self getOffsetToAddWithLong:instant];
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:instant + offset withInt:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:localInstant withInt:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
  }
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:localInstant withInt:value];
  jlong result = [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
  if ([self getWithLong:result] != value) {
    OrgJodaTimeIllegalInstantException *cause = [[[OrgJodaTimeIllegalInstantException alloc] initWithLong:localInstant withNSString:[iZone_ getID]] autorelease];
    OrgJodaTimeIllegalFieldValueException *ex = [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[iField_ getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSString:[cause getMessage]] autorelease];
    [ex initCauseWithJavaLangThrowable:cause];
    @throw ex;
  }
  return result;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:localInstant withNSString:text withJavaUtilLocale:locale];
  return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  jint offset = [self getOffsetToAddWithLong:subtrahendInstant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDifferenceWithLong:minuendInstant + (iTimeField_ ? offset : [self getOffsetToAddWithLong:minuendInstant]) withLong:subtrahendInstant + offset];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  jint offset = [self getOffsetToAddWithLong:subtrahendInstant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDifferenceAsLongWithLong:minuendInstant + (iTimeField_ ? offset : [self getOffsetToAddWithLong:minuendInstant]) withLong:subtrahendInstant + offset];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLeapWithLong:localInstant];
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getLeapAmountWithLong:localInstant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return iLeapDurationField_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if (iTimeField_) {
    jint offset = [self getOffsetToAddWithLong:instant];
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:instant + offset];
    return instant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:localInstant];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
  }
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if (iTimeField_) {
    jint offset = [self getOffsetToAddWithLong:instant];
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:instant + offset];
    return instant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:localInstant];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
  }
}

- (jlong)remainderWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) remainderWithLong:localInstant];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValue];
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithLong:localInstant];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithOrgJodaTimeReadablePartial:instant];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValue];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithLong:localInstant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithOrgJodaTimeReadablePartial:instant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (jint)getOffsetToAddWithLong:(jlong)instant {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetWithLong:instant];
  jlong sum = instant + offset;
  if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Adding time zone offset caused overflow"] autorelease];
  }
  return offset;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology_ZonedDateTimeField class]]) {
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *other = (OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *) check_class_cast(obj, [OrgJodaTimeChronoZonedChronology_ZonedDateTimeField class]);
    return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isEqual:((OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *) nil_chk(other))->iField_] && [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:other->iZone_] && [((OrgJodaTimeDurationField *) nil_chk(iDurationField_)) isEqual:other->iDurationField_] && [((OrgJodaTimeDurationField *) nil_chk(iRangeDurationField_)) isEqual:other->iRangeDurationField_];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) hash]) ^ ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

- (void)dealloc {
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iField_(self, nil);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iZone_(self, nil);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iDurationField_(self, nil);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iRangeDurationField_(self, nil);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iLeapDurationField_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iField_(other, iField_);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iZone_(other, iZone_);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iDurationField_(other, iDurationField_);
  other->iTimeField_ = iTimeField_;
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iRangeDurationField_(other, iRangeDurationField_);
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_set_iLeapDurationField_(other, iLeapDurationField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeZone:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "ZonedDateTimeField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithInt:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL },
    { "getOffsetToAddWithLong:", "getOffsetToAdd", "I", 0x2, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_serialVersionUID },
    { "iField_", NULL, 0x10, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL,  },
    { "iTimeField_", NULL, 0x10, "Z", NULL,  },
    { "iRangeDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL,  },
    { "iLeapDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology_ZonedDateTimeField = { "ZonedDateTimeField", "org.joda.time.chrono", "ZonedChronology", 0x18, 35, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField;
}

@end
