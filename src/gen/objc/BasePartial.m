//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/base/BasePartial.java
//

#include "AbstractPartial.h"
#include "BasePartial.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTimeField.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "PartialConverter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeBaseBasePartial

- (instancetype)init {
  return [self initOrgJodaTimeBaseBasePartialWithLong:[OrgJodaTimeDateTimeUtils currentTimeMillis] withOrgJodaTimeChronology:nil];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeBaseBasePartialWithLong:[OrgJodaTimeDateTimeUtils currentTimeMillis] withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(long long int)instant {
  return [self initOrgJodaTimeBaseBasePartialWithLong:instant withOrgJodaTimeChronology:nil];
}

- (instancetype)initOrgJodaTimeBaseBasePartialWithLong:(long long int)instant
                             withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology];
    iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
    iValues_ = [chronology getWithOrgJodaTimeReadablePartial:self withLong:instant];
  }
  return self;
}

- (instancetype)initWithLong:(long long int)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeBaseBasePartialWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk([OrgJodaTimeConvertConverterManager getInstance])) getPartialConverterWithId:instant];
    chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
    chronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology];
    iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
    iValues_ = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology];
  }
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)parser {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk([OrgJodaTimeConvertConverterManager getInstance])) getPartialConverterWithId:instant];
    chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
    chronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology];
    iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
    iValues_ = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:parser];
  }
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)values
       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology];
    iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
    [chronology validateWithOrgJodaTimeReadablePartial:self withIntArray:values];
    iValues_ = values;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeBaseBasePartial:(OrgJodaTimeBaseBasePartial *)base
                                      withIntArray:(IOSIntArray *)values {
  if (self = [super init]) {
    iChronology_ = ((OrgJodaTimeBaseBasePartial *) nil_chk(base))->iChronology_;
    iValues_ = values;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeBaseBasePartial:(OrgJodaTimeBaseBasePartial *)base
                         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) withUTC];
    iValues_ = ((OrgJodaTimeBaseBasePartial *) nil_chk(base))->iValues_;
  }
  return self;
}

- (int)getValueWithInt:(int)index {
  return IOSIntArray_Get(nil_chk(iValues_), index);
}

- (IOSIntArray *)getValues {
  return (IOSIntArray *) check_class_cast([((IOSIntArray *) nil_chk(iValues_)) clone], [IOSIntArray class]);
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (void)setValueWithInt:(int)index
                withInt:(int)value {
  OrgJodaTimeDateTimeField *field = [self getFieldWithInt:index];
  IOSIntArray *values = [((OrgJodaTimeDateTimeField *) nil_chk(field)) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:iValues_ withInt:value];
  [JavaLangSystem arraycopyWithId:values withInt:0 withId:iValues_ withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(iValues_)) count]];
}

- (void)setValuesWithIntArray:(IOSIntArray *)values {
  [((OrgJodaTimeChronology *) nil_chk([self getChronology])) validateWithOrgJodaTimeReadablePartial:self withIntArray:values];
  [JavaLangSystem arraycopyWithId:values withInt:0 withId:iValues_ withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(iValues_)) count]];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatDateTimeFormat forPatternWithNSString:pattern])) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatDateTimeFormat forPatternWithNSString:pattern])) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

- (int)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBasePartial *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
  other->iValues_ = iValues_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "BasePartial", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeChronology:", "BasePartial", NULL, 0x4, NULL },
    { "initWithLong:", "BasePartial", NULL, 0x4, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "BasePartial", NULL, 0x4, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "BasePartial", NULL, 0x4, NULL },
    { "initWithId:withOrgJodaTimeChronology:withOrgJodaTimeFormatDateTimeFormatter:", "BasePartial", NULL, 0x4, NULL },
    { "initWithIntArray:withOrgJodaTimeChronology:", "BasePartial", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeBaseBasePartial:withIntArray:", "BasePartial", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeBaseBasePartial:withOrgJodaTimeChronology:", "BasePartial", NULL, 0x4, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getValues", NULL, "[I", 0x1, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "setValueWithInt:withInt:", "setValue", "V", 0x4, NULL },
    { "setValuesWithIntArray:", "setValues", "V", 0x4, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "size", NULL, "I", 0x401, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBasePartial_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iValues_", NULL, 0x12, "[I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeBaseBasePartial = { "BasePartial", "org.joda.time.base", NULL, 0x401, 18, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeBaseBasePartial;
}

@end
