//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/Duration.java
//

#include "BaseDuration.h"
#include "DateTimeConstants.h"
#include "Days.h"
#include "Duration.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "Hours.h"
#include "IOSClass.h"
#include "Minutes.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "Seconds.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Long.h"

BOOL OrgJodaTimeDuration_initialized = NO;

@implementation OrgJodaTimeDuration

OrgJodaTimeDuration * OrgJodaTimeDuration_ZERO_;

+ (OrgJodaTimeDuration *)parseWithNSString:(NSString *)str {
  return [[OrgJodaTimeDuration alloc] initWithId:str];
}

+ (OrgJodaTimeDuration *)standardDaysWithLong:(long long int)days {
  if (days == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:[OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:days withInt:OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY]];
}

+ (OrgJodaTimeDuration *)standardHoursWithLong:(long long int)hours {
  if (hours == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:[OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:hours withInt:OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR]];
}

+ (OrgJodaTimeDuration *)standardMinutesWithLong:(long long int)minutes {
  if (minutes == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:[OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:minutes withInt:OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE]];
}

+ (OrgJodaTimeDuration *)standardSecondsWithLong:(long long int)seconds {
  if (seconds == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:[OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:seconds withInt:OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND]];
}

+ (OrgJodaTimeDuration *)millisWithLong:(long long int)millis {
  if (millis == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:millis];
}

- (instancetype)initWithLong:(long long int)duration {
  return [super initWithLong:duration];
}

- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant {
  return [super initWithLong:startInstant withLong:endInstant];
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return [super initWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableInstant:end];
}

- (instancetype)initWithId:(id)duration {
  return [super initWithId:duration];
}

- (long long int)getStandardDays {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (long long int)getStandardHours {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
}

- (long long int)getStandardMinutes {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
}

- (long long int)getStandardSeconds {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
}

- (OrgJodaTimeDuration *)toDuration {
  return self;
}

- (OrgJodaTimeDays *)toStandardDays {
  long long int days = [self getStandardDays];
  return [OrgJodaTimeDays daysWithInt:[OrgJodaTimeFieldFieldUtils safeToIntWithLong:days]];
}

- (OrgJodaTimeHours *)toStandardHours {
  long long int hours = [self getStandardHours];
  return [OrgJodaTimeHours hoursWithInt:[OrgJodaTimeFieldFieldUtils safeToIntWithLong:hours]];
}

- (OrgJodaTimeMinutes *)toStandardMinutes {
  long long int minutes = [self getStandardMinutes];
  return [OrgJodaTimeMinutes minutesWithInt:[OrgJodaTimeFieldFieldUtils safeToIntWithLong:minutes]];
}

- (OrgJodaTimeSeconds *)toStandardSeconds {
  long long int seconds = [self getStandardSeconds];
  return [OrgJodaTimeSeconds secondsWithInt:[OrgJodaTimeFieldFieldUtils safeToIntWithLong:seconds]];
}

- (OrgJodaTimeDuration *)withMillisWithLong:(long long int)duration {
  if (duration == [self getMillis]) {
    return self;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:duration];
}

- (OrgJodaTimeDuration *)withDurationAddedWithLong:(long long int)durationToAdd
                                           withInt:(int)scalar {
  if (durationToAdd == 0 || scalar == 0) {
    return self;
  }
  long long int add = [OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:durationToAdd withInt:scalar];
  long long int duration = [OrgJodaTimeFieldFieldUtils safeAddWithLong:[self getMillis] withLong:add];
  return [[OrgJodaTimeDuration alloc] initWithLong:duration];
}

- (OrgJodaTimeDuration *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                  withInt:(int)scalar {
  if (durationToAdd == nil || scalar == 0) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(durationToAdd)) getMillis] withInt:scalar];
}

- (OrgJodaTimeDuration *)plusWithLong:(long long int)amount {
  return [self withDurationAddedWithLong:amount withInt:1];
}

- (OrgJodaTimeDuration *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)amount {
  if (amount == nil) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(amount)) getMillis] withInt:1];
}

- (OrgJodaTimeDuration *)minusWithLong:(long long int)amount {
  return [self withDurationAddedWithLong:amount withInt:-1];
}

- (OrgJodaTimeDuration *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)amount {
  if (amount == nil) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(amount)) getMillis] withInt:-1];
}

- (OrgJodaTimeDuration *)multipliedByWithLong:(long long int)multiplicand {
  if (multiplicand == 1) {
    return self;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:[OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:[self getMillis] withLong:multiplicand]];
}

- (OrgJodaTimeDuration *)dividedByWithLong:(long long int)divisor {
  if (divisor == 1) {
    return self;
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:[OrgJodaTimeFieldFieldUtils safeDivideWithLong:[self getMillis] withLong:divisor]];
}

- (OrgJodaTimeDuration *)negated {
  if ([self getMillis] == JavaLangLong_MIN_VALUE) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Negation of this duration would overflow"];
  }
  return [[OrgJodaTimeDuration alloc] initWithLong:-[self getMillis]];
}

+ (void)initialize {
  if (self == [OrgJodaTimeDuration class]) {
    OrgJodaTimeDuration_ZERO_ = [[OrgJodaTimeDuration alloc] initWithLong:0LL];
    OrgJodaTimeDuration_initialized = YES;
  }
}
+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertFromString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "parseWithNSString:", "parse", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardDaysWithLong:", "standardDays", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardHoursWithLong:", "standardHours", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardMinutesWithLong:", "standardMinutes", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardSecondsWithLong:", "standardSeconds", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "millisWithLong:", "millis", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "initWithLong:", "Duration", NULL, 0x1, NULL },
    { "initWithLong:withLong:", "Duration", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "Duration", NULL, 0x1, NULL },
    { "initWithId:", "Duration", NULL, 0x1, NULL },
    { "getStandardDays", NULL, "J", 0x1, NULL },
    { "getStandardHours", NULL, "J", 0x1, NULL },
    { "getStandardMinutes", NULL, "J", 0x1, NULL },
    { "getStandardSeconds", NULL, "J", 0x1, NULL },
    { "toDuration", NULL, "Lorg.joda.time.Duration;", 0x1, NULL },
    { "toStandardDays", NULL, "Lorg.joda.time.Days;", 0x1, NULL },
    { "toStandardHours", NULL, "Lorg.joda.time.Hours;", 0x1, NULL },
    { "toStandardMinutes", NULL, "Lorg.joda.time.Minutes;", 0x1, NULL },
    { "toStandardSeconds", NULL, "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "withMillisWithLong:", "withMillis", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "withDurationAddedWithLong:withInt:", "withDurationAdded", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "withDurationAddedWithOrgJodaTimeReadableDuration:withInt:", "withDurationAdded", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "plusWithLong:", "plus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadableDuration:", "plus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "minusWithLong:", "minus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadableDuration:", "minus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "multipliedByWithLong:", "multipliedBy", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "dividedByWithLong:", "dividedBy", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "negated", NULL, "Lorg.joda.time.Duration;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ZERO_", NULL, 0x19, "Lorg.joda.time.Duration;", &OrgJodaTimeDuration_ZERO_,  },
    { "serialVersionUID_Duration_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDuration_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeDuration = { "Duration", "org.joda.time", NULL, 0x11, 29, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeDuration;
}

@end
