//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/Duration.java
//

#include "BaseDuration.h"
#include "DateTimeConstants.h"
#include "Days.h"
#include "Duration.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "Hours.h"
#include "IOSClass.h"
#include "Minutes.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "Seconds.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Long.h"

BOOL OrgJodaTimeDuration_initialized = NO;

@implementation OrgJodaTimeDuration

OrgJodaTimeDuration * OrgJodaTimeDuration_ZERO_;

+ (OrgJodaTimeDuration *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeDuration_parseWithNSString_(str);
}

+ (OrgJodaTimeDuration *)standardDaysWithLong:(jlong)days {
  return OrgJodaTimeDuration_standardDaysWithLong_(days);
}

+ (OrgJodaTimeDuration *)standardHoursWithLong:(jlong)hours {
  return OrgJodaTimeDuration_standardHoursWithLong_(hours);
}

+ (OrgJodaTimeDuration *)standardMinutesWithLong:(jlong)minutes {
  return OrgJodaTimeDuration_standardMinutesWithLong_(minutes);
}

+ (OrgJodaTimeDuration *)standardSecondsWithLong:(jlong)seconds {
  return OrgJodaTimeDuration_standardSecondsWithLong_(seconds);
}

+ (OrgJodaTimeDuration *)millisWithLong:(jlong)millis {
  return OrgJodaTimeDuration_millisWithLong_(millis);
}

- (instancetype)initWithLong:(jlong)duration {
  return [super initWithLong:duration];
}

- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant {
  return [super initWithLong:startInstant withLong:endInstant];
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return [super initWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableInstant:end];
}

- (instancetype)initWithId:(id)duration {
  return [super initWithId:duration];
}

- (jlong)getStandardDays {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jlong)getStandardHours {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
}

- (jlong)getStandardMinutes {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
}

- (jlong)getStandardSeconds {
  return [self getMillis] / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
}

- (OrgJodaTimeDuration *)toDuration {
  return self;
}

- (OrgJodaTimeDays *)toStandardDays {
  jlong days = [self getStandardDays];
  return OrgJodaTimeDays_daysWithInt_(OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(days));
}

- (OrgJodaTimeHours *)toStandardHours {
  jlong hours = [self getStandardHours];
  return OrgJodaTimeHours_hoursWithInt_(OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(hours));
}

- (OrgJodaTimeMinutes *)toStandardMinutes {
  jlong minutes = [self getStandardMinutes];
  return OrgJodaTimeMinutes_minutesWithInt_(OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(minutes));
}

- (OrgJodaTimeSeconds *)toStandardSeconds {
  jlong seconds = [self getStandardSeconds];
  return OrgJodaTimeSeconds_secondsWithInt_(OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(seconds));
}

- (OrgJodaTimeDuration *)withMillisWithLong:(jlong)duration {
  if (duration == [self getMillis]) {
    return self;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:duration] autorelease];
}

- (OrgJodaTimeDuration *)withDurationAddedWithLong:(jlong)durationToAdd
                                           withInt:(jint)scalar {
  if (durationToAdd == 0 || scalar == 0) {
    return self;
  }
  jlong add = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(durationToAdd, scalar);
  jlong duration = OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_([self getMillis], add);
  return [[[OrgJodaTimeDuration alloc] initWithLong:duration] autorelease];
}

- (OrgJodaTimeDuration *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                  withInt:(jint)scalar {
  if (durationToAdd == nil || scalar == 0) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(durationToAdd)) getMillis] withInt:scalar];
}

- (OrgJodaTimeDuration *)plusWithLong:(jlong)amount {
  return [self withDurationAddedWithLong:amount withInt:1];
}

- (OrgJodaTimeDuration *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)amount {
  if (amount == nil) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(amount)) getMillis] withInt:1];
}

- (OrgJodaTimeDuration *)minusWithLong:(jlong)amount {
  return [self withDurationAddedWithLong:amount withInt:-1];
}

- (OrgJodaTimeDuration *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)amount {
  if (amount == nil) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(amount)) getMillis] withInt:-1];
}

- (OrgJodaTimeDuration *)multipliedByWithLong:(jlong)multiplicand {
  if (multiplicand == 1) {
    return self;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withLong_([self getMillis], multiplicand)] autorelease];
}

- (OrgJodaTimeDuration *)dividedByWithLong:(jlong)divisor {
  if (divisor == 1) {
    return self;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:OrgJodaTimeFieldFieldUtils_safeDivideWithLong_withLong_([self getMillis], divisor)] autorelease];
}

- (OrgJodaTimeDuration *)negated {
  if ([self getMillis] == JavaLangLong_MIN_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Negation of this duration would overflow"] autorelease];
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:-[self getMillis]] autorelease];
}

+ (void)initialize {
  if (self == [OrgJodaTimeDuration class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeDuration_ZERO_, nil, [[OrgJodaTimeDuration alloc] initWithLong:0LL]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDuration)
  }
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parseWithNSString:", "parse", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardDaysWithLong:", "standardDays", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardHoursWithLong:", "standardHours", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardMinutesWithLong:", "standardMinutes", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "standardSecondsWithLong:", "standardSeconds", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "millisWithLong:", "millis", "Lorg.joda.time.Duration;", 0x9, NULL },
    { "initWithLong:", "Duration", NULL, 0x1, NULL },
    { "initWithLong:withLong:", "Duration", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "Duration", NULL, 0x1, NULL },
    { "initWithId:", "Duration", NULL, 0x1, NULL },
    { "getStandardDays", NULL, "J", 0x1, NULL },
    { "getStandardHours", NULL, "J", 0x1, NULL },
    { "getStandardMinutes", NULL, "J", 0x1, NULL },
    { "getStandardSeconds", NULL, "J", 0x1, NULL },
    { "toDuration", NULL, "Lorg.joda.time.Duration;", 0x1, NULL },
    { "toStandardDays", NULL, "Lorg.joda.time.Days;", 0x1, NULL },
    { "toStandardHours", NULL, "Lorg.joda.time.Hours;", 0x1, NULL },
    { "toStandardMinutes", NULL, "Lorg.joda.time.Minutes;", 0x1, NULL },
    { "toStandardSeconds", NULL, "Lorg.joda.time.Seconds;", 0x1, NULL },
    { "withMillisWithLong:", "withMillis", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "withDurationAddedWithLong:withInt:", "withDurationAdded", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "withDurationAddedWithOrgJodaTimeReadableDuration:withInt:", "withDurationAdded", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "plusWithLong:", "plus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadableDuration:", "plus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "minusWithLong:", "minus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadableDuration:", "minus", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "multipliedByWithLong:", "multipliedBy", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "dividedByWithLong:", "dividedBy", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "negated", NULL, "Lorg.joda.time.Duration;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO_", NULL, 0x19, "Lorg.joda.time.Duration;", &OrgJodaTimeDuration_ZERO_,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDuration_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDuration = { "Duration", "org.joda.time", NULL, 0x11, 29, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeDuration;
}

@end

OrgJodaTimeDuration *OrgJodaTimeDuration_parseWithNSString_(NSString *str) {
  OrgJodaTimeDuration_init();
  return [[[OrgJodaTimeDuration alloc] initWithId:str] autorelease];
}

OrgJodaTimeDuration *OrgJodaTimeDuration_standardDaysWithLong_(jlong days) {
  OrgJodaTimeDuration_init();
  if (days == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(days, OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY)] autorelease];
}

OrgJodaTimeDuration *OrgJodaTimeDuration_standardHoursWithLong_(jlong hours) {
  OrgJodaTimeDuration_init();
  if (hours == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(hours, OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR)] autorelease];
}

OrgJodaTimeDuration *OrgJodaTimeDuration_standardMinutesWithLong_(jlong minutes) {
  OrgJodaTimeDuration_init();
  if (minutes == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(minutes, OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE)] autorelease];
}

OrgJodaTimeDuration *OrgJodaTimeDuration_standardSecondsWithLong_(jlong seconds) {
  OrgJodaTimeDuration_init();
  if (seconds == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(seconds, OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND)] autorelease];
}

OrgJodaTimeDuration *OrgJodaTimeDuration_millisWithLong_(jlong millis) {
  OrgJodaTimeDuration_init();
  if (millis == 0) {
    return OrgJodaTimeDuration_ZERO_;
  }
  return [[[OrgJodaTimeDuration alloc] initWithLong:millis] autorelease];
}
