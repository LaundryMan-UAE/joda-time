//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/GJChronology.java
//

#ifndef _OrgJodaTimeChronoGJChronology_H_
#define _OrgJodaTimeChronoGJChronology_H_

@class IOSIntArray;
@class JavaUtilConcurrentConcurrentHashMap;
@class JavaUtilLocale;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronoGregorianChronology;
@class OrgJodaTimeChronoJulianChronology;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;
@class OrgJodaTimeInstant;
@protocol OrgJodaTimeReadableInstant;
@protocol OrgJodaTimeReadablePartial;

#import "JreEmulation.h"
#include "AssembledChronology.h"
#include "BaseDateTimeField.h"
#include "DecoratedDurationField.h"

#define OrgJodaTimeChronoGJChronology_serialVersionUID -2545574827706931671LL

/**
 @brief Implements the Gregorian/Julian calendar system which is the calendar system used in most of the world.
 Wherever possible, it is recommended to use the ISOChronology instead. <p> The Gregorian calendar replaced the Julian calendar, and the point in time when this chronology switches can be controlled using the second parameter of the getInstance method. By default this cutover is set to the date the Gregorian calendar was first instituted, October 15, 1582. <p> Before this date, this chronology uses the proleptic Julian calendar (proleptic means extending indefinitely). The Julian calendar has leap years every four years, whereas the Gregorian has special rules for 100 and 400 years. A meaningful result will thus be obtained for all input values. However before 8 CE, Julian leap years were irregular, and before 45 BCE there was no Julian calendar. <p> This chronology differs from java.util.GregorianCalendar GregorianCalendar in that years in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1. The yearOfEra field produces results compatible with GregorianCalendar. <p> The Julian calendar does not have a year zero, and so year -1 is followed by year 1. If the Gregorian cutover date is specified at or before year -1 (Julian), year zero is defined. In other words, the proleptic Gregorian chronology used by this class has a year zero. <p> To create a pure proleptic Julian chronology, use JulianChronology , and to create a pure proleptic Gregorian chronology, use GregorianChronology . <p> GJChronology is thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeChronoGJChronology : OrgJodaTimeChronoAssembledChronology {
 @public
  OrgJodaTimeChronoJulianChronology *iJulianChronology_;
  OrgJodaTimeChronoGregorianChronology *iGregorianChronology_;
  OrgJodaTimeInstant *iCutoverInstant_;
  jlong iCutoverMillis_;
  jlong iGapDuration_;
}

/**
 @brief Convert a datetime from one chronology to another.
 */
+ (jlong)convertByYearWithLong:(jlong)instant
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to;

/**
 @brief Convert a datetime from one chronology to another.
 */
+ (jlong)convertByWeekyearWithLong:(jlong)instant
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to;

/**
 @brief Factory method returns instances of the default GJ cutover chronology.
 This uses a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by October 15, 1582 (Gregorian). <p>The first day of the week is designated to be org.joda.time.DateTimeConstants#MONDAY Monday , and the minimum days in the first week of the year is 4. <p>The time zone of the returned instance is UTC.
 */
+ (OrgJodaTimeChronoGJChronology *)getInstanceUTC;

/**
 @brief Factory method returns instances of the default GJ cutover chronology.
 This uses a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by October 15, 1582 (Gregorian). <p>The first day of the week is designated to be org.joda.time.DateTimeConstants#MONDAY Monday , and the minimum days in the first week of the year is 4. <p>The returned chronology is in the default time zone.
 */
+ (OrgJodaTimeChronoGJChronology *)getInstance;

/**
 @brief Factory method returns instances of the GJ cutover chronology.
 This uses a cutover date of October 15, 1582 (Gregorian) 00:00:00 UTC. For this value, October 4, 1582 (Julian) is followed by October 15, 1582 (Gregorian). <p>The first day of the week is designated to be org.joda.time.DateTimeConstants#MONDAY Monday , and the minimum days in the first week of the year is 4.
 @param zone the time zone to use, null is default
 */
+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Factory method returns instances of the GJ cutover chronology.
 Any cutover date may be specified. <p>The first day of the week is designated to be org.joda.time.DateTimeConstants#MONDAY Monday , and the minimum days in the first week of the year is 4.
 @param zone the time zone to use, null is default
 @param gregorianCutover the cutover to use, null means default
 */
+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover;

/**
 @brief Factory method returns instances of the GJ cutover chronology.
 Any cutover date may be specified.
 @param zone the time zone to use, null is default
 @param gregorianCutover the cutover to use, null means default
 @param minDaysInFirstWeek minimum number of days in first week of the year; default is 4
 */
+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover
                                                                  withInt:(jint)minDaysInFirstWeek;

/**
 @brief Factory method returns instances of the GJ cutover chronology.
 Any cutover date may be specified.
 @param zone the time zone to use, null is default
 @param gregorianCutover the cutover to use
 @param minDaysInFirstWeek minimum number of days in first week of the year; default is 4
 */
+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                 withLong:(jlong)gregorianCutover
                                                                  withInt:(jint)minDaysInFirstWeek;

/**
 @param julian chronology used before the cutover instant
 @param gregorian chronology used at and after the cutover instant
 @param cutoverInstant instant when the gregorian chronology began
 */
- (instancetype)initWithOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
                 withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                                   withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant;

/**
 @brief Called when applying a time zone.
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
        withOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
     withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                       withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant;

/**
 @brief Serialization singleton
 */
- (id)readResolve;

- (OrgJodaTimeDateTimeZone *)getZone;

/**
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/**
 @brief Gets the Chronology in a specific time zone.
 @param zone the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay;

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond;

/**
 @brief Gets the cutover instant between Gregorian and Julian chronologies.
 @return the cutover instant
 */
- (OrgJodaTimeInstant *)getGregorianCutover;

/**
 @brief Gets the minimum days needed for a week to be the first week in a year.
 @return the minimum days
 */
- (jint)getMinimumDaysInFirstWeek;

/**
 @brief Checks if this chronology instance equals another.
 @param obj the object to compare to
 @return true if equal
 @since 1.6
 */
- (jboolean)isEqual:(id)obj;

/**
 @brief A suitable hash code for the chronology.
 @return the hash code
 @since 1.6
 */
- (NSUInteger)hash;

/**
 @brief Gets a debugging toString.
 @return a debugging string
 */
- (NSString *)description;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

- (jlong)julianToGregorianByYearWithLong:(jlong)instant;

- (jlong)gregorianToJulianByYearWithLong:(jlong)instant;

- (jlong)julianToGregorianByWeekyearWithLong:(jlong)instant;

- (jlong)gregorianToJulianByWeekyearWithLong:(jlong)instant;

- (void)dealloc;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology *)other;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeChronoGJChronology_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeChronoGJChronology)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iJulianChronology_, OrgJodaTimeChronoJulianChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iGregorianChronology_, OrgJodaTimeChronoGregorianChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iCutoverInstant_, OrgJodaTimeInstant *)
FOUNDATION_EXPORT OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceUTC();
FOUNDATION_EXPORT OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstance();
FOUNDATION_EXPORT OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);
FOUNDATION_EXPORT OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_(OrgJodaTimeDateTimeZone *zone, id<OrgJodaTimeReadableInstant> gregorianCutover);
FOUNDATION_EXPORT OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone *zone, id<OrgJodaTimeReadableInstant> gregorianCutover, jint minDaysInFirstWeek);
FOUNDATION_EXPORT OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withLong_withInt_(OrgJodaTimeDateTimeZone *zone, jlong gregorianCutover, jint minDaysInFirstWeek);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGJChronology, serialVersionUID, jlong)

FOUNDATION_EXPORT OrgJodaTimeInstant *OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGJChronology, DEFAULT_CUTOVER_, OrgJodaTimeInstant *)

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGJChronology_cCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGJChronology, cCache_, JavaUtilConcurrentConcurrentHashMap *)

#define OrgJodaTimeChronoGJChronology_CutoverField_serialVersionUID 3528501219481026402LL

/**
 @brief This basic cutover field adjusts calls to 'get' and 'set' methods, and assumes that calls to add and addWrapField are unaffected by the cutover.
 */
@interface OrgJodaTimeChronoGJChronology_CutoverField : OrgJodaTimeFieldBaseDateTimeField {
 @public
  OrgJodaTimeChronoGJChronology *this$0_;
  OrgJodaTimeDateTimeField *iJulianField_;
  OrgJodaTimeDateTimeField *iGregorianField_;
  jlong iCutover_;
  jboolean iConvertByWeekyear_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
}

/**
 @param julianField field from the chronology used before the cutover instant
 @param gregorianField field from the chronology used at and after the cutover
 @param cutoverMillis the millis of the cutover
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis;

/**
 @param julianField field from the chronology used before the cutover instant
 @param gregorianField field from the chronology used at and after the cutover
 @param cutoverMillis the millis of the cutover
 @param convertByWeekyear
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear;

/**
 @param julianField field from the chronology used before the cutover instant
 @param gregorianField field from the chronology used at and after the cutover
 @param rangeField the range field
 @param cutoverMillis the millis of the cutover
 @param convertByWeekyear
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear;

- (jboolean)isLenient;

- (jint)getWithLong:(jlong)instant;

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(jint)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(jint)valueToAdd;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeDurationField *)getDurationField;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jboolean)isLeapWithLong:(jlong)instant;

- (jint)getLeapAmountWithLong:(jlong)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (jint)getMinimumValue;

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values;

- (jint)getMinimumValueWithLong:(jlong)instant;

- (jint)getMaximumValue;

- (jint)getMaximumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values;

- (jlong)roundFloorWithLong:(jlong)instant;

- (jlong)roundCeilingWithLong:(jlong)instant;

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)julianToGregorianWithLong:(jlong)instant;

- (jlong)gregorianToJulianWithLong:(jlong)instant;

- (void)dealloc;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_CutoverField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoGJChronology_CutoverField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, this$0_, OrgJodaTimeChronoGJChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iJulianField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iGregorianField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iRangeDurationField_, OrgJodaTimeDurationField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGJChronology_CutoverField, serialVersionUID, jlong)

#define OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_serialVersionUID 3410248757173576441LL

/**
 @brief Cutover field for variable length fields.
 These fields internally call set whenever add is called. As a result, the same correction applied to set must be applied to add and addWrapField. Knowing when to use this field requires specific knowledge of how the GJ fields are implemented.
 */
@interface OrgJodaTimeChronoGJChronology_ImpreciseCutoverField : OrgJodaTimeChronoGJChronology_CutoverField {
 @public
  OrgJodaTimeChronoGJChronology *this$1_;
}

/**
 @brief Creates a duration field that links back to this.
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis;

/**
 @brief Uses a shared duration field rather than creating a new one.
 @param durationField shared duration field
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis;

/**
 @brief Uses shared duration fields rather than creating a new one.
 @param durationField shared duration field
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                                             withLong:(jlong)cutoverMillis;

/**
 @brief Uses a shared duration field rather than creating a new one.
 @param durationField shared duration field
 */
- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jint)getMinimumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithLong:(jlong)instant;

- (void)dealloc;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, this$1_, OrgJodaTimeChronoGJChronology *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, serialVersionUID, jlong)

#define OrgJodaTimeChronoGJChronology_LinkedDurationField_serialVersionUID 4097975388007713084LL

/**
 @brief Links the duration back to a ImpreciseCutoverField.
 */
@interface OrgJodaTimeChronoGJChronology_LinkedDurationField : OrgJodaTimeFieldDecoratedDurationField {
 @public
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *iField_LinkedDurationField_;
}

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)dateTimeField;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (void)dealloc;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJChronology_LinkedDurationField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoGJChronology_LinkedDurationField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_LinkedDurationField, iField_LinkedDurationField_, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGJChronology_LinkedDurationField, serialVersionUID, jlong)

#endif // _OrgJodaTimeChronoGJChronology_H_
