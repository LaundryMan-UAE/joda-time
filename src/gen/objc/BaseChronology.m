//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/BaseChronology.java
//

#include "BaseChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IllegalFieldValueException.h"
#include "J2ObjC_source.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "UnsupportedDateTimeField.h"
#include "UnsupportedDurationField.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"

@interface OrgJodaTimeChronoBaseChronology () {
}
@end

@implementation OrgJodaTimeChronoBaseChronology

- (instancetype)init {
  return [super init];
}

- (OrgJodaTimeDateTimeZone *)getZone {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeChronology *)withUTC {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([self year])) setWithLong:0 withInt:year];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self monthOfYear])) setWithLong:instant withInt:monthOfYear];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self dayOfMonth])) setWithLong:instant withInt:dayOfMonth];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self millisOfDay])) setWithLong:instant withInt:millisOfDay];
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([self year])) setWithLong:0 withInt:year];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self monthOfYear])) setWithLong:instant withInt:monthOfYear];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self dayOfMonth])) setWithLong:instant withInt:dayOfMonth];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self hourOfDay])) setWithLong:instant withInt:hourOfDay];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self minuteOfHour])) setWithLong:instant withInt:minuteOfHour];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self secondOfMinute])) setWithLong:instant withInt:secondOfMinute];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self millisOfSecond])) setWithLong:instant withInt:millisOfSecond];
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self hourOfDay])) setWithLong:instant withInt:hourOfDay];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self minuteOfHour])) setWithLong:instant withInt:minuteOfHour];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([self secondOfMinute])) setWithLong:instant withInt:secondOfMinute];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self millisOfSecond])) setWithLong:instant withInt:millisOfSecond];
}

- (void)validateWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                  withIntArray:(IOSIntArray *)values {
  jint size = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size];
  for (jint i = 0; i < size; i++) {
    jint value = IOSIntArray_Get(nil_chk(values), i);
    OrgJodaTimeDateTimeField *field = [partial getFieldWithInt:i];
    if (value < [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMinimumValue]) {
      @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[field getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:JavaLangInteger_valueOfWithInt_([field getMinimumValue]) withNSNumber:nil] autorelease];
    }
    if (value > [field getMaximumValue]) {
      @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[field getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:nil withNSNumber:JavaLangInteger_valueOfWithInt_([field getMaximumValue])] autorelease];
    }
  }
  for (jint i = 0; i < size; i++) {
    jint value = IOSIntArray_Get(nil_chk(values), i);
    OrgJodaTimeDateTimeField *field = [partial getFieldWithInt:i];
    if (value < [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values]) {
      @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[field getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:JavaLangInteger_valueOfWithInt_([field getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values]) withNSNumber:nil] autorelease];
    }
    if (value > [field getMaximumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values]) {
      @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[field getType] withNSNumber:JavaLangInteger_valueOfWithInt_(value) withNSNumber:nil withNSNumber:JavaLangInteger_valueOfWithInt_([field getMaximumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values])] autorelease];
    }
  }
}

- (IOSIntArray *)getWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                          withLong:(jlong)instant {
  jint size = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size];
  IOSIntArray *values = [IOSIntArray arrayWithLength:size];
  for (jint i = 0; i < size; i++) {
    *IOSIntArray_GetRef(values, i) = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:self])) getWithLong:instant];
  }
  return values;
}

- (jlong)setWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                  withLong:(jlong)instant {
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:self])) setWithLong:instant withInt:[partial getValueWithInt:i]];
  }
  return instant;
}

- (IOSIntArray *)getWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withLong:(jlong)startInstant
                                         withLong:(jlong)endInstant {
  jint size = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size];
  IOSIntArray *values = [IOSIntArray arrayWithLength:size];
  if (startInstant != endInstant) {
    for (jint i = 0; i < size; i++) {
      OrgJodaTimeDurationField *field = [((OrgJodaTimeDurationFieldType *) nil_chk([period getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:self];
      jint value = [((OrgJodaTimeDurationField *) nil_chk(field)) getDifferenceWithLong:endInstant withLong:startInstant];
      if (value != 0) {
        startInstant = [field addWithLong:startInstant withInt:value];
      }
      *IOSIntArray_GetRef(values, i) = value;
    }
  }
  return values;
}

- (IOSIntArray *)getWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withLong:(jlong)duration {
  jint size = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size];
  IOSIntArray *values = [IOSIntArray arrayWithLength:size];
  if (duration != 0) {
    jlong current = 0;
    for (jint i = 0; i < size; i++) {
      OrgJodaTimeDurationField *field = [((OrgJodaTimeDurationFieldType *) nil_chk([period getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:self];
      if ([((OrgJodaTimeDurationField *) nil_chk(field)) isPrecise]) {
        jint value = [field getDifferenceWithLong:duration withLong:current];
        current = [field addWithLong:current withInt:value];
        *IOSIntArray_GetRef(values, i) = value;
      }
    }
  }
  return values;
}

- (jlong)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                 withLong:(jlong)instant
                                  withInt:(jint)scalar {
  if (scalar != 0 && period != nil) {
    for (jint i = 0, isize = [period size]; i < isize; i++) {
      jlong value = [period getValueWithInt:i];
      if (value != 0) {
        instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk([period getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:self])) addWithLong:instant withLong:value * scalar];
      }
    }
  }
  return instant;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)duration
             withInt:(jint)scalar {
  if (duration == 0 || scalar == 0) {
    return instant;
  }
  jlong add = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(duration, scalar);
  return OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_(instant, add);
}

- (OrgJodaTimeDurationField *)millis {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_millis());
}

- (OrgJodaTimeDateTimeField *)millisOfSecond {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_millisOfSecond(), [self millis]);
}

- (OrgJodaTimeDateTimeField *)millisOfDay {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_millisOfDay(), [self millis]);
}

- (OrgJodaTimeDurationField *)seconds {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_seconds());
}

- (OrgJodaTimeDateTimeField *)secondOfMinute {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_secondOfMinute(), [self seconds]);
}

- (OrgJodaTimeDateTimeField *)secondOfDay {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_secondOfDay(), [self seconds]);
}

- (OrgJodaTimeDurationField *)minutes {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_minutes());
}

- (OrgJodaTimeDateTimeField *)minuteOfHour {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_minuteOfHour(), [self minutes]);
}

- (OrgJodaTimeDateTimeField *)minuteOfDay {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_minuteOfDay(), [self minutes]);
}

- (OrgJodaTimeDurationField *)hours {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_hours());
}

- (OrgJodaTimeDateTimeField *)hourOfDay {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_hourOfDay(), [self hours]);
}

- (OrgJodaTimeDateTimeField *)clockhourOfDay {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_clockhourOfDay(), [self hours]);
}

- (OrgJodaTimeDurationField *)halfdays {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_halfdays());
}

- (OrgJodaTimeDateTimeField *)hourOfHalfday {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_hourOfHalfday(), [self hours]);
}

- (OrgJodaTimeDateTimeField *)clockhourOfHalfday {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_clockhourOfHalfday(), [self hours]);
}

- (OrgJodaTimeDateTimeField *)halfdayOfDay {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_halfdayOfDay(), [self halfdays]);
}

- (OrgJodaTimeDurationField *)days {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_days());
}

- (OrgJodaTimeDateTimeField *)dayOfWeek {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_dayOfWeek(), [self days]);
}

- (OrgJodaTimeDateTimeField *)dayOfMonth {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_dayOfMonth(), [self days]);
}

- (OrgJodaTimeDateTimeField *)dayOfYear {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_dayOfYear(), [self days]);
}

- (OrgJodaTimeDurationField *)weeks {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_weeks());
}

- (OrgJodaTimeDateTimeField *)weekOfWeekyear {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_weekOfWeekyear(), [self weeks]);
}

- (OrgJodaTimeDurationField *)weekyears {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_weekyears());
}

- (OrgJodaTimeDateTimeField *)weekyear {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_weekyear(), [self weekyears]);
}

- (OrgJodaTimeDateTimeField *)weekyearOfCentury {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_weekyearOfCentury(), [self weekyears]);
}

- (OrgJodaTimeDurationField *)months {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_months());
}

- (OrgJodaTimeDateTimeField *)monthOfYear {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_monthOfYear(), [self months]);
}

- (OrgJodaTimeDurationField *)years {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_years());
}

- (OrgJodaTimeDateTimeField *)year {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_year(), [self years]);
}

- (OrgJodaTimeDateTimeField *)yearOfEra {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_yearOfEra(), [self years]);
}

- (OrgJodaTimeDateTimeField *)yearOfCentury {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_yearOfCentury(), [self years]);
}

- (OrgJodaTimeDurationField *)centuries {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_centuries());
}

- (OrgJodaTimeDateTimeField *)centuryOfEra {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_centuryOfEra(), [self centuries]);
}

- (OrgJodaTimeDurationField *)eras {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_eras());
}

- (OrgJodaTimeDateTimeField *)era {
  return OrgJodaTimeFieldUnsupportedDateTimeField_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_era(), [self eras]);
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BaseChronology", NULL, 0x4, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x401, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x401, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x401, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "validateWithOrgJodaTimeReadablePartial:withIntArray:", "validate", "V", 0x1, NULL },
    { "getWithOrgJodaTimeReadablePartial:withLong:", "get", "[I", 0x1, NULL },
    { "setWithOrgJodaTimeReadablePartial:withLong:", "set", "J", 0x1, NULL },
    { "getWithOrgJodaTimeReadablePeriod:withLong:withLong:", "get", "[I", 0x1, NULL },
    { "getWithOrgJodaTimeReadablePeriod:withLong:", "get", "[I", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePeriod:withLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:withInt:", "add", "J", 0x1, NULL },
    { "millis", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "seconds", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "secondOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "minutes", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "minuteOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "hours", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "clockhourOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "halfdays", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "hourOfHalfday", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "clockhourOfHalfday", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "halfdayOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "days", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "weeks", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "weekyears", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "weekyear", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "weekyearOfCentury", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "months", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "years", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "year", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "centuries", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "eras", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "era", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x401, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBaseChronology_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBaseChronology = { 1, "BaseChronology", "org.joda.time.chrono", NULL, 0x401, 50, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeChronoBaseChronology;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBaseChronology)
