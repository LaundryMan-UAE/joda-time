//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/IllegalFieldValueException.java
//

#include "DateTimeFieldType.h"
#include "DurationFieldType.h"
#include "IOSClass.h"
#include "IllegalFieldValueException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"

@implementation OrgJodaTimeIllegalFieldValueException

+ (NSString *)createMessageWithNSString:(NSString *)fieldName
                           withNSNumber:(NSNumber *)value
                           withNSNumber:(NSNumber *)lowerBound
                           withNSNumber:(NSNumber *)upperBound
                           withNSString:(NSString *)explain {
  JavaLangStringBuilder *buf = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [[JavaLangStringBuilder alloc] init]) appendWithNSString:@"Value "])) appendWithId:value])) appendWithNSString:@" for "])) appendWithNSString:fieldName])) appendWithChar:' '];
  if (lowerBound == nil) {
    if (upperBound == nil) {
      (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"is not supported"];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"must not be larger than "])) appendWithId:upperBound];
    }
  }
  else if (upperBound == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"must not be smaller than "])) appendWithId:lowerBound];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"must be in the range ["])) appendWithId:lowerBound])) appendWithChar:','])) appendWithId:upperBound])) appendWithChar:']'];
  }
  if (explain != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@": "])) appendWithNSString:explain];
  }
  return [((JavaLangStringBuilder *) nil_chk(buf)) description];
}

+ (NSString *)createMessageWithNSString:(NSString *)fieldName
                           withNSString:(NSString *)value {
  JavaLangStringBuffer *buf = [((JavaLangStringBuffer *) [[JavaLangStringBuffer alloc] init]) appendWithNSString:@"Value "];
  if (value == nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:@"null"];
  }
  else {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:'"'];
    (void) [buf appendWithNSString:value];
    (void) [buf appendWithChar:'"'];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:@" for "])) appendWithNSString:fieldName])) appendWithChar:' '])) appendWithNSString:@"is not supported"];
  return [buf description];
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSNumber:(NSNumber *)lowerBound
                                        withNSNumber:(NSNumber *)upperBound {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getName] withNSNumber:value withNSNumber:lowerBound withNSNumber:upperBound withNSString:nil]]) {
    iDateTimeFieldType_ = fieldType;
    iDurationFieldType_ = nil;
    iFieldName_ = [fieldType getName];
    iNumberValue_ = value;
    iStringValue_ = nil;
    iLowerBound_ = lowerBound;
    iUpperBound_ = upperBound;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSString:(NSString *)explain {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getName] withNSNumber:value withNSNumber:nil withNSNumber:nil withNSString:explain]]) {
    iDateTimeFieldType_ = fieldType;
    iDurationFieldType_ = nil;
    iFieldName_ = [fieldType getName];
    iNumberValue_ = value;
    iStringValue_ = nil;
    iLowerBound_ = nil;
    iUpperBound_ = nil;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSNumber:(NSNumber *)lowerBound
                                        withNSNumber:(NSNumber *)upperBound {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:[((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getName] withNSNumber:value withNSNumber:lowerBound withNSNumber:upperBound withNSString:nil]]) {
    iDateTimeFieldType_ = nil;
    iDurationFieldType_ = fieldType;
    iFieldName_ = [fieldType getName];
    iNumberValue_ = value;
    iStringValue_ = nil;
    iLowerBound_ = lowerBound;
    iUpperBound_ = upperBound;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)fieldName
                    withNSNumber:(NSNumber *)value
                    withNSNumber:(NSNumber *)lowerBound
                    withNSNumber:(NSNumber *)upperBound {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:fieldName withNSNumber:value withNSNumber:lowerBound withNSNumber:upperBound withNSString:nil]]) {
    iDateTimeFieldType_ = nil;
    iDurationFieldType_ = nil;
    iFieldName_ = fieldName;
    iNumberValue_ = value;
    iStringValue_ = nil;
    iLowerBound_ = lowerBound;
    iUpperBound_ = upperBound;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSString:(NSString *)value {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getName] withNSString:value]]) {
    iDateTimeFieldType_ = fieldType;
    iDurationFieldType_ = nil;
    iFieldName_ = [fieldType getName];
    iStringValue_ = value;
    iNumberValue_ = nil;
    iLowerBound_ = nil;
    iUpperBound_ = nil;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                        withNSString:(NSString *)value {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:[((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getName] withNSString:value]]) {
    iDateTimeFieldType_ = nil;
    iDurationFieldType_ = fieldType;
    iFieldName_ = [fieldType getName];
    iStringValue_ = value;
    iNumberValue_ = nil;
    iLowerBound_ = nil;
    iUpperBound_ = nil;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)fieldName
                    withNSString:(NSString *)value {
  if (self = [super initWithNSString:[OrgJodaTimeIllegalFieldValueException createMessageWithNSString:fieldName withNSString:value]]) {
    iDateTimeFieldType_ = nil;
    iDurationFieldType_ = nil;
    iFieldName_ = fieldName;
    iStringValue_ = value;
    iNumberValue_ = nil;
    iLowerBound_ = nil;
    iUpperBound_ = nil;
    iMessage_ = [super getMessage];
  }
  return self;
}

- (OrgJodaTimeDateTimeFieldType *)getDateTimeFieldType {
  return iDateTimeFieldType_;
}

- (OrgJodaTimeDurationFieldType *)getDurationFieldType {
  return iDurationFieldType_;
}

- (NSString *)getFieldName {
  return iFieldName_;
}

- (NSNumber *)getIllegalNumberValue {
  return iNumberValue_;
}

- (NSString *)getIllegalStringValue {
  return iStringValue_;
}

- (NSString *)getIllegalValueAsString {
  NSString *value = iStringValue_;
  if (value == nil) {
    value = [NSString valueOf:iNumberValue_];
  }
  return value;
}

- (NSNumber *)getLowerBound {
  return iLowerBound_;
}

- (NSNumber *)getUpperBound {
  return iUpperBound_;
}

- (NSString *)getMessage {
  return iMessage_;
}

- (void)prependMessageWithNSString:(NSString *)message {
  if (iMessage_ == nil) {
    iMessage_ = message;
  }
  else if (message != nil) {
    iMessage_ = [NSString stringWithFormat:@"%@: %@", message, iMessage_];
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeIllegalFieldValueException *)other {
  [super copyAllFieldsTo:other];
  other->iDateTimeFieldType_ = iDateTimeFieldType_;
  other->iDurationFieldType_ = iDurationFieldType_;
  other->iFieldName_ = iFieldName_;
  other->iLowerBound_ = iLowerBound_;
  other->iMessage_ = iMessage_;
  other->iNumberValue_ = iNumberValue_;
  other->iStringValue_ = iStringValue_;
  other->iUpperBound_ = iUpperBound_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createMessageWithNSString:withNSNumber:withNSNumber:withNSNumber:withNSString:", "createMessage", "Ljava.lang.String;", 0xa, NULL },
    { "createMessageWithNSString:withNSString:", "createMessage", "Ljava.lang.String;", 0xa, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withNSNumber:withNSNumber:withNSNumber:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withNSNumber:withNSString:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDurationFieldType:withNSNumber:withNSNumber:withNSNumber:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "initWithNSString:withNSNumber:withNSNumber:withNSNumber:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withNSString:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDurationFieldType:withNSString:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:", "IllegalFieldValueException", NULL, 0x1, NULL },
    { "getDateTimeFieldType", NULL, "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "getDurationFieldType", NULL, "Lorg.joda.time.DurationFieldType;", 0x1, NULL },
    { "getFieldName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getIllegalNumberValue", NULL, "Ljava.lang.Number;", 0x1, NULL },
    { "getIllegalStringValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getIllegalValueAsString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getLowerBound", NULL, "Ljava.lang.Number;", 0x1, NULL },
    { "getUpperBound", NULL, "Ljava.lang.Number;", 0x1, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "prependMessageWithNSString:", "prependMessage", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_IllegalFieldValueException_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeIllegalFieldValueException_serialVersionUID },
    { "iDateTimeFieldType_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
    { "iDurationFieldType_", NULL, 0x12, "Lorg.joda.time.DurationFieldType;", NULL,  },
    { "iFieldName_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iNumberValue_", NULL, 0x12, "Ljava.lang.Number;", NULL,  },
    { "iStringValue_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iLowerBound_", NULL, 0x12, "Ljava.lang.Number;", NULL,  },
    { "iUpperBound_", NULL, 0x12, "Ljava.lang.Number;", NULL,  },
    { "iMessage_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeIllegalFieldValueException = { "IllegalFieldValueException", "org.joda.time", NULL, 0x1, 19, methods, 9, fields, 0, NULL};
  return &_OrgJodaTimeIllegalFieldValueException;
}

@end
