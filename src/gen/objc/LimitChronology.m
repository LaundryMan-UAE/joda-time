//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/LimitChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeZone.h"
#include "DecoratedDateTimeField.h"
#include "DecoratedDurationField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "ISODateTimeFormat.h"
#include "LimitChronology.h"
#include "MutableDateTime.h"
#include "ReadableDateTime.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeChronoLimitChronology

+ (OrgJodaTimeChronoLimitChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)lowerLimit
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)upperLimit {
  if (base == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Must supply a chronology"];
  }
  lowerLimit = lowerLimit == nil ? nil : [lowerLimit toDateTime];
  upperLimit = upperLimit == nil ? nil : [upperLimit toDateTime];
  if (lowerLimit != nil && upperLimit != nil) {
    if (![lowerLimit isBeforeWithOrgJodaTimeReadableInstant:upperLimit]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The lower limit must be come before than the upper limit"];
    }
  }
  return [[OrgJodaTimeChronoLimitChronology alloc] initWithOrgJodaTimeChronology:base withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *) check_class_cast(lowerLimit, [OrgJodaTimeDateTime class]) withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *) check_class_cast(upperLimit, [OrgJodaTimeDateTime class])];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)lowerLimit
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)upperLimit {
  if (self = [super initWithOrgJodaTimeChronology:base withId:nil]) {
    iLowerLimit_ = lowerLimit;
    iUpperLimit_ = upperLimit;
  }
  return self;
}

- (OrgJodaTimeDateTime *)getLowerLimit {
  return iLowerLimit_;
}

- (OrgJodaTimeDateTime *)getUpperLimit {
  return iUpperLimit_;
}

- (OrgJodaTimeChronology *)withUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (zone == [self getZone]) {
    return self;
  }
  if (zone == OrgJodaTimeDateTimeZone_get_UTC_() && iWithUTC_ != nil) {
    return iWithUTC_;
  }
  OrgJodaTimeDateTime *lowerLimit = iLowerLimit_;
  if (lowerLimit != nil) {
    OrgJodaTimeMutableDateTime *mdt = [lowerLimit toMutableDateTime];
    [((OrgJodaTimeMutableDateTime *) nil_chk(mdt)) setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:zone];
    lowerLimit = [mdt toDateTime];
  }
  OrgJodaTimeDateTime *upperLimit = iUpperLimit_;
  if (upperLimit != nil) {
    OrgJodaTimeMutableDateTime *mdt = [upperLimit toMutableDateTime];
    [((OrgJodaTimeMutableDateTime *) nil_chk(mdt)) setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:zone];
    upperLimit = [mdt toDateTime];
  }
  OrgJodaTimeChronoLimitChronology *chrono = [OrgJodaTimeChronoLimitChronology getInstanceWithOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getBase])) withZoneWithOrgJodaTimeDateTimeZone:zone] withOrgJodaTimeReadableDateTime:lowerLimit withOrgJodaTimeReadableDateTime:upperLimit];
  if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
    iWithUTC_ = chrono;
  }
  return chrono;
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay {
  long long int instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond {
  long long int instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (long long int)getDateTimeMillisWithLong:(long long int)instant
                                   withInt:(int)hourOfDay
                                   withInt:(int)minuteOfHour
                                   withInt:(int)secondOfMinute
                                   withInt:(int)millisOfSecond {
  [self checkLimitsWithLong:instant withNSString:nil];
  instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JavaUtilHashMap *converted = [[JavaUtilHashMap alloc] init];
  ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->eras_ = [self convertFieldWithOrgJodaTimeDurationField:fields->eras_ withJavaUtilHashMap:converted];
  fields->centuries_ = [self convertFieldWithOrgJodaTimeDurationField:fields->centuries_ withJavaUtilHashMap:converted];
  fields->years_ = [self convertFieldWithOrgJodaTimeDurationField:fields->years_ withJavaUtilHashMap:converted];
  fields->months_ = [self convertFieldWithOrgJodaTimeDurationField:fields->months_ withJavaUtilHashMap:converted];
  fields->weekyears_ = [self convertFieldWithOrgJodaTimeDurationField:fields->weekyears_ withJavaUtilHashMap:converted];
  fields->weeks_ = [self convertFieldWithOrgJodaTimeDurationField:fields->weeks_ withJavaUtilHashMap:converted];
  fields->days_ = [self convertFieldWithOrgJodaTimeDurationField:fields->days_ withJavaUtilHashMap:converted];
  fields->halfdays_ = [self convertFieldWithOrgJodaTimeDurationField:fields->halfdays_ withJavaUtilHashMap:converted];
  fields->hours_ = [self convertFieldWithOrgJodaTimeDurationField:fields->hours_ withJavaUtilHashMap:converted];
  fields->minutes_ = [self convertFieldWithOrgJodaTimeDurationField:fields->minutes_ withJavaUtilHashMap:converted];
  fields->seconds_ = [self convertFieldWithOrgJodaTimeDurationField:fields->seconds_ withJavaUtilHashMap:converted];
  fields->millis_ = [self convertFieldWithOrgJodaTimeDurationField:fields->millis_ withJavaUtilHashMap:converted];
  fields->year_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->year_ withJavaUtilHashMap:converted];
  fields->yearOfEra_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->yearOfEra_ withJavaUtilHashMap:converted];
  fields->yearOfCentury_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->yearOfCentury_ withJavaUtilHashMap:converted];
  fields->centuryOfEra_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->centuryOfEra_ withJavaUtilHashMap:converted];
  fields->era_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->era_ withJavaUtilHashMap:converted];
  fields->dayOfWeek_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfWeek_ withJavaUtilHashMap:converted];
  fields->dayOfMonth_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfMonth_ withJavaUtilHashMap:converted];
  fields->dayOfYear_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->dayOfYear_ withJavaUtilHashMap:converted];
  fields->monthOfYear_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->monthOfYear_ withJavaUtilHashMap:converted];
  fields->weekOfWeekyear_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekOfWeekyear_ withJavaUtilHashMap:converted];
  fields->weekyear_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekyear_ withJavaUtilHashMap:converted];
  fields->weekyearOfCentury_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->weekyearOfCentury_ withJavaUtilHashMap:converted];
  fields->millisOfSecond_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->millisOfSecond_ withJavaUtilHashMap:converted];
  fields->millisOfDay_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->millisOfDay_ withJavaUtilHashMap:converted];
  fields->secondOfMinute_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->secondOfMinute_ withJavaUtilHashMap:converted];
  fields->secondOfDay_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->secondOfDay_ withJavaUtilHashMap:converted];
  fields->minuteOfHour_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->minuteOfHour_ withJavaUtilHashMap:converted];
  fields->minuteOfDay_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->minuteOfDay_ withJavaUtilHashMap:converted];
  fields->hourOfDay_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->hourOfDay_ withJavaUtilHashMap:converted];
  fields->hourOfHalfday_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->hourOfHalfday_ withJavaUtilHashMap:converted];
  fields->clockhourOfDay_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->clockhourOfDay_ withJavaUtilHashMap:converted];
  fields->clockhourOfHalfday_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->clockhourOfHalfday_ withJavaUtilHashMap:converted];
  fields->halfdayOfDay_ = [self convertFieldWithOrgJodaTimeDateTimeField:fields->halfdayOfDay_ withJavaUtilHashMap:converted];
}

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDurationField *) check_class_cast([converted getWithId:field], [OrgJodaTimeDurationField class]);
  }
  OrgJodaTimeChronoLimitChronology_LimitDurationField *limitField = [[OrgJodaTimeChronoLimitChronology_LimitDurationField alloc] initWithOrgJodaTimeChronoLimitChronology:self withOrgJodaTimeDurationField:field];
  (void) [converted putWithId:field withId:limitField];
  return limitField;
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDateTimeField *) check_class_cast([converted getWithId:field], [OrgJodaTimeDateTimeField class]);
  }
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField *limitField = [[OrgJodaTimeChronoLimitChronology_LimitDateTimeField alloc] initWithOrgJodaTimeChronoLimitChronology:self withOrgJodaTimeDateTimeField:field withOrgJodaTimeDurationField:[self convertFieldWithOrgJodaTimeDurationField:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField] withJavaUtilHashMap:converted] withOrgJodaTimeDurationField:[self convertFieldWithOrgJodaTimeDurationField:[field getRangeDurationField] withJavaUtilHashMap:converted] withOrgJodaTimeDurationField:[self convertFieldWithOrgJodaTimeDurationField:[field getLeapDurationField] withJavaUtilHashMap:converted]];
  (void) [converted putWithId:field withId:limitField];
  return limitField;
}

- (void)checkLimitsWithLong:(long long int)instant
               withNSString:(NSString *)desc {
  OrgJodaTimeDateTime *limit;
  if ((limit = iLowerLimit_) != nil && instant < [((OrgJodaTimeDateTime *) nil_chk(limit)) getMillis]) {
    @throw [[OrgJodaTimeChronoLimitChronology_LimitException alloc] initWithOrgJodaTimeChronoLimitChronology:self withNSString:desc withBoolean:YES];
  }
  if ((limit = iUpperLimit_) != nil && instant >= [((OrgJodaTimeDateTime *) nil_chk(limit)) getMillis]) {
    @throw [[OrgJodaTimeChronoLimitChronology_LimitException alloc] initWithOrgJodaTimeChronoLimitChronology:self withNSString:desc withBoolean:NO];
  }
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoLimitChronology class]] == NO) {
    return NO;
  }
  OrgJodaTimeChronoLimitChronology *chrono = (OrgJodaTimeChronoLimitChronology *) check_class_cast(obj, [OrgJodaTimeChronoLimitChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoLimitChronology *) nil_chk(chrono)) getBase]] && [OrgJodaTimeFieldFieldUtils equalsWithId:[self getLowerLimit] withId:[chrono getLowerLimit]] && [OrgJodaTimeFieldFieldUtils equalsWithId:[self getUpperLimit] withId:[chrono getUpperLimit]];
}

- (NSUInteger)hash {
  int hash_ = 317351877;
  hash_ += ([self getLowerLimit] != nil ? ((int) [((OrgJodaTimeDateTime *) nil_chk([self getLowerLimit])) hash]) : 0);
  hash_ += ([self getUpperLimit] != nil ? ((int) [((OrgJodaTimeDateTime *) nil_chk([self getUpperLimit])) hash]) : 0);
  hash_ += ((int) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
  return hash_;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"LimitChronology[%@, %@, %@]", [((OrgJodaTimeChronology *) nil_chk([self getBase])) description], ([self getLowerLimit] == nil ? @"NoLimit" : [((OrgJodaTimeDateTime *) nil_chk([self getLowerLimit])) description]), ([self getUpperLimit] == nil ? @"NoLimit" : [((OrgJodaTimeDateTime *) nil_chk([self getUpperLimit])) description])];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology *)other {
  [super copyAllFieldsTo:other];
  other->iLowerLimit_ = iLowerLimit_;
  other->iUpperLimit_ = iUpperLimit_;
  other->iWithUTC_ = iWithUTC_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeChronology:withOrgJodaTimeReadableDateTime:withOrgJodaTimeReadableDateTime:", "getInstance", "Lorg.joda.time.chrono.LimitChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTime:withOrgJodaTimeDateTime:", "LimitChronology", NULL, 0x2, NULL },
    { "getLowerLimit", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "getUpperLimit", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "convertFieldWithOrgJodaTimeDurationField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DurationField;", 0x2, NULL },
    { "convertFieldWithOrgJodaTimeDateTimeField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DateTimeField;", 0x2, NULL },
    { "checkLimitsWithLong:withNSString:", "checkLimits", "V", 0x0, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_LimitChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_serialVersionUID },
    { "iLowerLimit_", NULL, 0x10, "Lorg.joda.time.DateTime;", NULL,  },
    { "iUpperLimit_", NULL, 0x10, "Lorg.joda.time.DateTime;", NULL,  },
    { "iWithUTC_", NULL, 0x82, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology = { "LimitChronology", "org.joda.time.chrono", NULL, 0x11, 16, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology;
}

@end

@implementation OrgJodaTimeChronoLimitChronology_LimitException

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                                            withNSString:(NSString *)desc
                                             withBoolean:(BOOL)isLow {
  this$0_ = outer$;
  if (self = [super initWithNSString:desc]) {
    iIsLow_ = isLow;
  }
  return self;
}

- (NSString *)getMessage {
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithInt:85];
  (void) [buf appendWithNSString:@"The"];
  NSString *desc = [super getMessage];
  if (desc != nil) {
    (void) [buf appendWithChar:' '];
    (void) [buf appendWithNSString:desc];
  }
  (void) [buf appendWithNSString:@" instant is "];
  OrgJodaTimeFormatDateTimeFormatter *p = [OrgJodaTimeFormatISODateTimeFormat dateTime];
  p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) withChronologyWithOrgJodaTimeChronology:[this$0_ getBase]];
  if (iIsLow_) {
    (void) [buf appendWithNSString:@"below the supported minimum of "];
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) printToWithJavaLangStringBuffer:buf withLong:[((OrgJodaTimeDateTime *) nil_chk([this$0_ getLowerLimit])) getMillis]];
  }
  else {
    (void) [buf appendWithNSString:@"above the supported maximum of "];
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) printToWithJavaLangStringBuffer:buf withLong:[((OrgJodaTimeDateTime *) nil_chk([this$0_ getUpperLimit])) getMillis]];
  }
  (void) [buf appendWithNSString:@" ("];
  (void) [buf appendWithId:[this$0_ getBase]];
  (void) [buf appendWithChar:')'];
  return [buf description];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"IllegalArgumentException: %@", [self getMessage]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitException *)other {
  [super copyAllFieldsTo:other];
  other->iIsLow_ = iIsLow_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoLimitChronology:withNSString:withBoolean:", "LimitException", NULL, 0x0, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
    { "serialVersionUID_LimitException_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitException_serialVersionUID },
    { "iIsLow_", NULL, 0x12, "Z", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitException = { "LimitException", "org.joda.time.chrono", "LimitChronology", 0x2, 3, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology_LimitException;
}

@end

@implementation OrgJodaTimeChronoLimitChronology_LimitDurationField

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  this$0_ = outer$;
  return [super initWithOrgJodaTimeDurationField:field withOrgJodaTimeDurationFieldType:[((OrgJodaTimeDurationField *) nil_chk(field)) getType]];
}

- (int)getValueWithLong:(long long int)duration
               withLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration withLong:instant];
}

- (long long int)getValueAsLongWithLong:(long long int)duration
                               withLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration withLong:instant];
}

- (long long int)getMillisWithInt:(int)value
                         withLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithInt:value withLong:instant];
}

- (long long int)getMillisWithLong:(long long int)value
                          withLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:value withLong:instant];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoLimitChronology:withOrgJodaTimeDurationField:", "LimitDurationField", NULL, 0x0, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:withLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getMillisWithInt:withLong:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:withLong:", "getMillis", "J", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
    { "serialVersionUID_LimitDurationField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitDurationField_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitDurationField = { "LimitDurationField", "org.joda.time.chrono", "LimitChronology", 0x2, 9, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology_LimitDurationField;
}

@end

@implementation OrgJodaTimeChronoLimitChronology_LimitDateTimeField

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField {
  this$0_ = outer$;
  if (self = [super initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getType]]) {
    iDurationField_ = durationField;
    iRangeDurationField_ = rangeDurationField;
    iLeapDurationField_ = leapDurationField;
  }
  return self;
}

- (int)getWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
}

- (NSString *)getAsTextWithLong:(long long int)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getAsTextWithLong:instant withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(long long int)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withInt:value];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)setWithLong:(long long int)instant
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (BOOL)isLeapWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) isLeapWithLong:instant];
}

- (int)getLeapAmountWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getLeapAmountWithLong:instant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return iLeapDurationField_;
}

- (long long int)roundFloorWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)roundHalfFloorWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfFloorWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)roundHalfCeilingWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfCeilingWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)roundHalfEvenWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfEvenWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (long long int)remainderWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  long long int result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (int)getMinimumValueWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMinimumValueWithLong:instant];
}

- (int)getMaximumValueWithLong:(long long int)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumValueWithLong:instant];
}

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (int)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iDurationField_ = iDurationField_;
  other->iLeapDurationField_ = iLeapDurationField_;
  other->iRangeDurationField_ = iRangeDurationField_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoLimitChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "LimitDateTimeField", NULL, 0x0, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "roundHalfFloorWithLong:", "roundHalfFloor", "J", 0x1, NULL },
    { "roundHalfCeilingWithLong:", "roundHalfCeiling", "J", 0x1, NULL },
    { "roundHalfEvenWithLong:", "roundHalfEven", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
    { "serialVersionUID_LimitDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitDateTimeField_serialVersionUID },
    { "iDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
    { "iRangeDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
    { "iLeapDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitDateTimeField = { "LimitDateTimeField", "org.joda.time.chrono", "LimitChronology", 0x2, 26, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology_LimitDateTimeField;
}

@end
