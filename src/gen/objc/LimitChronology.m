//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/LimitChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeZone.h"
#include "DecoratedDateTimeField.h"
#include "DecoratedDurationField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "LimitChronology.h"
#include "MutableDateTime.h"
#include "ReadableDateTime.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"

__attribute__((unused)) static OrgJodaTimeDurationField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted);
__attribute__((unused)) static OrgJodaTimeDateTimeField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted);

@interface OrgJodaTimeChronoLimitChronology () {
 @public
  OrgJodaTimeChronoLimitChronology *iWithUTC_;
}
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)lowerLimit
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)upperLimit;

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology, iWithUTC_, OrgJodaTimeChronoLimitChronology *)

@interface OrgJodaTimeChronoLimitChronology_LimitException () {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
  jboolean iIsLow_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitException, this$0_, OrgJodaTimeChronoLimitChronology *)

@interface OrgJodaTimeChronoLimitChronology_LimitDurationField () {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDurationField, this$0_, OrgJodaTimeChronoLimitChronology *)

@interface OrgJodaTimeChronoLimitChronology_LimitDateTimeField () {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
  OrgJodaTimeDurationField *iLeapDurationField_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, this$0_, OrgJodaTimeChronoLimitChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iRangeDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iLeapDurationField_, OrgJodaTimeDurationField *)

@implementation OrgJodaTimeChronoLimitChronology

+ (OrgJodaTimeChronoLimitChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)lowerLimit
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)upperLimit {
  return OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(base, lowerLimit, upperLimit);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)lowerLimit
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)upperLimit {
  if (self = [super initWithOrgJodaTimeChronology:base withId:nil]) {
    OrgJodaTimeChronoLimitChronology_set_iLowerLimit_(self, lowerLimit);
    OrgJodaTimeChronoLimitChronology_set_iUpperLimit_(self, upperLimit);
  }
  return self;
}

- (OrgJodaTimeDateTime *)getLowerLimit {
  return iLowerLimit_;
}

- (OrgJodaTimeDateTime *)getUpperLimit {
  return iUpperLimit_;
}

- (OrgJodaTimeChronology *)withUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  if (zone == OrgJodaTimeDateTimeZone_get_UTC_() && iWithUTC_ != nil) {
    return iWithUTC_;
  }
  OrgJodaTimeDateTime *lowerLimit = iLowerLimit_;
  if (lowerLimit != nil) {
    OrgJodaTimeMutableDateTime *mdt = [lowerLimit toMutableDateTime];
    [((OrgJodaTimeMutableDateTime *) nil_chk(mdt)) setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:zone];
    lowerLimit = [mdt toDateTime];
  }
  OrgJodaTimeDateTime *upperLimit = iUpperLimit_;
  if (upperLimit != nil) {
    OrgJodaTimeMutableDateTime *mdt = [upperLimit toMutableDateTime];
    [((OrgJodaTimeMutableDateTime *) nil_chk(mdt)) setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:zone];
    upperLimit = [mdt toDateTime];
  }
  OrgJodaTimeChronoLimitChronology *chrono = OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_([((OrgJodaTimeChronology *) nil_chk([self getBase])) withZoneWithOrgJodaTimeDateTimeZone:zone], lowerLimit, upperLimit);
  if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
    OrgJodaTimeChronoLimitChronology_set_iWithUTC_(self, chrono);
  }
  return chrono;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  [self checkLimitsWithLong:instant withNSString:nil];
  instant = [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self checkLimitsWithLong:instant withNSString:@"resulting"];
  return instant;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JavaUtilHashMap *converted = [[[JavaUtilHashMap alloc] init] autorelease];
  OrgJodaTimeChronoAssembledChronology_Fields_set_eras_(nil_chk(fields), OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->eras_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->centuries_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_years_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->years_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_months_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->months_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weekyears_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_weeks_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weeks_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_days_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->days_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdays_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->halfdays_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_hours_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->hours_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_minutes_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->minutes_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_seconds_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->seconds_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_millis_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->millis_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_year_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->year_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfEra_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfEra_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfCentury_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfCentury_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuryOfEra_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->centuryOfEra_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_era_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->era_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfWeek_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfWeek_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfMonth_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfYear_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfYear_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_monthOfYear_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->monthOfYear_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekOfWeekyear_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekOfWeekyear_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyear_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyear_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyearOfCentury_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyearOfCentury_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfSecond_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfDay_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfMinute_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfDay_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfHour_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfDay_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfDay_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfHalfday_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfDay_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfHalfday_, converted));
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(fields, OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->halfdayOfDay_, converted));
}

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, field, converted);
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, field, converted);
}

- (void)checkLimitsWithLong:(jlong)instant
               withNSString:(NSString *)desc {
  OrgJodaTimeDateTime *limit;
  if ((limit = iLowerLimit_) != nil && instant < [((OrgJodaTimeDateTime *) nil_chk(limit)) getMillis]) {
    @throw [[[OrgJodaTimeChronoLimitChronology_LimitException alloc] initWithOrgJodaTimeChronoLimitChronology:self withNSString:desc withBoolean:YES] autorelease];
  }
  if ((limit = iUpperLimit_) != nil && instant >= [((OrgJodaTimeDateTime *) nil_chk(limit)) getMillis]) {
    @throw [[[OrgJodaTimeChronoLimitChronology_LimitException alloc] initWithOrgJodaTimeChronoLimitChronology:self withNSString:desc withBoolean:NO] autorelease];
  }
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoLimitChronology class]] == NO) {
    return NO;
  }
  OrgJodaTimeChronoLimitChronology *chrono = (OrgJodaTimeChronoLimitChronology *) check_class_cast(obj, [OrgJodaTimeChronoLimitChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoLimitChronology *) nil_chk(chrono)) getBase]] && OrgJodaTimeFieldFieldUtils_equalsWithId_withId_([self getLowerLimit], [chrono getLowerLimit]) && OrgJodaTimeFieldFieldUtils_equalsWithId_withId_([self getUpperLimit], [chrono getUpperLimit]);
}

- (NSUInteger)hash {
  jint hash_ = 317351877;
  hash_ += ([self getLowerLimit] != nil ? ((jint) [((OrgJodaTimeDateTime *) nil_chk([self getLowerLimit])) hash]) : 0);
  hash_ += ([self getUpperLimit] != nil ? ((jint) [((OrgJodaTimeDateTime *) nil_chk([self getUpperLimit])) hash]) : 0);
  hash_ += ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
  return hash_;
}

- (NSString *)description {
  return JreStrcat("$$$$$$C", @"LimitChronology[", [((OrgJodaTimeChronology *) nil_chk([self getBase])) description], @", ", ([self getLowerLimit] == nil ? @"NoLimit" : [((OrgJodaTimeDateTime *) nil_chk([self getLowerLimit])) description]), @", ", ([self getUpperLimit] == nil ? @"NoLimit" : [((OrgJodaTimeDateTime *) nil_chk([self getUpperLimit])) description]), ']');
}

- (void)dealloc {
  RELEASE_(iLowerLimit_);
  RELEASE_(iUpperLimit_);
  RELEASE_(iWithUTC_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoLimitChronology_set_iLowerLimit_(other, iLowerLimit_);
  OrgJodaTimeChronoLimitChronology_set_iUpperLimit_(other, iUpperLimit_);
  OrgJodaTimeChronoLimitChronology_set_iWithUTC_(other, iWithUTC_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeChronology:withOrgJodaTimeReadableDateTime:withOrgJodaTimeReadableDateTime:", "getInstance", "Lorg.joda.time.chrono.LimitChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTime:withOrgJodaTimeDateTime:", "LimitChronology", NULL, 0x2, NULL },
    { "getLowerLimit", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "getUpperLimit", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "convertFieldWithOrgJodaTimeDurationField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DurationField;", 0x2, NULL },
    { "convertFieldWithOrgJodaTimeDateTimeField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DateTimeField;", 0x2, NULL },
    { "checkLimitsWithLong:withNSString:", "checkLimits", "V", 0x0, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_serialVersionUID },
    { "iLowerLimit_", NULL, 0x10, "Lorg.joda.time.DateTime;", NULL,  },
    { "iUpperLimit_", NULL, 0x10, "Lorg.joda.time.DateTime;", NULL,  },
    { "iWithUTC_", NULL, 0x82, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology = { 1, "LimitChronology", "org.joda.time.chrono", NULL, 0x11, 16, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology;
}

@end

OrgJodaTimeChronoLimitChronology *OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(OrgJodaTimeChronology *base, id<OrgJodaTimeReadableDateTime> lowerLimit, id<OrgJodaTimeReadableDateTime> upperLimit) {
  OrgJodaTimeChronoLimitChronology_init();
  if (base == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Must supply a chronology"] autorelease];
  }
  lowerLimit = lowerLimit == nil ? nil : [lowerLimit toDateTime];
  upperLimit = upperLimit == nil ? nil : [upperLimit toDateTime];
  if (lowerLimit != nil && upperLimit != nil) {
    if (![lowerLimit isBeforeWithOrgJodaTimeReadableInstant:upperLimit]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The lower limit must be come before than the upper limit"] autorelease];
    }
  }
  return [[[OrgJodaTimeChronoLimitChronology alloc] initWithOrgJodaTimeChronology:base withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *) check_class_cast(lowerLimit, [OrgJodaTimeDateTime class]) withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *) check_class_cast(upperLimit, [OrgJodaTimeDateTime class])] autorelease];
}

OrgJodaTimeDurationField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDurationField *) check_class_cast([converted getWithId:field], [OrgJodaTimeDurationField class]);
  }
  OrgJodaTimeChronoLimitChronology_LimitDurationField *limitField = [[[OrgJodaTimeChronoLimitChronology_LimitDurationField alloc] initWithOrgJodaTimeChronoLimitChronology:self withOrgJodaTimeDurationField:field] autorelease];
  [converted putWithId:field withId:limitField];
  return limitField;
}

OrgJodaTimeDateTimeField *OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoLimitChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDateTimeField *) check_class_cast([converted getWithId:field], [OrgJodaTimeDateTimeField class]);
  }
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField *limitField = [[[OrgJodaTimeChronoLimitChronology_LimitDateTimeField alloc] initWithOrgJodaTimeChronoLimitChronology:self withOrgJodaTimeDateTimeField:field withOrgJodaTimeDurationField:OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField], converted) withOrgJodaTimeDurationField:OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getRangeDurationField], converted) withOrgJodaTimeDurationField:OrgJodaTimeChronoLimitChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getLeapDurationField], converted)] autorelease];
  [converted putWithId:field withId:limitField];
  return limitField;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology)

@implementation OrgJodaTimeChronoLimitChronology_LimitException

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                                            withNSString:(NSString *)desc
                                             withBoolean:(jboolean)isLow {
  OrgJodaTimeChronoLimitChronology_LimitException_set_this$0_(self, outer$);
  if (self = [super initWithNSString:desc]) {
    iIsLow_ = isLow;
  }
  return self;
}

- (NSString *)getMessage {
  JavaLangStringBuffer *buf = [[[JavaLangStringBuffer alloc] initWithInt:85] autorelease];
  [buf appendWithNSString:@"The"];
  NSString *desc = [super getMessage];
  if (desc != nil) {
    [buf appendWithChar:' '];
    [buf appendWithNSString:desc];
  }
  [buf appendWithNSString:@" instant is "];
  OrgJodaTimeFormatDateTimeFormatter *p = OrgJodaTimeFormatISODateTimeFormat_dateTime();
  p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) withChronologyWithOrgJodaTimeChronology:[this$0_ getBase]];
  if (iIsLow_) {
    [buf appendWithNSString:@"below the supported minimum of "];
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) printToWithJavaLangStringBuffer:buf withLong:[((OrgJodaTimeDateTime *) nil_chk([this$0_ getLowerLimit])) getMillis]];
  }
  else {
    [buf appendWithNSString:@"above the supported maximum of "];
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(p)) printToWithJavaLangStringBuffer:buf withLong:[((OrgJodaTimeDateTime *) nil_chk([this$0_ getUpperLimit])) getMillis]];
  }
  [buf appendWithNSString:@" ("];
  [buf appendWithId:[this$0_ getBase]];
  [buf appendWithChar:')'];
  return [buf description];
}

- (NSString *)description {
  return JreStrcat("$$", @"IllegalArgumentException: ", [self getMessage]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitException *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoLimitChronology_LimitException_set_this$0_(other, this$0_);
  other->iIsLow_ = iIsLow_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoLimitChronology:withNSString:withBoolean:", "LimitException", NULL, 0x0, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitException_serialVersionUID },
    { "iIsLow_", NULL, 0x12, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitException = { 1, "LimitException", "org.joda.time.chrono", "LimitChronology", 0x2, 3, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology_LimitException;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology_LimitException)

@implementation OrgJodaTimeChronoLimitChronology_LimitDurationField

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  OrgJodaTimeChronoLimitChronology_LimitDurationField_set_this$0_(self, outer$);
  return [super initWithOrgJodaTimeDurationField:field withOrgJodaTimeDurationFieldType:[((OrgJodaTimeDurationField *) nil_chk(field)) getType]];
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration withLong:instant];
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration withLong:instant];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithInt:value withLong:instant];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:value withLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitDurationField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoLimitChronology_LimitDurationField_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoLimitChronology:withOrgJodaTimeDurationField:", "LimitDurationField", NULL, 0x0, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:withLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getMillisWithInt:withLong:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:withLong:", "getMillis", "J", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitDurationField_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitDurationField = { 1, "LimitDurationField", "org.joda.time.chrono", "LimitChronology", 0x2, 9, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology_LimitDurationField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology_LimitDurationField)

@implementation OrgJodaTimeChronoLimitChronology_LimitDateTimeField

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField {
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_this$0_(self, outer$);
  if (self = [super initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getType]]) {
    OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_iDurationField_(self, durationField);
    OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_iRangeDurationField_(self, rangeDurationField);
    OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_iLeapDurationField_(self, leapDurationField);
  }
  return self;
}

- (jint)getWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getAsTextWithLong:instant withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithLong:instant withInt:amount];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  [this$0_ checkLimitsWithLong:minuendInstant withNSString:@"minuend"];
  [this$0_ checkLimitsWithLong:subtrahendInstant withNSString:@"subtrahend"];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withInt:value];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) isLeapWithLong:instant];
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getLeapAmountWithLong:instant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return iLeapDurationField_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundHalfFloorWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfFloorWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundHalfCeilingWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfCeilingWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)roundHalfEvenWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfEvenWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jlong)remainderWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  jlong result = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
  [this$0_ checkLimitsWithLong:result withNSString:@"resulting"];
  return result;
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMinimumValueWithLong:instant];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  [this$0_ checkLimitsWithLong:instant withNSString:nil];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumValueWithLong:instant];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(iDurationField_);
  RELEASE_(iRangeDurationField_);
  RELEASE_(iLeapDurationField_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitDateTimeField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_this$0_(other, this$0_);
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_iDurationField_(other, iDurationField_);
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_iRangeDurationField_(other, iRangeDurationField_);
  OrgJodaTimeChronoLimitChronology_LimitDateTimeField_set_iLeapDurationField_(other, iLeapDurationField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoLimitChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "LimitDateTimeField", NULL, 0x0, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "roundHalfFloorWithLong:", "roundHalfFloor", "J", 0x1, NULL },
    { "roundHalfCeilingWithLong:", "roundHalfCeiling", "J", 0x1, NULL },
    { "roundHalfEvenWithLong:", "roundHalfEven", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.chrono.LimitChronology;", NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoLimitChronology_LimitDateTimeField_serialVersionUID },
    { "iDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
    { "iRangeDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
    { "iLeapDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoLimitChronology_LimitDateTimeField = { 1, "LimitDateTimeField", "org.joda.time.chrono", "LimitChronology", 0x2, 26, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeChronoLimitChronology_LimitDateTimeField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoLimitChronology_LimitDateTimeField)
