//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java
//

#ifndef _OrgJodaTimeFieldSkipUndoDateTimeField_H_
#define _OrgJodaTimeFieldSkipUndoDateTimeField_H_

@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;

#include "DelegatedDateTimeField.h"
#include "J2ObjC_header.h"

#define OrgJodaTimeFieldSkipUndoDateTimeField_serialVersionUID -5875876968979LL

/**
 @brief Wraps another field such that a certain value is added back into the sequence of numbers.
 <p> This reverses the effect of SkipDateTimeField. This isn't very elegant. <p> SkipUndoDateTimeField is thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeFieldSkipUndoDateTimeField : OrgJodaTimeFieldDelegatedDateTimeField {
}

/**
 @brief Constructor that reinserts zero.
 @param chronology the chronoogy to use
 @param field the field to skip zero on
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

/**
 @brief Constructor.
 @param chronology the chronoogy to use
 @param field the field to skip zero on
 @param skip the value to skip
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(jint)skip;

- (jint)getWithLong:(jlong)millis;

- (jlong)setWithLong:(jlong)millis
             withInt:(jint)value;

- (jint)getMinimumValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFieldSkipUndoDateTimeField)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFieldSkipUndoDateTimeField, serialVersionUID, jlong)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFieldSkipUndoDateTimeField)

#endif // _OrgJodaTimeFieldSkipUndoDateTimeField_H_
