//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/MutableDateTime.java
//

#include "AbstractDateTime.h"
#include "AbstractInstant.h"
#include "BaseDateTime.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "MutableDateTime.h"
#include "ReadableDateTime.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadablePeriod.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeMutableDateTime

+ (OrgJodaTimeMutableDateTime *)now {
  return OrgJodaTimeMutableDateTime_now();
}

+ (OrgJodaTimeMutableDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeMutableDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeMutableDateTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeMutableDateTime_parseWithNSString_(str);
}

+ (OrgJodaTimeMutableDateTime *)parseWithNSString:(NSString *)str
           withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(jlong)instant {
  return [super initWithLong:instant];
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithLong:instant withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [super initWithId:instant withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithId:instant withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithId:instant withOrgJodaTimeChronology:OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology)];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeDateTimeField *)getRoundingField {
  return iRoundingField_;
}

- (jint)getRoundingMode {
  return iRoundingMode_;
}

- (void)setRoundingWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  [self setRoundingWithOrgJodaTimeDateTimeField:field withInt:OrgJodaTimeMutableDateTime_ROUND_FLOOR];
}

- (void)setRoundingWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                        withInt:(jint)mode {
  if (field != nil && (mode < OrgJodaTimeMutableDateTime_ROUND_NONE || mode > OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN)) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Illegal rounding mode: ", mode)] autorelease];
  }
  OrgJodaTimeMutableDateTime_set_iRoundingField_(self, (mode == OrgJodaTimeMutableDateTime_ROUND_NONE ? nil : field));
  iRoundingMode_ = (field == nil ? OrgJodaTimeMutableDateTime_ROUND_NONE : mode);
  [self setMillisWithLong:[self getMillis]];
}

- (void)setMillisWithLong:(jlong)instant {
  switch (iRoundingMode_) {
    case OrgJodaTimeMutableDateTime_ROUND_NONE:
    break;
    case OrgJodaTimeMutableDateTime_ROUND_FLOOR:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundFloorWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_CEILING:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundCeilingWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_HALF_FLOOR:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundHalfFloorWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_HALF_CEILING:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundHalfCeilingWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundHalfEvenWithLong:instant];
    break;
  }
  [super setMillisWithLong:instant];
}

- (void)setMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  [self setMillisWithLong:instantMillis];
}

- (void)addWithLong:(jlong)duration {
  [self setMillisWithLong:OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_([self getMillis], duration)];
}

- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  [self addWithOrgJodaTimeReadableDuration:duration withInt:1];
}

- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                                   withInt:(jint)scalar {
  if (duration != nil) {
    [self addWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_([duration getMillis], scalar)];
  }
}

- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  [self addWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                 withInt:(jint)scalar {
  if (period != nil) {
    [self setMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getMillis] withInt:scalar]];
  }
}

- (void)setChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  [super setChronologyWithOrgJodaTimeChronology:chronology];
}

- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  newZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(newZone);
  OrgJodaTimeChronology *chrono = [self getChronology];
  if ([((OrgJodaTimeChronology *) nil_chk(chrono)) getZone] != newZone) {
    [self setChronologyWithOrgJodaTimeChronology:[chrono withZoneWithOrgJodaTimeDateTimeZone:newZone]];
  }
}

- (void)setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  newZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(newZone);
  OrgJodaTimeDateTimeZone *originalZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_([self getZone]);
  if (newZone == originalZone) {
    return;
  }
  jlong millis = [((OrgJodaTimeDateTimeZone *) nil_chk(originalZone)) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:newZone withLong:[self getMillis]];
  [self setChronologyWithOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:newZone]];
  [self setMillisWithLong:millis];
}

- (void)setWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                    withInt:(jint)value {
  if (type == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getMillis] withInt:value]];
}

- (void)addWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                    withInt:(jint)amount {
  if (type == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  if (amount != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getMillis] withInt:amount]];
  }
}

- (void)setYearWithInt:(jint)year {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getMillis] withInt:year]];
}

- (void)addYearsWithInt:(jint)years {
  if (years != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getMillis] withInt:years]];
  }
}

- (void)setWeekyearWithInt:(jint)weekyear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getMillis] withInt:weekyear]];
}

- (void)addWeekyearsWithInt:(jint)weekyears {
  if (weekyears != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyears])) addWithLong:[self getMillis] withInt:weekyears]];
  }
}

- (void)setMonthOfYearWithInt:(jint)monthOfYear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getMillis] withInt:monthOfYear]];
}

- (void)addMonthsWithInt:(jint)months {
  if (months != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getMillis] withInt:months]];
  }
}

- (void)setWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getMillis] withInt:weekOfWeekyear]];
}

- (void)addWeeksWithInt:(jint)weeks {
  if (weeks != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getMillis] withInt:weeks]];
  }
}

- (void)setDayOfYearWithInt:(jint)dayOfYear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getMillis] withInt:dayOfYear]];
}

- (void)setDayOfMonthWithInt:(jint)dayOfMonth {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getMillis] withInt:dayOfMonth]];
}

- (void)setDayOfWeekWithInt:(jint)dayOfWeek {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getMillis] withInt:dayOfWeek]];
}

- (void)addDaysWithInt:(jint)days {
  if (days != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getMillis] withInt:days]];
  }
}

- (void)setHourOfDayWithInt:(jint)hourOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getMillis] withInt:hourOfDay]];
}

- (void)addHoursWithInt:(jint)hours {
  if (hours != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getMillis] withInt:hours]];
  }
}

- (void)setMinuteOfDayWithInt:(jint)minuteOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfDay])) setWithLong:[self getMillis] withInt:minuteOfDay]];
}

- (void)setMinuteOfHourWithInt:(jint)minuteOfHour {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getMillis] withInt:minuteOfHour]];
}

- (void)addMinutesWithInt:(jint)minutes {
  if (minutes != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getMillis] withInt:minutes]];
  }
}

- (void)setSecondOfDayWithInt:(jint)secondOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfDay])) setWithLong:[self getMillis] withInt:secondOfDay]];
}

- (void)setSecondOfMinuteWithInt:(jint)secondOfMinute {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getMillis] withInt:secondOfMinute]];
}

- (void)addSecondsWithInt:(jint)seconds {
  if (seconds != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getMillis] withInt:seconds]];
  }
}

- (void)setMillisOfDayWithInt:(jint)millisOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getMillis] withInt:millisOfDay]];
}

- (void)setMillisOfSecondWithInt:(jint)millisOfSecond {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getMillis] withInt:millisOfSecond]];
}

- (void)addMillisWithInt:(jint)millis {
  if (millis != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getMillis] withInt:millis]];
  }
}

- (void)setDateWithLong:(jlong)instant {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:instant withInt:[self getMillisOfDay]]];
}

- (void)setDateWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  if ([(id) instant conformsToProtocol: @protocol(OrgJodaTimeReadableDateTime)]) {
    id<OrgJodaTimeReadableDateTime> rdt = (id<OrgJodaTimeReadableDateTime>) check_protocol_cast(instant, @protocol(OrgJodaTimeReadableDateTime));
    OrgJodaTimeChronology *instantChrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([((id<OrgJodaTimeReadableDateTime>) nil_chk(rdt)) getChronology]);
    OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(instantChrono)) getZone];
    if (zone != nil) {
      instantMillis = [zone getMillisKeepLocalWithOrgJodaTimeDateTimeZone:[self getZone] withLong:instantMillis];
    }
  }
  [self setDateWithLong:instantMillis];
}

- (void)setDateWithInt:(jint)year
               withInt:(jint)monthOfYear
               withInt:(jint)dayOfMonth {
  OrgJodaTimeChronology *c = [self getChronology];
  jlong instantMidnight = [((OrgJodaTimeChronology *) nil_chk(c)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:0];
  [self setDateWithLong:instantMidnight];
}

- (void)setTimeWithLong:(jlong)millis {
  jint millisOfDay = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) millisOfDay])) getWithLong:millis];
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getMillis] withInt:millisOfDay]];
}

- (void)setTimeWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeChronology *instantChrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(instantChrono)) getZone];
  if (zone != nil) {
    instantMillis = [zone getMillisKeepLocalWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withLong:instantMillis];
  }
  [self setTimeWithLong:instantMillis];
}

- (void)setTimeWithInt:(jint)hour
               withInt:(jint)minuteOfHour
               withInt:(jint)secondOfMinute
               withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) getDateTimeMillisWithLong:[self getMillis] withInt:hour withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self setMillisWithLong:instant];
}

- (void)setDateTimeWithInt:(jint)year
                   withInt:(jint)monthOfYear
                   withInt:(jint)dayOfMonth
                   withInt:(jint)hourOfDay
                   withInt:(jint)minuteOfHour
                   withInt:(jint)secondOfMinute
                   withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self setMillisWithLong:instant];
}

- (OrgJodaTimeMutableDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((OrgJodaTimeDateTimeField *) nil_chk(field)) isSupported] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", type, @"' is not supported")] autorelease];
  }
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:field] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)era {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)centuryOfEra {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)yearOfCentury {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)yearOfEra {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)year {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)weekyear {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)monthOfYear {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)weekOfWeekyear {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)dayOfYear {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)dayOfMonth {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)dayOfWeek {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)hourOfDay {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)minuteOfDay {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfDay]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)minuteOfHour {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)secondOfDay {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfDay]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)secondOfMinute {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)millisOfDay {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]] autorelease];
}

- (OrgJodaTimeMutableDateTime_Property *)millisOfSecond {
  return [[[OrgJodaTimeMutableDateTime_Property alloc] initWithOrgJodaTimeMutableDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]] autorelease];
}

- (OrgJodaTimeMutableDateTime *)copy__ {
  return (OrgJodaTimeMutableDateTime *) check_class_cast([self clone], [OrgJodaTimeMutableDateTime class]);
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *ex) {
    @throw [[[JavaLangInternalError alloc] initWithNSString:@"Clone error"] autorelease];
  }
}

- (void)dealloc {
  OrgJodaTimeMutableDateTime_set_iRoundingField_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeMutableDateTime *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeMutableDateTime_set_iRoundingField_(other, iRoundingField_);
  other->iRoundingMode_ = iRoundingMode_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.MutableDateTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.MutableDateTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.MutableDateTime;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.MutableDateTime;", 0x9, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.MutableDateTime;", 0x9, NULL },
    { "init", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithLong:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithId:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:", "MutableDateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "MutableDateTime", NULL, 0x1, NULL },
    { "getRoundingField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getRoundingMode", NULL, "I", 0x1, NULL },
    { "setRoundingWithOrgJodaTimeDateTimeField:", "setRounding", "V", 0x1, NULL },
    { "setRoundingWithOrgJodaTimeDateTimeField:withInt:", "setRounding", "V", 0x1, NULL },
    { "setMillisWithLong:", "setMillis", "V", 0x1, NULL },
    { "setMillisWithOrgJodaTimeReadableInstant:", "setMillis", "V", 0x1, NULL },
    { "addWithLong:", "add", "V", 0x1, NULL },
    { "addWithOrgJodaTimeReadableDuration:", "add", "V", 0x1, NULL },
    { "addWithOrgJodaTimeReadableDuration:withInt:", "add", "V", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePeriod:", "add", "V", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePeriod:withInt:", "add", "V", 0x1, NULL },
    { "setChronologyWithOrgJodaTimeChronology:", "setChronology", "V", 0x1, NULL },
    { "setZoneWithOrgJodaTimeDateTimeZone:", "setZone", "V", 0x1, NULL },
    { "setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:", "setZoneRetainFields", "V", 0x1, NULL },
    { "setWithOrgJodaTimeDateTimeFieldType:withInt:", "set", "V", 0x1, NULL },
    { "addWithOrgJodaTimeDurationFieldType:withInt:", "add", "V", 0x1, NULL },
    { "setYearWithInt:", "setYear", "V", 0x1, NULL },
    { "addYearsWithInt:", "addYears", "V", 0x1, NULL },
    { "setWeekyearWithInt:", "setWeekyear", "V", 0x1, NULL },
    { "addWeekyearsWithInt:", "addWeekyears", "V", 0x1, NULL },
    { "setMonthOfYearWithInt:", "setMonthOfYear", "V", 0x1, NULL },
    { "addMonthsWithInt:", "addMonths", "V", 0x1, NULL },
    { "setWeekOfWeekyearWithInt:", "setWeekOfWeekyear", "V", 0x1, NULL },
    { "addWeeksWithInt:", "addWeeks", "V", 0x1, NULL },
    { "setDayOfYearWithInt:", "setDayOfYear", "V", 0x1, NULL },
    { "setDayOfMonthWithInt:", "setDayOfMonth", "V", 0x1, NULL },
    { "setDayOfWeekWithInt:", "setDayOfWeek", "V", 0x1, NULL },
    { "addDaysWithInt:", "addDays", "V", 0x1, NULL },
    { "setHourOfDayWithInt:", "setHourOfDay", "V", 0x1, NULL },
    { "addHoursWithInt:", "addHours", "V", 0x1, NULL },
    { "setMinuteOfDayWithInt:", "setMinuteOfDay", "V", 0x1, NULL },
    { "setMinuteOfHourWithInt:", "setMinuteOfHour", "V", 0x1, NULL },
    { "addMinutesWithInt:", "addMinutes", "V", 0x1, NULL },
    { "setSecondOfDayWithInt:", "setSecondOfDay", "V", 0x1, NULL },
    { "setSecondOfMinuteWithInt:", "setSecondOfMinute", "V", 0x1, NULL },
    { "addSecondsWithInt:", "addSeconds", "V", 0x1, NULL },
    { "setMillisOfDayWithInt:", "setMillisOfDay", "V", 0x1, NULL },
    { "setMillisOfSecondWithInt:", "setMillisOfSecond", "V", 0x1, NULL },
    { "addMillisWithInt:", "addMillis", "V", 0x1, NULL },
    { "setDateWithLong:", "setDate", "V", 0x1, NULL },
    { "setDateWithOrgJodaTimeReadableInstant:", "setDate", "V", 0x1, NULL },
    { "setDateWithInt:withInt:withInt:", "setDate", "V", 0x1, NULL },
    { "setTimeWithLong:", "setTime", "V", 0x1, NULL },
    { "setTimeWithOrgJodaTimeReadableInstant:", "setTime", "V", 0x1, NULL },
    { "setTimeWithInt:withInt:withInt:withInt:", "setTime", "V", 0x1, NULL },
    { "setDateTimeWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setDateTime", "V", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "era", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "year", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "weekyear", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "minuteOfDay", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "secondOfDay", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.MutableDateTime$Property;", 0x1, NULL },
    { "copy__", "copy", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeMutableDateTime_serialVersionUID },
    { "ROUND_NONE_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_NONE },
    { "ROUND_FLOOR_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_FLOOR },
    { "ROUND_CEILING_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_CEILING },
    { "ROUND_HALF_FLOOR_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_HALF_FLOOR },
    { "ROUND_HALF_CEILING_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_HALF_CEILING },
    { "ROUND_HALF_EVEN_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN },
    { "iRoundingField_", NULL, 0x2, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iRoundingMode_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeMutableDateTime = { "MutableDateTime", "org.joda.time", NULL, 0x1, 84, methods, 9, fields, 0, NULL};
  return &_OrgJodaTimeMutableDateTime;
}

@end

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_now() {
  OrgJodaTimeMutableDateTime_init();
  return [[[OrgJodaTimeMutableDateTime alloc] init] autorelease];
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeMutableDateTime_init();
  if (zone == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Zone must not be null"] autorelease];
  }
  return [[[OrgJodaTimeMutableDateTime alloc] initWithOrgJodaTimeDateTimeZone:zone] autorelease];
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMutableDateTime_init();
  if (chronology == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Chronology must not be null"] autorelease];
  }
  return [[[OrgJodaTimeMutableDateTime alloc] initWithOrgJodaTimeChronology:chronology] autorelease];
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeMutableDateTime_init();
  return OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_dateTimeParser())) withOffsetParsed]);
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeMutableDateTime_init();
  return [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseDateTimeWithNSString:str])) toMutableDateTime];
}

@implementation OrgJodaTimeMutableDateTime_Property

- (instancetype)initWithOrgJodaTimeMutableDateTime:(OrgJodaTimeMutableDateTime *)instant
                      withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  if (self = [super init]) {
    OrgJodaTimeMutableDateTime_Property_set_iInstant_(self, instant);
    OrgJodaTimeMutableDateTime_Property_set_iField_(self, field);
  }
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  OrgJodaTimeMutableDateTime_Property_set_iInstant_(self, (OrgJodaTimeMutableDateTime *) check_class_cast([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeMutableDateTime class]));
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) check_class_cast([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  OrgJodaTimeMutableDateTime_Property_set_iField_(self, [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getChronology]]);
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeMutableDateTime *)getMutableDateTime {
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)addWithInt:(jint)value {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)addWithLong:(jlong)value {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withLong:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)addWrapFieldWithInt:(jint)value {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)setWithInt:(jint)value {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)setWithNSString:(NSString *)text
                             withJavaUtilLocale:(JavaUtilLocale *)locale {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withNSString:text withJavaUtilLocale:locale]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)setWithNSString:(NSString *)text {
  [self setWithNSString:text withJavaUtilLocale:nil];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundFloor {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundFloorWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundCeiling {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundCeilingWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundHalfFloor {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundHalfFloorWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundHalfCeiling {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundHalfCeilingWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundHalfEven {
  [iInstant_ setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundHalfEvenWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (void)dealloc {
  OrgJodaTimeMutableDateTime_Property_set_iInstant_(self, nil);
  OrgJodaTimeMutableDateTime_Property_set_iField_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeMutableDateTime_Property *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeMutableDateTime_Property_set_iInstant_(other, iInstant_);
  OrgJodaTimeMutableDateTime_Property_set_iField_(other, iField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeMutableDateTime:withOrgJodaTimeDateTimeField:", "Property", NULL, 0x0, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x4, NULL },
    { "getMutableDateTime", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "addWithInt:", "add", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "addWithLong:", "add", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "addWrapFieldWithInt:", "addWrapField", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "setWithInt:", "set", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "setWithNSString:withJavaUtilLocale:", "set", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "setWithNSString:", "set", "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "roundFloor", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "roundCeiling", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "roundHalfFloor", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "roundHalfCeiling", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
    { "roundHalfEven", NULL, "Lorg.joda.time.MutableDateTime;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeMutableDateTime_Property_serialVersionUID },
    { "iInstant_", NULL, 0x2, "Lorg.joda.time.MutableDateTime;", NULL,  },
    { "iField_", NULL, 0x2, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeMutableDateTime_Property = { "Property", "org.joda.time", "MutableDateTime", 0x19, 18, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeMutableDateTime_Property;
}

@end
