//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java
//

#include "BasicChronology.h"
#include "BasicYearDateTimeField.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "IOSClass.h"

@implementation OrgJodaTimeChronoBasicYearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_year() withLong:[((OrgJodaTimeChronoBasicChronology *) nil_chk(chronology)) getAverageMillisPerYear]]) {
    OrgJodaTimeChronoBasicYearDateTimeField_set_iChronology_(self, chronology);
  }
  return self;
}

- (jboolean)isLenient {
  return NO;
}

- (jint)getWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years {
  if (years == 0) {
    return instant;
  }
  jint thisYear = [self getWithLong:instant];
  jint newYear = OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_(thisYear, years);
  return [self setWithLong:instant withInt:newYear];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)years {
  return [self addWithLong:instant withInt:OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(years)];
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years {
  if (years == 0) {
    return instant;
  }
  jint thisYear = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
  jint wrappedYear = OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_withInt_(thisYear, years, [iChronology_ getMinYear], [iChronology_ getMaxYear]);
  return [self setWithLong:instant withInt:wrappedYear];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, year, [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear], [iChronology_ getMaxYear]);
  return [iChronology_ setYearWithLong:instant withInt:year];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearDifferenceWithLong:subtrahendInstant withLong:minuendInstant];
  }
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return nil;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) isLeapYearWithInt:[self getWithLong:instant]];
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  if ([((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) isLeapYearWithInt:[self getWithLong:instant]]) {
    return 1;
  }
  else {
    return 0;
  }
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) days];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMaxYear];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearMillisWithInt:[self getWithLong:instant]];
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  jint year = [self getWithLong:instant];
  jlong yearStartMillis = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearMillisWithInt:year];
  if (instant != yearStartMillis) {
    instant = [iChronology_ getYearMillisWithInt:year + 1];
  }
  return instant;
}

- (jlong)remainderWithLong:(jlong)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) year];
}

- (void)dealloc {
  OrgJodaTimeChronoBasicYearDateTimeField_set_iChronology_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicYearDateTimeField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoBasicYearDateTimeField_set_iChronology_(other, iChronology_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:", "BasicYearDateTimeField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicYearDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x14, "Lorg.joda.time.chrono.BasicChronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicYearDateTimeField = { "BasicYearDateTimeField", "org.joda.time.chrono", NULL, 0x0, 18, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicYearDateTimeField;
}

@end
