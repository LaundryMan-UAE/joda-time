//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java
//

#include "BasicChronology.h"
#include "BasicYearDateTimeField.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "FieldUtils.h"

@implementation OrgJodaTimeChronoBasicYearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year] withLong:[((OrgJodaTimeChronoBasicChronology *) nil_chk(chronology)) getAverageMillisPerYear]]) {
    iChronology_ = chronology;
  }
  return self;
}

- (BOOL)isLenient {
  return NO;
}

- (int)getWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)years {
  if (years == 0) {
    return instant;
  }
  int thisYear = [self getWithLong:instant];
  int newYear = [OrgJodaTimeFieldFieldUtils safeAddWithInt:thisYear withInt:years];
  return [self setWithLong:instant withInt:newYear];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)years {
  return [self addWithLong:instant withInt:[OrgJodaTimeFieldFieldUtils safeToIntWithLong:years]];
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)years {
  if (years == 0) {
    return instant;
  }
  int thisYear = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
  int wrappedYear = [OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:thisYear withInt:years withInt:[iChronology_ getMinYear] withInt:[iChronology_ getMaxYear]];
  return [self setWithLong:instant withInt:wrappedYear];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)year {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:year withInt:[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear] withInt:[iChronology_ getMaxYear]];
  return [iChronology_ setYearWithLong:instant withInt:year];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearDifferenceWithLong:subtrahendInstant withLong:minuendInstant];
  }
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return nil;
}

- (BOOL)isLeapWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) isLeapYearWithInt:[self getWithLong:instant]];
}

- (int)getLeapAmountWithLong:(long long int)instant {
  if ([((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) isLeapYearWithInt:[self getWithLong:instant]]) {
    return 1;
  }
  else {
    return 0;
  }
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) days];
}

- (int)getMinimumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear];
}

- (int)getMaximumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMaxYear];
}

- (long long int)roundFloorWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearMillisWithInt:[self getWithLong:instant]];
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  int year = [self getWithLong:instant];
  long long int yearStartMillis = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearMillisWithInt:year];
  if (instant != yearStartMillis) {
    instant = [iChronology_ getYearMillisWithInt:year + 1];
  }
  return instant;
}

- (long long int)remainderWithLong:(long long int)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) year];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicYearDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:", "BasicYearDateTimeField", NULL, 0x0, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_BasicYearDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicYearDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x14, "Lorg.joda.time.chrono.BasicChronology;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicYearDateTimeField = { "BasicYearDateTimeField", "org.joda.time.chrono", NULL, 0x0, 18, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicYearDateTimeField;
}

@end
