//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/convert/ConverterSet.java
//

#include "Converter.h"
#include "ConverterSet.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

@implementation OrgJodaTimeConvertConverterSet

- (instancetype)initWithOrgJodaTimeConvertConverterArray:(IOSObjectArray *)converters {
  if (self = [super init]) {
    iConverters_ = converters;
    iSelectEntries_ = [IOSObjectArray arrayWithLength:1 << 4 type:[IOSClass classWithClass:[OrgJodaTimeConvertConverterSet_Entry class]]];
  }
  return self;
}

- (id<OrgJodaTimeConvertConverter>)selectWithIOSClass:(IOSClass *)type {
  IOSObjectArray *entries = iSelectEntries_;
  int length = (int) [((IOSObjectArray *) nil_chk(entries)) count];
  int index = type == nil ? 0 : ((int) [type hash]) & (length - 1);
  OrgJodaTimeConvertConverterSet_Entry *e;
  while ((e = IOSObjectArray_Get(entries, index)) != nil) {
    if (((OrgJodaTimeConvertConverterSet_Entry *) nil_chk(e))->iType_ == type) {
      return e->iConverter_;
    }
    if (++index >= length) {
      index = 0;
    }
  }
  id<OrgJodaTimeConvertConverter> converter = [OrgJodaTimeConvertConverterSet selectSlowWithOrgJodaTimeConvertConverterSet:self withIOSClass:type];
  e = [[OrgJodaTimeConvertConverterSet_Entry alloc] initWithIOSClass:type withOrgJodaTimeConvertConverter:converter];
  entries = (IOSObjectArray *) check_class_cast([entries clone], [IOSObjectArray class]);
  (void) IOSObjectArray_Set(nil_chk(entries), index, e);
  for (int i = 0; i < length; i++) {
    if (IOSObjectArray_Get(entries, i) == nil) {
      iSelectEntries_ = entries;
      return converter;
    }
  }
  int newLength = length << 1;
  IOSObjectArray *newEntries = [IOSObjectArray arrayWithLength:newLength type:[IOSClass classWithClass:[OrgJodaTimeConvertConverterSet_Entry class]]];
  for (int i = 0; i < length; i++) {
    e = IOSObjectArray_Get(entries, i);
    type = ((OrgJodaTimeConvertConverterSet_Entry *) nil_chk(e))->iType_;
    index = type == nil ? 0 : ((int) [type hash]) & (newLength - 1);
    while (IOSObjectArray_Get(newEntries, index) != nil) {
      if (++index >= newLength) {
        index = 0;
      }
    }
    (void) IOSObjectArray_Set(newEntries, index, e);
  }
  iSelectEntries_ = newEntries;
  return converter;
}

- (int)size {
  return (int) [((IOSObjectArray *) nil_chk(iConverters_)) count];
}

- (void)copyIntoWithOrgJodaTimeConvertConverterArray:(IOSObjectArray *)converters {
  [JavaLangSystem arraycopyWithId:iConverters_ withInt:0 withId:converters withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(iConverters_)) count]];
}

- (OrgJodaTimeConvertConverterSet *)addWithOrgJodaTimeConvertConverter:(id<OrgJodaTimeConvertConverter>)converter
                                  withOrgJodaTimeConvertConverterArray:(IOSObjectArray *)removed {
  IOSObjectArray *converters = iConverters_;
  int length = (int) [((IOSObjectArray *) nil_chk(converters)) count];
  for (int i = 0; i < length; i++) {
    id<OrgJodaTimeConvertConverter> existing = IOSObjectArray_Get(converters, i);
    if ([((id<OrgJodaTimeConvertConverter>) nil_chk(converter)) isEqual:existing]) {
      if (removed != nil) {
        (void) IOSObjectArray_Set(removed, 0, nil);
      }
      return self;
    }
    if ([converter getSupportedType] == [((id<OrgJodaTimeConvertConverter>) nil_chk(existing)) getSupportedType]) {
      IOSObjectArray *copy_ = [IOSObjectArray arrayWithLength:length type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeConvertConverter)]];
      for (int j = 0; j < length; j++) {
        if (j != i) {
          (void) IOSObjectArray_Set(copy_, j, IOSObjectArray_Get(converters, j));
        }
        else {
          (void) IOSObjectArray_Set(copy_, j, converter);
        }
      }
      if (removed != nil) {
        (void) IOSObjectArray_Set(removed, 0, existing);
      }
      return [[OrgJodaTimeConvertConverterSet alloc] initWithOrgJodaTimeConvertConverterArray:copy_];
    }
  }
  IOSObjectArray *copy_ = [IOSObjectArray arrayWithLength:length + 1 type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeConvertConverter)]];
  [JavaLangSystem arraycopyWithId:converters withInt:0 withId:copy_ withInt:0 withInt:length];
  (void) IOSObjectArray_Set(copy_, length, converter);
  if (removed != nil) {
    (void) IOSObjectArray_Set(removed, 0, nil);
  }
  return [[OrgJodaTimeConvertConverterSet alloc] initWithOrgJodaTimeConvertConverterArray:copy_];
}

- (OrgJodaTimeConvertConverterSet *)removeWithOrgJodaTimeConvertConverter:(id<OrgJodaTimeConvertConverter>)converter
                                     withOrgJodaTimeConvertConverterArray:(IOSObjectArray *)removed {
  IOSObjectArray *converters = iConverters_;
  int length = (int) [((IOSObjectArray *) nil_chk(converters)) count];
  for (int i = 0; i < length; i++) {
    if ([((id<OrgJodaTimeConvertConverter>) nil_chk(converter)) isEqual:IOSObjectArray_Get(converters, i)]) {
      return [self removeWithInt:i withOrgJodaTimeConvertConverterArray:removed];
    }
  }
  if (removed != nil) {
    (void) IOSObjectArray_Set(removed, 0, nil);
  }
  return self;
}

- (OrgJodaTimeConvertConverterSet *)removeWithInt:(int)index
             withOrgJodaTimeConvertConverterArray:(IOSObjectArray *)removed {
  IOSObjectArray *converters = iConverters_;
  int length = (int) [((IOSObjectArray *) nil_chk(converters)) count];
  if (index >= length) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] init];
  }
  if (removed != nil) {
    (void) IOSObjectArray_Set(removed, 0, IOSObjectArray_Get(converters, index));
  }
  IOSObjectArray *copy_ = [IOSObjectArray arrayWithLength:length - 1 type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeConvertConverter)]];
  int j = 0;
  for (int i = 0; i < length; i++) {
    if (i != index) {
      (void) IOSObjectArray_Set(copy_, j++, IOSObjectArray_Get(converters, i));
    }
  }
  return [[OrgJodaTimeConvertConverterSet alloc] initWithOrgJodaTimeConvertConverterArray:copy_];
}

+ (id<OrgJodaTimeConvertConverter>)selectSlowWithOrgJodaTimeConvertConverterSet:(OrgJodaTimeConvertConverterSet *)set
                                                                   withIOSClass:(IOSClass *)type {
  IOSObjectArray *converters = ((OrgJodaTimeConvertConverterSet *) nil_chk(set))->iConverters_;
  int length = (int) [((IOSObjectArray *) nil_chk(converters)) count];
  id<OrgJodaTimeConvertConverter> converter;
  for (int i = length; --i >= 0; ) {
    converter = IOSObjectArray_Get(converters, i);
    IOSClass *supportedType = [((id<OrgJodaTimeConvertConverter>) nil_chk(converter)) getSupportedType];
    if (supportedType == type) {
      return converter;
    }
    if (supportedType == nil || (type != nil && ![supportedType isAssignableFrom:type])) {
      set = [set removeWithInt:i withOrgJodaTimeConvertConverterArray:nil];
      converters = ((OrgJodaTimeConvertConverterSet *) nil_chk(set))->iConverters_;
      length = (int) [((IOSObjectArray *) nil_chk(converters)) count];
    }
  }
  if (type == nil || length == 0) {
    return nil;
  }
  if (length == 1) {
    return IOSObjectArray_Get(nil_chk(converters), 0);
  }
  for (int i = length; --i >= 0; ) {
    converter = IOSObjectArray_Get(nil_chk(converters), i);
    IOSClass *supportedType = [((id<OrgJodaTimeConvertConverter>) nil_chk(converter)) getSupportedType];
    for (int j = length; --j >= 0; ) {
      if (j != i && [nil_chk([((id<OrgJodaTimeConvertConverter>) nil_chk(IOSObjectArray_Get(converters, j))) getSupportedType]) isAssignableFrom:supportedType]) {
        set = [((OrgJodaTimeConvertConverterSet *) nil_chk(set)) removeWithInt:j withOrgJodaTimeConvertConverterArray:nil];
        converters = ((OrgJodaTimeConvertConverterSet *) nil_chk(set))->iConverters_;
        length = (int) [((IOSObjectArray *) nil_chk(converters)) count];
        i = length - 1;
      }
    }
  }
  if (length == 1) {
    return IOSObjectArray_Get(nil_chk(converters), 0);
  }
  JavaLangStringBuilder *msg = [[JavaLangStringBuilder alloc] init];
  (void) [msg appendWithNSString:@"Unable to find best converter for type \""];
  (void) [msg appendWithNSString:[((IOSClass *) nil_chk(type)) getName]];
  (void) [msg appendWithNSString:@"\" from remaining set: "];
  for (int i = 0; i < length; i++) {
    converter = IOSObjectArray_Get(nil_chk(converters), i);
    IOSClass *supportedType = [((id<OrgJodaTimeConvertConverter>) nil_chk(converter)) getSupportedType];
    (void) [msg appendWithNSString:[[converter getClass] getName]];
    (void) [msg appendWithChar:'['];
    (void) [msg appendWithNSString:supportedType == nil ? nil : [supportedType getName]];
    (void) [msg appendWithNSString:@"], "];
  }
  @throw [[JavaLangIllegalStateException alloc] initWithNSString:[msg description]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeConvertConverterSet *)other {
  [super copyAllFieldsTo:other];
  other->iConverters_ = iConverters_;
  other->iSelectEntries_ = iSelectEntries_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeConvertConverterArray:", "ConverterSet", NULL, 0x0, NULL },
    { "selectWithIOSClass:", "select", "Lorg.joda.time.convert.Converter;", 0x0, "Ljava.lang.IllegalStateException;" },
    { "size", NULL, "I", 0x0, NULL },
    { "copyIntoWithOrgJodaTimeConvertConverterArray:", "copyInto", "V", 0x0, NULL },
    { "addWithOrgJodaTimeConvertConverter:withOrgJodaTimeConvertConverterArray:", "add", "Lorg.joda.time.convert.ConverterSet;", 0x0, NULL },
    { "removeWithOrgJodaTimeConvertConverter:withOrgJodaTimeConvertConverterArray:", "remove", "Lorg.joda.time.convert.ConverterSet;", 0x0, NULL },
    { "removeWithInt:withOrgJodaTimeConvertConverterArray:", "remove", "Lorg.joda.time.convert.ConverterSet;", 0x0, NULL },
    { "selectSlowWithOrgJodaTimeConvertConverterSet:withIOSClass:", "selectSlow", "Lorg.joda.time.convert.Converter;", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iConverters_", NULL, 0x12, "[Lorg.joda.time.convert.Converter;", NULL,  },
    { "iSelectEntries_", NULL, 0x2, "[Lorg.joda.time.convert.ConverterSet$Entry;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeConvertConverterSet = { "ConverterSet", "org.joda.time.convert", NULL, 0x0, 8, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeConvertConverterSet;
}

@end

@implementation OrgJodaTimeConvertConverterSet_Entry

- (instancetype)initWithIOSClass:(IOSClass *)type
 withOrgJodaTimeConvertConverter:(id<OrgJodaTimeConvertConverter>)converter {
  if (self = [super init]) {
    iType_ = type;
    iConverter_ = converter;
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgJodaTimeConvertConverterSet_Entry *)other {
  [super copyAllFieldsTo:other];
  other->iConverter_ = iConverter_;
  other->iType_ = iType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withOrgJodaTimeConvertConverter:", "Entry", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iType_", NULL, 0x10, "Ljava.lang.Class;", NULL,  },
    { "iConverter_", NULL, 0x10, "Lorg.joda.time.convert.Converter;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeConvertConverterSet_Entry = { "Entry", "org.joda.time.convert", "ConverterSet", 0x8, 1, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeConvertConverterSet_Entry;
}

@end
