//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/OffsetDateTimeField.java
//

#ifndef _OrgJodaTimeFieldOffsetDateTimeField_H_
#define _OrgJodaTimeFieldOffsetDateTimeField_H_

@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;

#import "JreEmulation.h"
#include "DecoratedDateTimeField.h"

#define OrgJodaTimeFieldOffsetDateTimeField_serialVersionUID 3145790132623583142LL

/**
 @brief Generic offset adjusting datetime field.
 <p> OffsetDateTimeField is thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFieldOffsetDateTimeField : OrgJodaTimeFieldDecoratedDateTimeField {
 @public
  int iOffset_;
  int iMin_;
  int iMax_;
}

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param offset offset to add to field values
 @throws IllegalArgumentException if offset is zero
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                         withInt:(int)offset;

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param type the field type this field actually uses
 @param offset offset to add to field values
 @throws IllegalArgumentException if offset is zero
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)offset;

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param type the field type this field actually uses
 @param offset offset to add to field values
 @param minValue minimum allowed value
 @param maxValue maximum allowed value
 @throws IllegalArgumentException if offset is zero
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)offset
                                         withInt:(int)minValue
                                         withInt:(int)maxValue;

/**
 @brief Get the amount of offset units from the specified time instant.
 @param instant the time instant in millis to query.
 @return the amount of units extracted from the input.
 */
- (int)getWithLong:(long long int)instant;

/**
 @brief Add the specified amount of offset units to the specified time instant.
 The amount added may be negative.
 @param instant the time instant in millis to update.
 @param amount the amount of units to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount;

/**
 @brief Add the specified amount of offset units to the specified time instant.
 The amount added may be negative.
 @param instant the time instant in millis to update.
 @param amount the amount of units to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount;

/**
 @brief Add to the offset component of the specified time instant, wrapping around within that component if necessary.
 @param instant the time instant in millis to update.
 @param amount the amount of units to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount;

/**
 @brief Set the specified amount of offset units to the specified time instant.
 @param instant the time instant in millis to update.
 @param value value of units to set.
 @return the updated time instant.
 @throws IllegalArgumentException if value is too large or too small.
 */
- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value;

- (BOOL)isLeapWithLong:(long long int)instant;

- (int)getLeapAmountWithLong:(long long int)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

/**
 @brief Get the minimum value for the field.
 @return the minimum value
 */
- (int)getMinimumValue;

/**
 @brief Get the maximum value for the field.
 @return the maximum value
 */
- (int)getMaximumValue;

- (long long int)roundFloorWithLong:(long long int)instant;

- (long long int)roundCeilingWithLong:(long long int)instant;

- (long long int)roundHalfFloorWithLong:(long long int)instant;

- (long long int)roundHalfCeilingWithLong:(long long int)instant;

- (long long int)roundHalfEvenWithLong:(long long int)instant;

- (long long int)remainderWithLong:(long long int)instant;

/**
 @brief Returns the offset added to the field values.
 @return the offset
 */
- (int)getOffset;

- (void)copyAllFieldsTo:(OrgJodaTimeFieldOffsetDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFieldOffsetDateTimeField_init() {}

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFieldOffsetDateTimeField, serialVersionUID, long long int)

#endif // _OrgJodaTimeFieldOffsetDateTimeField_H_
