//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/BaseDurationField.java
//

#include "BaseDurationField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"

@implementation OrgJodaTimeFieldBaseDurationField

- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (self = [super init]) {
    if (type == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The type must not be null"];
    }
    iType_ = type;
  }
  return self;
}

- (OrgJodaTimeDurationFieldType *)getType {
  return iType_;
}

- (NSString *)getName {
  return [((OrgJodaTimeDurationFieldType *) nil_chk(iType_)) getName];
}

- (BOOL)isSupported {
  return YES;
}

- (int)getValueWithLong:(long long int)duration {
  return [OrgJodaTimeFieldFieldUtils safeToIntWithLong:[self getValueAsLongWithLong:duration]];
}

- (long long int)getValueAsLongWithLong:(long long int)duration {
  return duration / [self getUnitMillis];
}

- (int)getValueWithLong:(long long int)duration
               withLong:(long long int)instant {
  return [OrgJodaTimeFieldFieldUtils safeToIntWithLong:[self getValueAsLongWithLong:duration withLong:instant]];
}

- (long long int)getMillisWithInt:(int)value {
  return value * [self getUnitMillis];
}

- (long long int)getMillisWithLong:(long long int)value {
  return [OrgJodaTimeFieldFieldUtils safeMultiplyWithLong:value withLong:[self getUnitMillis]];
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [OrgJodaTimeFieldFieldUtils safeToIntWithLong:[self getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant]];
}

- (int)compareToWithId:(OrgJodaTimeDurationField *)otherField {
  if (otherField != nil && ![otherField isKindOfClass:[OrgJodaTimeDurationField class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  long long int otherMillis = [((OrgJodaTimeDurationField *) nil_chk(otherField)) getUnitMillis];
  long long int thisMillis = [self getUnitMillis];
  if (thisMillis == otherMillis) {
    return 0;
  }
  if (thisMillis < otherMillis) {
    return -1;
  }
  else {
    return 1;
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"DurationField[%@]", [self getName]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldBaseDurationField *)other {
  [super copyAllFieldsTo:other];
  other->iType_ = iType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDurationFieldType:", "BaseDurationField", NULL, 0x4, NULL },
    { "getType", NULL, "Lorg.joda.time.DurationFieldType;", 0x11, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x11, NULL },
    { "isSupported", NULL, "Z", 0x11, NULL },
    { "getValueWithLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL },
    { "getMillisWithInt:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:", "getMillis", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "compareToWithOrgJodaTimeDurationField:", "compareTo", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldBaseDurationField_serialVersionUID },
    { "iType_", NULL, 0x12, "Lorg.joda.time.DurationFieldType;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldBaseDurationField = { "BaseDurationField", "org.joda.time.field", NULL, 0x401, 12, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFieldBaseDurationField;
}

@end
