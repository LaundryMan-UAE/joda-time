//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/LocalDateTime.java
//

#ifndef _OrgJodaTimeLocalDateTime_H_
#define _OrgJodaTimeLocalDateTime_H_

@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeLocalDate;
@class OrgJodaTimeLocalDateTime_Property;
@class OrgJodaTimeLocalTime;
@protocol OrgJodaTimeReadableDuration;
@protocol OrgJodaTimeReadablePeriod;

#import "JreEmulation.h"
#include "AbstractReadableInstantFieldProperty.h"
#include "BaseLocal.h"
#include "ReadablePartial.h"
#include "java/io/Serializable.h"

#define OrgJodaTimeLocalDateTime_DAY_OF_MONTH 2
#define OrgJodaTimeLocalDateTime_MILLIS_OF_DAY 3
#define OrgJodaTimeLocalDateTime_MONTH_OF_YEAR 1
#define OrgJodaTimeLocalDateTime_YEAR 0
#define OrgJodaTimeLocalDateTime_serialVersionUID -268716875315837168LL

/**
 @brief LocalDateTime is an unmodifiable datetime class representing a datetime without a time zone.
 <p> LocalDateTime implements the ReadablePartial interface. To do this, certain methods focus on key fields Year, MonthOfYear, DayOfYear and MillisOfDay. However, <b>all</b> fields may in fact be queried. <p> Internally, LocalDateTime uses a single millisecond-based value to represent the local datetime. This value is only used internally and is not exposed to applications. <p> Calculations on LocalDateTime are performed using a Chronology . This chronology will be set internally to be in the UTC time zone for all calculations. <p>Each individual field can be queried in two ways: <ul> <li><code>getHourOfDay()</code> <li><code>hourOfDay().get()</code> </ul> The second technique also provides access to other useful methods on the field: <ul> <li>numeric value <li>text value <li>short text value <li>maximum/minimum values <li>add/subtract <li>set <li>rounding </ul> <p> LocalDateTime is thread-safe and immutable, provided that the Chronology is as well. All standard Chronology classes supplied are thread-safe and immutable.
 @author Stephen Colebourne
 @since 1.3
 */
@interface OrgJodaTimeLocalDateTime : OrgJodaTimeBaseBaseLocal < OrgJodaTimeReadablePartial, JavaIoSerializable > {
 @public
  /**
   @brief The local millis from 1970-01-01T00:00:00
   */
  jlong iLocalMillis_;
  /**
   @brief The chronology to use in UTC
   */
  OrgJodaTimeChronology *iChronology_;
}

/**
 @brief Obtains a <code>LocalDateTime</code> set to the current system millisecond time using <code>ISOChronology</code> in the default time zone.
 The resulting object does not use the zone.
 @return the current date, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDateTime *)now;

/**
 @brief Obtains a <code>LocalDateTime</code> set to the current system millisecond time using <code>ISOChronology</code> in the specified time zone.
 The resulting object does not use the zone.
 @param zone the time zone, not null
 @return the current date, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Obtains a <code>LocalDateTime</code> set to the current system millisecond time using the specified chronology.
 The resulting object does not use the zone.
 @param chronology the chronology, not null
 @return the current date, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Parses a <code>LocalDateTime</code> from the specified string.
 <p> This uses ISODateTimeFormat#localDateOptionalTimeParser() .
 @param str the string to parse, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDateTime *)parseWithNSString:(NSString *)str;

/**
 @brief Parses a <code>LocalDateTime</code> from the specified string using a formatter.
 @param str the string to parse, not null
 @param formatter the formatter to use, not null
 @since 2.0
 */
+ (OrgJodaTimeLocalDateTime *)parseWithNSString:(NSString *)str
         withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

/**
 @brief Constructs a LocalDateTime from a <code>java.util.Calendar</code> using exactly the same field values.
 <p> Each field is queried from the Calendar and assigned to the LocalDateTime. This is useful if you have been using the Calendar as a local date, ignoring the zone. <p> One advantage of this method is that this method is unaffected if the version of the time zone data differs between the JDK and Joda-Time. That is because the local field values are transferred, calculated using the JDK time zone data and without using the Joda-Time time zone data. <p> This factory method ignores the type of the calendar and always creates a LocalDateTime with ISO chronology. It is expected that you will only pass in instances of <code>GregorianCalendar</code> however this is not validated.
 @param calendar the Calendar to extract fields from, not null
 @return the created local date-time, not null
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */
+ (OrgJodaTimeLocalDateTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

/**
 @brief Constructs a LocalDateTime from a <code>java.util.Date</code> using exactly the same field values.
 <p> Each field is queried from the Date and assigned to the LocalDateTime. This is useful if you have been using the Date as a local date, ignoring the zone. <p> One advantage of this method is that this method is unaffected if the version of the time zone data differs between the JDK and Joda-Time. That is because the local field values are transferred, calculated using the JDK time zone data and without using the Joda-Time time zone data. <p> This factory method always creates a LocalDateTime with ISO chronology.
 @param date the Date to extract fields from, not null
 @return the created local date-time, not null
 @throws IllegalArgumentException if the calendar is null
 @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */
+ (OrgJodaTimeLocalDateTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date;

/**
 @brief Constructs an instance set to the current local time evaluated using ISO chronology in the default zone.
 <p> Once the constructor is completed, the zone is no longer used.
 */
- (instancetype)init;

/**
 @brief Constructs an instance set to the current local time evaluated using ISO chronology in the specified zone.
 <p> If the specified time zone is null, the default zone is used. Once the constructor is completed, the zone is no longer used.
 @param zone the time zone, null means default zone
 */
- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Constructs an instance set to the current local time evaluated using specified chronology.
 <p> If the chronology is null, ISO chronology in the default time zone is used. Once the constructor is completed, the zone is no longer used.
 @param chronology the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the default zone.
 <p> Once the constructor is completed, the zone is no longer used.
 @param instant the milliseconds from 1970-01-01T00:00:00Z
 */
- (instancetype)initWithLong:(jlong)instant;

/**
 @brief Constructs an instance set to the local time defined by the specified instant evaluated using ISO chronology in the specified zone.
 <p> If the specified time zone is null, the default zone is used. Once the constructor is completed, the zone is no longer used.
 @param instant the milliseconds from 1970-01-01T00:00:00Z
 @param zone the time zone, null means default zone
 */
- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Constructs an instance set to the local time defined by the specified instant evaluated using the specified chronology.
 <p> If the chronology is null, ISO chronology in the default zone is used. Once the constructor is completed, the zone is no longer used.
 @param instant the milliseconds from 1970-01-01T00:00:00Z
 @param chronology the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs an instance from an Object that represents a datetime.
 <p> If the object contains no chronology, <code>ISOChronology</code> is used. If the object contains no time zone, the default zone is used. Once the constructor is completed, the zone is no longer used. <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadablePartial, ReadableInstant, String, Calendar and Date. The String formats are described by ISODateTimeFormat#localDateOptionalTimeParser() . The default String converter ignores the zone and only parses the field values.
 @param instant the datetime object
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant;

/**
 @brief Constructs an instance from an Object that represents a datetime, forcing the time zone to that specified.
 <p> If the object contains no chronology, <code>ISOChronology</code> is used. If the specified time zone is null, the default zone is used. Once the constructor is completed, the zone is no longer used. <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadablePartial, ReadableInstant, String, Calendar and Date. The String formats are described by ISODateTimeFormat#localDateOptionalTimeParser() . The default String converter ignores the zone and only parses the field values.
 @param instant the datetime object
 @param zone the time zone
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Constructs an instance from an Object that represents a datetime, using the specified chronology.
 <p> If the chronology is null, ISO in the default time zone is used. Once the constructor is completed, the zone is no longer used. If the instant contains a chronology, it will be ignored. For example, passing a <code>LocalDate</code> and a different chronology will return a date with the year/month/day from the date applied unaltered to the specified chronology. <p> The recognised object types are defined in org.joda.time.convert.ConverterManager ConverterManager and include ReadablePartial, ReadableInstant, String, Calendar and Date. The String formats are described by ISODateTimeFormat#localDateOptionalTimeParser() . The default String converter ignores the zone and only parses the field values.
 @param instant the datetime object
 @param chronology the chronology
 @throws IllegalArgumentException if the instant is invalid
 */
- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Constructs an instance set to the specified date and time using <code>ISOChronology</code>.
 @param year the year
 @param monthOfYear the month of the year, from 1 to 12
 @param dayOfMonth the day of the month, from 1 to 31
 @param hourOfDay the hour of the day, from 0 to 23
 @param minuteOfHour the minute of the hour, from 0 to 59
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour;

/**
 @brief Constructs an instance set to the specified date and time using <code>ISOChronology</code>.
 @param year the year
 @param monthOfYear the month of the year, from 1 to 12
 @param dayOfMonth the day of the month, from 1 to 31
 @param hourOfDay the hour of the day, from 0 to 23
 @param minuteOfHour the minute of the hour, from 0 to 59
 @param secondOfMinute the second of the minute, from 0 to 59
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute;

/**
 @brief Constructs an instance set to the specified date and time using <code>ISOChronology</code>.
 @param year the year
 @param monthOfYear the month of the year, from 1 to 12
 @param dayOfMonth the day of the month, from 1 to 31
 @param hourOfDay the hour of the day, from 0 to 23
 @param minuteOfHour the minute of the hour, from 0 to 59
 @param secondOfMinute the second of the minute, from 0 to 59
 @param millisOfSecond the millisecond of the second, from 0 to 999
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond;

/**
 @brief Constructs an instance set to the specified date and time using the specified chronology, whose zone is ignored.
 <p> If the chronology is null, <code>ISOChronology</code> is used.
 @param year the year, valid values defined by the chronology
 @param monthOfYear the month of the year, valid values defined by the chronology
 @param dayOfMonth the day of the month, valid values defined by the chronology
 @param hourOfDay the hour of the day, valid values defined by the chronology
 @param minuteOfHour the minute of the hour, valid values defined by the chronology
 @param secondOfMinute the second of the minute, valid values defined by the chronology
 @param millisOfSecond the millisecond of the second, valid values defined by the chronology
 @param chronology the chronology, null means ISOChronology in default zone
 */
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

/**
 @brief Handle broken serialization from other tools.
 @return the resolved object, not null
 */
- (id)readResolve;

/**
 @brief Gets the number of fields in this partial, which is four.
 The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.
 @return the field count, four
 */
- (jint)size;

/**
 @brief Gets the field for a specific index in the chronology specified.
 <p> This method must not use any instance variables.
 @param index the index to retrieve
 @param chrono the chronology to use
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

/**
 @brief Gets the value of the field at the specifed index.
 <p> This method is required to support the <code>ReadablePartial</code> interface. The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.
 @param index the index, zero to two
 @return the value
 @throws IndexOutOfBoundsException if the index is invalid
 */
- (jint)getValueWithInt:(jint)index;

/**
 @brief Get the value of one of the fields of a datetime.
 <p> This method gets the value of the specified field. For example: <pre> DateTime dt = new DateTime(); int year = dt.get(DateTimeFieldType.year()); </pre>
 @param type a field type, usually obtained from DateTimeFieldType, not null
 @return the value of that field
 @throws IllegalArgumentException if the field type is null
 */
- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Checks if the field type specified is supported by this local datetime and chronology.
 This can be used to avoid exceptions in #get(DateTimeFieldType) .
 @param type a field type, usually obtained from DateTimeFieldType
 @return true if the field type is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Checks if the duration type specified is supported by this local datetime and chronology.
 @param type a duration type, usually obtained from DurationFieldType
 @return true if the field type is supported
 */
- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

/**
 @brief Gets the milliseconds of the datetime instant from the Java epoch of 1970-01-01T00:00:00 (not fixed to any specific time zone).
 @return the number of milliseconds since 1970-01-01T00:00:00
 @since 1.5 (previously private)
 */
- (jlong)getLocalMillis;

/**
 @brief Gets the chronology of the datetime.
 @return the Chronology that the datetime is using
 */
- (OrgJodaTimeChronology *)getChronology;

/**
 @brief Compares this ReadablePartial with another returning true if the chronology, field types and values are equal.
 @param partial an object to check against
 @return true if fields and values are equal
 */
- (jboolean)isEqual:(id)partial;

/**
 @brief Compares this partial with another returning an integer indicating the order.
 <p> The fields are compared in order, from largest to smallest. The first field that is non-equal is used to determine the result. <p> The specified object must be a partial instance whose field types match those of this partial.
 @param partial an object to check against
 @return negative if this is less, zero if equal, positive if greater
 @throws ClassCastException if the partial is the wrong class or if it has field types that don't match
 @throws NullPointerException if the partial is null
 */
- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial;

/**
 @brief Converts this object to a DateTime using the default zone.
 <p> When the time zone is applied, the local date-time may be affected by daylight saving. In a daylight saving gap, when the local time does not exist, this method will throw an exception. In a daylight saving overlap, when the same local time occurs twice, this method returns the first occurrence of the local time.
 @return <code>this</code>
 @throws IllegalInstantException if the local time does not exist when the time zone is applied
 */
- (OrgJodaTimeDateTime *)toDateTime;

/**
 @brief Converts this object to a DateTime using the specified zone.
 <p> When the time zone is applied, the local date-time may be affected by daylight saving. In a daylight saving gap, when the local time does not exist, this method will throw an exception. In a daylight saving overlap, when the same local time occurs twice, this method returns the first occurrence of the local time.
 @param zone time zone to apply, or default if null
 @return a DateTime using the same millis
 @throws IllegalInstantException if the local time does not exist when the time zone is applied
 */
- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Converts this object to a LocalDate with the same date and chronology.
 @return a LocalDate with the same date and chronology
 */
- (OrgJodaTimeLocalDate *)toLocalDate;

/**
 @brief Converts this object to a LocalTime with the same time and chronology.
 @return a LocalTime with the same time and chronology
 */
- (OrgJodaTimeLocalTime *)toLocalTime;

/**
 @brief Get the date time as a <code>java.util.Date</code>.
 <p> The <code>Date</code> object created has exactly the same fields as this date-time, except when the time would be invalid due to a daylight savings gap. In that case, the time will be set to the earliest valid time after the gap. <p> In the case of a daylight savings overlap, the earlier instant is selected. <p> Converting to a JDK Date is full of complications as the JDK Date constructor doesn't behave as you might expect around DST transitions. This method works by taking a first guess and then adjusting. This also handles the situation where the JDK time zone data differs from the Joda-Time time zone data.
 @return a Date initialised with this date-time, never null
 @since 2.0
 */
- (JavaUtilDate *)toDate;

/**
 @brief Get the date time as a <code>java.util.Date</code> using the specified time zone.
 <p> The <code>Date</code> object created has exactly the same fields as this date-time, except when the time would be invalid due to a daylight savings gap. In that case, the time will be set to the earliest valid time after the gap. <p> In the case of a daylight savings overlap, the earlier instant is selected. <p> Converting to a JDK Date is full of complications as the JDK Date constructor doesn't behave as you might expect around DST transitions. This method works by taking a first guess and then adjusting. This also handles the situation where the JDK time zone data differs from the Joda-Time time zone data. <p> Unlike #toDate() , this implementation does not rely on Java's synchronized time zone initialization logic, and should demonstrate better concurrent performance characteristics.
 @return a Date initialised with this date-time, never null
 @since 2.3
 */
- (JavaUtilDate *)toDateWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

/**
 @brief Correct <code>date</code> in case of DST overlap.
 <p> The <code>Date</code> object created has exactly the same fields as this date-time, except when the time would be invalid due to a daylight savings gap. In that case, the time will be set to the earliest valid time after the gap. <p> In the case of a daylight savings overlap, the earlier instant is selected. <p> Converting to a JDK Date is full of complications as the JDK Date constructor doesn't behave as you might expect around DST transitions. This method works by taking a first guess and then adjusting. This also handles the situation where the JDK time zone data differs from the Joda-Time time zone data.
 */
- (JavaUtilDate *)correctDstTransitionWithJavaUtilDate:(JavaUtilDate *)date
                                  withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

/**
 @brief Returns a copy of this datetime with different local millis.
 <p> The returned object will be a new instance of the same type. Only the millis will change, the chronology is kept. The returned object will be either be a new instance or <code>this</code>.
 @param newMillis the new millis, from 1970-01-01T00:00:00
 @return a copy of this datetime with different millis
 */
- (OrgJodaTimeLocalDateTime *)withLocalMillisWithLong:(jlong)newMillis;

/**
 @brief Returns a copy of this datetime with the specified date, retaining the time fields.
 <p> If the date is already the date passed in, then <code>this</code> is returned. <p> To set a single field use the properties, for example: <pre> DateTime set = dt.monthOfYear().setCopy(6); </pre>
 @param year the new year value
 @param monthOfYear the new monthOfYear value
 @param dayOfMonth the new dayOfMonth value
 @return a copy of this datetime with a different date
 @throws IllegalArgumentException if any value if invalid
 */
- (OrgJodaTimeLocalDateTime *)withDateWithInt:(jint)year
                                      withInt:(jint)monthOfYear
                                      withInt:(jint)dayOfMonth;

/**
 @brief Returns a copy of this datetime with the specified time, retaining the date fields.
 <p> If the time is already the time passed in, then <code>this</code> is returned. <p> To set a single field use the properties, for example: <pre> LocalDateTime set = dt.hourOfDay().setCopy(6); </pre>
 @param hourOfDay the hour of the day
 @param minuteOfHour the minute of the hour
 @param secondOfMinute the second of the minute
 @param millisOfSecond the millisecond of the second
 @return a copy of this datetime with a different time
 @throws IllegalArgumentException if any value if invalid
 */
- (OrgJodaTimeLocalDateTime *)withTimeWithInt:(jint)hourOfDay
                                      withInt:(jint)minuteOfHour
                                      withInt:(jint)secondOfMinute
                                      withInt:(jint)millisOfSecond;

/**
 @brief Returns a copy of this datetime with the partial set of fields replacing those from this instance.
 <p> For example, if the partial is a <code>TimeOfDay</code> then the time fields would be changed in the returned instance. If the partial is null, then <code>this</code> is returned.
 @param partial the partial set of fields to apply to this datetime, null ignored
 @return a copy of this datetime with a different set of fields
 @throws IllegalArgumentException if any value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

/**
 @brief Returns a copy of this datetime with the specified field set to a new value.
 <p> For example, if the field type is <code>hourOfDay</code> then the hour of day field would be changed in the returned instance. If the field type is null, then <code>this</code> is returned. <p> These three lines are equivalent: <pre> LocalDateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6); LocalDateTime updated = dt.dayOfMonth().setCopy(6); LocalDateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6); </pre>
 @param fieldType the field type to set, not null
 @param value the value to set
 @return a copy of this datetime with the field set
 @throws IllegalArgumentException if the value is null or invalid
 */
- (OrgJodaTimeLocalDateTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                withInt:(jint)value;

/**
 @brief Returns a copy of this datetime with the value of the specified field increased.
 <p> If the addition is zero or the field is null, then <code>this</code> is returned. <p> These three lines are equivalent: <pre> LocalDateTime added = dt.withFieldAdded(DurationFieldType.years(), 6); LocalDateTime added = dt.plusYears(6); LocalDateTime added = dt.plus(Period.years(6)); </pre>
 @param fieldType the field type to add to, not null
 @param amount the amount to add
 @return a copy of this datetime with the field updated
 @throws IllegalArgumentException if the value is null or invalid
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                     withInt:(jint)amount;

/**
 @brief Returns a copy of this datetime with the specified duration added.
 <p> If the addition is zero, then <code>this</code> is returned.
 @param durationToAdd the duration to add to this one, null means zero
 @param scalar the amount of times to add, such as -1 to subtract once
 @return a copy of this datetime with the duration added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                       withInt:(jint)scalar;

/**
 @brief Returns a copy of this datetime with the specified period added.
 <p> If the addition is zero, then <code>this</code> is returned. <p> This method is typically used to add multiple copies of complex period instances. Adding one field is best achieved using methods like #withFieldAdded(DurationFieldType,int) or #plusYears(int) .
 @param period the period to add to this one, null means zero
 @param scalar the amount of times to add, such as -1 to subtract once
 @return a copy of this datetime with the period added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                                   withInt:(jint)scalar;

/**
 @brief Returns a copy of this datetime with the specified duration added.
 <p> If the amount is zero or null, then <code>this</code> is returned.
 @param duration the duration to add to this one, null means zero
 @return a copy of this datetime with the duration added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/**
 @brief Returns a copy of this datetime with the specified period added.
 <p> If the amount is zero or null, then <code>this</code> is returned. <p> This method is typically used to add complex period instances. Adding one field is best achieved using methods like #plusYears(int) .
 @param period the period to add to this one, null means zero
 @return a copy of this datetime with the period added
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Returns a copy of this datetime plus the specified number of years.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusYears(6); LocalDateTime added = dt.plus(Period.years(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.years(), 6); </pre>
 @param years the amount of years to add, may be negative
 @return the new LocalDateTime plus the increased years
 */
- (OrgJodaTimeLocalDateTime *)plusYearsWithInt:(jint)years;

/**
 @brief Returns a copy of this datetime plus the specified number of months.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusMonths(6); LocalDateTime added = dt.plus(Period.months(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.months(), 6); </pre>
 @param months the amount of months to add, may be negative
 @return the new LocalDateTime plus the increased months
 */
- (OrgJodaTimeLocalDateTime *)plusMonthsWithInt:(jint)months;

/**
 @brief Returns a copy of this datetime plus the specified number of weeks.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusWeeks(6); LocalDateTime added = dt.plus(Period.weeks(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6); </pre>
 @param weeks the amount of weeks to add, may be negative
 @return the new LocalDateTime plus the increased weeks
 */
- (OrgJodaTimeLocalDateTime *)plusWeeksWithInt:(jint)weeks;

/**
 @brief Returns a copy of this datetime plus the specified number of days.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusDays(6); LocalDateTime added = dt.plus(Period.days(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.days(), 6); </pre>
 @param days the amount of days to add, may be negative
 @return the new LocalDateTime plus the increased days
 */
- (OrgJodaTimeLocalDateTime *)plusDaysWithInt:(jint)days;

/**
 @brief Returns a copy of this datetime plus the specified number of hours.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusHours(6); LocalDateTime added = dt.plus(Period.hours(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6); </pre>
 @param hours the amount of hours to add, may be negative
 @return the new LocalDateTime plus the increased hours
 */
- (OrgJodaTimeLocalDateTime *)plusHoursWithInt:(jint)hours;

/**
 @brief Returns a copy of this datetime plus the specified number of minutes.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusMinutes(6); LocalDateTime added = dt.plus(Period.minutes(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6); </pre>
 @param minutes the amount of minutes to add, may be negative
 @return the new LocalDateTime plus the increased minutes
 */
- (OrgJodaTimeLocalDateTime *)plusMinutesWithInt:(jint)minutes;

/**
 @brief Returns a copy of this datetime plus the specified number of seconds.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusSeconds(6); LocalDateTime added = dt.plus(Period.seconds(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6); </pre>
 @param seconds the amount of seconds to add, may be negative
 @return the new LocalDateTime plus the increased seconds
 */
- (OrgJodaTimeLocalDateTime *)plusSecondsWithInt:(jint)seconds;

/**
 @brief Returns a copy of this datetime plus the specified number of millis.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime added = dt.plusMillis(6); LocalDateTime added = dt.plus(Period.millis(6)); LocalDateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6); </pre>
 @param millis the amount of millis to add, may be negative
 @return the new LocalDateTime plus the increased millis
 */
- (OrgJodaTimeLocalDateTime *)plusMillisWithInt:(jint)millis;

/**
 @brief Returns a copy of this datetime with the specified duration taken away.
 <p> If the amount is zero or null, then <code>this</code> is returned.
 @param duration the duration to reduce this instant by
 @return a copy of this datetime with the duration taken away
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration;

/**
 @brief Returns a copy of this datetime with the specified period taken away.
 <p> If the amount is zero or null, then <code>this</code> is returned. <p> This method is typically used to subtract complex period instances. Subtracting one field is best achieved using methods like #minusYears(int) .
 @param period the period to reduce this instant by
 @return a copy of this datetime with the period taken away
 @throws ArithmeticException if the result exceeds the internal capacity
 */
- (OrgJodaTimeLocalDateTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

/**
 @brief Returns a copy of this datetime minus the specified number of years.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusYears(6); LocalDateTime subtracted = dt.minus(Period.years(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6); </pre>
 @param years the amount of years to subtract, may be negative
 @return the new LocalDateTime minus the increased years
 */
- (OrgJodaTimeLocalDateTime *)minusYearsWithInt:(jint)years;

/**
 @brief Returns a copy of this datetime minus the specified number of months.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusMonths(6); LocalDateTime subtracted = dt.minus(Period.months(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6); </pre>
 @param months the amount of months to subtract, may be negative
 @return the new LocalDateTime minus the increased months
 */
- (OrgJodaTimeLocalDateTime *)minusMonthsWithInt:(jint)months;

/**
 @brief Returns a copy of this datetime minus the specified number of weeks.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusWeeks(6); LocalDateTime subtracted = dt.minus(Period.weeks(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6); </pre>
 @param weeks the amount of weeks to subtract, may be negative
 @return the new LocalDateTime minus the increased weeks
 */
- (OrgJodaTimeLocalDateTime *)minusWeeksWithInt:(jint)weeks;

/**
 @brief Returns a copy of this datetime minus the specified number of days.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusDays(6); LocalDateTime subtracted = dt.minus(Period.days(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6); </pre>
 @param days the amount of days to subtract, may be negative
 @return the new LocalDateTime minus the increased days
 */
- (OrgJodaTimeLocalDateTime *)minusDaysWithInt:(jint)days;

/**
 @brief Returns a copy of this datetime minus the specified number of hours.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusHours(6); LocalDateTime subtracted = dt.minus(Period.hours(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6); </pre>
 @param hours the amount of hours to subtract, may be negative
 @return the new LocalDateTime minus the increased hours
 */
- (OrgJodaTimeLocalDateTime *)minusHoursWithInt:(jint)hours;

/**
 @brief Returns a copy of this datetime minus the specified number of minutes.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusMinutes(6); LocalDateTime subtracted = dt.minus(Period.minutes(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6); </pre>
 @param minutes the amount of minutes to subtract, may be negative
 @return the new LocalDateTime minus the increased minutes
 */
- (OrgJodaTimeLocalDateTime *)minusMinutesWithInt:(jint)minutes;

/**
 @brief Returns a copy of this datetime minus the specified number of seconds.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusSeconds(6); LocalDateTime subtracted = dt.minus(Period.seconds(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6); </pre>
 @param seconds the amount of seconds to subtract, may be negative
 @return the new LocalDateTime minus the increased seconds
 */
- (OrgJodaTimeLocalDateTime *)minusSecondsWithInt:(jint)seconds;

/**
 @brief Returns a copy of this datetime minus the specified number of millis.
 <p> This LocalDateTime instance is immutable and unaffected by this method call. <p> The following three lines are identical in effect: <pre> LocalDateTime subtracted = dt.minusMillis(6); LocalDateTime subtracted = dt.minus(Period.millis(6)); LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6); </pre>
 @param millis the amount of millis to subtract, may be negative
 @return the new LocalDateTime minus the increased millis
 */
- (OrgJodaTimeLocalDateTime *)minusMillisWithInt:(jint)millis;

/**
 @brief Gets the property object for the specified type, which contains many useful methods.
 @param fieldType the field type to get the chronology for
 @return the property object
 @throws IllegalArgumentException if the field is null or unsupported
 */
- (OrgJodaTimeLocalDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

/**
 @brief Get the era field value.
 @return the era
 */
- (jint)getEra;

/**
 @brief Get the year of era field value.
 @return the year of era
 */
- (jint)getCenturyOfEra;

/**
 @brief Get the year of era field value.
 @return the year of era
 */
- (jint)getYearOfEra;

/**
 @brief Get the year of century field value.
 @return the year of century
 */
- (jint)getYearOfCentury;

/**
 @brief Get the year field value.
 @return the year
 */
- (jint)getYear;

/**
 @brief Get the weekyear field value.
 <p> The weekyear is the year that matches with the weekOfWeekyear field. In the standard ISO8601 week algorithm, the first week of the year is that in which at least 4 days are in the year. As a result of this definition, day 1 of the first week may be in the previous year. The weekyear allows you to query the effective year for that day.
 @return the weekyear
 */
- (jint)getWeekyear;

/**
 @brief Get the month of year field value.
 @return the month of year
 */
- (jint)getMonthOfYear;

/**
 @brief Get the week of weekyear field value.
 <p> This field is associated with the "weekyear" via #getWeekyear() . In the standard ISO8601 week algorithm, the first week of the year is that in which at least 4 days are in the year. As a result of this definition, day 1 of the first week may be in the previous year.
 @return the week of a week based year
 */
- (jint)getWeekOfWeekyear;

/**
 @brief Get the day of year field value.
 @return the day of year
 */
- (jint)getDayOfYear;

/**
 @brief Get the day of month field value.
 <p> The values for the day of month are defined in org.joda.time.DateTimeConstants .
 @return the day of month
 */
- (jint)getDayOfMonth;

/**
 @brief Get the day of week field value.
 <p> The values for the day of week are defined in org.joda.time.DateTimeConstants .
 @return the day of week
 */
- (jint)getDayOfWeek;

/**
 @brief Get the hour of day field value.
 @return the hour of day
 */
- (jint)getHourOfDay;

/**
 @brief Get the minute of hour field value.
 @return the minute of hour
 */
- (jint)getMinuteOfHour;

/**
 @brief Get the second of minute field value.
 @return the second of minute
 */
- (jint)getSecondOfMinute;

/**
 @brief Get the millis of second field value.
 @return the millis of second
 */
- (jint)getMillisOfSecond;

/**
 @brief Get the millis of day field value.
 @return the millis of day
 */
- (jint)getMillisOfDay;

/**
 @brief Returns a copy of this datetime with the era field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of era changed.
 @param era the era to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withEraWithInt:(jint)era;

/**
 @brief Returns a copy of this datetime with the century of era field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of century of era changed.
 @param centuryOfEra the centurey of era to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withCenturyOfEraWithInt:(jint)centuryOfEra;

/**
 @brief Returns a copy of this datetime with the year of era field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of year of era changed.
 @param yearOfEra the year of era to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withYearOfEraWithInt:(jint)yearOfEra;

/**
 @brief Returns a copy of this datetime with the year of century field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of year of century changed.
 @param yearOfCentury the year of century to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withYearOfCenturyWithInt:(jint)yearOfCentury;

/**
 @brief Returns a copy of this datetime with the year field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of year changed.
 @param year the year to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withYearWithInt:(jint)year;

/**
 @brief Returns a copy of this datetime with the weekyear field updated.
 <p> The weekyear is the year that matches with the weekOfWeekyear field. In the standard ISO8601 week algorithm, the first week of the year is that in which at least 4 days are in the year. As a result of this definition, day 1 of the first week may be in the previous year. The weekyear allows you to query the effective year for that day. <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of weekyear changed.
 @param weekyear the weekyear to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withWeekyearWithInt:(jint)weekyear;

/**
 @brief Returns a copy of this datetime with the month of year field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of month of year changed.
 @param monthOfYear the month of year to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withMonthOfYearWithInt:(jint)monthOfYear;

/**
 @brief Returns a copy of this datetime with the week of weekyear field updated.
 <p> This field is associated with the "weekyear" via #withWeekyear(int) . In the standard ISO8601 week algorithm, the first week of the year is that in which at least 4 days are in the year. As a result of this definition, day 1 of the first week may be in the previous year. <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of week of weekyear changed.
 @param weekOfWeekyear the week of weekyear to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear;

/**
 @brief Returns a copy of this datetime with the day of year field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of day of year changed.
 @param dayOfYear the day of year to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withDayOfYearWithInt:(jint)dayOfYear;

/**
 @brief Returns a copy of this datetime with the day of month field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of day of month changed.
 @param dayOfMonth the day of month to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withDayOfMonthWithInt:(jint)dayOfMonth;

/**
 @brief Returns a copy of this datetime with the day of week field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of day of week changed.
 @param dayOfWeek the day of week to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withDayOfWeekWithInt:(jint)dayOfWeek;

/**
 @brief Returns a copy of this datetime with the hour of day field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of hour of day changed.
 @param hour the hour of day to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withHourOfDayWithInt:(jint)hour;

/**
 @brief Returns a copy of this datetime with the minute of hour field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of minute of hour changed.
 @param minute the minute of hour to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withMinuteOfHourWithInt:(jint)minute;

/**
 @brief Returns a copy of this datetime with the second of minute field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of second of minute changed.
 @param second the second of minute to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withSecondOfMinuteWithInt:(jint)second;

/**
 @brief Returns a copy of this datetime with the millis of second field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of millis of second changed.
 @param millis the millis of second to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withMillisOfSecondWithInt:(jint)millis;

/**
 @brief Returns a copy of this datetime with the millis of day field updated.
 <p> LocalDateTime is immutable, so there are no set methods. Instead, this method returns a new instance with the value of millis of day changed.
 @param millis the millis of day to set
 @return a copy of this object with the field set
 @throws IllegalArgumentException if the value is invalid
 */
- (OrgJodaTimeLocalDateTime *)withMillisOfDayWithInt:(jint)millis;

/**
 @brief Get the era property which provides access to advanced functionality.
 @return the era property
 */
- (OrgJodaTimeLocalDateTime_Property *)era;

/**
 @brief Get the century of era property which provides access to advanced functionality.
 @return the year of era property
 */
- (OrgJodaTimeLocalDateTime_Property *)centuryOfEra;

/**
 @brief Get the year of century property which provides access to advanced functionality.
 @return the year of era property
 */
- (OrgJodaTimeLocalDateTime_Property *)yearOfCentury;

/**
 @brief Get the year of era property which provides access to advanced functionality.
 @return the year of era property
 */
- (OrgJodaTimeLocalDateTime_Property *)yearOfEra;

/**
 @brief Get the year property which provides access to advanced functionality.
 @return the year property
 */
- (OrgJodaTimeLocalDateTime_Property *)year;

/**
 @brief Get the weekyear property which provides access to advanced functionality.
 @return the weekyear property
 */
- (OrgJodaTimeLocalDateTime_Property *)weekyear;

/**
 @brief Get the month of year property which provides access to advanced functionality.
 @return the month of year property
 */
- (OrgJodaTimeLocalDateTime_Property *)monthOfYear;

/**
 @brief Get the week of a week based year property which provides access to advanced functionality.
 @return the week of a week based year property
 */
- (OrgJodaTimeLocalDateTime_Property *)weekOfWeekyear;

/**
 @brief Get the day of year property which provides access to advanced functionality.
 @return the day of year property
 */
- (OrgJodaTimeLocalDateTime_Property *)dayOfYear;

/**
 @brief Get the day of month property which provides access to advanced functionality.
 @return the day of month property
 */
- (OrgJodaTimeLocalDateTime_Property *)dayOfMonth;

/**
 @brief Get the day of week property which provides access to advanced functionality.
 @return the day of week property
 */
- (OrgJodaTimeLocalDateTime_Property *)dayOfWeek;

/**
 @brief Get the hour of day field property which provides access to advanced functionality.
 @return the hour of day property
 */
- (OrgJodaTimeLocalDateTime_Property *)hourOfDay;

/**
 @brief Get the minute of hour field property which provides access to advanced functionality.
 @return the minute of hour property
 */
- (OrgJodaTimeLocalDateTime_Property *)minuteOfHour;

/**
 @brief Get the second of minute field property which provides access to advanced functionality.
 @return the second of minute property
 */
- (OrgJodaTimeLocalDateTime_Property *)secondOfMinute;

/**
 @brief Get the millis of second property which provides access to advanced functionality.
 @return the millis of second property
 */
- (OrgJodaTimeLocalDateTime_Property *)millisOfSecond;

/**
 @brief Get the millis of day property which provides access to advanced functionality.
 @return the millis of day property
 */
- (OrgJodaTimeLocalDateTime_Property *)millisOfDay;

/**
 @brief Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSS).
 @return ISO8601 time formatted string.
 */
- (NSString *)description;

/**
 @brief Output the date using the specified format pattern.
 @param pattern the pattern specification, null means use <code>toString</code>
 */
- (NSString *)toStringWithNSString:(NSString *)pattern;

/**
 @brief Output the date using the specified format pattern.
 @param pattern the pattern specification, null means use <code>toString</code>
 @param locale Locale to use, null means default
 */
- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)dealloc;

- (void)copyAllFieldsTo:(OrgJodaTimeLocalDateTime *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeLocalDateTime_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime, iChronology_, OrgJodaTimeChronology *)
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_now();
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_parseWithNSString_(NSString *str);
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter);
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar);
FOUNDATION_EXPORT OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalDateTime, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalDateTime, YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalDateTime, MONTH_OF_YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalDateTime, DAY_OF_MONTH, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalDateTime, MILLIS_OF_DAY, jint)

#define OrgJodaTimeLocalDateTime_Property_serialVersionUID -358138762846288LL

/**
 @brief LocalDateTime.Property binds a LocalDateTime to a DateTimeField allowing powerful datetime functionality to be easily accessed.
 <p> The simplest use of this class is as an alternative get method, here used to get the year '1972' (as an int) and the month 'December' (as a String). <pre> LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0); int year = dt.year().get(); String monthStr = dt.month().getAsText(); </pre> <p> Methods are also provided that allow date modification. These return new instances of LocalDateTime - they do not modify the original. The example below yields two independent immutable date objects 20 years apart. <pre> LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0); LocalDateTime dt1920 = dt.year().setCopy(1920); </pre> <p> LocalDateTime.Property itself is thread-safe and immutable, as well as the LocalDateTime being operated on.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.3
 */
@interface OrgJodaTimeLocalDateTime_Property : OrgJodaTimeFieldAbstractReadableInstantFieldProperty {
 @public
  /**
   @brief The instant this property is working against
   */
  OrgJodaTimeLocalDateTime *iInstant_;
  /**
   @brief The field this property is working against
   */
  OrgJodaTimeDateTimeField *iField_;
}

/**
 @brief Constructor.
 @param instant the instant to set
 @param field the field to use
 */
- (instancetype)initWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)instant
                    withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

/**
 @brief Writes the property in a safe serialization format.
 */
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

/**
 @brief Reads the property from a safe serialization format.
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

/**
 @brief Gets the field being used.
 @return the field
 */
- (OrgJodaTimeDateTimeField *)getField;

/**
 @brief Gets the milliseconds of the datetime that this property is linked to.
 @return the milliseconds
 */
- (jlong)getMillis;

/**
 @brief Gets the chronology of the datetime that this property is linked to.
 @return the chronology
 @since 1.4
 */
- (OrgJodaTimeChronology *)getChronology;

/**
 @brief Gets the LocalDateTime object linked to this property.
 @return the linked LocalDateTime
 */
- (OrgJodaTimeLocalDateTime *)getLocalDateTime;

/**
 @brief Adds to this field in a copy of this LocalDateTime.
 <p> The LocalDateTime attached to this property is unchanged by this call.
 @param value the value to add to the field in the copy
 @return a copy of the LocalDateTime with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDateTime *)addToCopyWithInt:(jint)value;

/**
 @brief Adds to this field in a copy of this LocalDateTime.
 <p> The LocalDateTime attached to this property is unchanged by this call.
 @param value the value to add to the field in the copy
 @return a copy of the LocalDateTime with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDateTime *)addToCopyWithLong:(jlong)value;

/**
 @brief Adds to this field, possibly wrapped, in a copy of this LocalDateTime.
 A field wrapped operation only changes this field. Thus 31st January addWrapField one day goes to the 1st January. <p> The LocalDateTime attached to this property is unchanged by this call.
 @param value the value to add to the field in the copy
 @return a copy of the LocalDateTime with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDateTime *)addWrapFieldToCopyWithInt:(jint)value;

/**
 @brief Sets this field in a copy of the LocalDateTime.
 <p> The LocalDateTime attached to this property is unchanged by this call.
 @param value the value to set the field in the copy to
 @return a copy of the LocalDateTime with the field value changed
 @throws IllegalArgumentException if the value isn't valid
 */
- (OrgJodaTimeLocalDateTime *)setCopyWithInt:(jint)value;

/**
 @brief Sets this field in a copy of the LocalDateTime to a parsed text value.
 <p> The LocalDateTime attached to this property is unchanged by this call.
 @param text the text value to set
 @param locale optional locale to use for selecting a text symbol
 @return a copy of the LocalDateTime with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeLocalDateTime *)setCopyWithNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Sets this field in a copy of the LocalDateTime to a parsed text value.
 <p> The LocalDateTime attached to this property is unchanged by this call.
 @param text the text value to set
 @return a copy of the LocalDateTime with the field value changed
 @throws IllegalArgumentException if the text value isn't valid
 */
- (OrgJodaTimeLocalDateTime *)setCopyWithNSString:(NSString *)text;

/**
 @brief Returns a new LocalDateTime with this field set to the maximum value for this field.
 <p> This operation is useful for obtaining a LocalDateTime on the last day of the month, as month lengths vary. <pre> LocalDateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue(); </pre> <p> The LocalDateTime attached to this property is unchanged by this call.
 @return a copy of the LocalDateTime with this field set to its maximum
 */
- (OrgJodaTimeLocalDateTime *)withMaximumValue;

/**
 @brief Returns a new LocalDateTime with this field set to the minimum value for this field.
 <p> The LocalDateTime attached to this property is unchanged by this call.
 @return a copy of the LocalDateTime with this field set to its minimum
 */
- (OrgJodaTimeLocalDateTime *)withMinimumValue;

/**
 @brief Rounds to the lowest whole unit of this field on a copy of this LocalDateTime.
 <p> For example, rounding floor on the hourOfDay field of a LocalDateTime where the time is 10:30 would result in new LocalDateTime with the time of 10:00.
 @return a copy of the LocalDateTime with the field value changed
 */
- (OrgJodaTimeLocalDateTime *)roundFloorCopy;

/**
 @brief Rounds to the highest whole unit of this field on a copy of this LocalDateTime.
 <p> For example, rounding floor on the hourOfDay field of a LocalDateTime where the time is 10:30 would result in new LocalDateTime with the time of 11:00.
 @return a copy of the LocalDateTime with the field value changed
 */
- (OrgJodaTimeLocalDateTime *)roundCeilingCopy;

/**
 @brief Rounds to the nearest whole unit of this field on a copy of this LocalDateTime, favoring the floor if halfway.
 @return a copy of the LocalDateTime with the field value changed
 */
- (OrgJodaTimeLocalDateTime *)roundHalfFloorCopy;

/**
 @brief Rounds to the nearest whole unit of this field on a copy of this LocalDateTime, favoring the ceiling if halfway.
 @return a copy of the LocalDateTime with the field value changed
 */
- (OrgJodaTimeLocalDateTime *)roundHalfCeilingCopy;

/**
 @brief Rounds to the nearest whole unit of this field on a copy of this LocalDateTime.
 If halfway, the ceiling is favored over the floor only if it makes this field's value even.
 @return a copy of the LocalDateTime with the field value changed
 */
- (OrgJodaTimeLocalDateTime *)roundHalfEvenCopy;

- (void)dealloc;

- (void)copyAllFieldsTo:(OrgJodaTimeLocalDateTime_Property *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeLocalDateTime_Property_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime_Property, iInstant_, OrgJodaTimeLocalDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime_Property, iField_, OrgJodaTimeDateTimeField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeLocalDateTime_Property, serialVersionUID, jlong)

#endif // _OrgJodaTimeLocalDateTime_H_
