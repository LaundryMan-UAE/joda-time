//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/Years.java
//

#include "BaseSingleFieldPeriod.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeUtils.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "ISOPeriodFormat.h"
#include "LocalDate.h"
#include "Period.h"
#include "PeriodFormatter.h"
#include "PeriodType.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePartial.h"
#include "ToString.h"
#include "Years.h"
#include "java/lang/Integer.h"

BOOL OrgJodaTimeYears_initialized = NO;

@implementation OrgJodaTimeYears

OrgJodaTimeYears * OrgJodaTimeYears_ZERO_;
OrgJodaTimeYears * OrgJodaTimeYears_ONE_;
OrgJodaTimeYears * OrgJodaTimeYears_TWO_;
OrgJodaTimeYears * OrgJodaTimeYears_THREE_;
OrgJodaTimeYears * OrgJodaTimeYears_MAX_VALUE_;
OrgJodaTimeYears * OrgJodaTimeYears_MIN_VALUE_;
OrgJodaTimeFormatPeriodFormatter * OrgJodaTimeYears_PARSER_;

+ (OrgJodaTimeYears *)yearsWithInt:(int)years {
  switch (years) {
    case 0:
    return OrgJodaTimeYears_ZERO_;
    case 1:
    return OrgJodaTimeYears_ONE_;
    case 2:
    return OrgJodaTimeYears_TWO_;
    case 3:
    return OrgJodaTimeYears_THREE_;
    case JavaLangInteger_MAX_VALUE:
    return OrgJodaTimeYears_MAX_VALUE_;
    case JavaLangInteger_MIN_VALUE:
    return OrgJodaTimeYears_MIN_VALUE_;
    default:
    return [[OrgJodaTimeYears alloc] initWithInt:years];
  }
}

+ (OrgJodaTimeYears *)yearsBetweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                  withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod betweenWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableInstant:end withOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType years]];
  return [OrgJodaTimeYears yearsWithInt:amount];
}

+ (OrgJodaTimeYears *)yearsBetweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                  withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end {
  if ([(id) start isKindOfClass:[OrgJodaTimeLocalDate class]] && [(id) end isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:[((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getChronology]];
    int years = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) years])) getDifferenceWithLong:[((OrgJodaTimeLocalDate *) nil_chk(((OrgJodaTimeLocalDate *) check_class_cast(end, [OrgJodaTimeLocalDate class])))) getLocalMillis] withLong:[((OrgJodaTimeLocalDate *) check_class_cast(start, [OrgJodaTimeLocalDate class])) getLocalMillis]];
    return [OrgJodaTimeYears yearsWithInt:years];
  }
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod betweenWithOrgJodaTimeReadablePartial:start withOrgJodaTimeReadablePartial:end withOrgJodaTimeReadablePeriod:OrgJodaTimeYears_ZERO_];
  return [OrgJodaTimeYears yearsWithInt:amount];
}

+ (OrgJodaTimeYears *)yearsInWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  if (interval == nil) {
    return OrgJodaTimeYears_ZERO_;
  }
  int amount = [OrgJodaTimeBaseBaseSingleFieldPeriod betweenWithOrgJodaTimeReadableInstant:[((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getStart] withOrgJodaTimeReadableInstant:[interval getEnd] withOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType years]];
  return [OrgJodaTimeYears yearsWithInt:amount];
}

+ (OrgJodaTimeYears *)parseYearsWithNSString:(NSString *)periodStr {
  if (periodStr == nil) {
    return OrgJodaTimeYears_ZERO_;
  }
  OrgJodaTimePeriod *p = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeYears_PARSER_)) parsePeriodWithNSString:periodStr];
  return [OrgJodaTimeYears yearsWithInt:[((OrgJodaTimePeriod *) nil_chk(p)) getYears]];
}

- (instancetype)initWithInt:(int)years {
  return [super initWithInt:years];
}

- (id)readResolve {
  return [OrgJodaTimeYears yearsWithInt:[self getValue]];
}

- (OrgJodaTimeDurationFieldType *)getFieldType {
  return [OrgJodaTimeDurationFieldType years];
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return [OrgJodaTimePeriodType years];
}

- (int)getYears {
  return [self getValue];
}

- (OrgJodaTimeYears *)plusWithInt:(int)years {
  if (years == 0) {
    return self;
  }
  return [OrgJodaTimeYears yearsWithInt:[OrgJodaTimeFieldFieldUtils safeAddWithInt:[self getValue] withInt:years]];
}

- (OrgJodaTimeYears *)plusWithOrgJodaTimeYears:(OrgJodaTimeYears *)years {
  if (years == nil) {
    return self;
  }
  return [self plusWithInt:[((OrgJodaTimeYears *) nil_chk(years)) getValue]];
}

- (OrgJodaTimeYears *)minusWithInt:(int)years {
  return [self plusWithInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:years]];
}

- (OrgJodaTimeYears *)minusWithOrgJodaTimeYears:(OrgJodaTimeYears *)years {
  if (years == nil) {
    return self;
  }
  return [self minusWithInt:[((OrgJodaTimeYears *) nil_chk(years)) getValue]];
}

- (OrgJodaTimeYears *)multipliedByWithInt:(int)scalar {
  return [OrgJodaTimeYears yearsWithInt:[OrgJodaTimeFieldFieldUtils safeMultiplyWithInt:[self getValue] withInt:scalar]];
}

- (OrgJodaTimeYears *)dividedByWithInt:(int)divisor {
  if (divisor == 1) {
    return self;
  }
  return [OrgJodaTimeYears yearsWithInt:[self getValue] / divisor];
}

- (OrgJodaTimeYears *)negated {
  return [OrgJodaTimeYears yearsWithInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:[self getValue]]];
}

- (BOOL)isGreaterThanWithOrgJodaTimeYears:(OrgJodaTimeYears *)other {
  if (other == nil) {
    return [self getValue] > 0;
  }
  return [self getValue] > [((OrgJodaTimeYears *) nil_chk(other)) getValue];
}

- (BOOL)isLessThanWithOrgJodaTimeYears:(OrgJodaTimeYears *)other {
  if (other == nil) {
    return [self getValue] < 0;
  }
  return [self getValue] < [((OrgJodaTimeYears *) nil_chk(other)) getValue];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"P%@Y", [NSString valueOfInt:[self getValue]]];
}

+ (void)initialize {
  if (self == [OrgJodaTimeYears class]) {
    OrgJodaTimeYears_ZERO_ = [[OrgJodaTimeYears alloc] initWithInt:0];
    OrgJodaTimeYears_ONE_ = [[OrgJodaTimeYears alloc] initWithInt:1];
    OrgJodaTimeYears_TWO_ = [[OrgJodaTimeYears alloc] initWithInt:2];
    OrgJodaTimeYears_THREE_ = [[OrgJodaTimeYears alloc] initWithInt:3];
    OrgJodaTimeYears_MAX_VALUE_ = [[OrgJodaTimeYears alloc] initWithInt:JavaLangInteger_MAX_VALUE];
    OrgJodaTimeYears_MIN_VALUE_ = [[OrgJodaTimeYears alloc] initWithInt:JavaLangInteger_MIN_VALUE];
    OrgJodaTimeYears_PARSER_ = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk([OrgJodaTimeFormatISOPeriodFormat standard])) withParseTypeWithOrgJodaTimePeriodType:[OrgJodaTimePeriodType years]];
    OrgJodaTimeYears_initialized = YES;
  }
}
+ (IOSObjectArray *)__annotations_parseYearsWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertFromString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertToString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "yearsWithInt:", "years", "Lorg.joda.time.Years;", 0x9, NULL },
    { "yearsBetweenWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "yearsBetween", "Lorg.joda.time.Years;", 0x9, NULL },
    { "yearsBetweenWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:", "yearsBetween", "Lorg.joda.time.Years;", 0x9, NULL },
    { "yearsInWithOrgJodaTimeReadableInterval:", "yearsIn", "Lorg.joda.time.Years;", 0x9, NULL },
    { "parseYearsWithNSString:", "parseYears", "Lorg.joda.time.Years;", 0x9, NULL },
    { "initWithInt:", "Years", NULL, 0x2, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "getFieldType", NULL, "Lorg.joda.time.DurationFieldType;", 0x1, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "getYears", NULL, "I", 0x1, NULL },
    { "plusWithInt:", "plus", "Lorg.joda.time.Years;", 0x1, NULL },
    { "plusWithOrgJodaTimeYears:", "plus", "Lorg.joda.time.Years;", 0x1, NULL },
    { "minusWithInt:", "minus", "Lorg.joda.time.Years;", 0x1, NULL },
    { "minusWithOrgJodaTimeYears:", "minus", "Lorg.joda.time.Years;", 0x1, NULL },
    { "multipliedByWithInt:", "multipliedBy", "Lorg.joda.time.Years;", 0x1, NULL },
    { "dividedByWithInt:", "dividedBy", "Lorg.joda.time.Years;", 0x1, NULL },
    { "negated", NULL, "Lorg.joda.time.Years;", 0x1, NULL },
    { "isGreaterThanWithOrgJodaTimeYears:", "isGreaterThan", "Z", 0x1, NULL },
    { "isLessThanWithOrgJodaTimeYears:", "isLessThan", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ZERO_", NULL, 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_ZERO_,  },
    { "ONE_", NULL, 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_ONE_,  },
    { "TWO_", NULL, 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_TWO_,  },
    { "THREE_", NULL, 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_THREE_,  },
    { "MAX_VALUE_", NULL, 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_MAX_VALUE_,  },
    { "MIN_VALUE_", NULL, 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_MIN_VALUE_,  },
    { "PARSER_", NULL, 0x1a, "Lorg.joda.time.format.PeriodFormatter;", &OrgJodaTimeYears_PARSER_,  },
    { "serialVersionUID_Years_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeYears_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeYears = { "Years", "org.joda.time", NULL, 0x11, 20, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeYears;
}

@end
