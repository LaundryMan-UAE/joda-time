//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/DateTime.java
//

#include "AbstractInstant.h"
#include "AbstractReadableInstantFieldProperty.h"
#include "BaseDateTime.h"
#include "Chronology.h"
#include "DateMidnight.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FromString.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "IllegalInstantException.h"
#include "LocalDate.h"
#include "LocalDateTime.h"
#include "LocalTime.h"
#include "ReadableDuration.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "TimeOfDay.h"
#include "YearMonthDay.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeDateTime

+ (OrgJodaTimeDateTime *)now {
  return [[OrgJodaTimeDateTime alloc] init];
}

+ (OrgJodaTimeDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Zone must not be null"];
  }
  return [[OrgJodaTimeDateTime alloc] initWithOrgJodaTimeDateTimeZone:zone];
}

+ (OrgJodaTimeDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (chronology == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Chronology must not be null"];
  }
  return [[OrgJodaTimeDateTime alloc] initWithOrgJodaTimeChronology:chronology];
}

+ (OrgJodaTimeDateTime *)parseWithNSString:(NSString *)str {
  return [OrgJodaTimeDateTime parseWithNSString:str withOrgJodaTimeFormatDateTimeFormatter:[((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatISODateTimeFormat dateTimeParser])) withOffsetParsed]];
}

+ (OrgJodaTimeDateTime *)parseWithNSString:(NSString *)str
    withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseDateTimeWithNSString:str];
}

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(long long int)instant {
  return [super initWithLong:instant];
}

- (instancetype)initWithLong:(long long int)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithLong:instant withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithLong:(long long int)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [super initWithId:instant withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithId:instant withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithId:instant withOrgJodaTimeChronology:[OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology]];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0 withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0 withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0 withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0 withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
                    withInt:(int)millisOfSecond {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
                    withInt:(int)millisOfSecond
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithInt:(int)year
                    withInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
                    withInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
                    withInt:(int)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeDateTime *)toDateTime {
  return self;
}

- (OrgJodaTimeDateTime *)toDateTimeISO {
  if ([self getChronology] == [OrgJodaTimeChronoISOChronology getInstance]) {
    return self;
  }
  return [super toDateTimeISO];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = [OrgJodaTimeDateTimeUtils getZoneWithOrgJodaTimeDateTimeZone:zone];
  if ([self getZone] == zone) {
    return self;
  }
  return [super toDateTimeWithOrgJodaTimeDateTimeZone:zone];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  chronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology];
  if ([self getChronology] == chronology) {
    return self;
  }
  return [super toDateTimeWithOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeDateTime *)withMillisWithLong:(long long int)newMillis {
  return (newMillis == [self getMillis] ? self : [[OrgJodaTimeDateTime alloc] initWithLong:newMillis withOrgJodaTimeChronology:[self getChronology]]);
}

- (OrgJodaTimeDateTime *)withChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:newChronology];
  return (newChronology == [self getChronology] ? self : [[OrgJodaTimeDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:newChronology]);
}

- (OrgJodaTimeDateTime *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  return [self withChronologyWithOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:newZone]];
}

- (OrgJodaTimeDateTime *)withZoneRetainFieldsWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  newZone = [OrgJodaTimeDateTimeUtils getZoneWithOrgJodaTimeDateTimeZone:newZone];
  OrgJodaTimeDateTimeZone *originalZone = [OrgJodaTimeDateTimeUtils getZoneWithOrgJodaTimeDateTimeZone:[self getZone]];
  if (newZone == originalZone) {
    return self;
  }
  long long int millis = [((OrgJodaTimeDateTimeZone *) nil_chk(originalZone)) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:newZone withLong:[self getMillis]];
  return [[OrgJodaTimeDateTime alloc] initWithLong:millis withOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:newZone]];
}

- (OrgJodaTimeDateTime *)withEarlierOffsetAtOverlap {
  long long int newMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) adjustOffsetWithLong:[self getMillis] withBoolean:NO];
  return [self withMillisWithLong:newMillis];
}

- (OrgJodaTimeDateTime *)withLaterOffsetAtOverlap {
  long long int newMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) adjustOffsetWithLong:[self getMillis] withBoolean:YES];
  return [self withMillisWithLong:newMillis];
}

- (OrgJodaTimeDateTime *)withDateWithInt:(int)year
                                 withInt:(int)monthOfYear
                                 withInt:(int)dayOfMonth {
  OrgJodaTimeChronology *chrono = [self getChronology];
  long long int instant = [self getMillis];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) setWithLong:instant withInt:year];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) setWithLong:instant withInt:monthOfYear];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono dayOfMonth])) setWithLong:instant withInt:dayOfMonth];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withTimeWithInt:(int)hourOfDay
                                 withInt:(int)minuteOfHour
                                 withInt:(int)secondOfMinute
                                 withInt:(int)millisOfSecond {
  OrgJodaTimeChronology *chrono = [self getChronology];
  long long int instant = [self getMillis];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay])) setWithLong:instant withInt:hourOfDay];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono minuteOfHour])) setWithLong:instant withInt:minuteOfHour];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono secondOfMinute])) setWithLong:instant withInt:secondOfMinute];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfSecond])) setWithLong:instant withInt:millisOfSecond];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withTimeAtStartOfDay {
  return [((OrgJodaTimeLocalDate *) nil_chk([self toLocalDate])) toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:[self getZone]];
}

- (OrgJodaTimeDateTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getMillis]]];
}

- (OrgJodaTimeDateTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                           withInt:(int)value {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"];
  }
  long long int instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getMillis] withInt:value];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                withInt:(int)amount {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"];
  }
  if (amount == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getMillis] withInt:amount];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withDurationAddedWithLong:(long long int)durationToAdd
                                           withInt:(int)scalar {
  if (durationToAdd == 0 || scalar == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithLong:[self getMillis] withLong:durationToAdd withInt:scalar];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                  withInt:(int)scalar {
  if (durationToAdd == nil || scalar == 0) {
    return self;
  }
  return [self withDurationAddedWithLong:[((id<OrgJodaTimeReadableDuration>) nil_chk(durationToAdd)) getMillis] withInt:scalar];
}

- (OrgJodaTimeDateTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                              withInt:(int)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getMillis] withInt:scalar];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusWithLong:(long long int)duration {
  return [self withDurationAddedWithLong:duration withInt:1];
}

- (OrgJodaTimeDateTime *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:1];
}

- (OrgJodaTimeDateTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeDateTime *)plusYearsWithInt:(int)years {
  if (years == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getMillis] withInt:years];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusMonthsWithInt:(int)months {
  if (months == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getMillis] withInt:months];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusWeeksWithInt:(int)weeks {
  if (weeks == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getMillis] withInt:weeks];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusDaysWithInt:(int)days {
  if (days == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getMillis] withInt:days];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusHoursWithInt:(int)hours {
  if (hours == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getMillis] withInt:hours];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusMinutesWithInt:(int)minutes {
  if (minutes == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getMillis] withInt:minutes];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusSecondsWithInt:(int)seconds {
  if (seconds == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getMillis] withInt:seconds];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusMillisWithInt:(int)millis {
  if (millis == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getMillis] withInt:millis];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusWithLong:(long long int)duration {
  return [self withDurationAddedWithLong:duration withInt:-1];
}

- (OrgJodaTimeDateTime *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:-1];
}

- (OrgJodaTimeDateTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeDateTime *)minusYearsWithInt:(int)years {
  if (years == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) subtractWithLong:[self getMillis] withInt:years];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusMonthsWithInt:(int)months {
  if (months == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) subtractWithLong:[self getMillis] withInt:months];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusWeeksWithInt:(int)weeks {
  if (weeks == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) subtractWithLong:[self getMillis] withInt:weeks];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusDaysWithInt:(int)days {
  if (days == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) subtractWithLong:[self getMillis] withInt:days];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusHoursWithInt:(int)hours {
  if (hours == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getMillis] withInt:hours];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusMinutesWithInt:(int)minutes {
  if (minutes == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getMillis] withInt:minutes];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusSecondsWithInt:(int)seconds {
  if (seconds == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getMillis] withInt:seconds];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusMillisWithInt:(int)millis {
  if (millis == 0) {
    return self;
  }
  long long int instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getMillis] withInt:millis];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"];
  }
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((OrgJodaTimeDateTimeField *) nil_chk(field)) isSupported] == NO) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Field '%@' is not supported", type]];
  }
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:field];
}

- (OrgJodaTimeDateMidnight *)toDateMidnight {
  return [[OrgJodaTimeDateMidnight alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeYearMonthDay *)toYearMonthDay {
  return [[OrgJodaTimeYearMonthDay alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeTimeOfDay *)toTimeOfDay {
  return [[OrgJodaTimeTimeOfDay alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeLocalDateTime *)toLocalDateTime {
  return [[OrgJodaTimeLocalDateTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeLocalDate *)toLocalDate {
  return [[OrgJodaTimeLocalDate alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeLocalTime *)toLocalTime {
  return [[OrgJodaTimeLocalTime alloc] initWithLong:[self getMillis] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeDateTime *)withEraWithInt:(int)era {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) setWithLong:[self getMillis] withInt:era]];
}

- (OrgJodaTimeDateTime *)withCenturyOfEraWithInt:(int)centuryOfEra {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) setWithLong:[self getMillis] withInt:centuryOfEra]];
}

- (OrgJodaTimeDateTime *)withYearOfEraWithInt:(int)yearOfEra {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) setWithLong:[self getMillis] withInt:yearOfEra]];
}

- (OrgJodaTimeDateTime *)withYearOfCenturyWithInt:(int)yearOfCentury {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) setWithLong:[self getMillis] withInt:yearOfCentury]];
}

- (OrgJodaTimeDateTime *)withYearWithInt:(int)year {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getMillis] withInt:year]];
}

- (OrgJodaTimeDateTime *)withWeekyearWithInt:(int)weekyear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getMillis] withInt:weekyear]];
}

- (OrgJodaTimeDateTime *)withMonthOfYearWithInt:(int)monthOfYear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getMillis] withInt:monthOfYear]];
}

- (OrgJodaTimeDateTime *)withWeekOfWeekyearWithInt:(int)weekOfWeekyear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getMillis] withInt:weekOfWeekyear]];
}

- (OrgJodaTimeDateTime *)withDayOfYearWithInt:(int)dayOfYear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getMillis] withInt:dayOfYear]];
}

- (OrgJodaTimeDateTime *)withDayOfMonthWithInt:(int)dayOfMonth {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getMillis] withInt:dayOfMonth]];
}

- (OrgJodaTimeDateTime *)withDayOfWeekWithInt:(int)dayOfWeek {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getMillis] withInt:dayOfWeek]];
}

- (OrgJodaTimeDateTime *)withHourOfDayWithInt:(int)hour {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getMillis] withInt:hour]];
}

- (OrgJodaTimeDateTime *)withMinuteOfHourWithInt:(int)minute {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getMillis] withInt:minute]];
}

- (OrgJodaTimeDateTime *)withSecondOfMinuteWithInt:(int)second {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getMillis] withInt:second]];
}

- (OrgJodaTimeDateTime *)withMillisOfSecondWithInt:(int)millis {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getMillis] withInt:millis]];
}

- (OrgJodaTimeDateTime *)withMillisOfDayWithInt:(int)millis {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getMillis] withInt:millis]];
}

- (OrgJodaTimeDateTime_Property *)era {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]];
}

- (OrgJodaTimeDateTime_Property *)centuryOfEra {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]];
}

- (OrgJodaTimeDateTime_Property *)yearOfCentury {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]];
}

- (OrgJodaTimeDateTime_Property *)yearOfEra {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]];
}

- (OrgJodaTimeDateTime_Property *)year {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]];
}

- (OrgJodaTimeDateTime_Property *)weekyear {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]];
}

- (OrgJodaTimeDateTime_Property *)monthOfYear {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]];
}

- (OrgJodaTimeDateTime_Property *)weekOfWeekyear {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]];
}

- (OrgJodaTimeDateTime_Property *)dayOfYear {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]];
}

- (OrgJodaTimeDateTime_Property *)dayOfMonth {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]];
}

- (OrgJodaTimeDateTime_Property *)dayOfWeek {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]];
}

- (OrgJodaTimeDateTime_Property *)hourOfDay {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]];
}

- (OrgJodaTimeDateTime_Property *)minuteOfDay {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfDay]];
}

- (OrgJodaTimeDateTime_Property *)minuteOfHour {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]];
}

- (OrgJodaTimeDateTime_Property *)secondOfDay {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfDay]];
}

- (OrgJodaTimeDateTime_Property *)secondOfMinute {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]];
}

- (OrgJodaTimeDateTime_Property *)millisOfDay {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]];
}

- (OrgJodaTimeDateTime_Property *)millisOfSecond {
  return [[OrgJodaTimeDateTime_Property alloc] initWithOrgJodaTimeDateTime:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]];
}
+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertFromString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toDateMidnight {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toYearMonthDay {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toTimeOfDay {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.DateTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.DateTime;", 0x9, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.DateTime;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.DateTime;", 0x9, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.DateTime;", 0x9, NULL },
    { "init", "DateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "DateTime", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "DateTime", NULL, 0x1, NULL },
    { "initWithLong:", "DateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "DateTime", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "DateTime", NULL, 0x1, NULL },
    { "initWithId:", "DateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "DateTime", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:", "DateTime", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "DateTime", NULL, 0x1, NULL },
    { "toDateTime", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeISO", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeDateTimeZone:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeChronology:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMillisWithLong:", "withMillis", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withChronologyWithOrgJodaTimeChronology:", "withChronology", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withZoneRetainFieldsWithOrgJodaTimeDateTimeZone:", "withZoneRetainFields", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withEarlierOffsetAtOverlap", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withLaterOffsetAtOverlap", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withDateWithInt:withInt:withInt:", "withDate", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withTimeWithInt:withInt:withInt:withInt:", "withTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withTimeAtStartOfDay", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withFieldsWithOrgJodaTimeReadablePartial:", "withFields", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withDurationAddedWithLong:withInt:", "withDurationAdded", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withDurationAddedWithOrgJodaTimeReadableDuration:withInt:", "withDurationAdded", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusWithLong:", "plus", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadableDuration:", "plus", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusYearsWithInt:", "plusYears", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusMonthsWithInt:", "plusMonths", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusWeeksWithInt:", "plusWeeks", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusDaysWithInt:", "plusDays", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusHoursWithInt:", "plusHours", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusMinutesWithInt:", "plusMinutes", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusSecondsWithInt:", "plusSeconds", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "plusMillisWithInt:", "plusMillis", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusWithLong:", "minus", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadableDuration:", "minus", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusYearsWithInt:", "minusYears", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusMonthsWithInt:", "minusMonths", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusWeeksWithInt:", "minusWeeks", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusDaysWithInt:", "minusDays", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusHoursWithInt:", "minusHours", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusMinutesWithInt:", "minusMinutes", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusSecondsWithInt:", "minusSeconds", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "minusMillisWithInt:", "minusMillis", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "toDateMidnight", NULL, "Lorg.joda.time.DateMidnight;", 0x1, NULL },
    { "toYearMonthDay", NULL, "Lorg.joda.time.YearMonthDay;", 0x1, NULL },
    { "toTimeOfDay", NULL, "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "toLocalDateTime", NULL, "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "toLocalDate", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "toLocalTime", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "withEraWithInt:", "withEra", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withCenturyOfEraWithInt:", "withCenturyOfEra", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withYearOfEraWithInt:", "withYearOfEra", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withYearOfCenturyWithInt:", "withYearOfCentury", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withYearWithInt:", "withYear", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withWeekyearWithInt:", "withWeekyear", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMonthOfYearWithInt:", "withMonthOfYear", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withWeekOfWeekyearWithInt:", "withWeekOfWeekyear", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withDayOfYearWithInt:", "withDayOfYear", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withDayOfMonthWithInt:", "withDayOfMonth", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withDayOfWeekWithInt:", "withDayOfWeek", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withHourOfDayWithInt:", "withHourOfDay", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMinuteOfHourWithInt:", "withMinuteOfHour", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withSecondOfMinuteWithInt:", "withSecondOfMinute", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMillisOfSecondWithInt:", "withMillisOfSecond", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMillisOfDayWithInt:", "withMillisOfDay", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "era", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "year", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "weekyear", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "minuteOfDay", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "secondOfDay", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.DateTime$Property;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_DateTime_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDateTime_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTime = { "DateTime", "org.joda.time", NULL, 0x11, 105, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeDateTime;
}

@end

@implementation OrgJodaTimeDateTime_Property

- (instancetype)initWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)instant
               withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  if (self = [super init]) {
    iInstant_ = instant;
    iField_ = field;
  }
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  iInstant_ = (OrgJodaTimeDateTime *) check_class_cast([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeDateTime class]);
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) check_class_cast([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  iField_ = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getChronology]];
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (long long int)getMillis {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeDateTime *)getDateTime {
  return iInstant_;
}

- (OrgJodaTimeDateTime *)addToCopyWithInt:(int)value {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
}

- (OrgJodaTimeDateTime *)addToCopyWithLong:(long long int)value {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis] withLong:value]];
}

- (OrgJodaTimeDateTime *)addWrapFieldToCopyWithInt:(int)value {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
}

- (OrgJodaTimeDateTime *)setCopyWithInt:(int)value {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
}

- (OrgJodaTimeDateTime *)setCopyWithNSString:(NSString *)text
                          withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeDateTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeDateTime *)withMaximumValue {
  @try {
    return [self setCopyWithInt:[self getMaximumValue]];
  }
  @catch (JavaLangRuntimeException *ex) {
    if ([OrgJodaTimeIllegalInstantException isIllegalInstantWithJavaLangThrowable:ex]) {
      long long int beforeGap = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone])) previousTransitionWithLong:[self getMillis] + OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY];
      return [[OrgJodaTimeDateTime alloc] initWithLong:beforeGap withOrgJodaTimeChronology:[self getChronology]];
    }
    @throw ex;
  }
}

- (OrgJodaTimeDateTime *)withMinimumValue {
  @try {
    return [self setCopyWithInt:[self getMinimumValue]];
  }
  @catch (JavaLangRuntimeException *ex) {
    if ([OrgJodaTimeIllegalInstantException isIllegalInstantWithJavaLangThrowable:ex]) {
      long long int afterGap = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone])) nextTransitionWithLong:[self getMillis] - OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY];
      return [[OrgJodaTimeDateTime alloc] initWithLong:afterGap withOrgJodaTimeChronology:[self getChronology]];
    }
    @throw ex;
  }
}

- (OrgJodaTimeDateTime *)roundFloorCopy {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis]]];
}

- (OrgJodaTimeDateTime *)roundCeilingCopy {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis]]];
}

- (OrgJodaTimeDateTime *)roundHalfFloorCopy {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis]]];
}

- (OrgJodaTimeDateTime *)roundHalfCeilingCopy {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis]]];
}

- (OrgJodaTimeDateTime *)roundHalfEvenCopy {
  return [iInstant_ withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis]]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTime_Property *)other {
  [super copyAllFieldsTo:other];
  other->iField_ = iField_;
  other->iInstant_ = iInstant_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTime:withOrgJodaTimeDateTimeField:", "Property", NULL, 0x0, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x4, NULL },
    { "getDateTime", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "addToCopyWithLong:", "addToCopy", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "roundFloorCopy", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "roundCeilingCopy", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "roundHalfFloorCopy", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "roundHalfCeilingCopy", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "roundHalfEvenCopy", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_Property_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDateTime_Property_serialVersionUID },
    { "iInstant_", NULL, 0x2, "Lorg.joda.time.DateTime;", NULL,  },
    { "iField_", NULL, 0x2, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTime_Property = { "Property", "org.joda.time", "DateTime", 0x19, 20, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeDateTime_Property;
}

@end
