//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
//

#include "CachedDateTimeZone.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/lang/SecurityException.h"

BOOL OrgJodaTimeTzCachedDateTimeZone_initialized = NO;

@implementation OrgJodaTimeTzCachedDateTimeZone

int OrgJodaTimeTzCachedDateTimeZone_cInfoCacheMask_;

+ (OrgJodaTimeTzCachedDateTimeZone *)forZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if ([zone isKindOfClass:[OrgJodaTimeTzCachedDateTimeZone class]]) {
    return (OrgJodaTimeTzCachedDateTimeZone *) check_class_cast(zone, [OrgJodaTimeTzCachedDateTimeZone class]);
  }
  return [[OrgJodaTimeTzCachedDateTimeZone alloc] initWithOrgJodaTimeDateTimeZone:zone];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super initWithNSString:[((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getID]]) {
    iInfoCache_ = [IOSObjectArray arrayWithLength:OrgJodaTimeTzCachedDateTimeZone_cInfoCacheMask_ + 1 type:[IOSClass classWithClass:[OrgJodaTimeTzCachedDateTimeZone_Info class]]];
    iZone_ = zone;
  }
  return self;
}

- (OrgJodaTimeDateTimeZone *)getUncachedZone {
  return iZone_;
}

- (NSString *)getNameKeyWithLong:(long long int)instant {
  return [((OrgJodaTimeTzCachedDateTimeZone_Info *) nil_chk([self getInfoWithLong:instant])) getNameKeyWithLong:instant];
}

- (int)getOffsetWithLong:(long long int)instant {
  return [((OrgJodaTimeTzCachedDateTimeZone_Info *) nil_chk([self getInfoWithLong:instant])) getOffsetWithLong:instant];
}

- (int)getStandardOffsetWithLong:(long long int)instant {
  return [((OrgJodaTimeTzCachedDateTimeZone_Info *) nil_chk([self getInfoWithLong:instant])) getStandardOffsetWithLong:instant];
}

- (BOOL)isFixed {
  return [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isFixed];
}

- (long long int)nextTransitionWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) nextTransitionWithLong:instant];
}

- (long long int)previousTransitionWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) previousTransitionWithLong:instant];
}

- (NSUInteger)hash {
  return ((int) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeTzCachedDateTimeZone class]]) {
    return [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:((OrgJodaTimeTzCachedDateTimeZone *) nil_chk(((OrgJodaTimeTzCachedDateTimeZone *) check_class_cast(obj, [OrgJodaTimeTzCachedDateTimeZone class]))))->iZone_];
  }
  return NO;
}

- (OrgJodaTimeTzCachedDateTimeZone_Info *)getInfoWithLong:(long long int)millis {
  int period = (int) (millis >> 32);
  IOSObjectArray *cache = iInfoCache_;
  int index = period & OrgJodaTimeTzCachedDateTimeZone_cInfoCacheMask_;
  OrgJodaTimeTzCachedDateTimeZone_Info *info = IOSObjectArray_Get(nil_chk(cache), index);
  if (info == nil || (int) ((info->iPeriodStart_ >> 32)) != period) {
    info = [self createInfoWithLong:millis];
    (void) IOSObjectArray_Set(cache, index, info);
  }
  return info;
}

- (OrgJodaTimeTzCachedDateTimeZone_Info *)createInfoWithLong:(long long int)millis {
  long long int periodStart = millis & ((long long) (((uint64_t) (long long) 0xffffffffLL) << 32));
  OrgJodaTimeTzCachedDateTimeZone_Info *info = [[OrgJodaTimeTzCachedDateTimeZone_Info alloc] initWithOrgJodaTimeDateTimeZone:iZone_ withLong:periodStart];
  long long int end = periodStart | (long long) 0xffffffffLL;
  OrgJodaTimeTzCachedDateTimeZone_Info *chain = info;
  while (YES) {
    long long int next = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) nextTransitionWithLong:periodStart];
    if (next == periodStart || next > end) {
      break;
    }
    periodStart = next;
    chain = (chain->iNextInfo_ = [[OrgJodaTimeTzCachedDateTimeZone_Info alloc] initWithOrgJodaTimeDateTimeZone:iZone_ withLong:periodStart]);
  }
  return info;
}

+ (void)initialize {
  if (self == [OrgJodaTimeTzCachedDateTimeZone class]) {
    {
      JavaLangInteger *i;
      @try {
        i = [JavaLangInteger getIntegerWithNSString:@"org.joda.time.tz.CachedDateTimeZone.size"];
      }
      @catch (JavaLangSecurityException *e) {
        i = nil;
      }
      int cacheSize;
      if (i == nil) {
        cacheSize = 512;
      }
      else {
        cacheSize = [i intValue];
        cacheSize--;
        int shift = 0;
        while (cacheSize > 0) {
          shift++;
          cacheSize >>= 1;
        }
        cacheSize = 1 << shift;
      }
      OrgJodaTimeTzCachedDateTimeZone_cInfoCacheMask_ = cacheSize - 1;
    }
    OrgJodaTimeTzCachedDateTimeZone_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzCachedDateTimeZone *)other {
  [super copyAllFieldsTo:other];
  other->iInfoCache_ = iInfoCache_;
  other->iZone_ = iZone_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "forZoneWithOrgJodaTimeDateTimeZone:", "forZone", "Lorg.joda.time.tz.CachedDateTimeZone;", 0x9, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "CachedDateTimeZone", NULL, 0x2, NULL },
    { "getUncachedZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x1, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x1, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x1, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL },
    { "nextTransitionWithLong:", "nextTransition", "J", 0x1, NULL },
    { "previousTransitionWithLong:", "previousTransition", "J", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "getInfoWithLong:", "getInfo", "Lorg.joda.time.tz.CachedDateTimeZone$Info;", 0x2, NULL },
    { "createInfoWithLong:", "createInfo", "Lorg.joda.time.tz.CachedDateTimeZone$Info;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_CachedDateTimeZone_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeTzCachedDateTimeZone_serialVersionUID },
    { "cInfoCacheMask_", NULL, 0x1a, "I", &OrgJodaTimeTzCachedDateTimeZone_cInfoCacheMask_,  },
    { "iZone_", NULL, 0x12, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iInfoCache_", NULL, 0x92, "[Lorg.joda.time.tz.CachedDateTimeZone$Info;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzCachedDateTimeZone = { "CachedDateTimeZone", "org.joda.time.tz", NULL, 0x1, 13, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeTzCachedDateTimeZone;
}

@end

@implementation OrgJodaTimeTzCachedDateTimeZone_Info

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                       withLong:(long long int)periodStart {
  if (self = [super init]) {
    iOffset_ = JavaLangInteger_MIN_VALUE;
    iStandardOffset_ = JavaLangInteger_MIN_VALUE;
    iPeriodStart_ = periodStart;
    iZoneRef_ = zone;
  }
  return self;
}

- (NSString *)getNameKeyWithLong:(long long int)millis {
  if (iNextInfo_ == nil || millis < iNextInfo_->iPeriodStart_) {
    if (iNameKey_ == nil) {
      iNameKey_ = [((OrgJodaTimeDateTimeZone *) nil_chk(iZoneRef_)) getNameKeyWithLong:iPeriodStart_];
    }
    return iNameKey_;
  }
  return [((OrgJodaTimeTzCachedDateTimeZone_Info *) nil_chk(iNextInfo_)) getNameKeyWithLong:millis];
}

- (int)getOffsetWithLong:(long long int)millis {
  if (iNextInfo_ == nil || millis < iNextInfo_->iPeriodStart_) {
    if (iOffset_ == JavaLangInteger_MIN_VALUE) {
      iOffset_ = [((OrgJodaTimeDateTimeZone *) nil_chk(iZoneRef_)) getOffsetWithLong:iPeriodStart_];
    }
    return iOffset_;
  }
  return [((OrgJodaTimeTzCachedDateTimeZone_Info *) nil_chk(iNextInfo_)) getOffsetWithLong:millis];
}

- (int)getStandardOffsetWithLong:(long long int)millis {
  if (iNextInfo_ == nil || millis < iNextInfo_->iPeriodStart_) {
    if (iStandardOffset_ == JavaLangInteger_MIN_VALUE) {
      iStandardOffset_ = [((OrgJodaTimeDateTimeZone *) nil_chk(iZoneRef_)) getStandardOffsetWithLong:iPeriodStart_];
    }
    return iStandardOffset_;
  }
  return [((OrgJodaTimeTzCachedDateTimeZone_Info *) nil_chk(iNextInfo_)) getStandardOffsetWithLong:millis];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzCachedDateTimeZone_Info *)other {
  [super copyAllFieldsTo:other];
  other->iNameKey_ = iNameKey_;
  other->iNextInfo_ = iNextInfo_;
  other->iOffset_ = iOffset_;
  other->iPeriodStart_ = iPeriodStart_;
  other->iStandardOffset_ = iStandardOffset_;
  other->iZoneRef_ = iZoneRef_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeZone:withLong:", "Info", NULL, 0x0, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x1, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x1, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iPeriodStart_", NULL, 0x11, "J", NULL,  },
    { "iZoneRef_", NULL, 0x11, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iNextInfo_", NULL, 0x0, "Lorg.joda.time.tz.CachedDateTimeZone$Info;", NULL,  },
    { "iNameKey_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "iOffset_", NULL, 0x2, "I", NULL,  },
    { "iStandardOffset_", NULL, 0x2, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTzCachedDateTimeZone_Info = { "Info", "org.joda.time.tz", "CachedDateTimeZone", 0x1a, 4, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzCachedDateTimeZone_Info;
}

@end
