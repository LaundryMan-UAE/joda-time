//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/format/DateTimeFormat.java
//

#ifndef _OrgJodaTimeFormatDateTimeFormat_H_
#define _OrgJodaTimeFormatDateTimeFormat_H_

@class IOSIntArray;
@class JavaUtilConcurrentAtomicAtomicReferenceArray;
@class JavaUtilConcurrentConcurrentHashMap;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeFormatDateTimeFormatterBuilder;
@class OrgJodaTimeFormatDateTimeParserBucket;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;
@protocol OrgJodaTimeReadablePartial;

#include "InternalParser.h"
#include "InternalPrinter.h"
#include "J2ObjC_header.h"

#define OrgJodaTimeFormatDateTimeFormat_DATE 0
#define OrgJodaTimeFormatDateTimeFormat_DATETIME 2
#define OrgJodaTimeFormatDateTimeFormat_FULL 0
#define OrgJodaTimeFormatDateTimeFormat_LONG 1
#define OrgJodaTimeFormatDateTimeFormat_MEDIUM 2
#define OrgJodaTimeFormatDateTimeFormat_NONE 4
#define OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE 500
#define OrgJodaTimeFormatDateTimeFormat_SHORT 3
#define OrgJodaTimeFormatDateTimeFormat_TIME 1

/**
 @brief Factory that creates instances of DateTimeFormatter from patterns and styles.
 <p> Datetime formatting is performed by the DateTimeFormatter class. Three classes provide factory methods to create formatters, and this is one. The others are ISODateTimeFormat and DateTimeFormatterBuilder . <p> This class provides two types of factory: <ul> <li> #forPattern(String) Pattern provides a DateTimeFormatter based on a pattern string that is mostly compatible with the JDK date patterns. <li> #forStyle(String) Style provides a DateTimeFormatter based on a two character style, representing short, medium, long and full. </ul> <p> For example, to use a patterm: <pre> DateTime dt = new DateTime(); DateTimeFormatter fmt = DateTimeFormat.forPattern("MMMM, yyyy"); String str = fmt.print(dt); </pre> The pattern syntax is mostly compatible with java.text.SimpleDateFormat - time zone names cannot be parsed and a few more symbols are supported. All ASCII letters are reserved as pattern letters, which are defined as follows: <blockquote> <pre> Symbol  Meaning                      Presentation  Examples ------  -------                      ------------  ------- G       era                          text          AD C       century of era (&gt;=0)         number        20 Y       year of era (&gt;=0)            year          1996 x       weekyear                     year          1996 w       week of weekyear             number        27 e       day of week                  number        2 E       day of week                  text          Tuesday; Tue y       year                         year          1996 D       day of year                  number        189 M       month of year                month         July; Jul; 07 d       day of month                 number        10 a       halfday of day               text          PM K       hour of halfday (0~11)       number        0 h       clockhour of halfday (1~12)  number        12 H       hour of day (0~23)           number        0 k       clockhour of day (1~24)      number        24 m       minute of hour               number        30 s       second of minute             number        55 S       fraction of second           millis        978 z       time zone                    text          Pacific Standard Time; PST Z       time zone offset/id          zone          -0800; -08:00; America/Los_Angeles '       escape for text              delimiter ''      single quote                 literal       ' </pre> </blockquote> The count of pattern letters determine the format. <p> <strong>Text</strong>: If the number of pattern letters is 4 or more, the full form is used; otherwise a short or abbreviated form is used if available. <p> <strong>Number</strong>: The minimum number of digits. Shorter numbers are zero-padded to this amount. When parsing, any number of digits are accepted. <p> <strong>Year</strong>: Numeric presentation for year and weekyear fields are handled specially. For example, if the count of 'y' is 2, the year will be displayed as the zero-based year of the century, which is two digits. <p> <strong>Month</strong>: 3 or over, use text, otherwise use number. <p> <strong>Millis</strong>: The exact number of fractional digits. If more millisecond digits are available then specified the number will be truncated, if there are fewer than specified then the number will be zero-padded to the right. When parsing, only the exact number of digits are accepted. <p> <strong>Zone</strong>: 'Z' outputs offset without a colon, 'ZZ' outputs the offset with a colon, 'ZZZ' or more outputs the zone id. <p> <strong>Zone names</strong>: Time zone names ('z') cannot be parsed. <p> Any characters in the pattern that are not in the ranges of ['a'..'z'] and ['A'..'Z'] will be treated as quoted text. For instance, characters like ':', '.', ' ', '#' and '?' will appear in the resulting time text even they are not embraced within single quotes. <p> DateTimeFormat is thread-safe and immutable, and the formatters it returns are as well.
 @author Brian S O'Neill
 @author Maxim Zhao
 @since 1.0
 */
@interface OrgJodaTimeFormatDateTimeFormat : NSObject {
}

/**
 @brief Factory to create a formatter from a pattern string.
 The pattern string is described above in the class level javadoc. It is very similar to SimpleDateFormat patterns. <p> The format may contain locale specific output, and this will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale. For example: <pre> DateTimeFormat.forPattern(pattern).withLocale(Locale.FRANCE).print(dt); </pre>
 @param pattern pattern specification
 @return the formatter
 @throws IllegalArgumentException if the pattern is invalid
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)forPatternWithNSString:(NSString *)pattern;

/**
 @brief Factory to create a format from a two character style pattern.
 <p> The first character is the date style, and the second character is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L' for long, and 'F' for full. A date or time may be ommitted by specifying a style character '-'. <p> The returned formatter will dynamically adjust to the locale that the print/parse takes place in. Thus you just call DateTimeFormatter#withLocale(Locale) and the Short/Medium/Long/Full style for that locale will be output. For example: <pre> DateTimeFormat.forStyle(style).withLocale(Locale.FRANCE).print(dt); </pre>
 @param style two characters from the set {"S", "M", "L", "F", "-"}
 @return the formatter
 @throws IllegalArgumentException if the style is invalid
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)forStyleWithNSString:(NSString *)style;

/**
 @brief Returns the pattern used by a particular style and locale.
 <p> The first character is the date style, and the second character is the time style. Specify a character of 'S' for short style, 'M' for medium, 'L' for long, and 'F' for full. A date or time may be ommitted by specifying a style character '-'.
 @param style two characters from the set {"S", "M", "L", "F", "-"}
 @param locale locale to use, null means default
 @return the formatter
 @throws IllegalArgumentException if the style is invalid
 @since 1.3
 */
+ (NSString *)patternForStyleWithNSString:(NSString *)style
                       withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @brief Creates a format that outputs a short date format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)shortDate;

/**
 @brief Creates a format that outputs a short time format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)shortTime;

/**
 @brief Creates a format that outputs a short datetime format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)shortDateTime;

/**
 @brief Creates a format that outputs a medium date format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDate;

/**
 @brief Creates a format that outputs a medium time format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)mediumTime;

/**
 @brief Creates a format that outputs a medium datetime format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDateTime;

/**
 @brief Creates a format that outputs a long date format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)longDate;

/**
 @brief Creates a format that outputs a long time format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)longTime;

/**
 @brief Creates a format that outputs a long datetime format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)longDateTime;

/**
 @brief Creates a format that outputs a full date format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)fullDate;

/**
 @brief Creates a format that outputs a full time format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)fullTime;

/**
 @brief Creates a format that outputs a full datetime format.
 <p> The format will change as you change the locale of the formatter. Call DateTimeFormatter#withLocale(Locale) to switch the locale.
 @return the formatter
 */
+ (OrgJodaTimeFormatDateTimeFormatter *)fullDateTime;

/**
 @brief Parses the given pattern and appends the rules to the given DateTimeFormatterBuilder.
 @param pattern pattern specification
 @throws IllegalArgumentException if the pattern is invalid
 */
+ (void)appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                        withNSString:(NSString *)pattern;

/**
 @brief Constructor.
 @since 1.1 (previously private)
 */
- (instancetype)init;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeFormatDateTimeFormat_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeFormatDateTimeFormat)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(NSString *pattern);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forStyleWithNSString_(NSString *style);

FOUNDATION_EXPORT NSString *OrgJodaTimeFormatDateTimeFormat_patternForStyleWithNSString_withJavaUtilLocale_(NSString *style, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDateTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDate();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullTime();

FOUNDATION_EXPORT OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDateTime();

FOUNDATION_EXPORT void OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, FULL, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, LONG, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, MEDIUM, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, SHORT, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, DATE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, TIME, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, DATETIME, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, PATTERN_CACHE_SIZE, jint)

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_cPatternCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, cPatternCache_, JavaUtilConcurrentConcurrentHashMap *)

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicReferenceArray *OrgJodaTimeFormatDateTimeFormat_cStyleCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat, cStyleCache_, JavaUtilConcurrentAtomicAtomicReferenceArray *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimeFormat)

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatter : NSObject < OrgJodaTimeFormatInternalPrinter, OrgJodaTimeFormatInternalParser > {
}

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle
                    withInt:(jint)type;

- (jint)estimatePrintedLength;

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appenadble
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)estimateParsedLength;

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position;

- (NSString *)getPatternWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatDateTimeFormat_StyleFormatter, cCache_, JavaUtilConcurrentConcurrentHashMap *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey : NSObject {
}

- (instancetype)initWithInt:(jint)iType
                    withInt:(jint)iDateStyle
                    withInt:(jint)iTimeStyle
         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey)

#endif // _OrgJodaTimeFormatDateTimeFormat_H_
