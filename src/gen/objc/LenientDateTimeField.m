//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/LenientDateTimeField.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DelegatedDateTimeField.h"
#include "FieldUtils.h"
#include "LenientDateTimeField.h"
#include "StrictDateTimeField.h"

@implementation OrgJodaTimeFieldLenientDateTimeField

+ (OrgJodaTimeDateTimeField *)getInstanceWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  if (field == nil) {
    return nil;
  }
  if ([field isKindOfClass:[OrgJodaTimeFieldStrictDateTimeField class]]) {
    field = [((OrgJodaTimeFieldStrictDateTimeField *) nil_chk(((OrgJodaTimeFieldStrictDateTimeField *) check_class_cast(field, [OrgJodaTimeFieldStrictDateTimeField class])))) getWrappedField];
  }
  if ([((OrgJodaTimeDateTimeField *) nil_chk(field)) isLenient]) {
    return field;
  }
  return [[OrgJodaTimeFieldLenientDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeChronology:base];
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  if (self = [super initWithOrgJodaTimeDateTimeField:field]) {
    iBase_ = base;
  }
  return self;
}

- (BOOL)isLenient {
  return YES;
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  long long int localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(iBase_)) getZone])) convertUTCToLocalWithLong:instant];
  long long int difference = [OrgJodaTimeFieldFieldUtils safeSubtractWithLong:value withLong:[self getWithLong:instant]];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([self getType])) getFieldWithOrgJodaTimeChronology:[iBase_ withUTC]])) addWithLong:localInstant withLong:difference];
  return [((OrgJodaTimeDateTimeZone *) nil_chk([iBase_ getZone])) convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldLenientDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iBase_ = iBase_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeDateTimeField:withOrgJodaTimeChronology:", "getInstance", "Lorg.joda.time.DateTimeField;", 0x9, NULL },
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeChronology:", "LenientDateTimeField", NULL, 0x4, NULL },
    { "isLenient", NULL, "Z", 0x11, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_LenientDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldLenientDateTimeField_serialVersionUID },
    { "iBase_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldLenientDateTimeField = { "LenientDateTimeField", "org.joda.time.field", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFieldLenientDateTimeField;
}

@end
