//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/field/LenientDateTimeField.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DelegatedDateTimeField.h"
#include "FieldUtils.h"
#include "J2ObjC_source.h"
#include "LenientDateTimeField.h"
#include "StrictDateTimeField.h"

@interface OrgJodaTimeFieldLenientDateTimeField () {
 @public
  OrgJodaTimeChronology *iBase_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldLenientDateTimeField, iBase_, OrgJodaTimeChronology *)

@implementation OrgJodaTimeFieldLenientDateTimeField

+ (OrgJodaTimeDateTimeField *)getInstanceWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  return OrgJodaTimeFieldLenientDateTimeField_getInstanceWithOrgJodaTimeDateTimeField_withOrgJodaTimeChronology_(field, base);
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  if (self = [super initWithOrgJodaTimeDateTimeField:field]) {
    OrgJodaTimeFieldLenientDateTimeField_set_iBase_(self, base);
  }
  return self;
}

- (jboolean)isLenient {
  return YES;
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(iBase_)) getZone])) convertUTCToLocalWithLong:instant];
  jlong difference = OrgJodaTimeFieldFieldUtils_safeSubtractWithLong_withLong_(value, [self getWithLong:instant]);
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([self getType])) getFieldWithOrgJodaTimeChronology:[iBase_ withUTC]])) addWithLong:localInstant withLong:difference];
  return [((OrgJodaTimeDateTimeZone *) nil_chk([iBase_ getZone])) convertLocalToUTCWithLong:localInstant withBoolean:NO withLong:instant];
}

- (void)dealloc {
  RELEASE_(iBase_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldLenientDateTimeField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFieldLenientDateTimeField_set_iBase_(other, iBase_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeDateTimeField:withOrgJodaTimeChronology:", "getInstance", "Lorg.joda.time.DateTimeField;", 0x9, NULL },
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeChronology:", "LenientDateTimeField", NULL, 0x4, NULL },
    { "isLenient", NULL, "Z", 0x11, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldLenientDateTimeField_serialVersionUID },
    { "iBase_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldLenientDateTimeField = { 1, "LenientDateTimeField", "org.joda.time.field", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFieldLenientDateTimeField;
}

@end

OrgJodaTimeDateTimeField *OrgJodaTimeFieldLenientDateTimeField_getInstanceWithOrgJodaTimeDateTimeField_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeField *field, OrgJodaTimeChronology *base) {
  OrgJodaTimeFieldLenientDateTimeField_init();
  if (field == nil) {
    return nil;
  }
  if ([field isKindOfClass:[OrgJodaTimeFieldStrictDateTimeField class]]) {
    field = [((OrgJodaTimeFieldStrictDateTimeField *) nil_chk(((OrgJodaTimeFieldStrictDateTimeField *) check_class_cast(field, [OrgJodaTimeFieldStrictDateTimeField class])))) getWrappedField];
  }
  if ([((OrgJodaTimeDateTimeField *) nil_chk(field)) isLenient]) {
    return field;
  }
  return [[[OrgJodaTimeFieldLenientDateTimeField alloc] initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeChronology:base] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldLenientDateTimeField)
