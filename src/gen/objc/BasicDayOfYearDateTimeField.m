//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
//

#include "BasicChronology.h"
#include "BasicDayOfYearDateTimeField.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "IOSPrimitiveArray.h"
#include "ReadablePartial.h"

@implementation OrgJodaTimeChronoBasicDayOfYearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)days {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfYear] withOrgJodaTimeDurationField:days]) {
    iChronology_ = chronology;
  }
  return self;
}

- (int)getWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDayOfYearWithLong:instant];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) years];
}

- (int)getMinimumValue {
  return 1;
}

- (int)getMaximumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDaysInYearMax];
}

- (int)getMaximumValueWithLong:(long long int)instant {
  int year = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
  return [iChronology_ getDaysInYearWithInt:year];
}

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year]]) {
    int year = [partial getWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year]];
    return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDaysInYearWithInt:year];
  }
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDaysInYearMax];
}

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                        withIntArray:(IOSIntArray *)values {
  int size = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size];
  for (int i = 0; i < size; i++) {
    if ([partial getFieldTypeWithInt:i] == [OrgJodaTimeDateTimeFieldType year]) {
      int year = IOSIntArray_Get(nil_chk(values), i);
      return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDaysInYearWithInt:year];
    }
  }
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDaysInYearMax];
}

- (int)getMaximumValueForSetWithLong:(long long int)instant
                             withInt:(int)value {
  int maxLessOne = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getDaysInYearMax] - 1;
  return (value > maxLessOne || value < 1) ? [self getMaximumValueWithLong:instant] : maxLessOne;
}

- (BOOL)isLeapWithLong:(long long int)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) isLeapDayWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) dayOfYear];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicDayOfYearDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iChronology_ = iChronology_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:withOrgJodaTimeDurationField:", "BasicDayOfYearDateTimeField", NULL, 0x0, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueForSetWithLong:withInt:", "getMaximumValueForSet", "I", 0x4, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_BasicDayOfYearDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicDayOfYearDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.chrono.BasicChronology;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoBasicDayOfYearDateTimeField = { "BasicDayOfYearDateTimeField", "org.joda.time.chrono", NULL, 0x10, 11, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicDayOfYearDateTimeField;
}

@end
