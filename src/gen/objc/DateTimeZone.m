//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/DateTimeZone.java
//

#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeFormatter.h"
#include "DateTimeFormatterBuilder.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DefaultNameProvider.h"
#include "FieldUtils.h"
#include "FixedDateTimeZone.h"
#include "FormatUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IllegalInstantException.h"
#include "JodaTimePermission.h"
#include "LocalDateTime.h"
#include "NameProvider.h"
#include "Provider.h"
#include "ReadableInstant.h"
#include "ToString.h"
#include "UTCDateTimeZone.h"
#include "UTCProvider.h"
#include "ZoneInfoProvider.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamException.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

BOOL OrgJodaTimeDateTimeZone_initialized = NO;

@implementation OrgJodaTimeDateTimeZone

OrgJodaTimeDateTimeZone * OrgJodaTimeDateTimeZone_UTC_;
id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_cProvider_;
id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_cNameProvider_;
id<JavaUtilSet> OrgJodaTimeDateTimeZone_cAvailableIDs_;
OrgJodaTimeDateTimeZone * OrgJodaTimeDateTimeZone_cDefault_;
OrgJodaTimeFormatDateTimeFormatter * OrgJodaTimeDateTimeZone_cOffsetFormatter_;
id<JavaUtilMap> OrgJodaTimeDateTimeZone_iFixedOffsetCache_;
id<JavaUtilMap> OrgJodaTimeDateTimeZone_cZoneIdConversion_;

+ (OrgJodaTimeDateTimeZone *)getDefault {
  OrgJodaTimeDateTimeZone *zone = OrgJodaTimeDateTimeZone_cDefault_;
  if (zone == nil) {
    @synchronized ([IOSClass classWithClass:[OrgJodaTimeDateTimeZone class]]) {
      zone = OrgJodaTimeDateTimeZone_cDefault_;
      if (zone == nil) {
        OrgJodaTimeDateTimeZone *temp = nil;
        @try {
          @try {
            NSString *id_ = [JavaLangSystem getPropertyWithNSString:@"user.timezone"];
            if (id_ != nil) {
              temp = [OrgJodaTimeDateTimeZone forIDWithNSString:id_];
            }
          }
          @catch (JavaLangRuntimeException *ex) {
          }
          if (temp == nil) {
            temp = [OrgJodaTimeDateTimeZone forTimeZoneWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault]];
          }
        }
        @catch (JavaLangIllegalArgumentException *ex) {
        }
        if (temp == nil) {
          temp = OrgJodaTimeDateTimeZone_UTC_;
        }
        OrgJodaTimeDateTimeZone_cDefault_ = zone = temp;
      }
    }
  }
  return zone;
}

+ (void)setDefaultWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  JavaLangSecurityManager *sm = [JavaLangSystem getSecurityManager];
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:[[OrgJodaTimeJodaTimePermission alloc] initWithNSString:@"DateTimeZone.setDefault"]];
  }
  if (zone == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The datetime zone must not be null"];
  }
  @synchronized ([IOSClass classWithClass:[OrgJodaTimeDateTimeZone class]]) {
    OrgJodaTimeDateTimeZone_cDefault_ = zone;
  }
}

+ (OrgJodaTimeDateTimeZone *)forIDWithNSString:(NSString *)id_ {
  if (id_ == nil) {
    return [OrgJodaTimeDateTimeZone getDefault];
  }
  if ([((NSString *) nil_chk(id_)) isEqual:@"UTC"]) {
    return OrgJodaTimeDateTimeZone_UTC_;
  }
  OrgJodaTimeDateTimeZone *zone = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_cProvider_)) getZoneWithNSString:id_];
  if (zone != nil) {
    return zone;
  }
  if ([id_ hasPrefix:@"+"] || [id_ hasPrefix:@"-"]) {
    int offset = [OrgJodaTimeDateTimeZone parseOffsetWithNSString:id_];
    if (offset == 0LL) {
      return OrgJodaTimeDateTimeZone_UTC_;
    }
    else {
      id_ = [OrgJodaTimeDateTimeZone printOffsetWithInt:offset];
      return [OrgJodaTimeDateTimeZone fixedOffsetZoneWithNSString:id_ withInt:offset];
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"The datetime zone id '%@' is not recognised", id_]];
}

+ (OrgJodaTimeDateTimeZone *)forOffsetHoursWithInt:(int)hoursOffset {
  return [OrgJodaTimeDateTimeZone forOffsetHoursMinutesWithInt:hoursOffset withInt:0];
}

+ (OrgJodaTimeDateTimeZone *)forOffsetHoursMinutesWithInt:(int)hoursOffset
                                                  withInt:(int)minutesOffset {
  if (hoursOffset == 0 && minutesOffset == 0) {
    return OrgJodaTimeDateTimeZone_UTC_;
  }
  if (hoursOffset < -23 || hoursOffset > 23) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Hours out of range: %d", hoursOffset]];
  }
  if (minutesOffset < -59 || minutesOffset > 59) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Minutes out of range: %d", minutesOffset]];
  }
  if (hoursOffset > 0 && minutesOffset < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Positive hours must not have negative minutes: %d", minutesOffset]];
  }
  int offset = 0;
  @try {
    int hoursInMinutes = hoursOffset * 60;
    if (hoursInMinutes < 0) {
      minutesOffset = hoursInMinutes - [JavaLangMath absWithInt:minutesOffset];
    }
    else {
      minutesOffset = hoursInMinutes + minutesOffset;
    }
    offset = [OrgJodaTimeFieldFieldUtils safeMultiplyWithInt:minutesOffset withInt:OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE];
  }
  @catch (JavaLangArithmeticException *ex) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Offset is too large"];
  }
  return [OrgJodaTimeDateTimeZone forOffsetMillisWithInt:offset];
}

+ (OrgJodaTimeDateTimeZone *)forOffsetMillisWithInt:(int)millisOffset {
  if (millisOffset < -OrgJodaTimeDateTimeZone_MAX_MILLIS || millisOffset > OrgJodaTimeDateTimeZone_MAX_MILLIS) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Millis out of range: %d", millisOffset]];
  }
  NSString *id_ = [OrgJodaTimeDateTimeZone printOffsetWithInt:millisOffset];
  return [OrgJodaTimeDateTimeZone fixedOffsetZoneWithNSString:id_ withInt:millisOffset];
}

+ (OrgJodaTimeDateTimeZone *)forTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone {
  if (zone == nil) {
    return [OrgJodaTimeDateTimeZone getDefault];
  }
  NSString *id_ = [((JavaUtilTimeZone *) nil_chk(zone)) getID];
  if (id_ == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The TimeZone id must not be null"];
  }
  if ([((NSString *) nil_chk(id_)) isEqual:@"UTC"]) {
    return OrgJodaTimeDateTimeZone_UTC_;
  }
  OrgJodaTimeDateTimeZone *dtz = nil;
  NSString *convId = [OrgJodaTimeDateTimeZone getConvertedIdWithNSString:id_];
  if (convId != nil) {
    dtz = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_cProvider_)) getZoneWithNSString:convId];
  }
  if (dtz == nil) {
    dtz = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_cProvider_)) getZoneWithNSString:id_];
  }
  if (dtz != nil) {
    return dtz;
  }
  if (convId == nil) {
    convId = id_;
    if ([convId hasPrefix:@"GMT+"] || [convId hasPrefix:@"GMT-"]) {
      convId = [convId substring:3];
      int offset = [OrgJodaTimeDateTimeZone parseOffsetWithNSString:convId];
      if (offset == 0LL) {
        return OrgJodaTimeDateTimeZone_UTC_;
      }
      else {
        convId = [OrgJodaTimeDateTimeZone printOffsetWithInt:offset];
        return [OrgJodaTimeDateTimeZone fixedOffsetZoneWithNSString:convId withInt:offset];
      }
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"The datetime zone id '%@' is not recognised", id_]];
}

+ (OrgJodaTimeDateTimeZone *)fixedOffsetZoneWithNSString:(NSString *)id_
                                                 withInt:(int)offset {
  @synchronized([OrgJodaTimeDateTimeZone getClass]) {
    {
      if (offset == 0) {
        return OrgJodaTimeDateTimeZone_UTC_;
      }
      if (OrgJodaTimeDateTimeZone_iFixedOffsetCache_ == nil) {
        OrgJodaTimeDateTimeZone_iFixedOffsetCache_ = [[JavaUtilHashMap alloc] init];
      }
      OrgJodaTimeDateTimeZone *zone;
      JavaLangRefReference *ref = [((id<JavaUtilMap>) nil_chk(OrgJodaTimeDateTimeZone_iFixedOffsetCache_)) getWithId:id_];
      if (ref != nil) {
        zone = [ref get];
        if (zone != nil) {
          return zone;
        }
      }
      zone = [[OrgJodaTimeTzFixedDateTimeZone alloc] initWithNSString:id_ withNSString:nil withInt:offset withInt:offset];
      (void) [OrgJodaTimeDateTimeZone_iFixedOffsetCache_ putWithId:id_ withId:[[JavaLangRefSoftReference alloc] initWithId:zone]];
      return zone;
    }
  }
}

+ (id<JavaUtilSet>)getAvailableIDs {
  return OrgJodaTimeDateTimeZone_cAvailableIDs_;
}

+ (id<OrgJodaTimeTzProvider>)getProvider {
  return OrgJodaTimeDateTimeZone_cProvider_;
}

+ (void)setProviderWithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider {
  JavaLangSecurityManager *sm = [JavaLangSystem getSecurityManager];
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:[[OrgJodaTimeJodaTimePermission alloc] initWithNSString:@"DateTimeZone.setProvider"]];
  }
  [OrgJodaTimeDateTimeZone setProvider0WithOrgJodaTimeTzProvider:provider];
}

+ (void)setProvider0WithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider {
  if (provider == nil) {
    provider = [OrgJodaTimeDateTimeZone getDefaultProvider];
  }
  id<JavaUtilSet> ids = [((id<OrgJodaTimeTzProvider>) nil_chk(provider)) getAvailableIDs];
  if (ids == nil || [ids size] == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The provider doesn't have any available ids"];
  }
  if (![((id<JavaUtilSet>) nil_chk(ids)) containsWithId:@"UTC"]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The provider doesn't support UTC"];
  }
  if (![((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_UTC_)) isEqual:[provider getZoneWithNSString:@"UTC"]]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid UTC zone provided"];
  }
  OrgJodaTimeDateTimeZone_cProvider_ = provider;
  OrgJodaTimeDateTimeZone_cAvailableIDs_ = ids;
}

+ (id<OrgJodaTimeTzProvider>)getDefaultProvider {
  id<OrgJodaTimeTzProvider> provider = nil;
  @try {
    NSString *providerClass = [JavaLangSystem getPropertyWithNSString:@"org.joda.time.DateTimeZone.Provider"];
    if (providerClass != nil) {
      @try {
        provider = (id<OrgJodaTimeTzProvider>) check_protocol_cast([((IOSClass *) nil_chk([IOSClass forName:providerClass])) newInstance], @protocol(OrgJodaTimeTzProvider));
      }
      @catch (JavaLangException *ex) {
        @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  if (provider == nil) {
    @try {
      provider = [[OrgJodaTimeTzZoneInfoProvider alloc] initWithNSString:@"org/joda/time/tz/data"];
    }
    @catch (JavaLangException *ex) {
      [((JavaLangException *) nil_chk(ex)) printStackTrace];
    }
  }
  if (provider == nil) {
    provider = [[OrgJodaTimeTzUTCProvider alloc] init];
  }
  return provider;
}

+ (id<OrgJodaTimeTzNameProvider>)getNameProvider {
  return OrgJodaTimeDateTimeZone_cNameProvider_;
}

+ (void)setNameProviderWithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider {
  JavaLangSecurityManager *sm = [JavaLangSystem getSecurityManager];
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:[[OrgJodaTimeJodaTimePermission alloc] initWithNSString:@"DateTimeZone.setNameProvider"]];
  }
  [OrgJodaTimeDateTimeZone setNameProvider0WithOrgJodaTimeTzNameProvider:nameProvider];
}

+ (void)setNameProvider0WithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider {
  if (nameProvider == nil) {
    nameProvider = [OrgJodaTimeDateTimeZone getDefaultNameProvider];
  }
  OrgJodaTimeDateTimeZone_cNameProvider_ = nameProvider;
}

+ (id<OrgJodaTimeTzNameProvider>)getDefaultNameProvider {
  id<OrgJodaTimeTzNameProvider> nameProvider = nil;
  @try {
    NSString *providerClass = [JavaLangSystem getPropertyWithNSString:@"org.joda.time.DateTimeZone.NameProvider"];
    if (providerClass != nil) {
      @try {
        nameProvider = (id<OrgJodaTimeTzNameProvider>) check_protocol_cast([((IOSClass *) nil_chk([IOSClass forName:providerClass])) newInstance], @protocol(OrgJodaTimeTzNameProvider));
      }
      @catch (JavaLangException *ex) {
        @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  if (nameProvider == nil) {
    nameProvider = [[OrgJodaTimeTzDefaultNameProvider alloc] init];
  }
  return nameProvider;
}

+ (NSString *)getConvertedIdWithNSString:(NSString *)id_ {
  @synchronized([OrgJodaTimeDateTimeZone getClass]) {
    {
      id<JavaUtilMap> map = OrgJodaTimeDateTimeZone_cZoneIdConversion_;
      if (map == nil) {
        map = [[JavaUtilHashMap alloc] init];
        (void) [map putWithId:@"GMT" withId:@"UTC"];
        (void) [map putWithId:@"WET" withId:@"WET"];
        (void) [map putWithId:@"CET" withId:@"CET"];
        (void) [map putWithId:@"MET" withId:@"CET"];
        (void) [map putWithId:@"ECT" withId:@"CET"];
        (void) [map putWithId:@"EET" withId:@"EET"];
        (void) [map putWithId:@"MIT" withId:@"Pacific/Apia"];
        (void) [map putWithId:@"HST" withId:@"Pacific/Honolulu"];
        (void) [map putWithId:@"AST" withId:@"America/Anchorage"];
        (void) [map putWithId:@"PST" withId:@"America/Los_Angeles"];
        (void) [map putWithId:@"MST" withId:@"America/Denver"];
        (void) [map putWithId:@"PNT" withId:@"America/Phoenix"];
        (void) [map putWithId:@"CST" withId:@"America/Chicago"];
        (void) [map putWithId:@"EST" withId:@"America/New_York"];
        (void) [map putWithId:@"IET" withId:@"America/Indiana/Indianapolis"];
        (void) [map putWithId:@"PRT" withId:@"America/Puerto_Rico"];
        (void) [map putWithId:@"CNT" withId:@"America/St_Johns"];
        (void) [map putWithId:@"AGT" withId:@"America/Argentina/Buenos_Aires"];
        (void) [map putWithId:@"BET" withId:@"America/Sao_Paulo"];
        (void) [map putWithId:@"ART" withId:@"Africa/Cairo"];
        (void) [map putWithId:@"CAT" withId:@"Africa/Harare"];
        (void) [map putWithId:@"EAT" withId:@"Africa/Addis_Ababa"];
        (void) [map putWithId:@"NET" withId:@"Asia/Yerevan"];
        (void) [map putWithId:@"PLT" withId:@"Asia/Karachi"];
        (void) [map putWithId:@"IST" withId:@"Asia/Kolkata"];
        (void) [map putWithId:@"BST" withId:@"Asia/Dhaka"];
        (void) [map putWithId:@"VST" withId:@"Asia/Ho_Chi_Minh"];
        (void) [map putWithId:@"CTT" withId:@"Asia/Shanghai"];
        (void) [map putWithId:@"JST" withId:@"Asia/Tokyo"];
        (void) [map putWithId:@"ACT" withId:@"Australia/Darwin"];
        (void) [map putWithId:@"AET" withId:@"Australia/Sydney"];
        (void) [map putWithId:@"SST" withId:@"Pacific/Guadalcanal"];
        (void) [map putWithId:@"NST" withId:@"Pacific/Auckland"];
        OrgJodaTimeDateTimeZone_cZoneIdConversion_ = map;
      }
      return [((id<JavaUtilMap>) nil_chk(map)) getWithId:id_];
    }
  }
}

+ (int)parseOffsetWithNSString:(NSString *)str {
  OrgJodaTimeChronology *chrono = [[OrgJodaTimeDateTimeZone_$1 alloc] init];
  return -(int) [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeDateTimeZone offsetFormatter])) withChronologyWithOrgJodaTimeChronology:chrono])) parseMillisWithNSString:str];
}

+ (NSString *)printOffsetWithInt:(int)offset {
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  if (offset >= 0) {
    (void) [buf appendWithChar:'+'];
  }
  else {
    (void) [buf appendWithChar:'-'];
    offset = -offset;
  }
  int hours = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangStringBuffer:buf withInt:hours withInt:2];
  offset -= hours * (int) OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  int minutes = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  (void) [buf appendWithChar:':'];
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangStringBuffer:buf withInt:minutes withInt:2];
  offset -= minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (offset == 0) {
    return [buf description];
  }
  int seconds = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  (void) [buf appendWithChar:':'];
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangStringBuffer:buf withInt:seconds withInt:2];
  offset -= seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (offset == 0) {
    return [buf description];
  }
  (void) [buf appendWithChar:'.'];
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangStringBuffer:buf withInt:offset withInt:3];
  return [buf description];
}

+ (OrgJodaTimeFormatDateTimeFormatter *)offsetFormatter {
  @synchronized([OrgJodaTimeDateTimeZone getClass]) {
    {
      if (OrgJodaTimeDateTimeZone_cOffsetFormatter_ == nil) {
        OrgJodaTimeDateTimeZone_cOffsetFormatter_ = [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([((OrgJodaTimeFormatDateTimeFormatterBuilder *) [[OrgJodaTimeFormatDateTimeFormatterBuilder alloc] init]) appendTimeZoneOffsetWithNSString:nil withBoolean:YES withInt:2 withInt:4])) toFormatter];
      }
      return OrgJodaTimeDateTimeZone_cOffsetFormatter_;
    }
  }
}

- (instancetype)initWithNSString:(NSString *)id_ {
  if (self = [super init]) {
    if (id_ == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Id must not be null"];
    }
    iID_ = id_;
  }
  return self;
}

- (NSString *)getID {
  return iID_;
}

- (NSString *)getNameKeyWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getShortNameWithLong:(long long int)instant {
  return [self getShortNameWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getShortNameWithLong:(long long int)instant
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  NSString *nameKey = [self getNameKeyWithLong:instant];
  if (nameKey == nil) {
    return iID_;
  }
  NSString *name = [((id<OrgJodaTimeTzNameProvider>) nil_chk(OrgJodaTimeDateTimeZone_cNameProvider_)) getShortNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey];
  if (name != nil) {
    return name;
  }
  return [OrgJodaTimeDateTimeZone printOffsetWithInt:[self getOffsetWithLong:instant]];
}

- (NSString *)getNameWithLong:(long long int)instant {
  return [self getNameWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getNameWithLong:(long long int)instant
           withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  NSString *nameKey = [self getNameKeyWithLong:instant];
  if (nameKey == nil) {
    return iID_;
  }
  NSString *name = [((id<OrgJodaTimeTzNameProvider>) nil_chk(OrgJodaTimeDateTimeZone_cNameProvider_)) getNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey];
  if (name != nil) {
    return name;
  }
  return [OrgJodaTimeDateTimeZone printOffsetWithInt:[self getOffsetWithLong:instant]];
}

- (int)getOffsetWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getOffsetWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  if (instant == nil) {
    return [self getOffsetWithLong:[OrgJodaTimeDateTimeUtils currentTimeMillis]];
  }
  return [self getOffsetWithLong:[((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getMillis]];
}

- (int)getStandardOffsetWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isStandardOffsetWithLong:(long long int)instant {
  return [self getOffsetWithLong:instant] == [self getStandardOffsetWithLong:instant];
}

- (int)getOffsetFromLocalWithLong:(long long int)instantLocal {
  int offsetLocal = [self getOffsetWithLong:instantLocal];
  long long int instantAdjusted = instantLocal - offsetLocal;
  int offsetAdjusted = [self getOffsetWithLong:instantAdjusted];
  if (offsetLocal != offsetAdjusted) {
    if ((offsetLocal - offsetAdjusted) < 0) {
      long long int nextLocal = [self nextTransitionWithLong:instantAdjusted];
      if (nextLocal == (instantLocal - offsetLocal)) {
        nextLocal = JavaLangLong_MAX_VALUE;
      }
      long long int nextAdjusted = [self nextTransitionWithLong:instantLocal - offsetAdjusted];
      if (nextAdjusted == (instantLocal - offsetAdjusted)) {
        nextAdjusted = JavaLangLong_MAX_VALUE;
      }
      if (nextLocal != nextAdjusted) {
        return offsetLocal;
      }
    }
  }
  else if (offsetLocal >= 0) {
    long long int prev = [self previousTransitionWithLong:instantAdjusted];
    if (prev < instantAdjusted) {
      int offsetPrev = [self getOffsetWithLong:prev];
      int diff = offsetPrev - offsetLocal;
      if (instantAdjusted - prev <= diff) {
        return offsetPrev;
      }
    }
  }
  return offsetAdjusted;
}

- (long long int)convertUTCToLocalWithLong:(long long int)instantUTC {
  int offset = [self getOffsetWithLong:instantUTC];
  long long int instantLocal = instantUTC + offset;
  if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Adding time zone offset caused overflow"];
  }
  return instantLocal;
}

- (long long int)convertLocalToUTCWithLong:(long long int)instantLocal
                               withBoolean:(BOOL)strict
                                  withLong:(long long int)originalInstantUTC {
  int offsetOriginal = [self getOffsetWithLong:originalInstantUTC];
  long long int instantUTC = instantLocal - offsetOriginal;
  int offsetLocalFromOriginal = [self getOffsetWithLong:instantUTC];
  if (offsetLocalFromOriginal == offsetOriginal) {
    return instantUTC;
  }
  return [self convertLocalToUTCWithLong:instantLocal withBoolean:strict];
}

- (long long int)convertLocalToUTCWithLong:(long long int)instantLocal
                               withBoolean:(BOOL)strict {
  int offsetLocal = [self getOffsetWithLong:instantLocal];
  int offset = [self getOffsetWithLong:instantLocal - offsetLocal];
  if (offsetLocal != offset) {
    if (strict || offsetLocal < 0) {
      long long int nextLocal = [self nextTransitionWithLong:instantLocal - offsetLocal];
      if (nextLocal == (instantLocal - offsetLocal)) {
        nextLocal = JavaLangLong_MAX_VALUE;
      }
      long long int nextAdjusted = [self nextTransitionWithLong:instantLocal - offset];
      if (nextAdjusted == (instantLocal - offset)) {
        nextAdjusted = JavaLangLong_MAX_VALUE;
      }
      if (nextLocal != nextAdjusted) {
        if (strict) {
          @throw [[OrgJodaTimeIllegalInstantException alloc] initWithLong:instantLocal withNSString:[self getID]];
        }
        else {
          offset = offsetLocal;
        }
      }
    }
  }
  long long int instantUTC = instantLocal - offset;
  if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Subtracting time zone offset caused overflow"];
  }
  return instantUTC;
}

- (long long int)getMillisKeepLocalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone
                                                      withLong:(long long int)oldInstant {
  if (newZone == nil) {
    newZone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (newZone == self) {
    return oldInstant;
  }
  long long int instantLocal = [self convertUTCToLocalWithLong:oldInstant];
  return [((OrgJodaTimeDateTimeZone *) nil_chk(newZone)) convertLocalToUTCWithLong:instantLocal withBoolean:NO withLong:oldInstant];
}

- (BOOL)isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)localDateTime {
  if ([self isFixed]) {
    return NO;
  }
  @try {
    (void) [((OrgJodaTimeLocalDateTime *) nil_chk(localDateTime)) toDateTimeWithOrgJodaTimeDateTimeZone:self];
    return NO;
  }
  @catch (OrgJodaTimeIllegalInstantException *ex) {
    return YES;
  }
}

- (long long int)adjustOffsetWithLong:(long long int)instant
                          withBoolean:(BOOL)earlierOrLater {
  long long int instantBefore = instant - 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  long long int instantAfter = instant + 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  long long int offsetBefore = [self getOffsetWithLong:instantBefore];
  long long int offsetAfter = [self getOffsetWithLong:instantAfter];
  if (offsetBefore <= offsetAfter) {
    return instant;
  }
  long long int diff = offsetBefore - offsetAfter;
  long long int transition = [self nextTransitionWithLong:instantBefore];
  long long int overlapStart = transition - diff;
  long long int overlapEnd = transition + diff;
  if (instant < overlapStart || instant >= overlapEnd) {
    return instant;
  }
  long long int afterStart = instant - overlapStart;
  if (afterStart >= diff) {
    return earlierOrLater ? instant : instant - diff;
  }
  else {
    return earlierOrLater ? instant + diff : instant;
  }
}

- (BOOL)isFixed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)nextTransitionWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)previousTransitionWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilTimeZone *)toTimeZone {
  return [JavaUtilTimeZone getTimeZoneWithNSString:iID_];
}

- (BOOL)isEqual:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  return 57 + ((int) [((NSString *) nil_chk([self getID])) hash]);
}

- (NSString *)description {
  return [self getID];
}

- (id)writeReplace {
  return [[OrgJodaTimeDateTimeZone_Stub alloc] initWithNSString:iID_];
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeZone class]) {
    OrgJodaTimeDateTimeZone_UTC_ = OrgJodaTimeUTCDateTimeZone_get_INSTANCE_();
    {
      [OrgJodaTimeDateTimeZone setProvider0WithOrgJodaTimeTzProvider:nil];
      [OrgJodaTimeDateTimeZone setNameProvider0WithOrgJodaTimeTzNameProvider:nil];
    }
    OrgJodaTimeDateTimeZone_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeZone *)other {
  [super copyAllFieldsTo:other];
  other->iID_ = iID_;
}
+ (IOSObjectArray *)__annotations_forIDWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertFromString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_getID {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertToString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDefault", NULL, "Lorg.joda.time.DateTimeZone;", 0x9, NULL },
    { "setDefaultWithOrgJodaTimeDateTimeZone:", "setDefault", "V", 0x9, "Ljava.lang.SecurityException;" },
    { "forIDWithNSString:", "forID", "Lorg.joda.time.DateTimeZone;", 0x9, NULL },
    { "forOffsetHoursWithInt:", "forOffsetHours", "Lorg.joda.time.DateTimeZone;", 0x9, "Ljava.lang.IllegalArgumentException;" },
    { "forOffsetHoursMinutesWithInt:withInt:", "forOffsetHoursMinutes", "Lorg.joda.time.DateTimeZone;", 0x9, "Ljava.lang.IllegalArgumentException;" },
    { "forOffsetMillisWithInt:", "forOffsetMillis", "Lorg.joda.time.DateTimeZone;", 0x9, NULL },
    { "forTimeZoneWithJavaUtilTimeZone:", "forTimeZone", "Lorg.joda.time.DateTimeZone;", 0x9, NULL },
    { "fixedOffsetZoneWithNSString:withInt:", "fixedOffsetZone", "Lorg.joda.time.DateTimeZone;", 0x2a, NULL },
    { "getAvailableIDs", NULL, "Ljava.util.Set;", 0x9, NULL },
    { "getProvider", NULL, "Lorg.joda.time.tz.Provider;", 0x9, NULL },
    { "setProviderWithOrgJodaTimeTzProvider:", "setProvider", "V", 0x9, "Ljava.lang.SecurityException;" },
    { "setProvider0WithOrgJodaTimeTzProvider:", "setProvider0", "V", 0xa, NULL },
    { "getDefaultProvider", NULL, "Lorg.joda.time.tz.Provider;", 0xa, NULL },
    { "getNameProvider", NULL, "Lorg.joda.time.tz.NameProvider;", 0x9, NULL },
    { "setNameProviderWithOrgJodaTimeTzNameProvider:", "setNameProvider", "V", 0x9, "Ljava.lang.SecurityException;" },
    { "setNameProvider0WithOrgJodaTimeTzNameProvider:", "setNameProvider0", "V", 0xa, NULL },
    { "getDefaultNameProvider", NULL, "Lorg.joda.time.tz.NameProvider;", 0xa, NULL },
    { "getConvertedIdWithNSString:", "getConvertedId", "Ljava.lang.String;", 0x2a, NULL },
    { "parseOffsetWithNSString:", "parseOffset", "I", 0xa, NULL },
    { "printOffsetWithInt:", "printOffset", "Ljava.lang.String;", 0xa, NULL },
    { "offsetFormatter", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x2a, NULL },
    { "initWithNSString:", "DateTimeZone", NULL, 0x4, NULL },
    { "getID", NULL, "Ljava.lang.String;", 0x11, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x401, NULL },
    { "getShortNameWithLong:", "getShortName", "Ljava.lang.String;", 0x11, NULL },
    { "getShortNameWithLong:withJavaUtilLocale:", "getShortName", "Ljava.lang.String;", 0x1, NULL },
    { "getNameWithLong:", "getName", "Ljava.lang.String;", 0x11, NULL },
    { "getNameWithLong:withJavaUtilLocale:", "getName", "Ljava.lang.String;", 0x1, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x401, NULL },
    { "getOffsetWithOrgJodaTimeReadableInstant:", "getOffset", "I", 0x11, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x401, NULL },
    { "isStandardOffsetWithLong:", "isStandardOffset", "Z", 0x1, NULL },
    { "getOffsetFromLocalWithLong:", "getOffsetFromLocal", "I", 0x1, NULL },
    { "convertUTCToLocalWithLong:", "convertUTCToLocal", "J", 0x1, NULL },
    { "convertLocalToUTCWithLong:withBoolean:withLong:", "convertLocalToUTC", "J", 0x1, NULL },
    { "convertLocalToUTCWithLong:withBoolean:", "convertLocalToUTC", "J", 0x1, NULL },
    { "getMillisKeepLocalWithOrgJodaTimeDateTimeZone:withLong:", "getMillisKeepLocal", "J", 0x1, NULL },
    { "isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:", "isLocalDateTimeGap", "Z", 0x1, NULL },
    { "adjustOffsetWithLong:withBoolean:", "adjustOffset", "J", 0x1, NULL },
    { "isFixed", NULL, "Z", 0x401, NULL },
    { "nextTransitionWithLong:", "nextTransition", "J", 0x401, NULL },
    { "previousTransitionWithLong:", "previousTransition", "J", 0x401, NULL },
    { "toTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x401, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeReplace", NULL, "Ljava.lang.Object;", 0x4, "Ljava.io.ObjectStreamException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDateTimeZone_serialVersionUID },
    { "UTC_", NULL, 0x19, "Lorg.joda.time.DateTimeZone;", &OrgJodaTimeDateTimeZone_UTC_,  },
    { "MAX_MILLIS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeDateTimeZone_MAX_MILLIS },
    { "cProvider_", NULL, 0xa, "Lorg.joda.time.tz.Provider;", &OrgJodaTimeDateTimeZone_cProvider_,  },
    { "cNameProvider_", NULL, 0xa, "Lorg.joda.time.tz.NameProvider;", &OrgJodaTimeDateTimeZone_cNameProvider_,  },
    { "cAvailableIDs_", NULL, 0xa, "Ljava.util.Set;", &OrgJodaTimeDateTimeZone_cAvailableIDs_,  },
    { "cDefault_", NULL, 0x4a, "Lorg.joda.time.DateTimeZone;", &OrgJodaTimeDateTimeZone_cDefault_,  },
    { "cOffsetFormatter_", NULL, 0xa, "Lorg.joda.time.format.DateTimeFormatter;", &OrgJodaTimeDateTimeZone_cOffsetFormatter_,  },
    { "iFixedOffsetCache_", NULL, 0xa, "Ljava.util.Map;", &OrgJodaTimeDateTimeZone_iFixedOffsetCache_,  },
    { "cZoneIdConversion_", NULL, 0xa, "Ljava.util.Map;", &OrgJodaTimeDateTimeZone_cZoneIdConversion_,  },
    { "iID_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeZone = { "DateTimeZone", "org.joda.time", NULL, 0x401, 47, methods, 11, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeZone;
}

@end

@implementation OrgJodaTimeDateTimeZone_Stub

- (instancetype)initWithNSString:(NSString *)id_ {
  if (self = [super init]) {
    iID_ = id_;
  }
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeUTFWithNSString:iID_];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  iID_ = [((JavaIoObjectInputStream *) nil_chk(inArg)) readUTF];
}

- (id)readResolve {
  return [OrgJodaTimeDateTimeZone forIDWithNSString:iID_];
}

- (void)copyAllFieldsTo:(OrgJodaTimeDateTimeZone_Stub *)other {
  [super copyAllFieldsTo:other];
  other->iID_ = iID_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Stub", NULL, 0x0, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, "Ljava.io.ObjectStreamException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDateTimeZone_Stub_serialVersionUID },
    { "iID_", NULL, 0x82, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeZone_Stub = { "Stub", "org.joda.time", "DateTimeZone", 0x1a, 4, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeZone_Stub;
}

@end

@implementation OrgJodaTimeDateTimeZone_$1

- (OrgJodaTimeDateTimeZone *)getZone {
  return nil;
}

- (OrgJodaTimeChronology *)withUTC {
  return self;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return self;
}

- (NSString *)description {
  return [[self getClass] getName];
}

- (instancetype)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID__", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeDateTimeZone_$1_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeDateTimeZone_$1 = { "$1", "org.joda.time", "DateTimeZone", 0x8000, 5, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeDateTimeZone_$1;
}

@end
