//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/GregorianChronology.java
//

#include "AssembledChronology.h"
#include "BasicChronology.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeZone.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ZonedChronology.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

BOOL OrgJodaTimeChronoGregorianChronology_initialized = NO;

@implementation OrgJodaTimeChronoGregorianChronology

OrgJodaTimeChronoGregorianChronology * OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoGregorianChronology_cCache_;

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceUTC {
  return OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC_;
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstance {
  return [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:[OrgJodaTimeDateTimeZone getDefault] withInt:4];
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withInt:4];
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                         withInt:(int)minDaysInFirstWeek {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  OrgJodaTimeChronoGregorianChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoGregorianChronology_cCache_)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:7 type:[IOSClass classWithClass:[OrgJodaTimeChronoGregorianChronology class]]];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoGregorianChronology_cCache_ putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  @try {
    chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid min days in first week: %d", minDaysInFirstWeek]];
  }
  if (chrono == nil) {
    @synchronized (chronos) {
      chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
      if (chrono == nil) {
        if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
          chrono = [[OrgJodaTimeChronoGregorianChronology alloc] initWithOrgJodaTimeChronology:nil withId:nil withInt:minDaysInFirstWeek];
        }
        else {
          chrono = [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withInt:minDaysInFirstWeek];
          chrono = [[OrgJodaTimeChronoGregorianChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoZonedChronology getInstanceWithOrgJodaTimeChronology:chrono withOrgJodaTimeDateTimeZone:zone] withId:nil withInt:minDaysInFirstWeek];
        }
        (void) IOSObjectArray_Set(chronos, minDaysInFirstWeek - 1, chrono);
      }
    }
  }
  return chrono;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(int)minDaysInFirstWeek {
  return [super initWithOrgJodaTimeChronology:base withId:param withInt:minDaysInFirstWeek];
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  int minDays = [self getMinimumDaysInFirstWeek];
  minDays = (minDays == 0 ? 4 : minDays);
  return base == nil ? [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withInt:minDays] : [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:[base getZone] withInt:minDays];
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
  }
}

- (BOOL)isLeapYearWithInt:(int)year {
  return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
}

- (long long int)calculateFirstDayOfYearMillisWithInt:(int)year {
  int leapYears = year / 100;
  if (year < 0) {
    leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
  }
  else {
    leapYears = (year >> 2) - leapYears + (leapYears >> 2);
    if ([self isLeapYearWithInt:year]) {
      leapYears--;
    }
  }
  return (year * 365LL + (leapYears - OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970)) * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (int)getMinYear {
  return OrgJodaTimeChronoGregorianChronology_MIN_YEAR;
}

- (int)getMaxYear {
  return OrgJodaTimeChronoGregorianChronology_MAX_YEAR;
}

- (long long int)getAverageMillisPerYear {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR;
}

- (long long int)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR / 2;
}

- (long long int)getAverageMillisPerMonth {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH;
}

- (long long int)getApproxMillisAtEpochDividedByTwo {
  return (1970LL * OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR) / 2;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGregorianChronology class]) {
    OrgJodaTimeChronoGregorianChronology_cCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    {
      OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC_ = [OrgJodaTimeChronoGregorianChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
    }
    OrgJodaTimeChronoGregorianChronology_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withInt:", "getInstance", "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withId:withInt:", "GregorianChronology", NULL, 0x2, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_GregorianChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_serialVersionUID },
    { "MILLIS_PER_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_MONTH_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH },
    { "DAYS_0000_TO_1970_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970 },
    { "MIN_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_MIN_YEAR },
    { "MAX_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_MAX_YEAR },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.GregorianChronology;", &OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC_,  },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoGregorianChronology_cCache_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoGregorianChronology = { "GregorianChronology", "org.joda.time.chrono", NULL, 0x11, 17, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeChronoGregorianChronology;
}

@end
