//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
//

#include "CachedDateTimeZone.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DateTimeZoneBuilder.h"
#include "FixedDateTimeZone.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "J2ObjC_source.h"
#include "Period.h"
#include "PeriodType.h"
#include "ZoneInfoCompiler.h"
#include "java/io/DataInput.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutput.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"

__attribute__((unused)) static OrgJodaTimeDateTimeZone *OrgJodaTimeTzDateTimeZoneBuilder_buildFixedZoneWithNSString_withNSString_withInt_withInt_(NSString *id_, NSString *nameKey, jint wallOffset, jint standardOffset);
__attribute__((unused)) static OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *OrgJodaTimeTzDateTimeZoneBuilder_getLastRuleSet(OrgJodaTimeTzDateTimeZoneBuilder *self);
__attribute__((unused)) static jboolean OrgJodaTimeTzDateTimeZoneBuilder_addTransitionWithJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_Transition_(OrgJodaTimeTzDateTimeZoneBuilder *self, JavaUtilArrayList *transitions, OrgJodaTimeTzDateTimeZoneBuilder_Transition *tr);
__attribute__((unused)) static jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthNextWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong next);
__attribute__((unused)) static jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthPreviousWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong prev);
__attribute__((unused)) static jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong instant);
__attribute__((unused)) static jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong instant);
__attribute__((unused)) static OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_findMatchingRecurrenceWithLong_(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *self, jlong instant);

@interface OrgJodaTimeTzDateTimeZoneBuilder () {
 @public
  JavaUtilArrayList *iRuleSets_;
}

+ (OrgJodaTimeDateTimeZone *)buildFixedZoneWithNSString:(NSString *)id_
                                           withNSString:(NSString *)nameKey
                                                withInt:(jint)wallOffset
                                                withInt:(jint)standardOffset;

- (OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *)getLastRuleSet;

- (jboolean)addTransitionWithJavaUtilArrayList:(JavaUtilArrayList *)transitions
withOrgJodaTimeTzDateTimeZoneBuilder_Transition:(OrgJodaTimeTzDateTimeZoneBuilder_Transition *)tr;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder, iRuleSets_, JavaUtilArrayList *)

@interface OrgJodaTimeTzDateTimeZoneBuilder_OfYear ()

/**
 @brief If month-day is 02-29 and year isn't leap, advances to next leap year.
 */
- (jlong)setDayOfMonthNextWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                           withLong:(jlong)next;

/**
 @brief If month-day is 02-29 and year isn't leap, retreats to previous leap year.
 */
- (jlong)setDayOfMonthPreviousWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                               withLong:(jlong)prev;

- (jlong)setDayOfMonthWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                       withLong:(jlong)instant;

- (jlong)setDayOfWeekWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                      withLong:(jlong)instant;
@end

@interface OrgJodaTimeTzDateTimeZoneBuilder_Transition () {
 @public
  jlong iMillis_;
  NSString *iNameKey_;
  jint iWallOffset_;
  jint iStandardOffset_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_Transition, iNameKey_, NSString *)

@interface OrgJodaTimeTzDateTimeZoneBuilder_RuleSet () {
 @public
  jint iStandardOffset_;
  JavaUtilArrayList *iRules_;
  NSString *iInitialNameKey_;
  jint iInitialSaveMillis_;
  jint iUpperYear_;
  OrgJodaTimeTzDateTimeZoneBuilder_OfYear *iUpperOfYear_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet, iRules_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet, iInitialNameKey_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet, iUpperOfYear_, OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)

@interface OrgJodaTimeTzDateTimeZoneBuilder_DSTZone () {
}

- (OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)findMatchingRecurrenceWithLong:(jlong)instant;
@end

@interface OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone () {
 @public
  IOSLongArray *iTransitions_;
  IOSIntArray *iWallOffsets_;
  IOSIntArray *iStandardOffsets_;
  IOSObjectArray *iNameKeys_;
  OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *iTailZone_;
}
- (instancetype)initWithNSString:(NSString *)id_
                   withLongArray:(IOSLongArray *)transitions
                    withIntArray:(IOSIntArray *)wallOffsets
                    withIntArray:(IOSIntArray *)standardOffsets
               withNSStringArray:(IOSObjectArray *)nameKeys
withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)tailZone;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone, iTransitions_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone, iWallOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone, iStandardOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone, iNameKeys_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone, iTailZone_, OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)

@implementation OrgJodaTimeTzDateTimeZoneBuilder

+ (OrgJodaTimeDateTimeZone *)readFromWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                              withNSString:(NSString *)id_ {
  return OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoInputStream_withNSString_(inArg, id_);
}

+ (OrgJodaTimeDateTimeZone *)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                                            withNSString:(NSString *)id_ {
  return OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoDataInput_withNSString_(inArg, id_);
}

+ (void)writeMillisWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                               withLong:(jlong)millis {
  OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, millis);
}

+ (jlong)readMillisWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  return OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg);
}

+ (OrgJodaTimeDateTimeZone *)buildFixedZoneWithNSString:(NSString *)id_
                                           withNSString:(NSString *)nameKey
                                                withInt:(jint)wallOffset
                                                withInt:(jint)standardOffset {
  return OrgJodaTimeTzDateTimeZoneBuilder_buildFixedZoneWithNSString_withNSString_withInt_withInt_(id_, nameKey, wallOffset, standardOffset);
}

- (instancetype)init {
  if (self = [super init]) {
    OrgJodaTimeTzDateTimeZoneBuilder_setAndConsume_iRuleSets_(self, [[JavaUtilArrayList alloc] initWithInt:10]);
  }
  return self;
}

- (OrgJodaTimeTzDateTimeZoneBuilder *)addCutoverWithInt:(jint)year
                                               withChar:(jchar)mode
                                                withInt:(jint)monthOfYear
                                                withInt:(jint)dayOfMonth
                                                withInt:(jint)dayOfWeek
                                            withBoolean:(jboolean)advanceDayOfWeek
                                                withInt:(jint)millisOfDay {
  if ([((JavaUtilArrayList *) nil_chk(iRuleSets_)) size] > 0) {
    OrgJodaTimeTzDateTimeZoneBuilder_OfYear *ofYear = [[[OrgJodaTimeTzDateTimeZoneBuilder_OfYear alloc] initWithChar:mode withInt:monthOfYear withInt:dayOfMonth withInt:dayOfWeek withBoolean:advanceDayOfWeek withInt:millisOfDay] autorelease];
    OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *lastRuleSet = [iRuleSets_ getWithInt:[iRuleSets_ size] - 1];
    [((OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *) nil_chk(lastRuleSet)) setUpperLimitWithInt:year withOrgJodaTimeTzDateTimeZoneBuilder_OfYear:ofYear];
  }
  [iRuleSets_ addWithId:[[[OrgJodaTimeTzDateTimeZoneBuilder_RuleSet alloc] init] autorelease]];
  return self;
}

- (OrgJodaTimeTzDateTimeZoneBuilder *)setStandardOffsetWithInt:(jint)standardOffset {
  [((OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *) nil_chk(OrgJodaTimeTzDateTimeZoneBuilder_getLastRuleSet(self))) setStandardOffsetWithInt:standardOffset];
  return self;
}

- (OrgJodaTimeTzDateTimeZoneBuilder *)setFixedSavingsWithNSString:(NSString *)nameKey
                                                          withInt:(jint)saveMillis {
  [((OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *) nil_chk(OrgJodaTimeTzDateTimeZoneBuilder_getLastRuleSet(self))) setFixedSavingsWithNSString:nameKey withInt:saveMillis];
  return self;
}

- (OrgJodaTimeTzDateTimeZoneBuilder *)addRecurringSavingsWithNSString:(NSString *)nameKey
                                                              withInt:(jint)saveMillis
                                                              withInt:(jint)fromYear
                                                              withInt:(jint)toYear
                                                             withChar:(jchar)mode
                                                              withInt:(jint)monthOfYear
                                                              withInt:(jint)dayOfMonth
                                                              withInt:(jint)dayOfWeek
                                                          withBoolean:(jboolean)advanceDayOfWeek
                                                              withInt:(jint)millisOfDay {
  if (fromYear <= toYear) {
    OrgJodaTimeTzDateTimeZoneBuilder_OfYear *ofYear = [[[OrgJodaTimeTzDateTimeZoneBuilder_OfYear alloc] initWithChar:mode withInt:monthOfYear withInt:dayOfMonth withInt:dayOfWeek withBoolean:advanceDayOfWeek withInt:millisOfDay] autorelease];
    OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *recurrence = [[[OrgJodaTimeTzDateTimeZoneBuilder_Recurrence alloc] initWithOrgJodaTimeTzDateTimeZoneBuilder_OfYear:ofYear withNSString:nameKey withInt:saveMillis] autorelease];
    OrgJodaTimeTzDateTimeZoneBuilder_Rule *rule = [[[OrgJodaTimeTzDateTimeZoneBuilder_Rule alloc] initWithOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:recurrence withInt:fromYear withInt:toYear] autorelease];
    [((OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *) nil_chk(OrgJodaTimeTzDateTimeZoneBuilder_getLastRuleSet(self))) addRuleWithOrgJodaTimeTzDateTimeZoneBuilder_Rule:rule];
  }
  return self;
}

- (OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *)getLastRuleSet {
  return OrgJodaTimeTzDateTimeZoneBuilder_getLastRuleSet(self);
}

- (OrgJodaTimeDateTimeZone *)toDateTimeZoneWithNSString:(NSString *)id_
                                            withBoolean:(jboolean)outputID {
  if (id_ == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  JavaUtilArrayList *transitions = [[[JavaUtilArrayList alloc] init] autorelease];
  OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *tailZone = nil;
  jlong millis = JavaLangLong_MIN_VALUE;
  jint saveMillis = 0;
  jint ruleSetCount = [((JavaUtilArrayList *) nil_chk(iRuleSets_)) size];
  for (jint i = 0; i < ruleSetCount; i++) {
    OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *rs = [iRuleSets_ getWithInt:i];
    OrgJodaTimeTzDateTimeZoneBuilder_Transition *next = [((OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *) nil_chk(rs)) firstTransitionWithLong:millis];
    if (next == nil) {
      continue;
    }
    OrgJodaTimeTzDateTimeZoneBuilder_addTransitionWithJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_Transition_(self, transitions, next);
    millis = [((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(next)) getMillis];
    saveMillis = [next getSaveMillis];
    rs = [[[OrgJodaTimeTzDateTimeZoneBuilder_RuleSet alloc] initWithOrgJodaTimeTzDateTimeZoneBuilder_RuleSet:rs] autorelease];
    while ((next = [rs nextTransitionWithLong:millis withInt:saveMillis]) != nil) {
      if (OrgJodaTimeTzDateTimeZoneBuilder_addTransitionWithJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_Transition_(self, transitions, next)) {
        if (tailZone != nil) {
          break;
        }
      }
      millis = [((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(next)) getMillis];
      saveMillis = [next getSaveMillis];
      if (tailZone == nil && i == ruleSetCount - 1) {
        tailZone = [rs buildTailZoneWithNSString:id_];
      }
    }
    millis = [rs getUpperLimitWithInt:saveMillis];
  }
  if ([transitions size] == 0) {
    if (tailZone != nil) {
      return tailZone;
    }
    return OrgJodaTimeTzDateTimeZoneBuilder_buildFixedZoneWithNSString_withNSString_withInt_withInt_(id_, @"UTC", 0, 0);
  }
  if ([transitions size] == 1 && tailZone == nil) {
    OrgJodaTimeTzDateTimeZoneBuilder_Transition *tr = [transitions getWithInt:0];
    return OrgJodaTimeTzDateTimeZoneBuilder_buildFixedZoneWithNSString_withNSString_withInt_withInt_(id_, [((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(tr)) getNameKey], [tr getWallOffset], [tr getStandardOffset]);
  }
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *zone = OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_createWithNSString_withBoolean_withJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone_(id_, outputID, transitions, tailZone);
  if ([((OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *) nil_chk(zone)) isCachable]) {
    return OrgJodaTimeTzCachedDateTimeZone_forZoneWithOrgJodaTimeDateTimeZone_(zone);
  }
  return zone;
}

- (jboolean)addTransitionWithJavaUtilArrayList:(JavaUtilArrayList *)transitions
withOrgJodaTimeTzDateTimeZoneBuilder_Transition:(OrgJodaTimeTzDateTimeZoneBuilder_Transition *)tr {
  return OrgJodaTimeTzDateTimeZoneBuilder_addTransitionWithJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_Transition_(self, transitions, tr);
}

- (void)writeToWithNSString:(NSString *)zoneID
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ([JavaIoDataOutput_class_() isInstance:outArg]) {
    [self writeToWithNSString:zoneID withJavaIoDataOutput:(id<JavaIoDataOutput>) check_protocol_cast(outArg, @protocol(JavaIoDataOutput))];
  }
  else {
    [self writeToWithNSString:zoneID withJavaIoDataOutput:(id<JavaIoDataOutput>) check_protocol_cast([[[JavaIoDataOutputStream alloc] initWithJavaIoOutputStream:outArg] autorelease], @protocol(JavaIoDataOutput))];
  }
}

- (void)writeToWithNSString:(NSString *)zoneID
       withJavaIoDataOutput:(id<JavaIoDataOutput>)outArg {
  OrgJodaTimeDateTimeZone *zone = [self toDateTimeZoneWithNSString:zoneID withBoolean:NO];
  if ([zone isKindOfClass:[OrgJodaTimeTzFixedDateTimeZone class]]) {
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:'F'];
    [outArg writeUTFWithNSString:[((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getNameKeyWithLong:0]];
    OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, [zone getOffsetWithLong:0]);
    OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, [zone getStandardOffsetWithLong:0]);
  }
  else {
    if ([zone isKindOfClass:[OrgJodaTimeTzCachedDateTimeZone class]]) {
      [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:'C'];
      zone = [((OrgJodaTimeTzCachedDateTimeZone *) nil_chk(((OrgJodaTimeTzCachedDateTimeZone *) check_class_cast(zone, [OrgJodaTimeTzCachedDateTimeZone class])))) getUncachedZone];
    }
    else {
      [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:'P'];
    }
    [((OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *) nil_chk(((OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *) check_class_cast(zone, [OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone class])))) writeToWithJavaIoDataOutput:outArg];
  }
}

- (void)dealloc {
  RELEASE_(iRuleSets_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzDateTimeZoneBuilder_set_iRuleSets_(other, iRuleSets_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readFromWithJavaIoInputStream:withNSString:", "readFrom", "Lorg.joda.time.DateTimeZone;", 0x9, "Ljava.io.IOException;" },
    { "readFromWithJavaIoDataInput:withNSString:", "readFrom", "Lorg.joda.time.DateTimeZone;", 0x9, "Ljava.io.IOException;" },
    { "writeMillisWithJavaIoDataOutput:withLong:", "writeMillis", "V", 0x8, "Ljava.io.IOException;" },
    { "readMillisWithJavaIoDataInput:", "readMillis", "J", 0x8, "Ljava.io.IOException;" },
    { "buildFixedZoneWithNSString:withNSString:withInt:withInt:", "buildFixedZone", "Lorg.joda.time.DateTimeZone;", 0xa, NULL },
    { "init", "DateTimeZoneBuilder", NULL, 0x1, NULL },
    { "addCutoverWithInt:withChar:withInt:withInt:withInt:withBoolean:withInt:", "addCutover", "Lorg.joda.time.tz.DateTimeZoneBuilder;", 0x1, NULL },
    { "setStandardOffsetWithInt:", "setStandardOffset", "Lorg.joda.time.tz.DateTimeZoneBuilder;", 0x1, NULL },
    { "setFixedSavingsWithNSString:withInt:", "setFixedSavings", "Lorg.joda.time.tz.DateTimeZoneBuilder;", 0x1, NULL },
    { "addRecurringSavingsWithNSString:withInt:withInt:withInt:withChar:withInt:withInt:withInt:withBoolean:withInt:", "addRecurringSavings", "Lorg.joda.time.tz.DateTimeZoneBuilder;", 0x1, NULL },
    { "getLastRuleSet", NULL, "Lorg.joda.time.tz.DateTimeZoneBuilder$RuleSet;", 0x2, NULL },
    { "toDateTimeZoneWithNSString:withBoolean:", "toDateTimeZone", "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "addTransitionWithJavaUtilArrayList:withOrgJodaTimeTzDateTimeZoneBuilder_Transition:", "addTransition", "Z", 0x2, NULL },
    { "writeToWithNSString:withJavaIoOutputStream:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "writeToWithNSString:withJavaIoDataOutput:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iRuleSets_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder = { 1, "DateTimeZoneBuilder", "org.joda.time.tz", NULL, 0x1, 15, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder;
}

@end

OrgJodaTimeDateTimeZone *OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoInputStream_withNSString_(JavaIoInputStream *inArg, NSString *id_) {
  OrgJodaTimeTzDateTimeZoneBuilder_init();
  if ([JavaIoDataInput_class_() isInstance:inArg]) {
    return OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoDataInput_withNSString_((id<JavaIoDataInput>) check_protocol_cast(inArg, @protocol(JavaIoDataInput)), id_);
  }
  else {
    return OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoDataInput_withNSString_((id<JavaIoDataInput>) check_protocol_cast([[[JavaIoDataInputStream alloc] initWithJavaIoInputStream:inArg] autorelease], @protocol(JavaIoDataInput)), id_);
  }
}

OrgJodaTimeDateTimeZone *OrgJodaTimeTzDateTimeZoneBuilder_readFromWithJavaIoDataInput_withNSString_(id<JavaIoDataInput> inArg, NSString *id_) {
  OrgJodaTimeTzDateTimeZoneBuilder_init();
  {
    OrgJodaTimeDateTimeZone *fixed;
    switch ([((id<JavaIoDataInput>) nil_chk(inArg)) readUnsignedByte]) {
      case 'F':
      fixed = [[[OrgJodaTimeTzFixedDateTimeZone alloc] initWithNSString:id_ withNSString:[inArg readUTF] withInt:(jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg) withInt:(jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg)] autorelease];
      if ([fixed isEqual:OrgJodaTimeDateTimeZone_get_UTC_()]) {
        fixed = OrgJodaTimeDateTimeZone_get_UTC_();
      }
      return fixed;
      case 'C':
      return OrgJodaTimeTzCachedDateTimeZone_forZoneWithOrgJodaTimeDateTimeZone_(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_readFromWithJavaIoDataInput_withNSString_(inArg, id_));
      case 'P':
      return OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_readFromWithJavaIoDataInput_withNSString_(inArg, id_);
      default:
      @throw [[[JavaIoIOException alloc] initWithNSString:@"Invalid encoding"] autorelease];
    }
  }
}

void OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(id<JavaIoDataOutput> outArg, jlong millis) {
  OrgJodaTimeTzDateTimeZoneBuilder_init();
  if (millis % (30 * 60000LL) == 0) {
    jlong units = millis / (30 * 60000LL);
    if ((RShift64((LShift64(units, (64 - 6))), (64 - 6))) == units) {
      [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:(jint) (units & (jint) 0x3f)];
      return;
    }
  }
  if (millis % 60000LL == 0) {
    jlong minutes = millis / 60000LL;
    if ((RShift64((LShift64(minutes, (64 - 30))), (64 - 30))) == minutes) {
      [((id<JavaIoDataOutput>) nil_chk(outArg)) writeIntWithInt:(jint) 0x40000000 | (jint) (minutes & (jint) 0x3fffffff)];
      return;
    }
  }
  if (millis % 1000LL == 0) {
    jlong seconds = millis / 1000LL;
    if ((RShift64((LShift64(seconds, (64 - 38))), (64 - 38))) == seconds) {
      [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:(jint) 0x80 | (jint) ((RShift64(seconds, 32)) & (jint) 0x3f)];
      [outArg writeIntWithInt:(jint) (seconds & (jint) 0xffffffff)];
      return;
    }
  }
  [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:millis < 0 ? (jint) 0xff : (jint) 0xc0];
  [outArg writeLongWithLong:millis];
}

jlong OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(id<JavaIoDataInput> inArg) {
  OrgJodaTimeTzDateTimeZoneBuilder_init();
  jint v = [((id<JavaIoDataInput>) nil_chk(inArg)) readUnsignedByte];
  {
    jlong w;
    switch (RShift32(v, 6)) {
      case 0:
      default:
      v = RShift32((LShift32(v, (32 - 6))), (32 - 6));
      return v * (30 * 60000LL);
      case 1:
      v = RShift32((LShift32(v, (32 - 6))), (32 - 30));
      v |= LShift32(([inArg readUnsignedByte]), 16);
      v |= LShift32(([inArg readUnsignedByte]), 8);
      v |= ([inArg readUnsignedByte]);
      return v * 60000LL;
      case 2:
      w = RShift64((LShift64(((jlong) v), (64 - 6))), (64 - 38));
      w |= LShift32(([inArg readUnsignedByte]), 24);
      w |= LShift32(([inArg readUnsignedByte]), 16);
      w |= LShift32(([inArg readUnsignedByte]), 8);
      w |= ([inArg readUnsignedByte]);
      return w * 1000LL;
      case 3:
      return [inArg readLong];
    }
  }
}

OrgJodaTimeDateTimeZone *OrgJodaTimeTzDateTimeZoneBuilder_buildFixedZoneWithNSString_withNSString_withInt_withInt_(NSString *id_, NSString *nameKey, jint wallOffset, jint standardOffset) {
  OrgJodaTimeTzDateTimeZoneBuilder_init();
  if ([@"UTC" isEqual:id_] && [((NSString *) nil_chk(id_)) isEqual:nameKey] && wallOffset == 0 && standardOffset == 0) {
    return OrgJodaTimeDateTimeZone_get_UTC_();
  }
  return [[[OrgJodaTimeTzFixedDateTimeZone alloc] initWithNSString:id_ withNSString:nameKey withInt:wallOffset withInt:standardOffset] autorelease];
}

OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *OrgJodaTimeTzDateTimeZoneBuilder_getLastRuleSet(OrgJodaTimeTzDateTimeZoneBuilder *self) {
  if ([((JavaUtilArrayList *) nil_chk(self->iRuleSets_)) size] == 0) {
    [self addCutoverWithInt:JavaLangInteger_MIN_VALUE withChar:'w' withInt:1 withInt:1 withInt:0 withBoolean:NO withInt:0];
  }
  return [self->iRuleSets_ getWithInt:[self->iRuleSets_ size] - 1];
}

jboolean OrgJodaTimeTzDateTimeZoneBuilder_addTransitionWithJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_Transition_(OrgJodaTimeTzDateTimeZoneBuilder *self, JavaUtilArrayList *transitions, OrgJodaTimeTzDateTimeZoneBuilder_Transition *tr) {
  jint size = [((JavaUtilArrayList *) nil_chk(transitions)) size];
  if (size == 0) {
    [transitions addWithId:tr];
    return YES;
  }
  OrgJodaTimeTzDateTimeZoneBuilder_Transition *last = [transitions getWithInt:size - 1];
  if (![((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(tr)) isTransitionFromWithOrgJodaTimeTzDateTimeZoneBuilder_Transition:last]) {
    return NO;
  }
  jint offsetForLast = 0;
  if (size >= 2) {
    offsetForLast = [((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk([transitions getWithInt:size - 2])) getWallOffset];
  }
  jint offsetForNew = [((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(last)) getWallOffset];
  jlong lastLocal = [last getMillis] + offsetForLast;
  jlong newLocal = [tr getMillis] + offsetForNew;
  if (newLocal != lastLocal) {
    [transitions addWithId:tr];
    return YES;
  }
  [transitions removeWithInt:size - 1];
  return OrgJodaTimeTzDateTimeZoneBuilder_addTransitionWithJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_Transition_(self, transitions, tr);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder)

@implementation OrgJodaTimeTzDateTimeZoneBuilder_OfYear

+ (OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  return OrgJodaTimeTzDateTimeZoneBuilder_OfYear_readFromWithJavaIoDataInput_(inArg);
}

- (instancetype)initWithChar:(jchar)mode
                     withInt:(jint)monthOfYear
                     withInt:(jint)dayOfMonth
                     withInt:(jint)dayOfWeek
                 withBoolean:(jboolean)advanceDayOfWeek
                     withInt:(jint)millisOfDay {
  if (self = [super init]) {
    if (mode != 'u' && mode != 'w' && mode != 's') {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$C", @"Unknown mode: ", mode)] autorelease];
    }
    iMode_ = mode;
    iMonthOfYear_ = monthOfYear;
    iDayOfMonth_ = dayOfMonth;
    iDayOfWeek_ = dayOfWeek;
    iAdvance_ = advanceDayOfWeek;
    iMillisOfDay_ = millisOfDay;
  }
  return self;
}

- (jlong)setInstantWithInt:(jint)year
                   withInt:(jint)standardOffset
                   withInt:(jint)saveMillis {
  jint offset;
  if (iMode_ == 'w') {
    offset = standardOffset + saveMillis;
  }
  else if (iMode_ == 's') {
    offset = standardOffset;
  }
  else {
    offset = 0;
  }
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  jlong millis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) setWithLong:0 withInt:year];
  millis = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) setWithLong:millis withInt:iMonthOfYear_];
  millis = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfDay])) setWithLong:millis withInt:iMillisOfDay_];
  millis = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(self, chrono, millis);
  if (iDayOfWeek_ != 0) {
    millis = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(self, chrono, millis);
  }
  return millis - offset;
}

- (jlong)nextWithLong:(jlong)instant
              withInt:(jint)standardOffset
              withInt:(jint)saveMillis {
  jint offset;
  if (iMode_ == 'w') {
    offset = standardOffset + saveMillis;
  }
  else if (iMode_ == 's') {
    offset = standardOffset;
  }
  else {
    offset = 0;
  }
  instant += offset;
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  jlong next = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear])) setWithLong:instant withInt:iMonthOfYear_];
  next = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfDay])) setWithLong:next withInt:0];
  next = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfDay])) addWithLong:next withInt:iMillisOfDay_];
  next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthNextWithOrgJodaTimeChronology_withLong_(self, chrono, next);
  if (iDayOfWeek_ == 0) {
    if (next <= instant) {
      next = [((OrgJodaTimeDateTimeField *) nil_chk([chrono year])) addWithLong:next withInt:1];
      next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthNextWithOrgJodaTimeChronology_withLong_(self, chrono, next);
    }
  }
  else {
    next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(self, chrono, next);
    if (next <= instant) {
      next = [((OrgJodaTimeDateTimeField *) nil_chk([chrono year])) addWithLong:next withInt:1];
      next = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) setWithLong:next withInt:iMonthOfYear_];
      next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthNextWithOrgJodaTimeChronology_withLong_(self, chrono, next);
      next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(self, chrono, next);
    }
  }
  return next - offset;
}

- (jlong)previousWithLong:(jlong)instant
                  withInt:(jint)standardOffset
                  withInt:(jint)saveMillis {
  jint offset;
  if (iMode_ == 'w') {
    offset = standardOffset + saveMillis;
  }
  else if (iMode_ == 's') {
    offset = standardOffset;
  }
  else {
    offset = 0;
  }
  instant += offset;
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  jlong prev = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear])) setWithLong:instant withInt:iMonthOfYear_];
  prev = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfDay])) setWithLong:prev withInt:0];
  prev = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfDay])) addWithLong:prev withInt:iMillisOfDay_];
  prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthPreviousWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
  if (iDayOfWeek_ == 0) {
    if (prev >= instant) {
      prev = [((OrgJodaTimeDateTimeField *) nil_chk([chrono year])) addWithLong:prev withInt:-1];
      prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthPreviousWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
    }
  }
  else {
    prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
    if (prev >= instant) {
      prev = [((OrgJodaTimeDateTimeField *) nil_chk([chrono year])) addWithLong:prev withInt:-1];
      prev = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) setWithLong:prev withInt:iMonthOfYear_];
      prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthPreviousWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
      prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
    }
  }
  return prev - offset;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeTzDateTimeZoneBuilder_OfYear class]]) {
    OrgJodaTimeTzDateTimeZoneBuilder_OfYear *other = (OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) check_class_cast(obj, [OrgJodaTimeTzDateTimeZoneBuilder_OfYear class]);
    return iMode_ == ((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(other))->iMode_ && iMonthOfYear_ == other->iMonthOfYear_ && iDayOfMonth_ == other->iDayOfMonth_ && iDayOfWeek_ == other->iDayOfWeek_ && iAdvance_ == other->iAdvance_ && iMillisOfDay_ == other->iMillisOfDay_;
  }
  return NO;
}

- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg {
  [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:iMode_];
  [outArg writeByteWithInt:iMonthOfYear_];
  [outArg writeByteWithInt:iDayOfMonth_];
  [outArg writeByteWithInt:iDayOfWeek_];
  [outArg writeBooleanWithBoolean:iAdvance_];
  OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, iMillisOfDay_);
}

- (jlong)setDayOfMonthNextWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                           withLong:(jlong)next {
  return OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthNextWithOrgJodaTimeChronology_withLong_(self, chrono, next);
}

- (jlong)setDayOfMonthPreviousWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                               withLong:(jlong)prev {
  return OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthPreviousWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
}

- (jlong)setDayOfMonthWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                       withLong:(jlong)instant {
  return OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(self, chrono, instant);
}

- (jlong)setDayOfWeekWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                      withLong:(jlong)instant {
  return OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(self, chrono, instant);
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)other {
  [super copyAllFieldsTo:other];
  other->iMode_ = iMode_;
  other->iMonthOfYear_ = iMonthOfYear_;
  other->iDayOfMonth_ = iDayOfMonth_;
  other->iDayOfWeek_ = iDayOfWeek_;
  other->iAdvance_ = iAdvance_;
  other->iMillisOfDay_ = iMillisOfDay_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readFromWithJavaIoDataInput:", "readFrom", "Lorg.joda.time.tz.DateTimeZoneBuilder$OfYear;", 0x8, "Ljava.io.IOException;" },
    { "initWithChar:withInt:withInt:withInt:withBoolean:withInt:", "OfYear", NULL, 0x0, NULL },
    { "setInstantWithInt:withInt:withInt:", "setInstant", "J", 0x1, NULL },
    { "nextWithLong:withInt:withInt:", "next", "J", 0x1, NULL },
    { "previousWithLong:withInt:withInt:", "previous", "J", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "writeToWithJavaIoDataOutput:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "setDayOfMonthNextWithOrgJodaTimeChronology:withLong:", "setDayOfMonthNext", "J", 0x2, NULL },
    { "setDayOfMonthPreviousWithOrgJodaTimeChronology:withLong:", "setDayOfMonthPrevious", "J", 0x2, NULL },
    { "setDayOfMonthWithOrgJodaTimeChronology:withLong:", "setDayOfMonth", "J", 0x2, NULL },
    { "setDayOfWeekWithOrgJodaTimeChronology:withLong:", "setDayOfWeek", "J", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMode_", NULL, 0x10, "C", NULL,  },
    { "iMonthOfYear_", NULL, 0x10, "I", NULL,  },
    { "iDayOfMonth_", NULL, 0x10, "I", NULL,  },
    { "iDayOfWeek_", NULL, 0x10, "I", NULL,  },
    { "iAdvance_", NULL, 0x10, "Z", NULL,  },
    { "iMillisOfDay_", NULL, 0x10, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_OfYear = { 1, "OfYear", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 11, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_OfYear;
}

@end

OrgJodaTimeTzDateTimeZoneBuilder_OfYear *OrgJodaTimeTzDateTimeZoneBuilder_OfYear_readFromWithJavaIoDataInput_(id<JavaIoDataInput> inArg) {
  OrgJodaTimeTzDateTimeZoneBuilder_OfYear_init();
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_OfYear alloc] initWithChar:(jchar) [((id<JavaIoDataInput>) nil_chk(inArg)) readUnsignedByte] withInt:(jint) [inArg readUnsignedByte] withInt:(jint) [inArg readByte] withInt:(jint) [inArg readUnsignedByte] withBoolean:[inArg readBoolean] withInt:(jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg)] autorelease];
}

jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthNextWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong next) {
  @try {
    next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(self, chrono, next);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (self->iMonthOfYear_ == 2 && self->iDayOfMonth_ == 29) {
      while ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) isLeapWithLong:next] == NO) {
        next = [((OrgJodaTimeDateTimeField *) nil_chk([chrono year])) addWithLong:next withInt:1];
      }
      next = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(self, chrono, next);
    }
    else {
      @throw e;
    }
  }
  return next;
}

jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthPreviousWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong prev) {
  @try {
    prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    if (self->iMonthOfYear_ == 2 && self->iDayOfMonth_ == 29) {
      while ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) isLeapWithLong:prev] == NO) {
        prev = [((OrgJodaTimeDateTimeField *) nil_chk([chrono year])) addWithLong:prev withInt:-1];
      }
      prev = OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(self, chrono, prev);
    }
    else {
      @throw e;
    }
  }
  return prev;
}

jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfMonthWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong instant) {
  if (self->iDayOfMonth_ >= 0) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth])) setWithLong:instant withInt:self->iDayOfMonth_];
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth])) setWithLong:instant withInt:1];
    instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) addWithLong:instant withInt:1];
    instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono dayOfMonth])) addWithLong:instant withInt:self->iDayOfMonth_];
  }
  return instant;
}

jlong OrgJodaTimeTzDateTimeZoneBuilder_OfYear_setDayOfWeekWithOrgJodaTimeChronology_withLong_(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *self, OrgJodaTimeChronology *chrono, jlong instant) {
  jint dayOfWeek = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfWeek])) getWithLong:instant];
  jint daysToAdd = self->iDayOfWeek_ - dayOfWeek;
  if (daysToAdd != 0) {
    if (self->iAdvance_) {
      if (daysToAdd < 0) {
        daysToAdd += 7;
      }
    }
    else {
      if (daysToAdd > 0) {
        daysToAdd -= 7;
      }
    }
    instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono dayOfWeek])) addWithLong:instant withInt:daysToAdd];
  }
  return instant;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_OfYear)

@implementation OrgJodaTimeTzDateTimeZoneBuilder_Recurrence

+ (OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  return OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_readFromWithJavaIoDataInput_(inArg);
}

- (instancetype)initWithOrgJodaTimeTzDateTimeZoneBuilder_OfYear:(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)ofYear
                                                   withNSString:(NSString *)nameKey
                                                        withInt:(jint)saveMillis {
  if (self = [super init]) {
    OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_set_iOfYear_(self, ofYear);
    OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_set_iNameKey_(self, nameKey);
    iSaveMillis_ = saveMillis;
  }
  return self;
}

- (OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)getOfYear {
  return iOfYear_;
}

- (jlong)nextWithLong:(jlong)instant
              withInt:(jint)standardOffset
              withInt:(jint)saveMillis {
  return [((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(iOfYear_)) nextWithLong:instant withInt:standardOffset withInt:saveMillis];
}

- (jlong)previousWithLong:(jlong)instant
                  withInt:(jint)standardOffset
                  withInt:(jint)saveMillis {
  return [((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(iOfYear_)) previousWithLong:instant withInt:standardOffset withInt:saveMillis];
}

- (NSString *)getNameKey {
  return iNameKey_;
}

- (jint)getSaveMillis {
  return iSaveMillis_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeTzDateTimeZoneBuilder_Recurrence class]]) {
    OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *other = (OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) check_class_cast(obj, [OrgJodaTimeTzDateTimeZoneBuilder_Recurrence class]);
    return iSaveMillis_ == ((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(other))->iSaveMillis_ && [((NSString *) nil_chk(iNameKey_)) isEqual:other->iNameKey_] && [((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(iOfYear_)) isEqual:other->iOfYear_];
  }
  return NO;
}

- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg {
  [((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(iOfYear_)) writeToWithJavaIoDataOutput:outArg];
  [((id<JavaIoDataOutput>) nil_chk(outArg)) writeUTFWithNSString:iNameKey_];
  OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, iSaveMillis_);
}

- (OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)renameWithNSString:(NSString *)nameKey {
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_Recurrence alloc] initWithOrgJodaTimeTzDateTimeZoneBuilder_OfYear:iOfYear_ withNSString:nameKey withInt:iSaveMillis_] autorelease];
}

- (OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)renameAppendWithNSString:(NSString *)appendNameKey {
  return [self renameWithNSString:[(JreStrcat("$$", iNameKey_, appendNameKey)) intern]];
}

- (void)dealloc {
  RELEASE_(iOfYear_);
  RELEASE_(iNameKey_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_set_iOfYear_(other, iOfYear_);
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_set_iNameKey_(other, iNameKey_);
  other->iSaveMillis_ = iSaveMillis_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readFromWithJavaIoDataInput:", "readFrom", "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", 0x8, "Ljava.io.IOException;" },
    { "initWithOrgJodaTimeTzDateTimeZoneBuilder_OfYear:withNSString:withInt:", "Recurrence", NULL, 0x0, NULL },
    { "getOfYear", NULL, "Lorg.joda.time.tz.DateTimeZoneBuilder$OfYear;", 0x1, NULL },
    { "nextWithLong:withInt:withInt:", "next", "J", 0x1, NULL },
    { "previousWithLong:withInt:withInt:", "previous", "J", 0x1, NULL },
    { "getNameKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSaveMillis", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "writeToWithJavaIoDataOutput:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "renameWithNSString:", "rename", "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", 0x0, NULL },
    { "renameAppendWithNSString:", "renameAppend", "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iOfYear_", NULL, 0x10, "Lorg.joda.time.tz.DateTimeZoneBuilder$OfYear;", NULL,  },
    { "iNameKey_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "iSaveMillis_", NULL, 0x10, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_Recurrence = { 1, "Recurrence", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 11, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_Recurrence;
}

@end

OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_readFromWithJavaIoDataInput_(id<JavaIoDataInput> inArg) {
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_init();
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_Recurrence alloc] initWithOrgJodaTimeTzDateTimeZoneBuilder_OfYear:OrgJodaTimeTzDateTimeZoneBuilder_OfYear_readFromWithJavaIoDataInput_(inArg) withNSString:[((id<JavaIoDataInput>) nil_chk(inArg)) readUTF] withInt:(jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg)] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_Recurrence)

@implementation OrgJodaTimeTzDateTimeZoneBuilder_Rule

- (instancetype)initWithOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:(OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)recurrence
                                                            withInt:(jint)fromYear
                                                            withInt:(jint)toYear {
  if (self = [super init]) {
    OrgJodaTimeTzDateTimeZoneBuilder_Rule_set_iRecurrence_(self, recurrence);
    iFromYear_ = fromYear;
    iToYear_ = toYear;
  }
  return self;
}

- (jint)getFromYear {
  return iFromYear_;
}

- (jint)getToYear {
  return iToYear_;
}

- (OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)getOfYear {
  return [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iRecurrence_)) getOfYear];
}

- (NSString *)getNameKey {
  return [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iRecurrence_)) getNameKey];
}

- (jint)getSaveMillis {
  return [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iRecurrence_)) getSaveMillis];
}

- (jlong)nextWithLong:(jlong)instant
              withInt:(jint)standardOffset
              withInt:(jint)saveMillis {
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  jint wallOffset = standardOffset + saveMillis;
  jlong testInstant = instant;
  jint year;
  if (instant == JavaLangLong_MIN_VALUE) {
    year = JavaLangInteger_MIN_VALUE;
  }
  else {
    year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) getWithLong:instant + wallOffset];
  }
  if (year < iFromYear_) {
    testInstant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) setWithLong:0 withInt:iFromYear_] - wallOffset;
    testInstant -= 1;
  }
  jlong next = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iRecurrence_)) nextWithLong:testInstant withInt:standardOffset withInt:saveMillis];
  if (next > instant) {
    year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) getWithLong:next + wallOffset];
    if (year > iToYear_) {
      next = instant;
    }
  }
  return next;
}

- (void)dealloc {
  RELEASE_(iRecurrence_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_Rule *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzDateTimeZoneBuilder_Rule_set_iRecurrence_(other, iRecurrence_);
  other->iFromYear_ = iFromYear_;
  other->iToYear_ = iToYear_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:withInt:withInt:", "Rule", NULL, 0x0, NULL },
    { "getFromYear", NULL, "I", 0x1, NULL },
    { "getToYear", NULL, "I", 0x1, NULL },
    { "getOfYear", NULL, "Lorg.joda.time.tz.DateTimeZoneBuilder$OfYear;", 0x1, NULL },
    { "getNameKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSaveMillis", NULL, "I", 0x1, NULL },
    { "nextWithLong:withInt:withInt:", "next", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iRecurrence_", NULL, 0x10, "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", NULL,  },
    { "iFromYear_", NULL, 0x10, "I", NULL,  },
    { "iToYear_", NULL, 0x10, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_Rule = { 1, "Rule", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 7, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_Rule;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_Rule)

@implementation OrgJodaTimeTzDateTimeZoneBuilder_Transition

- (instancetype)initWithLong:(jlong)millis
withOrgJodaTimeTzDateTimeZoneBuilder_Transition:(OrgJodaTimeTzDateTimeZoneBuilder_Transition *)tr {
  if (self = [super init]) {
    iMillis_ = millis;
    OrgJodaTimeTzDateTimeZoneBuilder_Transition_set_iNameKey_(self, ((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(tr))->iNameKey_);
    iWallOffset_ = tr->iWallOffset_;
    iStandardOffset_ = tr->iStandardOffset_;
  }
  return self;
}

- (instancetype)initWithLong:(jlong)millis
withOrgJodaTimeTzDateTimeZoneBuilder_Rule:(OrgJodaTimeTzDateTimeZoneBuilder_Rule *)rule
                     withInt:(jint)standardOffset {
  if (self = [super init]) {
    iMillis_ = millis;
    OrgJodaTimeTzDateTimeZoneBuilder_Transition_set_iNameKey_(self, [((OrgJodaTimeTzDateTimeZoneBuilder_Rule *) nil_chk(rule)) getNameKey]);
    iWallOffset_ = standardOffset + [rule getSaveMillis];
    iStandardOffset_ = standardOffset;
  }
  return self;
}

- (instancetype)initWithLong:(jlong)millis
                withNSString:(NSString *)nameKey
                     withInt:(jint)wallOffset
                     withInt:(jint)standardOffset {
  if (self = [super init]) {
    iMillis_ = millis;
    OrgJodaTimeTzDateTimeZoneBuilder_Transition_set_iNameKey_(self, nameKey);
    iWallOffset_ = wallOffset;
    iStandardOffset_ = standardOffset;
  }
  return self;
}

- (jlong)getMillis {
  return iMillis_;
}

- (NSString *)getNameKey {
  return iNameKey_;
}

- (jint)getWallOffset {
  return iWallOffset_;
}

- (jint)getStandardOffset {
  return iStandardOffset_;
}

- (jint)getSaveMillis {
  return iWallOffset_ - iStandardOffset_;
}

- (jboolean)isTransitionFromWithOrgJodaTimeTzDateTimeZoneBuilder_Transition:(OrgJodaTimeTzDateTimeZoneBuilder_Transition *)other {
  if (other == nil) {
    return YES;
  }
  return iMillis_ > ((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(other))->iMillis_ && (iWallOffset_ != other->iWallOffset_ || !([((NSString *) nil_chk(iNameKey_)) isEqual:other->iNameKey_]));
}

- (void)dealloc {
  RELEASE_(iNameKey_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_Transition *)other {
  [super copyAllFieldsTo:other];
  other->iMillis_ = iMillis_;
  OrgJodaTimeTzDateTimeZoneBuilder_Transition_set_iNameKey_(other, iNameKey_);
  other->iWallOffset_ = iWallOffset_;
  other->iStandardOffset_ = iStandardOffset_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withOrgJodaTimeTzDateTimeZoneBuilder_Transition:", "Transition", NULL, 0x0, NULL },
    { "initWithLong:withOrgJodaTimeTzDateTimeZoneBuilder_Rule:withInt:", "Transition", NULL, 0x0, NULL },
    { "initWithLong:withNSString:withInt:withInt:", "Transition", NULL, 0x0, NULL },
    { "getMillis", NULL, "J", 0x1, NULL },
    { "getNameKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getWallOffset", NULL, "I", 0x1, NULL },
    { "getStandardOffset", NULL, "I", 0x1, NULL },
    { "getSaveMillis", NULL, "I", 0x1, NULL },
    { "isTransitionFromWithOrgJodaTimeTzDateTimeZoneBuilder_Transition:", "isTransitionFrom", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL,  },
    { "iNameKey_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iWallOffset_", NULL, 0x12, "I", NULL,  },
    { "iStandardOffset_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_Transition = { 1, "Transition", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 9, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_Transition;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_Transition)

BOOL OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_initialized = NO;

@implementation OrgJodaTimeTzDateTimeZoneBuilder_RuleSet

jint OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_YEAR_LIMIT_;

- (instancetype)init {
  if (self = [super init]) {
    OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_setAndConsume_iRules_(self, [[JavaUtilArrayList alloc] initWithInt:10]);
    iUpperYear_ = JavaLangInteger_MAX_VALUE;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeTzDateTimeZoneBuilder_RuleSet:(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *)rs {
  if (self = [super init]) {
    iStandardOffset_ = ((OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *) nil_chk(rs))->iStandardOffset_;
    OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_setAndConsume_iRules_(self, [[JavaUtilArrayList alloc] initWithJavaUtilCollection:rs->iRules_]);
    OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iInitialNameKey_(self, rs->iInitialNameKey_);
    iInitialSaveMillis_ = rs->iInitialSaveMillis_;
    iUpperYear_ = rs->iUpperYear_;
    OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iUpperOfYear_(self, rs->iUpperOfYear_);
  }
  return self;
}

- (jint)getStandardOffset {
  return iStandardOffset_;
}

- (void)setStandardOffsetWithInt:(jint)standardOffset {
  iStandardOffset_ = standardOffset;
}

- (void)setFixedSavingsWithNSString:(NSString *)nameKey
                            withInt:(jint)saveMillis {
  OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iInitialNameKey_(self, nameKey);
  iInitialSaveMillis_ = saveMillis;
}

- (void)addRuleWithOrgJodaTimeTzDateTimeZoneBuilder_Rule:(OrgJodaTimeTzDateTimeZoneBuilder_Rule *)rule {
  if (![((JavaUtilArrayList *) nil_chk(iRules_)) containsWithId:rule]) {
    [iRules_ addWithId:rule];
  }
}

- (void)setUpperLimitWithInt:(jint)year
withOrgJodaTimeTzDateTimeZoneBuilder_OfYear:(OrgJodaTimeTzDateTimeZoneBuilder_OfYear *)ofYear {
  iUpperYear_ = year;
  OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iUpperOfYear_(self, ofYear);
}

- (OrgJodaTimeTzDateTimeZoneBuilder_Transition *)firstTransitionWithLong:(jlong)firstMillis {
  if (iInitialNameKey_ != nil) {
    return [[[OrgJodaTimeTzDateTimeZoneBuilder_Transition alloc] initWithLong:firstMillis withNSString:iInitialNameKey_ withInt:iStandardOffset_ + iInitialSaveMillis_ withInt:iStandardOffset_] autorelease];
  }
  JavaUtilArrayList *copy_ = [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:iRules_] autorelease];
  jlong millis = JavaLangLong_MIN_VALUE;
  jint saveMillis = 0;
  OrgJodaTimeTzDateTimeZoneBuilder_Transition *first = nil;
  OrgJodaTimeTzDateTimeZoneBuilder_Transition *next;
  while ((next = [self nextTransitionWithLong:millis withInt:saveMillis]) != nil) {
    millis = [((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(next)) getMillis];
    if (millis == firstMillis) {
      first = [[[OrgJodaTimeTzDateTimeZoneBuilder_Transition alloc] initWithLong:firstMillis withOrgJodaTimeTzDateTimeZoneBuilder_Transition:next] autorelease];
      break;
    }
    if (millis > firstMillis) {
      if (first == nil) {
        for (OrgJodaTimeTzDateTimeZoneBuilder_Rule * __strong rule in copy_) {
          if ([((OrgJodaTimeTzDateTimeZoneBuilder_Rule *) nil_chk(rule)) getSaveMillis] == 0) {
            first = [[[OrgJodaTimeTzDateTimeZoneBuilder_Transition alloc] initWithLong:firstMillis withOrgJodaTimeTzDateTimeZoneBuilder_Rule:rule withInt:iStandardOffset_] autorelease];
            break;
          }
        }
      }
      if (first == nil) {
        first = [[[OrgJodaTimeTzDateTimeZoneBuilder_Transition alloc] initWithLong:firstMillis withNSString:[next getNameKey] withInt:iStandardOffset_ withInt:iStandardOffset_] autorelease];
      }
      break;
    }
    first = [[[OrgJodaTimeTzDateTimeZoneBuilder_Transition alloc] initWithLong:firstMillis withOrgJodaTimeTzDateTimeZoneBuilder_Transition:next] autorelease];
    saveMillis = [next getSaveMillis];
  }
  OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iRules_(self, copy_);
  return first;
}

- (OrgJodaTimeTzDateTimeZoneBuilder_Transition *)nextTransitionWithLong:(jlong)instant
                                                                withInt:(jint)saveMillis {
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  OrgJodaTimeTzDateTimeZoneBuilder_Rule *nextRule = nil;
  jlong nextMillis = JavaLangLong_MAX_VALUE;
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(iRules_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgJodaTimeTzDateTimeZoneBuilder_Rule *rule = [it next];
    jlong next = [((OrgJodaTimeTzDateTimeZoneBuilder_Rule *) nil_chk(rule)) nextWithLong:instant withInt:iStandardOffset_ withInt:saveMillis];
    if (next <= instant) {
      [it remove];
      continue;
    }
    if (next <= nextMillis) {
      nextRule = rule;
      nextMillis = next;
    }
  }
  if (nextRule == nil) {
    return nil;
  }
  if ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) getWithLong:nextMillis] >= OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_YEAR_LIMIT_) {
    return nil;
  }
  if (iUpperYear_ < JavaLangInteger_MAX_VALUE) {
    jlong upperMillis = [((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(iUpperOfYear_)) setInstantWithInt:iUpperYear_ withInt:iStandardOffset_ withInt:saveMillis];
    if (nextMillis >= upperMillis) {
      return nil;
    }
  }
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_Transition alloc] initWithLong:nextMillis withOrgJodaTimeTzDateTimeZoneBuilder_Rule:nextRule withInt:iStandardOffset_] autorelease];
}

- (jlong)getUpperLimitWithInt:(jint)saveMillis {
  if (iUpperYear_ == JavaLangInteger_MAX_VALUE) {
    return JavaLangLong_MAX_VALUE;
  }
  return [((OrgJodaTimeTzDateTimeZoneBuilder_OfYear *) nil_chk(iUpperOfYear_)) setInstantWithInt:iUpperYear_ withInt:iStandardOffset_ withInt:saveMillis];
}

- (OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)buildTailZoneWithNSString:(NSString *)id_ {
  if ([((JavaUtilArrayList *) nil_chk(iRules_)) size] == 2) {
    OrgJodaTimeTzDateTimeZoneBuilder_Rule *startRule = [iRules_ getWithInt:0];
    OrgJodaTimeTzDateTimeZoneBuilder_Rule *endRule = [iRules_ getWithInt:1];
    if ([((OrgJodaTimeTzDateTimeZoneBuilder_Rule *) nil_chk(startRule)) getToYear] == JavaLangInteger_MAX_VALUE && [((OrgJodaTimeTzDateTimeZoneBuilder_Rule *) nil_chk(endRule)) getToYear] == JavaLangInteger_MAX_VALUE) {
      return [[[OrgJodaTimeTzDateTimeZoneBuilder_DSTZone alloc] initWithNSString:id_ withInt:iStandardOffset_ withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:startRule->iRecurrence_ withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:endRule->iRecurrence_] autorelease];
    }
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(iRules_);
  RELEASE_(iInitialNameKey_);
  RELEASE_(iUpperOfYear_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet *)other {
  [super copyAllFieldsTo:other];
  other->iStandardOffset_ = iStandardOffset_;
  OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iRules_(other, iRules_);
  OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iInitialNameKey_(other, iInitialNameKey_);
  other->iInitialSaveMillis_ = iInitialSaveMillis_;
  other->iUpperYear_ = iUpperYear_;
  OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_set_iUpperOfYear_(other, iUpperOfYear_);
}

+ (void)initialize {
  if (self == [OrgJodaTimeTzDateTimeZoneBuilder_RuleSet class]) {
    {
      jlong now = OrgJodaTimeDateTimeUtils_currentTimeMillis();
      OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_YEAR_LIMIT_ = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) year])) getWithLong:now] + 100;
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RuleSet", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeTzDateTimeZoneBuilder_RuleSet:", "RuleSet", NULL, 0x0, NULL },
    { "getStandardOffset", NULL, "I", 0x1, NULL },
    { "setStandardOffsetWithInt:", "setStandardOffset", "V", 0x1, NULL },
    { "setFixedSavingsWithNSString:withInt:", "setFixedSavings", "V", 0x1, NULL },
    { "addRuleWithOrgJodaTimeTzDateTimeZoneBuilder_Rule:", "addRule", "V", 0x1, NULL },
    { "setUpperLimitWithInt:withOrgJodaTimeTzDateTimeZoneBuilder_OfYear:", "setUpperLimit", "V", 0x1, NULL },
    { "firstTransitionWithLong:", "firstTransition", "Lorg.joda.time.tz.DateTimeZoneBuilder$Transition;", 0x1, NULL },
    { "nextTransitionWithLong:withInt:", "nextTransition", "Lorg.joda.time.tz.DateTimeZoneBuilder$Transition;", 0x1, NULL },
    { "getUpperLimitWithInt:", "getUpperLimit", "J", 0x1, NULL },
    { "buildTailZoneWithNSString:", "buildTailZone", "Lorg.joda.time.tz.DateTimeZoneBuilder$DSTZone;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "YEAR_LIMIT_", NULL, 0x1a, "I", &OrgJodaTimeTzDateTimeZoneBuilder_RuleSet_YEAR_LIMIT_,  },
    { "iStandardOffset_", NULL, 0x2, "I", NULL,  },
    { "iRules_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "iInitialNameKey_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "iInitialSaveMillis_", NULL, 0x2, "I", NULL,  },
    { "iUpperYear_", NULL, 0x2, "I", NULL,  },
    { "iUpperOfYear_", NULL, 0x2, "Lorg.joda.time.tz.DateTimeZoneBuilder$OfYear;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_RuleSet = { 1, "RuleSet", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 11, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_RuleSet;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_RuleSet)

@implementation OrgJodaTimeTzDateTimeZoneBuilder_DSTZone

+ (OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                                                             withNSString:(NSString *)id_ {
  return OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_readFromWithJavaIoDataInput_withNSString_(inArg, id_);
}

- (instancetype)initWithNSString:(NSString *)id_
                         withInt:(jint)standardOffset
withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:(OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)startRecurrence
withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:(OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)endRecurrence {
  if (self = [super initWithNSString:id_]) {
    iStandardOffset_ = standardOffset;
    OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_set_iStartRecurrence_(self, startRecurrence);
    OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_set_iEndRecurrence_(self, endRecurrence);
  }
  return self;
}

- (NSString *)getNameKeyWithLong:(jlong)instant {
  return [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_findMatchingRecurrenceWithLong_(self, instant))) getNameKey];
}

- (jint)getOffsetWithLong:(jlong)instant {
  return iStandardOffset_ + [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_findMatchingRecurrenceWithLong_(self, instant))) getSaveMillis];
}

- (jint)getStandardOffsetWithLong:(jlong)instant {
  return iStandardOffset_;
}

- (jboolean)isFixed {
  return NO;
}

- (jlong)nextTransitionWithLong:(jlong)instant {
  jint standardOffset = iStandardOffset_;
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *startRecurrence = iStartRecurrence_;
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *endRecurrence = iEndRecurrence_;
  jlong start, end;
  @try {
    start = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(startRecurrence)) nextWithLong:instant withInt:standardOffset withInt:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(endRecurrence)) getSaveMillis]];
    if (instant > 0 && start < 0) {
      start = instant;
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    start = instant;
  }
  @catch (JavaLangArithmeticException *e) {
    start = instant;
  }
  @try {
    end = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(endRecurrence)) nextWithLong:instant withInt:standardOffset withInt:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(startRecurrence)) getSaveMillis]];
    if (instant > 0 && end < 0) {
      end = instant;
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    end = instant;
  }
  @catch (JavaLangArithmeticException *e) {
    end = instant;
  }
  return (start > end) ? end : start;
}

- (jlong)previousTransitionWithLong:(jlong)instant {
  instant++;
  jint standardOffset = iStandardOffset_;
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *startRecurrence = iStartRecurrence_;
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *endRecurrence = iEndRecurrence_;
  jlong start, end;
  @try {
    start = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(startRecurrence)) previousWithLong:instant withInt:standardOffset withInt:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(endRecurrence)) getSaveMillis]];
    if (instant < 0 && start > 0) {
      start = instant;
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    start = instant;
  }
  @catch (JavaLangArithmeticException *e) {
    start = instant;
  }
  @try {
    end = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(endRecurrence)) previousWithLong:instant withInt:standardOffset withInt:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(startRecurrence)) getSaveMillis]];
    if (instant < 0 && end > 0) {
      end = instant;
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    end = instant;
  }
  @catch (JavaLangArithmeticException *e) {
    end = instant;
  }
  return ((start > end) ? start : end) - 1;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeTzDateTimeZoneBuilder_DSTZone class]]) {
    OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *other = (OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *) check_class_cast(obj, [OrgJodaTimeTzDateTimeZoneBuilder_DSTZone class]);
    return [((NSString *) nil_chk([self getID])) isEqual:[((OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *) nil_chk(other)) getID]] && iStandardOffset_ == other->iStandardOffset_ && [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iStartRecurrence_)) isEqual:other->iStartRecurrence_] && [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iEndRecurrence_)) isEqual:other->iEndRecurrence_];
  }
  return NO;
}

- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg {
  OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, iStandardOffset_);
  [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iStartRecurrence_)) writeToWithJavaIoDataOutput:outArg];
  [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(iEndRecurrence_)) writeToWithJavaIoDataOutput:outArg];
}

- (OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *)findMatchingRecurrenceWithLong:(jlong)instant {
  return OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_findMatchingRecurrenceWithLong_(self, instant);
}

- (void)dealloc {
  RELEASE_(iStartRecurrence_);
  RELEASE_(iEndRecurrence_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)other {
  [super copyAllFieldsTo:other];
  other->iStandardOffset_ = iStandardOffset_;
  OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_set_iStartRecurrence_(other, iStartRecurrence_);
  OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_set_iEndRecurrence_(other, iEndRecurrence_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readFromWithJavaIoDataInput:withNSString:", "readFrom", "Lorg.joda.time.tz.DateTimeZoneBuilder$DSTZone;", 0x8, "Ljava.io.IOException;" },
    { "initWithNSString:withInt:withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:", "DSTZone", NULL, 0x0, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x1, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x1, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x1, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL },
    { "nextTransitionWithLong:", "nextTransition", "J", 0x1, NULL },
    { "previousTransitionWithLong:", "previousTransition", "J", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "writeToWithJavaIoDataOutput:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "findMatchingRecurrenceWithLong:", "findMatchingRecurrence", "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_serialVersionUID },
    { "iStandardOffset_", NULL, 0x10, "I", NULL,  },
    { "iStartRecurrence_", NULL, 0x10, "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", NULL,  },
    { "iEndRecurrence_", NULL, 0x10, "Lorg.joda.time.tz.DateTimeZoneBuilder$Recurrence;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_DSTZone = { 1, "DSTZone", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 11, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_DSTZone;
}

@end

OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_readFromWithJavaIoDataInput_withNSString_(id<JavaIoDataInput> inArg, NSString *id_) {
  OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_init();
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_DSTZone alloc] initWithNSString:id_ withInt:(jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg) withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_readFromWithJavaIoDataInput_(inArg) withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:OrgJodaTimeTzDateTimeZoneBuilder_Recurrence_readFromWithJavaIoDataInput_(inArg)] autorelease];
}

OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_findMatchingRecurrenceWithLong_(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *self, jlong instant) {
  jint standardOffset = self->iStandardOffset_;
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *startRecurrence = self->iStartRecurrence_;
  OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *endRecurrence = self->iEndRecurrence_;
  jlong start, end;
  @try {
    start = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(startRecurrence)) nextWithLong:instant withInt:standardOffset withInt:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(endRecurrence)) getSaveMillis]];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    start = instant;
  }
  @catch (JavaLangArithmeticException *e) {
    start = instant;
  }
  @try {
    end = [((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(endRecurrence)) nextWithLong:instant withInt:standardOffset withInt:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(startRecurrence)) getSaveMillis]];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    end = instant;
  }
  @catch (JavaLangArithmeticException *e) {
    end = instant;
  }
  return (start > end) ? startRecurrence : endRecurrence;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone)

@implementation OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone

+ (OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                                                                       withNSString:(NSString *)id_ {
  return OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_readFromWithJavaIoDataInput_withNSString_(inArg, id_);
}

+ (OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *)createWithNSString:(NSString *)id_
                                                               withBoolean:(jboolean)outputID
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)transitions
                              withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)tailZone {
  return OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_createWithNSString_withBoolean_withJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone_(id_, outputID, transitions, tailZone);
}

- (instancetype)initWithNSString:(NSString *)id_
                   withLongArray:(IOSLongArray *)transitions
                    withIntArray:(IOSIntArray *)wallOffsets
                    withIntArray:(IOSIntArray *)standardOffsets
               withNSStringArray:(IOSObjectArray *)nameKeys
withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:(OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *)tailZone {
  if (self = [super initWithNSString:id_]) {
    OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iTransitions_(self, transitions);
    OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iWallOffsets_(self, wallOffsets);
    OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iStandardOffsets_(self, standardOffsets);
    OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iNameKeys_(self, nameKeys);
    OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iTailZone_(self, tailZone);
  }
  return self;
}

- (NSString *)getNameKeyWithLong:(jlong)instant {
  IOSLongArray *transitions = iTransitions_;
  jint i = JavaUtilArrays_binarySearchWithLongArray_withLong_(transitions, instant);
  if (i >= 0) {
    return IOSObjectArray_Get(nil_chk(iNameKeys_), i);
  }
  i = ~i;
  if (i < ((IOSLongArray *) nil_chk(transitions))->size_) {
    if (i > 0) {
      return IOSObjectArray_Get(nil_chk(iNameKeys_), i - 1);
    }
    return @"UTC";
  }
  if (iTailZone_ == nil) {
    return IOSObjectArray_Get(nil_chk(iNameKeys_), i - 1);
  }
  return [((OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *) nil_chk(iTailZone_)) getNameKeyWithLong:instant];
}

- (jint)getOffsetWithLong:(jlong)instant {
  IOSLongArray *transitions = iTransitions_;
  jint i = JavaUtilArrays_binarySearchWithLongArray_withLong_(transitions, instant);
  if (i >= 0) {
    return IOSIntArray_Get(nil_chk(iWallOffsets_), i);
  }
  i = ~i;
  if (i < ((IOSLongArray *) nil_chk(transitions))->size_) {
    if (i > 0) {
      return IOSIntArray_Get(nil_chk(iWallOffsets_), i - 1);
    }
    return 0;
  }
  if (iTailZone_ == nil) {
    return IOSIntArray_Get(nil_chk(iWallOffsets_), i - 1);
  }
  return [((OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *) nil_chk(iTailZone_)) getOffsetWithLong:instant];
}

- (jint)getStandardOffsetWithLong:(jlong)instant {
  IOSLongArray *transitions = iTransitions_;
  jint i = JavaUtilArrays_binarySearchWithLongArray_withLong_(transitions, instant);
  if (i >= 0) {
    return IOSIntArray_Get(nil_chk(iStandardOffsets_), i);
  }
  i = ~i;
  if (i < ((IOSLongArray *) nil_chk(transitions))->size_) {
    if (i > 0) {
      return IOSIntArray_Get(nil_chk(iStandardOffsets_), i - 1);
    }
    return 0;
  }
  if (iTailZone_ == nil) {
    return IOSIntArray_Get(nil_chk(iStandardOffsets_), i - 1);
  }
  return [((OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *) nil_chk(iTailZone_)) getStandardOffsetWithLong:instant];
}

- (jboolean)isFixed {
  return NO;
}

- (jlong)nextTransitionWithLong:(jlong)instant {
  IOSLongArray *transitions = iTransitions_;
  jint i = JavaUtilArrays_binarySearchWithLongArray_withLong_(transitions, instant);
  i = (i >= 0) ? (i + 1) : ~i;
  if (i < ((IOSLongArray *) nil_chk(transitions))->size_) {
    return IOSLongArray_Get(transitions, i);
  }
  if (iTailZone_ == nil) {
    return instant;
  }
  jlong end = IOSLongArray_Get(transitions, transitions->size_ - 1);
  if (instant < end) {
    instant = end;
  }
  return [((OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *) nil_chk(iTailZone_)) nextTransitionWithLong:instant];
}

- (jlong)previousTransitionWithLong:(jlong)instant {
  IOSLongArray *transitions = iTransitions_;
  jint i = JavaUtilArrays_binarySearchWithLongArray_withLong_(transitions, instant);
  if (i >= 0) {
    if (instant > JavaLangLong_MIN_VALUE) {
      return instant - 1;
    }
    return instant;
  }
  i = ~i;
  if (i < ((IOSLongArray *) nil_chk(transitions))->size_) {
    if (i > 0) {
      jlong prev = IOSLongArray_Get(transitions, i - 1);
      if (prev > JavaLangLong_MIN_VALUE) {
        return prev - 1;
      }
    }
    return instant;
  }
  if (iTailZone_ != nil) {
    jlong prev = [iTailZone_ previousTransitionWithLong:instant];
    if (prev < instant) {
      return prev;
    }
  }
  jlong prev = IOSLongArray_Get(transitions, i - 1);
  if (prev > JavaLangLong_MIN_VALUE) {
    return prev - 1;
  }
  return instant;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone class]]) {
    OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *other = (OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *) check_class_cast(obj, [OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone class]);
    return [((NSString *) nil_chk([self getID])) isEqual:[((OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *) nil_chk(other)) getID]] && JavaUtilArrays_equalsWithLongArray_withLongArray_(iTransitions_, other->iTransitions_) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(iNameKeys_, other->iNameKeys_) && JavaUtilArrays_equalsWithIntArray_withIntArray_(iWallOffsets_, other->iWallOffsets_) && JavaUtilArrays_equalsWithIntArray_withIntArray_(iStandardOffsets_, other->iStandardOffsets_) && ((iTailZone_ == nil) ? (nil == other->iTailZone_) : ([iTailZone_ isEqual:other->iTailZone_]));
  }
  return NO;
}

- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg {
  jint size = ((IOSLongArray *) nil_chk(iTransitions_))->size_;
  id<JavaUtilSet> poolSet = [[[JavaUtilHashSet alloc] init] autorelease];
  for (jint i = 0; i < size; i++) {
    [poolSet addWithId:IOSObjectArray_Get(nil_chk(iNameKeys_), i)];
  }
  jint poolSize = [poolSet size];
  if (poolSize > 65535) {
    @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"String pool is too large"] autorelease];
  }
  IOSObjectArray *pool = [IOSObjectArray arrayWithLength:poolSize type:NSString_class_()];
  id<JavaUtilIterator> it = [poolSet iterator];
  for (jint i = 0; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; i++) {
    IOSObjectArray_Set(pool, i, [it next]);
  }
  [((id<JavaIoDataOutput>) nil_chk(outArg)) writeShortWithInt:poolSize];
  for (jint i = 0; i < poolSize; i++) {
    [outArg writeUTFWithNSString:IOSObjectArray_Get(pool, i)];
  }
  [outArg writeIntWithInt:size];
  for (jint i = 0; i < size; i++) {
    OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, IOSLongArray_Get(iTransitions_, i));
    OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, IOSIntArray_Get(nil_chk(iWallOffsets_), i));
    OrgJodaTimeTzDateTimeZoneBuilder_writeMillisWithJavaIoDataOutput_withLong_(outArg, IOSIntArray_Get(nil_chk(iStandardOffsets_), i));
    NSString *nameKey = IOSObjectArray_Get(nil_chk(iNameKeys_), i);
    for (jint j = 0; j < poolSize; j++) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(pool, j))) isEqual:nameKey]) {
        if (poolSize < 256) {
          [outArg writeByteWithInt:j];
        }
        else {
          [outArg writeShortWithInt:j];
        }
        break;
      }
    }
  }
  [outArg writeBooleanWithBoolean:iTailZone_ != nil];
  if (iTailZone_ != nil) {
    [iTailZone_ writeToWithJavaIoDataOutput:outArg];
  }
}

- (jboolean)isCachable {
  if (iTailZone_ != nil) {
    return YES;
  }
  IOSLongArray *transitions = iTransitions_;
  if (((IOSLongArray *) nil_chk(transitions))->size_ <= 1) {
    return NO;
  }
  jdouble distances = 0;
  jint count = 0;
  for (jint i = 1; i < transitions->size_; i++) {
    jlong diff = IOSLongArray_Get(transitions, i) - IOSLongArray_Get(transitions, i - 1);
    if (diff < ((366LL + 365) * 24 * 60 * 60 * 1000)) {
      distances += (jdouble) diff;
      count++;
    }
  }
  if (count > 0) {
    jdouble avg = distances / count;
    avg /= 24 * 60 * 60 * 1000;
    if (avg >= 25) {
      return YES;
    }
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(iTransitions_);
  RELEASE_(iWallOffsets_);
  RELEASE_(iStandardOffsets_);
  RELEASE_(iNameKeys_);
  RELEASE_(iTailZone_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iTransitions_(other, iTransitions_);
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iWallOffsets_(other, iWallOffsets_);
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iStandardOffsets_(other, iStandardOffsets_);
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iNameKeys_(other, iNameKeys_);
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_set_iTailZone_(other, iTailZone_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readFromWithJavaIoDataInput:withNSString:", "readFrom", "Lorg.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;", 0x8, "Ljava.io.IOException;" },
    { "createWithNSString:withBoolean:withJavaUtilArrayList:withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:", "create", "Lorg.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;", 0x8, NULL },
    { "initWithNSString:withLongArray:withIntArray:withIntArray:withNSStringArray:withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:", "PrecalculatedZone", NULL, 0x2, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x1, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x1, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x1, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL },
    { "nextTransitionWithLong:", "nextTransition", "J", 0x1, NULL },
    { "previousTransitionWithLong:", "previousTransition", "J", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "writeToWithJavaIoDataOutput:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "isCachable", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_serialVersionUID },
    { "iTransitions_", NULL, 0x12, "[J", NULL,  },
    { "iWallOffsets_", NULL, 0x12, "[I", NULL,  },
    { "iStandardOffsets_", NULL, 0x12, "[I", NULL,  },
    { "iNameKeys_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iTailZone_", NULL, 0x12, "Lorg.joda.time.tz.DateTimeZoneBuilder$DSTZone;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone = { 1, "PrecalculatedZone", "org.joda.time.tz", "DateTimeZoneBuilder", 0x1a, 12, methods, 6, fields, 0, NULL};
  return &_OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone;
}

@end

OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_readFromWithJavaIoDataInput_withNSString_(id<JavaIoDataInput> inArg, NSString *id_) {
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_init();
  jint poolSize = [((id<JavaIoDataInput>) nil_chk(inArg)) readUnsignedShort];
  IOSObjectArray *pool = [IOSObjectArray arrayWithLength:poolSize type:NSString_class_()];
  for (jint i = 0; i < poolSize; i++) {
    IOSObjectArray_Set(pool, i, [inArg readUTF]);
  }
  jint size = [inArg readInt];
  IOSLongArray *transitions = [IOSLongArray arrayWithLength:size];
  IOSIntArray *wallOffsets = [IOSIntArray arrayWithLength:size];
  IOSIntArray *standardOffsets = [IOSIntArray arrayWithLength:size];
  IOSObjectArray *nameKeys = [IOSObjectArray arrayWithLength:size type:NSString_class_()];
  for (jint i = 0; i < size; i++) {
    *IOSLongArray_GetRef(transitions, i) = OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg);
    *IOSIntArray_GetRef(wallOffsets, i) = (jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg);
    *IOSIntArray_GetRef(standardOffsets, i) = (jint) OrgJodaTimeTzDateTimeZoneBuilder_readMillisWithJavaIoDataInput_(inArg);
    @try {
      jint index;
      if (poolSize < 256) {
        index = [inArg readUnsignedByte];
      }
      else {
        index = [inArg readUnsignedShort];
      }
      IOSObjectArray_Set(nameKeys, i, IOSObjectArray_Get(pool, index));
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *e) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"Invalid encoding"] autorelease];
    }
  }
  OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *tailZone = nil;
  if ([inArg readBoolean]) {
    tailZone = OrgJodaTimeTzDateTimeZoneBuilder_DSTZone_readFromWithJavaIoDataInput_withNSString_(inArg, id_);
  }
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone alloc] initWithNSString:id_ withLongArray:transitions withIntArray:wallOffsets withIntArray:standardOffsets withNSStringArray:nameKeys withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:tailZone] autorelease];
}

OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone *OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_createWithNSString_withBoolean_withJavaUtilArrayList_withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone_(NSString *id_, jboolean outputID, JavaUtilArrayList *transitions, OrgJodaTimeTzDateTimeZoneBuilder_DSTZone *tailZone) {
  OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone_init();
  jint size = [((JavaUtilArrayList *) nil_chk(transitions)) size];
  if (size == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  IOSLongArray *trans = [IOSLongArray arrayWithLength:size];
  IOSIntArray *wallOffsets = [IOSIntArray arrayWithLength:size];
  IOSIntArray *standardOffsets = [IOSIntArray arrayWithLength:size];
  IOSObjectArray *nameKeys = [IOSObjectArray arrayWithLength:size type:NSString_class_()];
  OrgJodaTimeTzDateTimeZoneBuilder_Transition *last = nil;
  for (jint i = 0; i < size; i++) {
    OrgJodaTimeTzDateTimeZoneBuilder_Transition *tr = [transitions getWithInt:i];
    if (![((OrgJodaTimeTzDateTimeZoneBuilder_Transition *) nil_chk(tr)) isTransitionFromWithOrgJodaTimeTzDateTimeZoneBuilder_Transition:last]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:id_] autorelease];
    }
    *IOSLongArray_GetRef(trans, i) = [tr getMillis];
    *IOSIntArray_GetRef(wallOffsets, i) = [tr getWallOffset];
    *IOSIntArray_GetRef(standardOffsets, i) = [tr getStandardOffset];
    IOSObjectArray_Set(nameKeys, i, [tr getNameKey]);
    last = tr;
  }
  IOSObjectArray *zoneNameData = [IOSObjectArray arrayWithLength:5 type:NSString_class_()];
  IOSObjectArray *zoneStrings = [((JavaTextDateFormatSymbols *) [[[JavaTextDateFormatSymbols alloc] initWithJavaUtilLocale:JavaUtilLocale_get_ENGLISH_()] autorelease]) getZoneStrings];
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(zoneStrings))->size_; j++) {
    IOSObjectArray *set = IOSObjectArray_Get(zoneStrings, j);
    if (set != nil && set->size_ == 5 && [((NSString *) nil_chk(id_)) isEqual:IOSObjectArray_Get(set, 0)]) {
      zoneNameData = set;
    }
  }
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoISOChronology_getInstanceUTC();
  for (jint i = 0; i < nameKeys->size_ - 1; i++) {
    NSString *curNameKey = IOSObjectArray_Get(nameKeys, i);
    NSString *nextNameKey = IOSObjectArray_Get(nameKeys, i + 1);
    jlong curOffset = IOSIntArray_Get(wallOffsets, i);
    jlong nextOffset = IOSIntArray_Get(wallOffsets, i + 1);
    jlong curStdOffset = IOSIntArray_Get(standardOffsets, i);
    jlong nextStdOffset = IOSIntArray_Get(standardOffsets, i + 1);
    OrgJodaTimePeriod *p = [[[OrgJodaTimePeriod alloc] initWithLong:IOSLongArray_Get(trans, i) withLong:IOSLongArray_Get(trans, i + 1) withOrgJodaTimePeriodType:OrgJodaTimePeriodType_yearMonthDay() withOrgJodaTimeChronology:chrono] autorelease];
    if (curOffset != nextOffset && curStdOffset == nextStdOffset && [((NSString *) nil_chk(curNameKey)) isEqual:nextNameKey] && [p getYears] == 0 && [p getMonths] > 4 && [p getMonths] < 8 && [curNameKey isEqual:IOSObjectArray_Get(zoneNameData, 2)] && [curNameKey isEqual:IOSObjectArray_Get(zoneNameData, 4)]) {
      if (OrgJodaTimeTzZoneInfoCompiler_verbose()) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"Fixing duplicate name key - ", nextNameKey)];
        [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$@$@", @"     - ", [[[OrgJodaTimeDateTime alloc] initWithLong:IOSLongArray_Get(trans, i) withOrgJodaTimeChronology:chrono] autorelease], @" - ", [[[OrgJodaTimeDateTime alloc] initWithLong:IOSLongArray_Get(trans, i + 1) withOrgJodaTimeChronology:chrono] autorelease])];
      }
      if (curOffset > nextOffset) {
        IOSObjectArray_Set(nameKeys, i, [(JreStrcat("$$", curNameKey, @"-Summer")) intern]);
      }
      else if (curOffset < nextOffset) {
        IOSObjectArray_Set(nameKeys, i + 1, [(JreStrcat("$$", nextNameKey, @"-Summer")) intern]);
        i++;
      }
    }
  }
  if (tailZone != nil) {
    if ([((NSString *) nil_chk([((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(tailZone->iStartRecurrence_)) getNameKey])) isEqual:[((OrgJodaTimeTzDateTimeZoneBuilder_Recurrence *) nil_chk(tailZone->iEndRecurrence_)) getNameKey]]) {
      if (OrgJodaTimeTzZoneInfoCompiler_verbose()) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"Fixing duplicate recurrent name key - ", [tailZone->iStartRecurrence_ getNameKey])];
      }
      if ([tailZone->iStartRecurrence_ getSaveMillis] > 0) {
        tailZone = [[[OrgJodaTimeTzDateTimeZoneBuilder_DSTZone alloc] initWithNSString:[tailZone getID] withInt:tailZone->iStandardOffset_ withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:[tailZone->iStartRecurrence_ renameAppendWithNSString:@"-Summer"] withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:tailZone->iEndRecurrence_] autorelease];
      }
      else {
        tailZone = [[[OrgJodaTimeTzDateTimeZoneBuilder_DSTZone alloc] initWithNSString:[tailZone getID] withInt:tailZone->iStandardOffset_ withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:tailZone->iStartRecurrence_ withOrgJodaTimeTzDateTimeZoneBuilder_Recurrence:[tailZone->iEndRecurrence_ renameAppendWithNSString:@"-Summer"]] autorelease];
      }
    }
  }
  return [[[OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone alloc] initWithNSString:(outputID ? id_ : @"") withLongArray:trans withIntArray:wallOffsets withIntArray:standardOffsets withNSStringArray:nameKeys withOrgJodaTimeTzDateTimeZoneBuilder_DSTZone:tailZone] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTzDateTimeZoneBuilder_PrecalculatedZone)
