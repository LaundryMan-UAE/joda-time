//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/convert/AbstractConverter.java
//

#include "AbstractConverter.h"
#include "Chronology.h"
#include "Converter.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "PeriodType.h"
#include "ReadablePartial.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgJodaTimeConvertAbstractConverter

- (instancetype)init {
  return [super init];
}

- (jlong)getInstantMillisWithId:(id)object
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeDateTimeUtils_currentTimeMillis();
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                   withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
}

- (IOSIntArray *)getPartialValuesWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)fieldSource
                                                         withId:(id)object
                                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  jlong instant = [self getInstantMillisWithId:object withOrgJodaTimeChronology:chrono];
  return [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePartial:fieldSource withLong:instant];
}

- (IOSIntArray *)getPartialValuesWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)fieldSource
                                                         withId:(id)object
                                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                         withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)parser {
  return [self getPartialValuesWithOrgJodaTimeReadablePartial:fieldSource withId:object withOrgJodaTimeChronology:chrono];
}

- (OrgJodaTimePeriodType *)getPeriodTypeWithId:(id)object {
  return OrgJodaTimePeriodType_standard();
}

- (jboolean)isReadableIntervalWithId:(id)object
           withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return NO;
}

- (NSString *)description {
  return JreStrcat("$$C", @"Converter[", ([self getSupportedType] == nil ? @"null" : [((IOSClass *) nil_chk([self getSupportedType])) getName]), ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractConverter", NULL, 0x4, NULL },
    { "getInstantMillisWithId:withOrgJodaTimeChronology:", "getInstantMillis", "J", 0x1, NULL },
    { "getChronologyWithId:withOrgJodaTimeDateTimeZone:", "getChronology", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getChronologyWithId:withOrgJodaTimeChronology:", "getChronology", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getPartialValuesWithOrgJodaTimeReadablePartial:withId:withOrgJodaTimeChronology:", "getPartialValues", "[I", 0x1, NULL },
    { "getPartialValuesWithOrgJodaTimeReadablePartial:withId:withOrgJodaTimeChronology:withOrgJodaTimeFormatDateTimeFormatter:", "getPartialValues", "[I", 0x1, NULL },
    { "getPeriodTypeWithId:", "getPeriodType", "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "isReadableIntervalWithId:withOrgJodaTimeChronology:", "isReadableInterval", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeConvertAbstractConverter = { "AbstractConverter", "org.joda.time.convert", NULL, 0x401, 9, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeConvertAbstractConverter;
}

@end
