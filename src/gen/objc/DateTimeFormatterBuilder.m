//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
//

#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeFormatterBuilder.h"
#include "DateTimeParser.h"
#include "DateTimeParserBucket.h"
#include "DateTimeParserInternalParser.h"
#include "DateTimePrinter.h"
#include "DateTimePrinterInternalPrinter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "FormatUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InternalParser.h"
#include "InternalParserDateTimeParser.h"
#include "InternalPrinter.h"
#include "InternalPrinterDateTimePrinter.h"
#include "MillisDurationField.h"
#include "MutableDateTime.h"
#include "PreciseDateTimeField.h"
#include "ReadablePartial.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder

- (instancetype)init {
  if (self = [super init]) {
    iElementPairs_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (OrgJodaTimeFormatDateTimeFormatter *)toFormatter {
  id f = [self getFormatter];
  id<OrgJodaTimeFormatInternalPrinter> printer = nil;
  if ([self isPrinterWithId:f]) {
    printer = (id<OrgJodaTimeFormatInternalPrinter>) check_protocol_cast(f, @protocol(OrgJodaTimeFormatInternalPrinter));
  }
  id<OrgJodaTimeFormatInternalParser> parser = nil;
  if ([self isParserWithId:f]) {
    parser = (id<OrgJodaTimeFormatInternalParser>) check_protocol_cast(f, @protocol(OrgJodaTimeFormatInternalParser));
  }
  if (printer != nil || parser != nil) {
    return [[OrgJodaTimeFormatDateTimeFormatter alloc] initWithOrgJodaTimeFormatInternalPrinter:printer withOrgJodaTimeFormatInternalParser:parser];
  }
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Both printing and parsing not supported"];
}

- (id<OrgJodaTimeFormatDateTimePrinter>)toPrinter {
  id f = [self getFormatter];
  if ([self isPrinterWithId:f]) {
    id<OrgJodaTimeFormatInternalPrinter> ip = (id<OrgJodaTimeFormatInternalPrinter>) check_protocol_cast(f, @protocol(OrgJodaTimeFormatInternalPrinter));
    return [OrgJodaTimeFormatInternalPrinterDateTimePrinter ofWithOrgJodaTimeFormatInternalPrinter:ip];
  }
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Printing is not supported"];
}

- (id<OrgJodaTimeFormatDateTimeParser>)toParser {
  id f = [self getFormatter];
  if ([self isParserWithId:f]) {
    id<OrgJodaTimeFormatInternalParser> ip = (id<OrgJodaTimeFormatInternalParser>) check_protocol_cast(f, @protocol(OrgJodaTimeFormatInternalParser));
    return [OrgJodaTimeFormatInternalParserDateTimeParser ofWithOrgJodaTimeFormatInternalParser:ip];
  }
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Parsing is not supported"];
}

- (BOOL)canBuildFormatter {
  return [self isFormatterWithId:[self getFormatter]];
}

- (BOOL)canBuildPrinter {
  return [self isPrinterWithId:[self getFormatter]];
}

- (BOOL)canBuildParser {
  return [self isParserWithId:[self getFormatter]];
}

- (void)clear {
  iFormatter_ = nil;
  [((JavaUtilArrayList *) nil_chk(iElementPairs_)) clear];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  if (formatter == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No formatter supplied"];
  }
  return [self append0WithOrgJodaTimeFormatInternalPrinter:[((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) getPrinter0] withOrgJodaTimeFormatInternalParser:[formatter getParser0]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer {
  [self checkPrinterWithOrgJodaTimeFormatDateTimePrinter:printer];
  return [self append0WithOrgJodaTimeFormatInternalPrinter:[OrgJodaTimeFormatDateTimePrinterInternalPrinter ofWithOrgJodaTimeFormatDateTimePrinter:printer] withOrgJodaTimeFormatInternalParser:nil];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  [self checkParserWithOrgJodaTimeFormatDateTimeParser:parser];
  return [self append0WithOrgJodaTimeFormatInternalPrinter:nil withOrgJodaTimeFormatInternalParser:[OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:parser]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                                                      withOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  [self checkPrinterWithOrgJodaTimeFormatDateTimePrinter:printer];
  [self checkParserWithOrgJodaTimeFormatDateTimeParser:parser];
  return [self append0WithOrgJodaTimeFormatInternalPrinter:[OrgJodaTimeFormatDateTimePrinterInternalPrinter ofWithOrgJodaTimeFormatDateTimePrinter:printer] withOrgJodaTimeFormatInternalParser:[OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:parser]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                                                 withOrgJodaTimeFormatDateTimeParserArray:(IOSObjectArray *)parsers {
  if (printer != nil) {
    [self checkPrinterWithOrgJodaTimeFormatDateTimePrinter:printer];
  }
  if (parsers == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No parsers supplied"];
  }
  int length = (int) [((IOSObjectArray *) nil_chk(parsers)) count];
  if (length == 1) {
    if (IOSObjectArray_Get(parsers, 0) == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No parser supplied"];
    }
    return [self append0WithOrgJodaTimeFormatInternalPrinter:[OrgJodaTimeFormatDateTimePrinterInternalPrinter ofWithOrgJodaTimeFormatDateTimePrinter:printer] withOrgJodaTimeFormatInternalParser:[OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:IOSObjectArray_Get(parsers, 0)]];
  }
  IOSObjectArray *copyOfParsers = [IOSObjectArray arrayWithLength:length type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeFormatInternalParser)]];
  int i;
  for (i = 0; i < length - 1; i++) {
    if ((IOSObjectArray_Set(copyOfParsers, i, [OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:IOSObjectArray_Get(parsers, i)])) == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Incomplete parser array"];
    }
  }
  (void) IOSObjectArray_Set(copyOfParsers, i, [OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:IOSObjectArray_Get(parsers, i)]);
  return [self append0WithOrgJodaTimeFormatInternalPrinter:[OrgJodaTimeFormatDateTimePrinterInternalPrinter ofWithOrgJodaTimeFormatDateTimePrinter:printer] withOrgJodaTimeFormatInternalParser:[[OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser alloc] initWithOrgJodaTimeFormatInternalParserArray:copyOfParsers]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendOptionalWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  [self checkParserWithOrgJodaTimeFormatDateTimeParser:parser];
  IOSObjectArray *parsers = [IOSObjectArray arrayWithObjects:(id[]){ [OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:parser], nil } count:2 type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeFormatInternalParser)]];
  return [self append0WithOrgJodaTimeFormatInternalPrinter:nil withOrgJodaTimeFormatInternalParser:[[OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser alloc] initWithOrgJodaTimeFormatInternalParserArray:parsers]];
}

- (void)checkParserWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  if (parser == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No parser supplied"];
  }
}

- (void)checkPrinterWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer {
  if (printer == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No printer supplied"];
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)append0WithId:(id)element {
  iFormatter_ = nil;
  [((JavaUtilArrayList *) nil_chk(iElementPairs_)) addWithId:element];
  [iElementPairs_ addWithId:element];
  return self;
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)append0WithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                                                       withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  iFormatter_ = nil;
  [((JavaUtilArrayList *) nil_chk(iElementPairs_)) addWithId:printer];
  [iElementPairs_ addWithId:parser];
  return self;
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendLiteralWithChar:(unichar)c {
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral alloc] initWithChar:c]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendLiteralWithNSString:(NSString *)text {
  if (text == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Literal must not be null"];
  }
  switch (((int) [((NSString *) nil_chk(text)) length])) {
    case 0:
    return self;
    case 1:
    return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral alloc] initWithChar:[text charAtWithInt:0]]];
    default:
    return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral alloc] initWithNSString:text]];
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                     withInt:(int)minDigits
                                                                                     withInt:(int)maxDigits {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  if (maxDigits < minDigits) {
    maxDigits = minDigits;
  }
  if (minDigits < 0 || maxDigits <= 0) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  if (minDigits <= 1) {
    return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:maxDigits withBoolean:NO]];
  }
  else {
    return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:maxDigits withBoolean:NO withInt:minDigits]];
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFixedDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                          withInt:(int)numDigits {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  if (numDigits <= 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal number of digits: %d", numDigits]];
  }
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:numDigits withBoolean:NO]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                           withInt:(int)minDigits
                                                                                           withInt:(int)maxDigits {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  if (maxDigits < minDigits) {
    maxDigits = minDigits;
  }
  if (minDigits < 0 || maxDigits <= 0) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  if (minDigits <= 1) {
    return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:maxDigits withBoolean:YES]];
  }
  else {
    return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:maxDigits withBoolean:YES withInt:minDigits]];
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFixedSignedDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                                withInt:(int)numDigits {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  if (numDigits <= 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal number of digits: %d", numDigits]];
  }
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:numDigits withBoolean:YES]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTextWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TextField alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withBoolean:NO]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendShortTextWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TextField alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withBoolean:YES]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                      withInt:(int)minDigits
                                                                                      withInt:(int)maxDigits {
  if (fieldType == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field type must not be null"];
  }
  if (maxDigits < minDigits) {
    maxDigits = minDigits;
  }
  if (minDigits < 0 || maxDigits <= 0) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction alloc] initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:minDigits withInt:maxDigits]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfSecondWithInt:(int)minDigits
                                                                     withInt:(int)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType secondOfDay] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfMinuteWithInt:(int)minDigits
                                                                     withInt:(int)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType minuteOfDay] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfHourWithInt:(int)minDigits
                                                                   withInt:(int)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType hourOfDay] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfDayWithInt:(int)minDigits
                                                                  withInt:(int)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfYear] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMillisOfSecondWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfSecond] withInt:minDigits withInt:3];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMillisOfDayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfDay] withInt:minDigits withInt:8];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendSecondOfMinuteWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType secondOfMinute] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendSecondOfDayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType secondOfDay] withInt:minDigits withInt:5];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMinuteOfHourWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType minuteOfHour] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMinuteOfDayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType minuteOfDay] withInt:minDigits withInt:4];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendHourOfDayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType hourOfDay] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendClockhourOfDayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType clockhourOfDay] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendHourOfHalfdayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType hourOfHalfday] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendClockhourOfHalfdayWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType clockhourOfHalfday] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfWeekWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfWeek] withInt:minDigits withInt:1];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfMonthWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfMonth] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfYearWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfYear] withInt:minDigits withInt:3];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWeekOfWeekyearWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekOfWeekyear] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWeekyearWithInt:(int)minDigits
                                                             withInt:(int)maxDigits {
  return [self appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyear] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMonthOfYearWithInt:(int)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType monthOfYear] withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendYearWithInt:(int)minDigits
                                                         withInt:(int)maxDigits {
  return [self appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitYearWithInt:(int)pivot {
  return [self appendTwoDigitYearWithInt:pivot withBoolean:NO];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitYearWithInt:(int)pivot
                                                             withBoolean:(BOOL)lenientParse {
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year] withInt:pivot withBoolean:lenientParse]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitWeekyearWithInt:(int)pivot {
  return [self appendTwoDigitWeekyearWithInt:pivot withBoolean:NO];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitWeekyearWithInt:(int)pivot
                                                                 withBoolean:(BOOL)lenientParse {
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType weekyear] withInt:pivot withBoolean:lenientParse]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendYearOfEraWithInt:(int)minDigits
                                                              withInt:(int)maxDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType yearOfEra] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendYearOfCenturyWithInt:(int)minDigits
                                                                  withInt:(int)maxDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType yearOfCentury] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendCenturyOfEraWithInt:(int)minDigits
                                                                 withInt:(int)maxDigits {
  return [self appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType centuryOfEra] withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendHalfdayOfDayText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType halfdayOfDay]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfWeekText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfWeek]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfWeekShortText {
  return [self appendShortTextWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfWeek]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMonthOfYearText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType monthOfYear]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMonthOfYearShortText {
  return [self appendShortTextWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType monthOfYear]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendEraText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType era]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneName {
  return [self append0WithOrgJodaTimeFormatInternalPrinter:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName alloc] initWithInt:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME withJavaUtilMap:nil] withOrgJodaTimeFormatInternalParser:nil];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneNameWithJavaUtilMap:(id<JavaUtilMap>)parseLookup {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *pp = [[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName alloc] initWithInt:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME withJavaUtilMap:parseLookup];
  return [self append0WithOrgJodaTimeFormatInternalPrinter:pp withOrgJodaTimeFormatInternalParser:pp];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneShortName {
  return [self append0WithOrgJodaTimeFormatInternalPrinter:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName alloc] initWithInt:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME withJavaUtilMap:nil] withOrgJodaTimeFormatInternalParser:nil];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneShortNameWithJavaUtilMap:(id<JavaUtilMap>)parseLookup {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *pp = [[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName alloc] initWithInt:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME withJavaUtilMap:parseLookup];
  return [self append0WithOrgJodaTimeFormatInternalPrinter:pp withOrgJodaTimeFormatInternalParser:pp];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneId {
  return [self append0WithOrgJodaTimeFormatInternalPrinter:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_get_INSTANCE() withOrgJodaTimeFormatInternalParser:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_get_INSTANCE()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneOffsetWithNSString:(NSString *)zeroOffsetText
                                                                    withBoolean:(BOOL)showSeparators
                                                                        withInt:(int)minFields
                                                                        withInt:(int)maxFields {
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset alloc] initWithNSString:zeroOffsetText withNSString:zeroOffsetText withBoolean:showSeparators withInt:minFields withInt:maxFields]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneOffsetWithNSString:(NSString *)zeroOffsetPrintText
                                                                   withNSString:(NSString *)zeroOffsetParseText
                                                                    withBoolean:(BOOL)showSeparators
                                                                        withInt:(int)minFields
                                                                        withInt:(int)maxFields {
  return [self append0WithId:[[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset alloc] initWithNSString:zeroOffsetPrintText withNSString:zeroOffsetParseText withBoolean:showSeparators withInt:minFields withInt:maxFields]];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendPatternWithNSString:(NSString *)pattern {
  [OrgJodaTimeFormatDateTimeFormat appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:self withNSString:pattern];
  return self;
}

- (id)getFormatter {
  id f = iFormatter_;
  if (f == nil) {
    if ([((JavaUtilArrayList *) nil_chk(iElementPairs_)) size] == 2) {
      id printer = [iElementPairs_ getWithInt:0];
      id parser = [iElementPairs_ getWithInt:1];
      if (printer != nil) {
        if (printer == parser || parser == nil) {
          f = printer;
        }
      }
      else {
        f = parser;
      }
    }
    if (f == nil) {
      f = [[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite alloc] initWithJavaUtilList:iElementPairs_];
    }
    iFormatter_ = f;
  }
  return f;
}

- (BOOL)isPrinterWithId:(id)f {
  if ([f conformsToProtocol: @protocol(OrgJodaTimeFormatInternalPrinter)]) {
    if ([f isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      return [((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) check_class_cast(f, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class])))) isPrinter];
    }
    return YES;
  }
  return NO;
}

- (BOOL)isParserWithId:(id)f {
  if ([f conformsToProtocol: @protocol(OrgJodaTimeFormatInternalParser)]) {
    if ([f isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      return [((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) check_class_cast(f, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class])))) isParser];
    }
    return YES;
  }
  return NO;
}

- (BOOL)isFormatterWithId:(id)f {
  return ([self isPrinterWithId:f] || [self isParserWithId:f]);
}

+ (void)appendUnknownStringWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                          withInt:(int)len {
  for (int i = len; --i >= 0; ) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

+ (BOOL)csStartsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                     withInt:(int)position
                                withNSString:(NSString *)search {
  int searchLen = ((int) [((NSString *) nil_chk(search)) length]);
  if (([((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position) < searchLen) {
    return NO;
  }
  for (int i = 0; i < searchLen; i++) {
    if ([text charAtWithInt:position + i] != [search charAtWithInt:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)csStartsWithIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                               withInt:(int)position
                                          withNSString:(NSString *)search {
  int searchLen = ((int) [((NSString *) nil_chk(search)) length]);
  if (([((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position) < searchLen) {
    return NO;
  }
  for (int i = 0; i < searchLen; i++) {
    unichar ch1 = [text charAtWithInt:position + i];
    unichar ch2 = [search charAtWithInt:i];
    if (ch1 != ch2) {
      unichar u1 = [JavaLangCharacter toUpperCaseWithChar:ch1];
      unichar u2 = [JavaLangCharacter toUpperCaseWithChar:ch2];
      if (u1 != u2 && [JavaLangCharacter toLowerCaseWithChar:u1] != [JavaLangCharacter toLowerCaseWithChar:u2]) {
        return NO;
      }
    }
  }
  return YES;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder *)other {
  [super copyAllFieldsTo:other];
  other->iElementPairs_ = iElementPairs_;
  other->iFormatter_ = iFormatter_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "DateTimeFormatterBuilder", NULL, 0x1, NULL },
    { "toFormatter", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL },
    { "toPrinter", NULL, "Lorg.joda.time.format.DateTimePrinter;", 0x1, NULL },
    { "toParser", NULL, "Lorg.joda.time.format.DateTimeParser;", 0x1, NULL },
    { "canBuildFormatter", NULL, "Z", 0x1, NULL },
    { "canBuildPrinter", NULL, "Z", 0x1, NULL },
    { "canBuildParser", NULL, "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatDateTimeFormatter:", "append", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatDateTimePrinter:", "append", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatDateTimeParser:", "append", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParser:", "append", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParserArray:", "append", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendOptionalWithOrgJodaTimeFormatDateTimeParser:", "appendOptional", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "checkParserWithOrgJodaTimeFormatDateTimeParser:", "checkParser", "V", 0x2, NULL },
    { "checkPrinterWithOrgJodaTimeFormatDateTimePrinter:", "checkPrinter", "V", 0x2, NULL },
    { "append0WithId:", "append0", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x2, NULL },
    { "append0WithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:", "append0", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x2, NULL },
    { "appendLiteralWithChar:", "appendLiteral", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendLiteralWithNSString:", "appendLiteral", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendDecimalWithOrgJodaTimeDateTimeFieldType:withInt:withInt:", "appendDecimal", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFixedDecimalWithOrgJodaTimeDateTimeFieldType:withInt:", "appendFixedDecimal", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:withInt:withInt:", "appendSignedDecimal", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFixedSignedDecimalWithOrgJodaTimeDateTimeFieldType:withInt:", "appendFixedSignedDecimal", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTextWithOrgJodaTimeDateTimeFieldType:", "appendText", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendShortTextWithOrgJodaTimeDateTimeFieldType:", "appendShortText", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFractionWithOrgJodaTimeDateTimeFieldType:withInt:withInt:", "appendFraction", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFractionOfSecondWithInt:withInt:", "appendFractionOfSecond", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFractionOfMinuteWithInt:withInt:", "appendFractionOfMinute", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFractionOfHourWithInt:withInt:", "appendFractionOfHour", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendFractionOfDayWithInt:withInt:", "appendFractionOfDay", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMillisOfSecondWithInt:", "appendMillisOfSecond", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMillisOfDayWithInt:", "appendMillisOfDay", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendSecondOfMinuteWithInt:", "appendSecondOfMinute", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendSecondOfDayWithInt:", "appendSecondOfDay", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMinuteOfHourWithInt:", "appendMinuteOfHour", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMinuteOfDayWithInt:", "appendMinuteOfDay", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendHourOfDayWithInt:", "appendHourOfDay", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendClockhourOfDayWithInt:", "appendClockhourOfDay", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendHourOfHalfdayWithInt:", "appendHourOfHalfday", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendClockhourOfHalfdayWithInt:", "appendClockhourOfHalfday", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendDayOfWeekWithInt:", "appendDayOfWeek", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendDayOfMonthWithInt:", "appendDayOfMonth", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendDayOfYearWithInt:", "appendDayOfYear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendWeekOfWeekyearWithInt:", "appendWeekOfWeekyear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendWeekyearWithInt:withInt:", "appendWeekyear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMonthOfYearWithInt:", "appendMonthOfYear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendYearWithInt:withInt:", "appendYear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTwoDigitYearWithInt:", "appendTwoDigitYear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTwoDigitYearWithInt:withBoolean:", "appendTwoDigitYear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTwoDigitWeekyearWithInt:", "appendTwoDigitWeekyear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTwoDigitWeekyearWithInt:withBoolean:", "appendTwoDigitWeekyear", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendYearOfEraWithInt:withInt:", "appendYearOfEra", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendYearOfCenturyWithInt:withInt:", "appendYearOfCentury", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendCenturyOfEraWithInt:withInt:", "appendCenturyOfEra", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendHalfdayOfDayText", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendDayOfWeekText", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendDayOfWeekShortText", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMonthOfYearText", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendMonthOfYearShortText", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendEraText", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneName", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneNameWithJavaUtilMap:", "appendTimeZoneName", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneShortName", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneShortNameWithJavaUtilMap:", "appendTimeZoneShortName", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneId", NULL, "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneOffsetWithNSString:withBoolean:withInt:withInt:", "appendTimeZoneOffset", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendTimeZoneOffsetWithNSString:withNSString:withBoolean:withInt:withInt:", "appendTimeZoneOffset", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "appendPatternWithNSString:", "appendPattern", "Lorg.joda.time.format.DateTimeFormatterBuilder;", 0x1, NULL },
    { "getFormatter", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "isPrinterWithId:", "isPrinter", "Z", 0x2, NULL },
    { "isParserWithId:", "isParser", "Z", 0x2, NULL },
    { "isFormatterWithId:", "isFormatter", "Z", 0x2, NULL },
    { "appendUnknownStringWithJavaLangAppendable:withInt:", "appendUnknownString", "V", 0x8, "Ljava.io.IOException;" },
    { "csStartsWithWithJavaLangCharSequence:withInt:withNSString:", "csStartsWith", "Z", 0x8, NULL },
    { "csStartsWithIgnoreCaseWithJavaLangCharSequence:withInt:withNSString:", "csStartsWithIgnoreCase", "Z", 0x8, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iElementPairs_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "iFormatter_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder = { "DateTimeFormatterBuilder", "org.joda.time.format", NULL, 0x1, 76, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral

- (instancetype)initWithChar:(unichar)value {
  if (self = [super init]) {
    iValue_ = value;
  }
  return self;
}

- (int)estimatePrintedLength {
  return 1;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:iValue_];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:iValue_];
}

- (int)estimateParsedLength {
  return 1;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  if (position >= [((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength]) {
    return ~position;
  }
  unichar a = [text charAtWithInt:position];
  unichar b = iValue_;
  if (a != b) {
    a = [JavaLangCharacter toUpperCaseWithChar:a];
    b = [JavaLangCharacter toUpperCaseWithChar:b];
    if (a != b) {
      a = [JavaLangCharacter toLowerCaseWithChar:a];
      b = [JavaLangCharacter toLowerCaseWithChar:b];
      if (a != b) {
        return ~position;
      }
    }
  }
  return position + 1;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral *)other {
  [super copyAllFieldsTo:other];
  other->iValue_ = iValue_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithChar:", "CharacterLiteral", NULL, 0x0, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iValue_", NULL, 0x12, "C", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral = { "CharacterLiteral", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 6, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral

- (instancetype)initWithNSString:(NSString *)value {
  if (self = [super init]) {
    iValue_ = value;
  }
  return self;
}

- (int)estimatePrintedLength {
  return ((int) [((NSString *) nil_chk(iValue_)) length]);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:iValue_];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:iValue_];
}

- (int)estimateParsedLength {
  return ((int) [((NSString *) nil_chk(iValue_)) length]);
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  if ([OrgJodaTimeFormatDateTimeFormatterBuilder csStartsWithIgnoreCaseWithJavaLangCharSequence:text withInt:position withNSString:iValue_]) {
    return position + ((int) [((NSString *) nil_chk(iValue_)) length]);
  }
  return ~position;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral *)other {
  [super copyAllFieldsTo:other];
  other->iValue_ = iValue_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "StringLiteral", NULL, 0x0, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iValue_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral = { "StringLiteral", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 6, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(int)maxParsedDigits
                                         withBoolean:(BOOL)signed_ {
  if (self = [super init]) {
    iFieldType_ = fieldType;
    iMaxParsedDigits_ = maxParsedDigits;
    iSigned_ = signed_;
  }
  return self;
}

- (int)estimateParsedLength {
  return iMaxParsedDigits_;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  int limit = [JavaLangMath minWithInt:iMaxParsedDigits_ withInt:[((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position];
  BOOL negative = NO;
  int length = 0;
  while (length < limit) {
    unichar c = [text charAtWithInt:position + length];
    if (length == 0 && (c == '-' || c == '+') && iSigned_) {
      negative = (c == '-');
      if (length + 1 >= limit || (c = [text charAtWithInt:position + length + 1]) < '0' || c > '9') {
        break;
      }
      if (negative) {
        length++;
      }
      else {
        position++;
      }
      limit = [JavaLangMath minWithInt:limit + 1 withInt:[text sequenceLength] - position];
      continue;
    }
    if (c < '0' || c > '9') {
      break;
    }
    length++;
  }
  if (length == 0) {
    return ~position;
  }
  int value;
  if (length >= 9) {
    value = [JavaLangInteger parseIntWithNSString:[((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:position to:position += length])) description]];
  }
  else {
    int i = position;
    if (negative) {
      i++;
    }
    @try {
      value = [text charAtWithInt:i++] - '0';
    }
    @catch (JavaLangStringIndexOutOfBoundsException *e) {
      return ~position;
    }
    position += length;
    while (i < position) {
      value = ((value << 3) + (value << 1)) + [text charAtWithInt:i++] - '0';
    }
    if (negative) {
      value = -value;
    }
  }
  [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) saveFieldWithOrgJodaTimeDateTimeFieldType:iFieldType_ withInt:value];
  return position;
}

- (int)estimatePrintedLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)param0
                             withLong:(long long int)param1
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)param2
                              withInt:(int)param3
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)param4
                   withJavaUtilLocale:(JavaUtilLocale *)param5 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)param0
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)param1
                   withJavaUtilLocale:(JavaUtilLocale *)param2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter *)other {
  [super copyAllFieldsTo:other];
  other->iFieldType_ = iFieldType_;
  other->iMaxParsedDigits_ = iMaxParsedDigits_;
  other->iSigned_ = iSigned_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:", "NumberFormatter", NULL, 0x0, NULL },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
    { "estimatePrintedLength", NULL, "I", 0x401, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x401, NULL },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iFieldType_", NULL, 0x14, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
    { "iMaxParsedDigits_", NULL, 0x14, "I", NULL,  },
    { "iSigned_", NULL, 0x14, "Z", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter = { "NumberFormatter", "org.joda.time.format", "DateTimeFormatterBuilder", 0x408, 6, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(int)maxParsedDigits
                                         withBoolean:(BOOL)signed_ {
  return [super initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:maxParsedDigits withBoolean:signed_];
}

- (int)estimatePrintedLength {
  return iMaxParsedDigits_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
    [OrgJodaTimeFormatFormatUtils appendUnpaddedIntegerWithJavaLangAppendable:appendable withInt:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:instant]];
  }
  @catch (JavaLangRuntimeException *e) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:iFieldType_]) {
    @try {
      [OrgJodaTimeFormatFormatUtils appendUnpaddedIntegerWithJavaLangAppendable:appendable withInt:[partial getWithOrgJodaTimeDateTimeFieldType:iFieldType_]];
    }
    @catch (JavaLangRuntimeException *e) {
      (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
    }
  }
  else {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:", "UnpaddedNumber", NULL, 0x4, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber = { "UnpaddedNumber", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 4, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(int)maxParsedDigits
                                         withBoolean:(BOOL)signed_
                                             withInt:(int)minPrintedDigits {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:maxParsedDigits withBoolean:signed_]) {
    iMinPrintedDigits_ = minPrintedDigits;
  }
  return self;
}

- (int)estimatePrintedLength {
  return iMaxParsedDigits_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:appendable withInt:[((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:instant] withInt:iMinPrintedDigits_];
  }
  @catch (JavaLangRuntimeException *e) {
    [OrgJodaTimeFormatDateTimeFormatterBuilder appendUnknownStringWithJavaLangAppendable:appendable withInt:iMinPrintedDigits_];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:iFieldType_]) {
    @try {
      [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:appendable withInt:[partial getWithOrgJodaTimeDateTimeFieldType:iFieldType_] withInt:iMinPrintedDigits_];
    }
    @catch (JavaLangRuntimeException *e) {
      [OrgJodaTimeFormatDateTimeFormatterBuilder appendUnknownStringWithJavaLangAppendable:appendable withInt:iMinPrintedDigits_];
    }
  }
  else {
    [OrgJodaTimeFormatDateTimeFormatterBuilder appendUnknownStringWithJavaLangAppendable:appendable withInt:iMinPrintedDigits_];
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber *)other {
  [super copyAllFieldsTo:other];
  other->iMinPrintedDigits_ = iMinPrintedDigits_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:withInt:", "PaddedNumber", NULL, 0x4, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iMinPrintedDigits_", NULL, 0x14, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber = { "PaddedNumber", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 4, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(int)numDigits
                                         withBoolean:(BOOL)signed_ {
  return [super initWithOrgJodaTimeDateTimeFieldType:fieldType withInt:numDigits withBoolean:signed_ withInt:numDigits];
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  int newPos = [super parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  if (newPos < 0) {
    return newPos;
  }
  int expectedPos = position + iMaxParsedDigits_;
  if (newPos != expectedPos) {
    if (iSigned_) {
      unichar c = [((id<JavaLangCharSequence>) nil_chk(text)) charAtWithInt:position];
      if (c == '-' || c == '+') {
        expectedPos++;
      }
    }
    if (newPos > expectedPos) {
      return ~(expectedPos + 1);
    }
    else if (newPos < expectedPos) {
      return ~newPos;
    }
  }
  return newPos;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:", "FixedNumber", NULL, 0x4, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber = { "FixedNumber", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 2, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(int)pivot
                                         withBoolean:(BOOL)lenientParse {
  if (self = [super init]) {
    iType_ = type;
    iPivot_ = pivot;
    iLenientParse_ = lenientParse;
  }
  return self;
}

- (int)estimateParsedLength {
  return iLenientParse_ ? 4 : 2;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  int limit = [((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position;
  if (!iLenientParse_) {
    limit = [JavaLangMath minWithInt:2 withInt:limit];
    if (limit < 2) {
      return ~position;
    }
  }
  else {
    BOOL hasSignChar = NO;
    BOOL negative = NO;
    int length = 0;
    while (length < limit) {
      unichar c = [text charAtWithInt:position + length];
      if (length == 0 && (c == '-' || c == '+')) {
        hasSignChar = YES;
        negative = (c == '-');
        if (negative) {
          length++;
        }
        else {
          position++;
          limit--;
        }
        continue;
      }
      if (c < '0' || c > '9') {
        break;
      }
      length++;
    }
    if (length == 0) {
      return ~position;
    }
    if (hasSignChar || length != 2) {
      int value;
      if (length >= 9) {
        value = [JavaLangInteger parseIntWithNSString:[((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:position to:position += length])) description]];
      }
      else {
        int i = position;
        if (negative) {
          i++;
        }
        @try {
          value = [text charAtWithInt:i++] - '0';
        }
        @catch (JavaLangStringIndexOutOfBoundsException *e) {
          return ~position;
        }
        position += length;
        while (i < position) {
          value = ((value << 3) + (value << 1)) + [text charAtWithInt:i++] - '0';
        }
        if (negative) {
          value = -value;
        }
      }
      [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) saveFieldWithOrgJodaTimeDateTimeFieldType:iType_ withInt:value];
      return position;
    }
  }
  int year;
  unichar c = [text charAtWithInt:position];
  if (c < '0' || c > '9') {
    return ~position;
  }
  year = c - '0';
  c = [text charAtWithInt:position + 1];
  if (c < '0' || c > '9') {
    return ~position;
  }
  year = ((year << 3) + (year << 1)) + c - '0';
  int pivot = iPivot_;
  if ([((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getPivotYear] != nil) {
    pivot = [((JavaLangInteger *) nil_chk([bucket getPivotYear])) intValue];
  }
  int low = pivot - 50;
  int t;
  if (low >= 0) {
    t = low % 100;
  }
  else {
    t = 99 + ((low + 1) % 100);
  }
  year += low + ((year < t) ? 100 : 0) - t;
  [bucket saveFieldWithOrgJodaTimeDateTimeFieldType:iType_ withInt:year];
  return position + 2;
}

- (int)estimatePrintedLength {
  return 2;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  int year = [self getTwoDigitYearWithLong:instant withOrgJodaTimeChronology:chrono];
  if (year < 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
    (void) [appendable appendWithChar:0xfffd];
  }
  else {
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:appendable withInt:year withInt:2];
  }
}

- (int)getTwoDigitYearWithLong:(long long int)instant
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  @try {
    int year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(iType_)) getFieldWithOrgJodaTimeChronology:chrono])) getWithLong:instant];
    if (year < 0) {
      year = -year;
    }
    return year % 100;
  }
  @catch (JavaLangRuntimeException *e) {
    return -1;
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  int year = [self getTwoDigitYearWithOrgJodaTimeReadablePartial:partial];
  if (year < 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
    (void) [appendable appendWithChar:0xfffd];
  }
  else {
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:appendable withInt:year withInt:2];
  }
}

- (int)getTwoDigitYearWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:iType_]) {
    @try {
      int year = [partial getWithOrgJodaTimeDateTimeFieldType:iType_];
      if (year < 0) {
        year = -year;
      }
      return year % 100;
    }
    @catch (JavaLangRuntimeException *e) {
    }
  }
  return -1;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *)other {
  [super copyAllFieldsTo:other];
  other->iLenientParse_ = iLenientParse_;
  other->iPivot_ = iPivot_;
  other->iType_ = iType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:", "TwoDigitYear", NULL, 0x0, NULL },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "getTwoDigitYearWithLong:withOrgJodaTimeChronology:", "getTwoDigitYear", "I", 0x2, NULL },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "getTwoDigitYearWithOrgJodaTimeReadablePartial:", "getTwoDigitYear", "I", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iType_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
    { "iPivot_", NULL, 0x12, "I", NULL,  },
    { "iLenientParse_", NULL, 0x12, "Z", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear = { "TwoDigitYear", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 8, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear;
}

@end

BOOL OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initialized = NO;

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TextField

id<JavaUtilMap> OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache_;

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                         withBoolean:(BOOL)isShort {
  if (self = [super init]) {
    iFieldType_ = fieldType;
    iShort_ = isShort;
  }
  return self;
}

- (int)estimatePrintedLength {
  return iShort_ ? 6 : 20;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[self printWithLong:instant withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale]];
  }
  @catch (JavaLangRuntimeException *e) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[self printWithOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale]];
  }
  @catch (JavaLangRuntimeException *e) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

- (NSString *)printWithLong:(long long int)instant
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
  if (iShort_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)printWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:iFieldType_]) {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:[partial getChronology]];
    if (iShort_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsShortTextWithOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
    }
    else {
      return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsTextWithOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
    }
  }
  else {
    return @"\ufffd";
  }
}

- (int)estimateParsedLength {
  return [self estimatePrintedLength];
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  JavaUtilLocale *locale = [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getLocale];
  id<JavaUtilMap> validValues = nil;
  int maxLength = 0;
  id<JavaUtilMap> innerMap = [((id<JavaUtilMap>) nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache_)) getWithId:locale];
  if (innerMap == nil) {
    innerMap = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    (void) [OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache_ putWithId:locale withId:innerMap];
  }
  IOSObjectArray *array = [((id<JavaUtilMap>) nil_chk(innerMap)) getWithId:iFieldType_];
  if (array == nil) {
    validValues = [[JavaUtilConcurrentConcurrentHashMap alloc] initWithInt:32];
    OrgJodaTimeMutableDateTime *dt = [[OrgJodaTimeMutableDateTime alloc] initWithLong:0LL withOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
    OrgJodaTimeMutableDateTime_Property *property = [dt propertyWithOrgJodaTimeDateTimeFieldType:iFieldType_];
    int min = [((OrgJodaTimeMutableDateTime_Property *) nil_chk(property)) getMinimumValueOverall];
    int max = [property getMaximumValueOverall];
    if (max - min > 32) {
      return ~position;
    }
    maxLength = [property getMaximumTextLengthWithJavaUtilLocale:locale];
    for (int i = min; i <= max; i++) {
      (void) [property setWithInt:i];
      (void) [validValues putWithId:[property getAsShortTextWithJavaUtilLocale:locale] withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsShortTextWithJavaUtilLocale:locale])) lowercaseStringWithJRELocale:locale] withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsShortTextWithJavaUtilLocale:locale])) uppercaseStringWithJRELocale:locale] withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:[property getAsTextWithJavaUtilLocale:locale] withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsTextWithJavaUtilLocale:locale])) lowercaseStringWithJRELocale:locale] withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsTextWithJavaUtilLocale:locale])) uppercaseStringWithJRELocale:locale] withId:JavaLangBoolean_get_TRUE__()];
    }
    if ([@"en" isEqual:[((JavaUtilLocale *) nil_chk(locale)) getLanguage]] && iFieldType_ == [OrgJodaTimeDateTimeFieldType era]) {
      (void) [validValues putWithId:@"BCE" withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:@"bce" withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:@"CE" withId:JavaLangBoolean_get_TRUE__()];
      (void) [validValues putWithId:@"ce" withId:JavaLangBoolean_get_TRUE__()];
      maxLength = 3;
    }
    array = [IOSObjectArray arrayWithObjects:(id[]){ validValues, [JavaLangInteger valueOfWithInt:maxLength] } count:2 type:[IOSClass classWithClass:[NSObject class]]];
    (void) [innerMap putWithId:iFieldType_ withId:array];
  }
  else {
    validValues = (id<JavaUtilMap>) check_protocol_cast(IOSObjectArray_Get(array, 0), @protocol(JavaUtilMap));
    maxLength = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(array, 1), [JavaLangInteger class])))) intValue];
  }
  int limit = [JavaLangMath minWithInt:[((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] withInt:position + maxLength];
  for (int i = limit; i > position; i--) {
    NSString *match = [((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:position to:i])) description];
    if ([((id<JavaUtilMap>) nil_chk(validValues)) containsKeyWithId:match]) {
      [bucket saveFieldWithOrgJodaTimeDateTimeFieldType:iFieldType_ withNSString:match withJavaUtilLocale:locale];
      return i;
    }
  }
  return ~position;
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormatterBuilder_TextField class]) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *)other {
  [super copyAllFieldsTo:other];
  other->iFieldType_ = iFieldType_;
  other->iShort_ = iShort_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withBoolean:", "TextField", NULL, 0x0, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:", "print", "Ljava.lang.String;", 0x2, NULL },
    { "printWithOrgJodaTimeReadablePartial:withJavaUtilLocale:", "print", "Ljava.lang.String;", 0x2, NULL },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cParseCache_", NULL, 0xa, "Ljava.util.Map;", &OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache_,  },
    { "iFieldType_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
    { "iShort_", NULL, 0x12, "Z", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TextField = { "TextField", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 8, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TextField;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(int)minDigits
                                             withInt:(int)maxDigits {
  if (self = [super init]) {
    iFieldType_ = fieldType;
    if (maxDigits > 18) {
      maxDigits = 18;
    }
    iMinDigits_ = minDigits;
    iMaxDigits_ = maxDigits;
  }
  return self;
}

- (int)estimatePrintedLength {
  return iMaxDigits_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  [self printToWithJavaLangAppendable:appendable withLong:instant withOrgJodaTimeChronology:chrono];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  long long int millis = [((OrgJodaTimeChronology *) nil_chk([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:0LL];
  [self printToWithJavaLangAppendable:appendable withLong:millis withOrgJodaTimeChronology:[partial getChronology]];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
  int minDigits = iMinDigits_;
  long long int fraction;
  @try {
    fraction = [((OrgJodaTimeDateTimeField *) nil_chk(field)) remainderWithLong:instant];
  }
  @catch (JavaLangRuntimeException *e) {
    [OrgJodaTimeFormatDateTimeFormatterBuilder appendUnknownStringWithJavaLangAppendable:appendable withInt:minDigits];
    return;
  }
  if (fraction == 0) {
    while (--minDigits >= 0) {
      (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'0'];
    }
    return;
  }
  NSString *str;
  IOSLongArray *fractionData = [self getFractionDataWithLong:fraction withOrgJodaTimeDateTimeField:field];
  long long int scaled = IOSLongArray_Get(nil_chk(fractionData), 0);
  int maxDigits = (int) IOSLongArray_Get(fractionData, 1);
  if ((scaled & (int) 0x7fffffff) == scaled) {
    str = [JavaLangInteger toStringWithInt:(int) scaled];
  }
  else {
    str = [JavaLangLong toStringWithLong:scaled];
  }
  int length = ((int) [((NSString *) nil_chk(str)) length]);
  int digits = maxDigits;
  while (length < digits) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'0'];
    minDigits--;
    digits--;
  }
  if (minDigits < digits) {
    while (minDigits < digits) {
      if (length <= 1 || [str charAtWithInt:length - 1] != '0') {
        break;
      }
      digits--;
      length--;
    }
    if (length < ((int) [str length])) {
      for (int i = 0; i < length; i++) {
        (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:[str charAtWithInt:i]];
      }
      return;
    }
  }
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:str];
}

- (IOSLongArray *)getFractionDataWithLong:(long long int)fraction
             withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  long long int rangeMillis = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField])) getUnitMillis];
  long long int scalar;
  int maxDigits = iMaxDigits_;
  while (YES) {
    switch (maxDigits) {
      default:
      scalar = 1LL;
      break;
      case 1:
      scalar = 10LL;
      break;
      case 2:
      scalar = 100LL;
      break;
      case 3:
      scalar = 1000LL;
      break;
      case 4:
      scalar = 10000LL;
      break;
      case 5:
      scalar = 100000LL;
      break;
      case 6:
      scalar = 1000000LL;
      break;
      case 7:
      scalar = 10000000LL;
      break;
      case 8:
      scalar = 100000000LL;
      break;
      case 9:
      scalar = 1000000000LL;
      break;
      case 10:
      scalar = 10000000000LL;
      break;
      case 11:
      scalar = 100000000000LL;
      break;
      case 12:
      scalar = 1000000000000LL;
      break;
      case 13:
      scalar = 10000000000000LL;
      break;
      case 14:
      scalar = 100000000000000LL;
      break;
      case 15:
      scalar = 1000000000000000LL;
      break;
      case 16:
      scalar = 10000000000000000LL;
      break;
      case 17:
      scalar = 100000000000000000LL;
      break;
      case 18:
      scalar = 1000000000000000000LL;
      break;
    }
    if (((rangeMillis * scalar) / scalar) == rangeMillis) {
      break;
    }
    maxDigits--;
  }
  return [IOSLongArray arrayWithLongs:(long long int[]){ fraction * scalar / rangeMillis, maxDigits } count:2];
}

- (int)estimateParsedLength {
  return iMaxDigits_;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getChronology]];
  int limit = [JavaLangMath minWithInt:iMaxDigits_ withInt:[((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position];
  long long int value = 0;
  long long int n = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField])) getUnitMillis] * 10;
  int length = 0;
  while (length < limit) {
    unichar c = [text charAtWithInt:position + length];
    if (c < '0' || c > '9') {
      break;
    }
    length++;
    long long int nn = n / 10;
    value += (c - '0') * nn;
    n = nn;
  }
  value /= 10;
  if (length == 0) {
    return ~position;
  }
  if (value > JavaLangInteger_MAX_VALUE) {
    return ~position;
  }
  OrgJodaTimeDateTimeField *parseField = [[OrgJodaTimeFieldPreciseDateTimeField alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType millisOfSecond] withOrgJodaTimeDurationField:OrgJodaTimeFieldMillisDurationField_get_INSTANCE_() withOrgJodaTimeDurationField:[field getDurationField]];
  [bucket saveFieldWithOrgJodaTimeDateTimeField:parseField withInt:(int) value];
  return position + length;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction *)other {
  [super copyAllFieldsTo:other];
  other->iFieldType_ = iFieldType_;
  other->iMaxDigits_ = iMaxDigits_;
  other->iMinDigits_ = iMinDigits_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withInt:", "Fraction", NULL, 0x4, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:", "printTo", "V", 0x4, "Ljava.io.IOException;" },
    { "getFractionDataWithLong:withOrgJodaTimeDateTimeField:", "getFractionData", "[J", 0x2, NULL },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iFieldType_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
    { "iMinDigits_", NULL, 0x4, "I", NULL,  },
    { "iMaxDigits_", NULL, 0x4, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction = { "Fraction", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 8, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset

- (instancetype)initWithNSString:(NSString *)zeroOffsetPrintText
                    withNSString:(NSString *)zeroOffsetParseText
                     withBoolean:(BOOL)showSeparators
                         withInt:(int)minFields
                         withInt:(int)maxFields {
  if (self = [super init]) {
    iZeroOffsetPrintText_ = zeroOffsetPrintText;
    iZeroOffsetParseText_ = zeroOffsetParseText;
    iShowSeparators_ = showSeparators;
    if (minFields <= 0 || maxFields < minFields) {
      @throw [[JavaLangIllegalArgumentException alloc] init];
    }
    if (minFields > 4) {
      minFields = 4;
      maxFields = 4;
    }
    iMinFields_ = minFields;
    iMaxFields_ = maxFields;
  }
  return self;
}

- (int)estimatePrintedLength {
  int est = 1 + iMinFields_ << 1;
  if (iShowSeparators_) {
    est += iMinFields_ - 1;
  }
  if (iZeroOffsetPrintText_ != nil && ((int) [iZeroOffsetPrintText_ length]) > est) {
    est = ((int) [iZeroOffsetPrintText_ length]);
  }
  return est;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)buf
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (displayZone == nil) {
    return;
  }
  if (displayOffset == 0 && iZeroOffsetPrintText_ != nil) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithJavaLangCharSequence:iZeroOffsetPrintText_];
    return;
  }
  if (displayOffset >= 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:'+'];
  }
  else {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:'-'];
    displayOffset = -displayOffset;
  }
  int hours = displayOffset / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:buf withInt:hours withInt:2];
  if (iMaxFields_ == 1) {
    return;
  }
  displayOffset -= hours * (int) OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  if (displayOffset == 0 && iMinFields_ <= 1) {
    return;
  }
  int minutes = displayOffset / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (iShowSeparators_) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:':'];
  }
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:buf withInt:minutes withInt:2];
  if (iMaxFields_ == 2) {
    return;
  }
  displayOffset -= minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (displayOffset == 0 && iMinFields_ <= 2) {
    return;
  }
  int seconds = displayOffset / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (iShowSeparators_) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:':'];
  }
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:buf withInt:seconds withInt:2];
  if (iMaxFields_ == 3) {
    return;
  }
  displayOffset -= seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (displayOffset == 0 && iMinFields_ <= 3) {
    return;
  }
  if (iShowSeparators_) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:'.'];
  }
  [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:buf withInt:displayOffset withInt:3];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
}

- (int)estimateParsedLength {
  return [self estimatePrintedLength];
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  int limit = [((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position;
  if (iZeroOffsetParseText_ != nil) {
    if (((int) [iZeroOffsetParseText_ length]) == 0) {
      if (limit > 0) {
        unichar c = [text charAtWithInt:position];
        if (c == '-' || c == '+') {
          goto break_zeroOffset;
        }
      }
      [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setOffsetWithJavaLangInteger:[JavaLangInteger valueOfWithInt:0]];
      return position;
    }
    if ([OrgJodaTimeFormatDateTimeFormatterBuilder csStartsWithIgnoreCaseWithJavaLangCharSequence:text withInt:position withNSString:iZeroOffsetParseText_]) {
      [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setOffsetWithJavaLangInteger:[JavaLangInteger valueOfWithInt:0]];
      return position + ((int) [iZeroOffsetParseText_ length]);
    }
  }
  break_zeroOffset: ;
  if (limit <= 1) {
    return ~position;
  }
  BOOL negative;
  unichar c = [text charAtWithInt:position];
  if (c == '-') {
    negative = YES;
  }
  else if (c == '+') {
    negative = NO;
  }
  else {
    return ~position;
  }
  limit--;
  position++;
  if ([self digitCountWithJavaLangCharSequence:text withInt:position withInt:2] < 2) {
    return ~position;
  }
  int offset;
  int hours = [OrgJodaTimeFormatFormatUtils parseTwoDigitsWithJavaLangCharSequence:text withInt:position];
  if (hours > 23) {
    return ~position;
  }
  offset = hours * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  limit -= 2;
  position += 2;
  {
    if (limit <= 0) {
      goto break_parse;
    }
    BOOL expectSeparators;
    c = [text charAtWithInt:position];
    if (c == ':') {
      expectSeparators = YES;
      limit--;
      position++;
    }
    else if (c >= '0' && c <= '9') {
      expectSeparators = NO;
    }
    else {
      goto break_parse;
    }
    int count = [self digitCountWithJavaLangCharSequence:text withInt:position withInt:2];
    if (count == 0 && !expectSeparators) {
      goto break_parse;
    }
    else if (count < 2) {
      return ~position;
    }
    int minutes = [OrgJodaTimeFormatFormatUtils parseTwoDigitsWithJavaLangCharSequence:text withInt:position];
    if (minutes > 59) {
      return ~position;
    }
    offset += minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
    limit -= 2;
    position += 2;
    if (limit <= 0) {
      goto break_parse;
    }
    if (expectSeparators) {
      if ([text charAtWithInt:position] != ':') {
        goto break_parse;
      }
      limit--;
      position++;
    }
    count = [self digitCountWithJavaLangCharSequence:text withInt:position withInt:2];
    if (count == 0 && !expectSeparators) {
      goto break_parse;
    }
    else if (count < 2) {
      return ~position;
    }
    int seconds = [OrgJodaTimeFormatFormatUtils parseTwoDigitsWithJavaLangCharSequence:text withInt:position];
    if (seconds > 59) {
      return ~position;
    }
    offset += seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
    limit -= 2;
    position += 2;
    if (limit <= 0) {
      goto break_parse;
    }
    if (expectSeparators) {
      if ([text charAtWithInt:position] != '.' && [text charAtWithInt:position] != ',') {
        goto break_parse;
      }
      limit--;
      position++;
    }
    count = [self digitCountWithJavaLangCharSequence:text withInt:position withInt:3];
    if (count == 0 && !expectSeparators) {
      goto break_parse;
    }
    else if (count < 1) {
      return ~position;
    }
    offset += ([text charAtWithInt:position++] - '0') * 100;
    if (count > 1) {
      offset += ([text charAtWithInt:position++] - '0') * 10;
      if (count > 2) {
        offset += [text charAtWithInt:position++] - '0';
      }
    }
  }
  break_parse: ;
  [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setOffsetWithJavaLangInteger:[JavaLangInteger valueOfWithInt:negative ? -offset : offset]];
  return position;
}

- (int)digitCountWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                  withInt:(int)position
                                  withInt:(int)amount {
  int limit = [JavaLangMath minWithInt:[((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] - position withInt:amount];
  amount = 0;
  for (; limit > 0; limit--) {
    unichar c = [text charAtWithInt:position + amount];
    if (c < '0' || c > '9') {
      break;
    }
    amount++;
  }
  return amount;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset *)other {
  [super copyAllFieldsTo:other];
  other->iMaxFields_ = iMaxFields_;
  other->iMinFields_ = iMinFields_;
  other->iShowSeparators_ = iShowSeparators_;
  other->iZeroOffsetParseText_ = iZeroOffsetParseText_;
  other->iZeroOffsetPrintText_ = iZeroOffsetPrintText_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withBoolean:withInt:withInt:", "TimeZoneOffset", NULL, 0x0, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
    { "digitCountWithJavaLangCharSequence:withInt:withInt:", "digitCount", "I", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iZeroOffsetPrintText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iZeroOffsetParseText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iShowSeparators_", NULL, 0x12, "Z", NULL,  },
    { "iMinFields_", NULL, 0x12, "I", NULL,  },
    { "iMaxFields_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset = { "TimeZoneOffset", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 7, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName

- (instancetype)initWithInt:(int)type
            withJavaUtilMap:(id<JavaUtilMap>)parseLookup {
  if (self = [super init]) {
    iType_ = type;
    iParseLookup_ = parseLookup;
  }
  return self;
}

- (int)estimatePrintedLength {
  return (iType_ == OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME ? 4 : 20);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[self printWithLong:instant - displayOffset withOrgJodaTimeDateTimeZone:displayZone withJavaUtilLocale:locale]];
}

- (NSString *)printWithLong:(long long int)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (displayZone == nil) {
    return @"";
  }
  switch (iType_) {
    case OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME:
    return [((OrgJodaTimeDateTimeZone *) nil_chk(displayZone)) getNameWithLong:instant withJavaUtilLocale:locale];
    case OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME:
    return [((OrgJodaTimeDateTimeZone *) nil_chk(displayZone)) getShortNameWithLong:instant withJavaUtilLocale:locale];
  }
  return @"";
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
}

- (int)estimateParsedLength {
  return (iType_ == OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME ? 4 : 20);
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  id<JavaUtilMap> parseLookup = iParseLookup_;
  parseLookup = (parseLookup != nil ? parseLookup : [OrgJodaTimeDateTimeUtils getDefaultTimeZoneNames]);
  NSString *matched = nil;
  for (NSString * __strong name in nil_chk([parseLookup keySet])) {
    if ([OrgJodaTimeFormatDateTimeFormatterBuilder csStartsWithWithJavaLangCharSequence:text withInt:position withNSString:name]) {
      if (matched == nil || ((int) [((NSString *) nil_chk(name)) length]) > ((int) [matched length])) {
        matched = name;
      }
    }
  }
  if (matched != nil) {
    [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setZoneWithOrgJodaTimeDateTimeZone:[parseLookup getWithId:matched]];
    return position + ((int) [matched length]);
  }
  return ~position;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *)other {
  [super copyAllFieldsTo:other];
  other->iParseLookup_ = iParseLookup_;
  other->iType_ = iType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withJavaUtilMap:", "TimeZoneName", NULL, 0x0, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printWithLong:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "print", "Ljava.lang.String;", 0x2, NULL },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LONG_NAME_", NULL, 0x18, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME },
    { "SHORT_NAME_", NULL, 0x18, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME },
    { "iParseLookup_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "iType_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName = { "TimeZoneName", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 7, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName;
}

@end

BOOL OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_initialized = NO;

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_values[1];

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum

id<JavaUtilSet> OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_ALL_IDS_;
int OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_MAX_LENGTH_;

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (int)estimatePrintedLength {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_MAX_LENGTH_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:displayZone != nil ? [displayZone getID] : @""];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
}

- (int)estimateParsedLength {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_MAX_LENGTH_;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  NSString *best = nil;
  for (NSString * __strong id_ in nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_ALL_IDS_)) {
    if ([OrgJodaTimeFormatDateTimeFormatterBuilder csStartsWithWithJavaLangCharSequence:text withInt:position withNSString:id_]) {
      if (best == nil || ((int) [((NSString *) nil_chk(id_)) length]) > ((int) [best length])) {
        best = id_;
      }
    }
  }
  if (best != nil) {
    [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setZoneWithOrgJodaTimeDateTimeZone:[OrgJodaTimeDateTimeZone forIDWithNSString:best]];
    return position + ((int) [best length]);
  }
  return ~position;
}

- (instancetype)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum class]) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_INSTANCE = [[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum alloc] initWithNSString:@"INSTANCE" withInt:0];
    OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_ALL_IDS_ = [OrgJodaTimeDateTimeZone getAvailableIDs];
    {
int max = 0;
for (NSString * __strong id_ in nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_ALL_IDS_)) {
max = [JavaLangMath maxWithInt:max withInt:((int) [((NSString *) nil_chk(id_)) length])];
}
OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_MAX_LENGTH_ = max;
}
    OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_initialized = YES;
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithObjects:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_values count:1 type:[IOSClass classWithClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum class]]];
}

+ (OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < 1; i++) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum *e = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_values[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x4019, "Lorg.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;", &OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_INSTANCE,  },
    { "ALL_IDS_", NULL, 0x18, "Ljava.util.Set;", &OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_ALL_IDS_,  },
    { "MAX_LENGTH_", NULL, 0x18, "I", &OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum_MAX_LENGTH_,  },
  };
  static const char *superclass_type_args[] = {"Lorg.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;"};
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum = { "TimeZoneId", "org.joda.time.format", "DateTimeFormatterBuilder", 0x4018, 6, methods, 3, fields, 1, superclass_type_args};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneIdEnum;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_Composite

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)elementPairs {
  if (self = [super init]) {
    id<JavaUtilList> printerList = [[JavaUtilArrayList alloc] init];
    id<JavaUtilList> parserList = [[JavaUtilArrayList alloc] init];
    [self decomposeWithJavaUtilList:elementPairs withJavaUtilList:printerList withJavaUtilList:parserList];
    if ([printerList containsWithId:nil] || [printerList isEmpty]) {
      iPrinters_ = nil;
      iPrintedLengthEstimate_ = 0;
    }
    else {
      int size = [printerList size];
      iPrinters_ = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeFormatInternalPrinter)]];
      int printEst = 0;
      for (int i = 0; i < size; i++) {
        id<OrgJodaTimeFormatInternalPrinter> printer = (id<OrgJodaTimeFormatInternalPrinter>) check_protocol_cast([printerList getWithInt:i], @protocol(OrgJodaTimeFormatInternalPrinter));
        printEst += [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) estimatePrintedLength];
        (void) IOSObjectArray_Set(iPrinters_, i, printer);
      }
      iPrintedLengthEstimate_ = printEst;
    }
    if ([parserList containsWithId:nil] || [parserList isEmpty]) {
      iParsers_ = nil;
      iParsedLengthEstimate_ = 0;
    }
    else {
      int size = [parserList size];
      iParsers_ = [IOSObjectArray arrayWithLength:size type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeFormatInternalParser)]];
      int parseEst = 0;
      for (int i = 0; i < size; i++) {
        id<OrgJodaTimeFormatInternalParser> parser = (id<OrgJodaTimeFormatInternalParser>) check_protocol_cast([parserList getWithInt:i], @protocol(OrgJodaTimeFormatInternalParser));
        parseEst += [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) estimateParsedLength];
        (void) IOSObjectArray_Set(iParsers_, i, parser);
      }
      iParsedLengthEstimate_ = parseEst;
    }
  }
  return self;
}

- (int)estimatePrintedLength {
  return iPrintedLengthEstimate_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(long long int)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(int)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *elements = iPrinters_;
  if (elements == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  int len = (int) [((IOSObjectArray *) nil_chk(elements)) count];
  for (int i = 0; i < len; i++) {
    [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(IOSObjectArray_Get(elements, i))) printToWithJavaLangAppendable:appendable withLong:instant withOrgJodaTimeChronology:chrono withInt:displayOffset withOrgJodaTimeDateTimeZone:displayZone withJavaUtilLocale:locale];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *elements = iPrinters_;
  if (elements == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  int len = (int) [((IOSObjectArray *) nil_chk(elements)) count];
  for (int i = 0; i < len; i++) {
    [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(IOSObjectArray_Get(elements, i))) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
  }
}

- (int)estimateParsedLength {
  return iParsedLengthEstimate_;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  IOSObjectArray *elements = iParsers_;
  if (elements == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
  int len = (int) [((IOSObjectArray *) nil_chk(elements)) count];
  for (int i = 0; i < len && position >= 0; i++) {
    position = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(IOSObjectArray_Get(elements, i))) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  }
  return position;
}

- (BOOL)isPrinter {
  return iPrinters_ != nil;
}

- (BOOL)isParser {
  return iParsers_ != nil;
}

- (void)decomposeWithJavaUtilList:(id<JavaUtilList>)elementPairs
                 withJavaUtilList:(id<JavaUtilList>)printerList
                 withJavaUtilList:(id<JavaUtilList>)parserList {
  int size = [((id<JavaUtilList>) nil_chk(elementPairs)) size];
  for (int i = 0; i < size; i += 2) {
    id element = [elementPairs getWithInt:i];
    if ([element isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      [self addArrayToListWithJavaUtilList:printerList withNSObjectArray:((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) check_class_cast(element, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]))))->iPrinters_];
    }
    else {
      [((id<JavaUtilList>) nil_chk(printerList)) addWithId:element];
    }
    element = [elementPairs getWithInt:i + 1];
    if ([element isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      [self addArrayToListWithJavaUtilList:parserList withNSObjectArray:((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) check_class_cast(element, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]))))->iParsers_];
    }
    else {
      [((id<JavaUtilList>) nil_chk(parserList)) addWithId:element];
    }
  }
}

- (void)addArrayToListWithJavaUtilList:(id<JavaUtilList>)list
                     withNSObjectArray:(IOSObjectArray *)array {
  if (array != nil) {
    for (int i = 0; i < (int) [array count]; i++) {
      [((id<JavaUtilList>) nil_chk(list)) addWithId:IOSObjectArray_Get(array, i)];
    }
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *)other {
  [super copyAllFieldsTo:other];
  other->iParsedLengthEstimate_ = iParsedLengthEstimate_;
  other->iParsers_ = iParsers_;
  other->iPrintedLengthEstimate_ = iPrintedLengthEstimate_;
  other->iPrinters_ = iPrinters_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "Composite", NULL, 0x0, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
    { "isPrinter", NULL, "Z", 0x0, NULL },
    { "isParser", NULL, "Z", 0x0, NULL },
    { "decomposeWithJavaUtilList:withJavaUtilList:withJavaUtilList:", "decompose", "V", 0x2, NULL },
    { "addArrayToListWithJavaUtilList:withNSObjectArray:", "addArrayToList", "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iPrinters_", NULL, 0x12, "[Lorg.joda.time.format.InternalPrinter;", NULL,  },
    { "iParsers_", NULL, 0x12, "[Lorg.joda.time.format.InternalParser;", NULL,  },
    { "iPrintedLengthEstimate_", NULL, 0x12, "I", NULL,  },
    { "iParsedLengthEstimate_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_Composite = { "Composite", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 10, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_Composite;
}

@end

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser

- (instancetype)initWithOrgJodaTimeFormatInternalParserArray:(IOSObjectArray *)parsers {
  if (self = [super init]) {
    iParsers_ = parsers;
    int est = 0;
    for (int i = (int) [((IOSObjectArray *) nil_chk(parsers)) count]; --i >= 0; ) {
      id<OrgJodaTimeFormatInternalParser> parser = IOSObjectArray_Get(parsers, i);
      if (parser != nil) {
        int len = [parser estimateParsedLength];
        if (len > est) {
          est = len;
        }
      }
    }
    iParsedLengthEstimate_ = est;
  }
  return self;
}

- (int)estimateParsedLength {
  return iParsedLengthEstimate_;
}

- (int)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                  withInt:(int)position {
  IOSObjectArray *parsers = iParsers_;
  int length = (int) [((IOSObjectArray *) nil_chk(parsers)) count];
  id originalState = [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) saveState];
  BOOL isOptional = NO;
  int bestValidPos = position;
  id bestValidState = nil;
  int bestInvalidPos = position;
  for (int i = 0; i < length; i++) {
    id<OrgJodaTimeFormatInternalParser> parser = IOSObjectArray_Get(parsers, i);
    if (parser == nil) {
      if (bestValidPos <= position) {
        return position;
      }
      isOptional = YES;
      break;
    }
    int parsePos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
    if (parsePos >= position) {
      if (parsePos > bestValidPos) {
        if (parsePos >= [((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength] || (i + 1) >= length || IOSObjectArray_Get(parsers, i + 1) == nil) {
          return parsePos;
        }
        bestValidPos = parsePos;
        bestValidState = [bucket saveState];
      }
    }
    else {
      if (parsePos < 0) {
        parsePos = ~parsePos;
        if (parsePos > bestInvalidPos) {
          bestInvalidPos = parsePos;
        }
      }
    }
    [bucket restoreStateWithId:originalState];
  }
  if (bestValidPos > position || (bestValidPos == position && isOptional)) {
    if (bestValidState != nil) {
      [bucket restoreStateWithId:bestValidState];
    }
    return bestValidPos;
  }
  return ~bestInvalidPos;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser *)other {
  [super copyAllFieldsTo:other];
  other->iParsedLengthEstimate_ = iParsedLengthEstimate_;
  other->iParsers_ = iParsers_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatInternalParserArray:", "MatchingParser", NULL, 0x0, NULL },
    { "estimateParsedLength", NULL, "I", 0x1, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iParsers_", NULL, 0x12, "[Lorg.joda.time.format.InternalParser;", NULL,  },
    { "iParsedLengthEstimate_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser = { "MatchingParser", "org.joda.time.format", "DateTimeFormatterBuilder", 0x8, 3, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser;
}

@end
