//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/RemainderDateTimeField.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DecoratedDateTimeField.h"
#include "DividedDateTimeField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "RemainderDateTimeField.h"
#include "ScaledDurationField.h"
#include "java/lang/IllegalArgumentException.h"

@implementation OrgJodaTimeFieldRemainderDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)divisor {
  if (self = [super initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:type]) {
    if (divisor < 2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The divisor must be at least 2"];
    }
    OrgJodaTimeDurationField *rangeField = [((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField];
    if (rangeField == nil) {
      iRangeField_ = nil;
    }
    else {
      iRangeField_ = [[OrgJodaTimeFieldScaledDurationField alloc] initWithOrgJodaTimeDurationField:rangeField withOrgJodaTimeDurationFieldType:[((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getRangeDurationType] withInt:divisor];
    }
    iDurationField_ = [field getDurationField];
    iDivisor_ = divisor;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)divisor {
  if (self = [super initWithOrgJodaTimeDateTimeField:field withOrgJodaTimeDateTimeFieldType:type]) {
    if (divisor < 2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The divisor must be at least 2"];
    }
    iRangeField_ = rangeField;
    iDurationField_ = [((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField];
    iDivisor_ = divisor;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField {
  return [self initOrgJodaTimeFieldRemainderDateTimeFieldWithOrgJodaTimeFieldDividedDateTimeField:dividedField withOrgJodaTimeDateTimeFieldType:[((OrgJodaTimeFieldDividedDateTimeField *) nil_chk(dividedField)) getType]];
}

- (instancetype)initOrgJodaTimeFieldRemainderDateTimeFieldWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                                                                  withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [self initOrgJodaTimeFieldRemainderDateTimeFieldWithOrgJodaTimeFieldDividedDateTimeField:dividedField withOrgJodaTimeDurationField:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeFieldDividedDateTimeField *) nil_chk(dividedField)) getWrappedField])) getDurationField] withOrgJodaTimeDateTimeFieldType:type];
}

- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                            withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [self initOrgJodaTimeFieldRemainderDateTimeFieldWithOrgJodaTimeFieldDividedDateTimeField:dividedField withOrgJodaTimeDateTimeFieldType:type];
}

- (instancetype)initOrgJodaTimeFieldRemainderDateTimeFieldWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                                                                      withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                                                  withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (self = [super initWithOrgJodaTimeDateTimeField:[((OrgJodaTimeFieldDividedDateTimeField *) nil_chk(dividedField)) getWrappedField] withOrgJodaTimeDateTimeFieldType:type]) {
    iDivisor_ = dividedField->iDivisor_;
    iDurationField_ = durationField;
    iRangeField_ = dividedField->iDurationField_;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *)dividedField
                                withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [self initOrgJodaTimeFieldRemainderDateTimeFieldWithOrgJodaTimeFieldDividedDateTimeField:dividedField withOrgJodaTimeDurationField:durationField withOrgJodaTimeDateTimeFieldType:type];
}

- (int)getWithLong:(long long int)instant {
  int value = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
  if (value >= 0) {
    return value % iDivisor_;
  }
  else {
    return (iDivisor_ - 1) + ((value + 1) % iDivisor_);
  }
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount {
  return [self setWithLong:instant withInt:[OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:[self getWithLong:instant] withInt:amount withInt:0 withInt:iDivisor_ - 1]];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:value withInt:0 withInt:iDivisor_ - 1];
  int divided = [self getDividedWithInt:[((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant]];
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withInt:divided * iDivisor_ + value];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeField_;
}

- (int)getMinimumValue {
  return 0;
}

- (int)getMaximumValue {
  return iDivisor_ - 1;
}

- (long long int)roundFloorWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
}

- (long long int)roundHalfFloorWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfFloorWithLong:instant];
}

- (long long int)roundHalfCeilingWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfCeilingWithLong:instant];
}

- (long long int)roundHalfEvenWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundHalfEvenWithLong:instant];
}

- (long long int)remainderWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
}

- (int)getDivisor {
  return iDivisor_;
}

- (int)getDividedWithInt:(int)value {
  if (value >= 0) {
    return value / iDivisor_;
  }
  else {
    return ((value + 1) / iDivisor_) - 1;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldRemainderDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iDivisor_ = iDivisor_;
  other->iDurationField_ = iDurationField_;
  other->iRangeField_ = iRangeField_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeFieldType:withInt:", "RemainderDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDateTimeFieldType:withInt:", "RemainderDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeFieldDividedDateTimeField:", "RemainderDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeFieldDividedDateTimeField:withOrgJodaTimeDateTimeFieldType:", "RemainderDateTimeField", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeFieldDividedDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDateTimeFieldType:", "RemainderDateTimeField", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "roundHalfFloorWithLong:", "roundHalfFloor", "J", 0x1, NULL },
    { "roundHalfCeilingWithLong:", "roundHalfCeiling", "J", 0x1, NULL },
    { "roundHalfEvenWithLong:", "roundHalfEven", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "getDivisor", NULL, "I", 0x1, NULL },
    { "getDividedWithInt:", "getDivided", "I", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_RemainderDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldRemainderDateTimeField_serialVersionUID },
    { "iDivisor_", NULL, 0x10, "I", NULL,  },
    { "iDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL,  },
    { "iRangeField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldRemainderDateTimeField = { "RemainderDateTimeField", "org.joda.time.field", NULL, 0x1, 20, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFieldRemainderDateTimeField;
}

@end
