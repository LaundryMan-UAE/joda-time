//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/LimitChronology.java
//

#ifndef _OrgJodaTimeChronoLimitChronology_H_
#define _OrgJodaTimeChronoLimitChronology_H_

@class JavaUtilHashMap;
@class JavaUtilLocale;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;
@protocol OrgJodaTimeReadableDateTime;

#import "JreEmulation.h"
#include "AssembledChronology.h"
#include "DecoratedDateTimeField.h"
#include "DecoratedDurationField.h"
#include "java/lang/IllegalArgumentException.h"

#define OrgJodaTimeChronoLimitChronology_serialVersionUID 7670866536893052522LL

/**
 @brief Wraps another Chronology to impose limits on the range of instants that the fields within a Chronology may support.
 The limits are applied to both DateTimeFields and DurationFields. <p> Methods in DateTimeField and DurationField throw an IllegalArgumentException whenever given an input instant that is outside the limits or when an attempt is made to move an instant outside the limits. <p> LimitChronology is thread-safe and immutable.
 @author Brian S O'Neill
 @author Stephen Colebourne
 @since 1.0
 */
@interface OrgJodaTimeChronoLimitChronology : OrgJodaTimeChronoAssembledChronology {
 @public
  OrgJodaTimeDateTime *iLowerLimit_;
  OrgJodaTimeDateTime *iUpperLimit_;
  OrgJodaTimeChronoLimitChronology *iWithUTC_;
}

/**
 @brief Wraps another chronology, with datetime limits.
 When withUTC or withZone is called, the returned LimitChronology instance has the same limits, except they are time zone adjusted.
 @param base base chronology to wrap
 @param lowerLimit inclusive lower limit, or null if none
 @param upperLimit exclusive upper limit, or null if none
 @throws IllegalArgumentException if chronology is null or limits are invalid
 */
+ (OrgJodaTimeChronoLimitChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)lowerLimit
                                           withOrgJodaTimeReadableDateTime:(id<OrgJodaTimeReadableDateTime>)upperLimit;

/**
 @brief Wraps another chronology, with datetime limits.
 When withUTC or withZone is called, the returned LimitChronology instance has the same limits, except they are time zone adjusted.
 @param lowerLimit inclusive lower limit, or null if none
 @param upperLimit exclusive upper limit, or null if none
 */
- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)lowerLimit
                      withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)upperLimit;

/**
 @brief Returns the inclusive lower limit instant.
 @return lower limit
 */
- (OrgJodaTimeDateTime *)getLowerLimit;

/**
 @brief Returns the inclusive upper limit instant.
 @return upper limit
 */
- (OrgJodaTimeDateTime *)getUpperLimit;

/**
 @brief If this LimitChronology is already UTC, then this is returned.
 Otherwise, a new instance is returned, with the limits adjusted to the new time zone.
 */
- (OrgJodaTimeChronology *)withUTC;

/**
 @brief If this LimitChronology has the same time zone as the one given, then this is returned.
 Otherwise, a new instance is returned, with the limits adjusted to the new time zone.
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay;

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond;

- (long long int)getDateTimeMillisWithLong:(long long int)instant
                                   withInt:(int)hourOfDay
                                   withInt:(int)minuteOfHour
                                   withInt:(int)secondOfMinute
                                   withInt:(int)millisOfSecond;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (void)checkLimitsWithLong:(long long int)instant
               withNSString:(NSString *)desc;

/**
 @brief A limit chronology is only equal to a limit chronology with the same base chronology and limits.
 @param obj the object to compare to
 @return true if equal
 @since 1.4
 */
- (BOOL)isEqual:(id)obj;

/**
 @brief A suitable hashcode for the chronology.
 @return the hashcode
 @since 1.4
 */
- (NSUInteger)hash;

/**
 @brief A debugging string for the chronology.
 @return the debugging string
 */
- (NSString *)description;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoLimitChronology_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology, iLowerLimit_, OrgJodaTimeDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology, iUpperLimit_, OrgJodaTimeDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology, iWithUTC_, OrgJodaTimeChronoLimitChronology *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoLimitChronology, serialVersionUID, long long int)

#define OrgJodaTimeChronoLimitChronology_LimitException_serialVersionUID -5924689995607498581LL

/**
 @brief Extends IllegalArgumentException such that the exception message is not generated unless it is actually requested.
 */
@interface OrgJodaTimeChronoLimitChronology_LimitException : JavaLangIllegalArgumentException {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
  BOOL iIsLow_;
}

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                                            withNSString:(NSString *)desc
                                             withBoolean:(BOOL)isLow;

- (NSString *)getMessage;

- (NSString *)description;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitException *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoLimitChronology_LimitException_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitException, this$0_, OrgJodaTimeChronoLimitChronology *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoLimitChronology_LimitException, serialVersionUID, long long int)

#define OrgJodaTimeChronoLimitChronology_LimitDurationField_serialVersionUID 8049297699408782284LL

@interface OrgJodaTimeChronoLimitChronology_LimitDurationField : OrgJodaTimeFieldDecoratedDurationField {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
}

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field;

- (int)getValueWithLong:(long long int)duration
               withLong:(long long int)instant;

- (long long int)getValueAsLongWithLong:(long long int)duration
                               withLong:(long long int)instant;

- (long long int)getMillisWithInt:(int)value
                         withLong:(long long int)instant;

- (long long int)getMillisWithLong:(long long int)value
                          withLong:(long long int)instant;

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount;

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount;

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant;

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoLimitChronology_LimitDurationField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDurationField, this$0_, OrgJodaTimeChronoLimitChronology *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoLimitChronology_LimitDurationField, serialVersionUID, long long int)

#define OrgJodaTimeChronoLimitChronology_LimitDateTimeField_serialVersionUID -2435306746995699312LL

@interface OrgJodaTimeChronoLimitChronology_LimitDateTimeField : OrgJodaTimeFieldDecoratedDateTimeField {
 @public
  OrgJodaTimeChronoLimitChronology *this$0_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
  OrgJodaTimeDurationField *iLeapDurationField_;
}

- (instancetype)initWithOrgJodaTimeChronoLimitChronology:(OrgJodaTimeChronoLimitChronology *)outer$
                            withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField;

- (int)getWithLong:(long long int)instant;

- (NSString *)getAsTextWithLong:(long long int)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithLong:(long long int)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount;

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount;

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount;

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant;

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant;

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value;

- (long long int)setWithLong:(long long int)instant
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeDurationField *)getDurationField;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (BOOL)isLeapWithLong:(long long int)instant;

- (int)getLeapAmountWithLong:(long long int)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (long long int)roundFloorWithLong:(long long int)instant;

- (long long int)roundCeilingWithLong:(long long int)instant;

- (long long int)roundHalfFloorWithLong:(long long int)instant;

- (long long int)roundHalfCeilingWithLong:(long long int)instant;

- (long long int)roundHalfEvenWithLong:(long long int)instant;

- (long long int)remainderWithLong:(long long int)instant;

- (int)getMinimumValueWithLong:(long long int)instant;

- (int)getMaximumValueWithLong:(long long int)instant;

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (int)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoLimitChronology_LimitDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoLimitChronology_LimitDateTimeField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, this$0_, OrgJodaTimeChronoLimitChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iRangeDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, iLeapDurationField_, OrgJodaTimeDurationField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoLimitChronology_LimitDateTimeField, serialVersionUID, long long int)

#endif // _OrgJodaTimeChronoLimitChronology_H_
