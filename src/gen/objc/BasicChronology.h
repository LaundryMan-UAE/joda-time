//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/BasicChronology.java
//

#ifndef _OrgJodaTimeChronoBasicChronology_H_
#define _OrgJodaTimeChronoBasicChronology_H_

@class IOSObjectArray;
@class JavaUtilLocale;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronoBasicChronology_YearInfo;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;

#import "JreEmulation.h"
#include "AssembledChronology.h"
#include "PreciseDateTimeField.h"

#define OrgJodaTimeChronoBasicChronology_CACHE_MASK 1023
#define OrgJodaTimeChronoBasicChronology_CACHE_SIZE 1024
#define OrgJodaTimeChronoBasicChronology_serialVersionUID 8283225332206808863LL

/**
 @brief Abstract implementation for calendar systems that use a typical day/month/year/leapYear model.
 Most of the utility methods required by subclasses are package-private, reflecting the intention that they be defined in the same package. <p> BasicChronology is thread-safe and immutable, and all subclasses must be as well.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @author Guy Allard
 @since 1.2, renamed from BaseGJChronology
 */
@interface OrgJodaTimeChronoBasicChronology : OrgJodaTimeChronoAssembledChronology {
 @public
  IOSObjectArray *iYearInfoCache_;
  int iMinDaysInFirstWeek_;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(int)minDaysInFirstWeek;

- (OrgJodaTimeDateTimeZone *)getZone;

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay;

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond;

- (int)getMinimumDaysInFirstWeek;

/**
 @brief Checks if this chronology instance equals another.
 @param obj the object to compare to
 @return true if equal
 @since 1.6
 */
- (BOOL)isEqual:(id)obj;

/**
 @brief A suitable hash code for the chronology.
 @return the hash code
 @since 1.6
 */
- (NSUInteger)hash;

/**
 @brief Gets a debugging toString.
 @return a debugging string
 */
- (NSString *)description;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

/**
 @brief Get the number of days in the year.
 @return 366
 */
- (int)getDaysInYearMax;

/**
 @brief Get the number of days in the year.
 @param year the year to use
 @return 366 if a leap year, otherwise 365
 */
- (int)getDaysInYearWithInt:(int)year;

/**
 @brief Get the number of weeks in the year.
 @param year the year to use
 @return number of weeks in the year
 */
- (int)getWeeksInYearWithInt:(int)year;

/**
 @brief Get the millis for the first week of a year.
 @param year the year to use
 @return millis
 */
- (long long int)getFirstWeekOfYearMillisWithInt:(int)year;

/**
 @brief Get the milliseconds for the start of a year.
 @param year The year to use.
 @return millis from 1970-01-01T00:00:00Z
 */
- (long long int)getYearMillisWithInt:(int)year;

/**
 @brief Get the milliseconds for the start of a month.
 @param year The year to use.
 @param month The month to use
 @return millis from 1970-01-01T00:00:00Z
 */
- (long long int)getYearMonthMillisWithInt:(int)year
                                   withInt:(int)month;

/**
 @brief Get the milliseconds for a particular date.
 @param year The year to use.
 @param month The month to use
 @param dayOfMonth The day of the month to use
 @return millis from 1970-01-01T00:00:00Z
 */
- (long long int)getYearMonthDayMillisWithInt:(int)year
                                      withInt:(int)month
                                      withInt:(int)dayOfMonth;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (int)getYearWithLong:(long long int)instant;

/**
 @param millis from 1970-01-01T00:00:00Z
 */
- (int)getMonthOfYearWithLong:(long long int)millis;

/**
 @param millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (int)getMonthOfYearWithLong:(long long int)millis
                      withInt:(int)year;

/**
 @param millis from 1970-01-01T00:00:00Z
 */
- (int)getDayOfMonthWithLong:(long long int)millis;

/**
 @param millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (int)getDayOfMonthWithLong:(long long int)millis
                     withInt:(int)year;

/**
 @param millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 @param month precalculated month of millis
 */
- (int)getDayOfMonthWithLong:(long long int)millis
                     withInt:(int)year
                     withInt:(int)month;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (int)getDayOfYearWithLong:(long long int)instant;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (int)getDayOfYearWithLong:(long long int)instant
                    withInt:(int)year;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (int)getWeekyearWithLong:(long long int)instant;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (int)getWeekOfWeekyearWithLong:(long long int)instant;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 @param year precalculated year of millis
 */
- (int)getWeekOfWeekyearWithLong:(long long int)instant
                         withInt:(int)year;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (int)getDayOfWeekWithLong:(long long int)instant;

/**
 @param instant millis from 1970-01-01T00:00:00Z
 */
- (int)getMillisOfDayWithLong:(long long int)instant;

/**
 @brief Gets the maximum number of days in any month.
 @return 31
 */
- (int)getDaysInMonthMax;

/**
 @brief Gets the maximum number of days in the month specified by the instant.
 @param instant millis from 1970-01-01T00:00:00Z
 @return the maximum number of days in the month
 */
- (int)getDaysInMonthMaxWithLong:(long long int)instant;

/**
 @brief Gets the maximum number of days in the month specified by the instant.
 The value represents what the user is trying to set, and can be used to optimise this method.
 @param instant millis from 1970-01-01T00:00:00Z
 @param value the value being set
 @return the maximum number of days in the month
 */
- (int)getDaysInMonthMaxForSetWithLong:(long long int)instant
                               withInt:(int)value;

/**
 @brief Gets the milliseconds for a date at midnight.
 @param year the year
 @param monthOfYear the month
 @param dayOfMonth the day
 @return the milliseconds
 */
- (long long int)getDateMidnightMillisWithInt:(int)year
                                      withInt:(int)monthOfYear
                                      withInt:(int)dayOfMonth;

/**
 @brief Gets the difference between the two instants in years.
 @param minuendInstant the first instant
 @param subtrahendInstant the second instant
 @return the difference
 */
- (long long int)getYearDifferenceWithLong:(long long int)minuendInstant
                                  withLong:(long long int)subtrahendInstant;

/**
 @brief Is the specified year a leap year?
 @param year the year to test
 @return true if leap
 */
- (BOOL)isLeapYearWithInt:(int)year;

/**
 @brief Is the specified instant a leap day?
 @param instant the instant to test
 @return true if leap, default is false
 */
- (BOOL)isLeapDayWithLong:(long long int)instant;

/**
 @brief Gets the number of days in the specified month and year.
 @param year the year
 @param month the month
 @return the number of days
 */
- (int)getDaysInYearMonthWithInt:(int)year
                         withInt:(int)month;

/**
 @brief Gets the maximum days in the specified month.
 @param month the month
 @return the max days
 */
- (int)getDaysInMonthMaxWithInt:(int)month;

/**
 @brief Gets the total number of millis elapsed in this year at the start of the specified month, such as zero for month 1.
 @param year the year
 @param month the month
 @return the elapsed millis at the start of the month
 */
- (long long int)getTotalMillisByYearMonthWithInt:(int)year
                                          withInt:(int)month;

/**
 @brief Gets the millisecond value of the first day of the year.
 @return the milliseconds for the first of the year
 */
- (long long int)calculateFirstDayOfYearMillisWithInt:(int)year;

/**
 @brief Gets the minimum supported year.
 @return the year
 */
- (int)getMinYear;

/**
 @brief Gets the maximum supported year.
 @return the year
 */
- (int)getMaxYear;

/**
 @brief Gets the maximum month for the specified year.
 This implementation calls getMaxMonth().
 @param year the year
 @return the maximum month value
 */
- (int)getMaxMonthWithInt:(int)year;

/**
 @brief Gets the maximum number of months.
 @return 12
 */
- (int)getMaxMonth;

/**
 @brief Gets an average value for the milliseconds per year.
 @return the millis per year
 */
- (long long int)getAverageMillisPerYear;

/**
 @brief Gets an average value for the milliseconds per year, divided by two.
 @return the millis per year divided by two
 */
- (long long int)getAverageMillisPerYearDividedByTwo;

/**
 @brief Gets an average value for the milliseconds per month.
 @return the millis per month
 */
- (long long int)getAverageMillisPerMonth;

/**
 @brief Returns a constant representing the approximate number of milliseconds elapsed from year 0 of this chronology, divided by two.
 This constant <em>must</em> be defined as: <pre> (yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch) / 2 </pre> where epoch is 1970-01-01 (Gregorian).
 */
- (long long int)getApproxMillisAtEpochDividedByTwo;

/**
 @brief Sets the year from an instant and year.
 @param instant millis from 1970-01-01T00:00:00Z
 @param year the year to set
 @return the updated millis
 */
- (long long int)setYearWithLong:(long long int)instant
                         withInt:(int)year;

- (OrgJodaTimeChronoBasicChronology_YearInfo *)getYearInfoWithInt:(int)year;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicChronology *)other;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeChronoBasicChronology_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeChronoBasicChronology)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoBasicChronology, iYearInfoCache_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, serialVersionUID, long long int)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cMillisField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cMillisField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cSecondsField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cSecondsField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cMinutesField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cMinutesField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cHoursField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cHoursField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cHalfdaysField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cHalfdaysField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cDaysField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cDaysField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDurationField *OrgJodaTimeChronoBasicChronology_cWeeksField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cWeeksField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMillisOfSecondField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cMillisOfSecondField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMillisOfDayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cMillisOfDayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cSecondOfMinuteField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cSecondOfMinuteField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cSecondOfDayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cSecondOfDayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMinuteOfHourField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cMinuteOfHourField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cMinuteOfDayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cMinuteOfDayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cHourOfDayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cHourOfDayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cHourOfHalfdayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cHourOfHalfdayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cClockhourOfDayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cClockhourOfDayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cClockhourOfHalfdayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cClockhourOfHalfdayField_, OrgJodaTimeDateTimeField *)

FOUNDATION_EXPORT OrgJodaTimeDateTimeField *OrgJodaTimeChronoBasicChronology_cHalfdayOfDayField_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, cHalfdayOfDayField_, OrgJodaTimeDateTimeField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, CACHE_SIZE, int)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology, CACHE_MASK, int)

#define OrgJodaTimeChronoBasicChronology_HalfdayField_serialVersionUID 581601443656929254LL

@interface OrgJodaTimeChronoBasicChronology_HalfdayField : OrgJodaTimeFieldPreciseDateTimeField {
}

- (instancetype)init;

- (NSString *)getAsTextWithInt:(int)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale;

- (long long int)setWithLong:(long long int)millis
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale;

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoBasicChronology_HalfdayField_init() {}

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoBasicChronology_HalfdayField, serialVersionUID, long long int)

@interface OrgJodaTimeChronoBasicChronology_YearInfo : NSObject {
 @public
  int iYear_;
  long long int iFirstDayMillis_;
}

- (instancetype)initWithInt:(int)year
                   withLong:(long long int)firstDayMillis;

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicChronology_YearInfo *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeChronoBasicChronology_YearInfo_init() {}

#endif // _OrgJodaTimeChronoBasicChronology_H_
