//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/base/BasePeriod.java
//

#include "AbstractPeriod.h"
#include "BaseLocal.h"
#include "BasePeriod.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTimeFieldType.h"
#include "DateTimeUtils.h"
#include "Duration.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "MutablePeriod.h"
#include "PeriodConverter.h"
#include "PeriodType.h"
#include "ReadWritablePeriod.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

BOOL OrgJodaTimeBaseBasePeriod_initialized = NO;

@implementation OrgJodaTimeBaseBasePeriod

id<OrgJodaTimeReadablePeriod> OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_;

- (instancetype)initWithInt:(int)years
                    withInt:(int)months
                    withInt:(int)weeks
                    withInt:(int)days
                    withInt:(int)hours
                    withInt:(int)minutes
                    withInt:(int)seconds
                    withInt:(int)millis
  withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    iType_ = type;
    iValues_ = [self setPeriodInternalWithInt:years withInt:months withInt:weeks withInt:days withInt:hours withInt:minutes withInt:seconds withInt:millis];
  }
  return self;
}

- (instancetype)initWithLong:(long long int)startInstant
                    withLong:(long long int)endInstant
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
    iType_ = type;
    iValues_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startInstant withLong:endInstant];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    if (startInstant == nil && endInstant == nil) {
      iType_ = type;
      iValues_ = [IOSIntArray arrayWithLength:[self size]];
    }
    else {
      long long int startMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:startInstant];
      long long int endMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:endInstant];
      OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getIntervalChronologyWithOrgJodaTimeReadableInstant:startInstant withOrgJodaTimeReadableInstant:endInstant];
      iType_ = type;
      iValues_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis];
    }
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                    withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    if (start == nil || end == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must not be null"];
    }
    if ([(id) start isKindOfClass:[OrgJodaTimeBaseBaseLocal class]] && [(id) end isKindOfClass:[OrgJodaTimeBaseBaseLocal class]] && [((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getClass] == [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) getClass]) {
      type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
      long long int startMillis = [((OrgJodaTimeBaseBaseLocal *) check_class_cast(start, [OrgJodaTimeBaseBaseLocal class])) getLocalMillis];
      long long int endMillis = [((OrgJodaTimeBaseBaseLocal *) check_class_cast(end, [OrgJodaTimeBaseBaseLocal class])) getLocalMillis];
      OrgJodaTimeChronology *chrono = [start getChronology];
      chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
      iType_ = type;
      iValues_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis];
    }
    else {
      if ([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) size] != [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) size]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must have the same set of fields"];
      }
      for (int i = 0, isize = [start size]; i < isize; i++) {
        if ([start getFieldTypeWithInt:i] != [end getFieldTypeWithInt:i]) {
          @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must have the same set of fields"];
        }
      }
      if ([OrgJodaTimeDateTimeUtils isContiguousWithOrgJodaTimeReadablePartial:start] == NO) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"ReadablePartial objects must be contiguous"];
      }
      iType_ = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
      OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:[start getChronology]])) withUTC];
      iValues_ = [chrono getWithOrgJodaTimeReadablePeriod:self withLong:[((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:start withLong:0LL] withLong:[chrono setWithOrgJodaTimeReadablePartial:end withLong:0LL]];
    }
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    long long int startMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:startInstant];
    long long int durationMillis = [OrgJodaTimeDateTimeUtils getDurationMillisWithOrgJodaTimeReadableDuration:duration];
    long long int endMillis = [OrgJodaTimeFieldFieldUtils safeAddWithLong:startMillis withLong:durationMillis];
    OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:startInstant];
    iType_ = type;
    iValues_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis];
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                          withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    long long int durationMillis = [OrgJodaTimeDateTimeUtils getDurationMillisWithOrgJodaTimeReadableDuration:duration];
    long long int endMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:endInstant];
    long long int startMillis = [OrgJodaTimeFieldFieldUtils safeSubtractWithLong:endMillis withLong:durationMillis];
    OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:endInstant];
    iType_ = type;
    iValues_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis];
  }
  return self;
}

- (instancetype)initWithLong:(long long int)duration {
  if (self = [super init]) {
    iType_ = [OrgJodaTimePeriodType standard];
    IOSIntArray *values = [((OrgJodaTimeChronoISOChronology *) nil_chk([OrgJodaTimeChronoISOChronology getInstanceUTC])) getWithOrgJodaTimeReadablePeriod:OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_ withLong:duration];
    iValues_ = [IOSIntArray arrayWithLength:8];
    [JavaLangSystem arraycopyWithId:values withInt:0 withId:iValues_ withInt:4 withInt:4];
  }
  return self;
}

- (instancetype)initWithLong:(long long int)duration
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
    iType_ = type;
    iValues_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:duration];
  }
  return self;
}

- (instancetype)initWithId:(id)period
 withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPeriodConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk([OrgJodaTimeConvertConverterManager getInstance])) getPeriodConverterWithId:period];
    type = (type == nil ? [((id<OrgJodaTimeConvertPeriodConverter>) nil_chk(converter)) getPeriodTypeWithId:period] : type);
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    iType_ = type;
    if ([self conformsToProtocol: @protocol(OrgJodaTimeReadWritablePeriod)]) {
      iValues_ = [IOSIntArray arrayWithLength:[self size]];
      chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
      [((id<OrgJodaTimeConvertPeriodConverter>) nil_chk(converter)) setIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>) check_protocol_cast(self, @protocol(OrgJodaTimeReadWritablePeriod)) withId:period withOrgJodaTimeChronology:chrono];
    }
    else {
      iValues_ = [((OrgJodaTimeMutablePeriod *) [[OrgJodaTimeMutablePeriod alloc] initWithId:period withOrgJodaTimePeriodType:type withOrgJodaTimeChronology:chrono]) getValues];
    }
  }
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)values
       withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    iType_ = type;
    iValues_ = values;
  }
  return self;
}

- (OrgJodaTimePeriodType *)checkPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  return [OrgJodaTimeDateTimeUtils getPeriodTypeWithOrgJodaTimePeriodType:type];
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return iType_;
}

- (int)getValueWithInt:(int)index {
  return IOSIntArray_Get(nil_chk(iValues_), index);
}

- (OrgJodaTimeDuration *)toDurationFromWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant {
  long long int startMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:startInstant];
  OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:startInstant];
  long long int endMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:self withLong:startMillis withInt:1];
  return [[OrgJodaTimeDuration alloc] initWithLong:startMillis withLong:endMillis];
}

- (OrgJodaTimeDuration *)toDurationToWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant {
  long long int endMillis = [OrgJodaTimeDateTimeUtils getInstantMillisWithOrgJodaTimeReadableInstant:endInstant];
  OrgJodaTimeChronology *chrono = [OrgJodaTimeDateTimeUtils getInstantChronologyWithOrgJodaTimeReadableInstant:endInstant];
  long long int startMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:self withLong:endMillis withInt:-1];
  return [[OrgJodaTimeDuration alloc] initWithLong:startMillis withLong:endMillis];
}

- (void)checkAndUpdateWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                          withIntArray:(IOSIntArray *)values
                                               withInt:(int)newValue {
  int index = [self indexOfWithOrgJodaTimeDurationFieldType:type];
  if (index == -1) {
    if (newValue != 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Period does not support field '%@'", [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getName]]];
    }
  }
  else {
    (*IOSIntArray_GetRef(nil_chk(values), index)) = newValue;
  }
}

- (void)setPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period == nil) {
    [self setValuesWithIntArray:[IOSIntArray arrayWithLength:[self size]]];
  }
  else {
    [self setPeriodInternalWithOrgJodaTimeReadablePeriod:period];
  }
}

- (void)setPeriodInternalWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size]];
  for (int i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    int value = [period getValueWithInt:i];
    [self checkAndUpdateWithOrgJodaTimeDurationFieldType:type withIntArray:newValues withInt:value];
  }
  [self setValuesWithIntArray:newValues];
}

- (void)setPeriodWithInt:(int)years
                 withInt:(int)months
                 withInt:(int)weeks
                 withInt:(int)days
                 withInt:(int)hours
                 withInt:(int)minutes
                 withInt:(int)seconds
                 withInt:(int)millis {
  IOSIntArray *newValues = [self setPeriodInternalWithInt:years withInt:months withInt:weeks withInt:days withInt:hours withInt:minutes withInt:seconds withInt:millis];
  [self setValuesWithIntArray:newValues];
}

- (IOSIntArray *)setPeriodInternalWithInt:(int)years
                                  withInt:(int)months
                                  withInt:(int)weeks
                                  withInt:(int)days
                                  withInt:(int)hours
                                  withInt:(int)minutes
                                  withInt:(int)seconds
                                  withInt:(int)millis {
  IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size]];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType years] withIntArray:newValues withInt:years];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType months] withIntArray:newValues withInt:months];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType weeks] withIntArray:newValues withInt:weeks];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType days] withIntArray:newValues withInt:days];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType hours] withIntArray:newValues withInt:hours];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType minutes] withIntArray:newValues withInt:minutes];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds] withIntArray:newValues withInt:seconds];
  [self checkAndUpdateWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis] withIntArray:newValues withInt:millis];
  return newValues;
}

- (void)setFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                         withInt:(int)value {
  [self setFieldIntoWithIntArray:iValues_ withOrgJodaTimeDurationFieldType:field withInt:value];
}

- (void)setFieldIntoWithIntArray:(IOSIntArray *)values
withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                         withInt:(int)value {
  int index = [self indexOfWithOrgJodaTimeDurationFieldType:field];
  if (index == -1) {
    if (value != 0 || field == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Period does not support field '%@'", field]];
    }
  }
  else {
    (*IOSIntArray_GetRef(nil_chk(values), index)) = value;
  }
}

- (void)addFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                         withInt:(int)value {
  [self addFieldIntoWithIntArray:iValues_ withOrgJodaTimeDurationFieldType:field withInt:value];
}

- (void)addFieldIntoWithIntArray:(IOSIntArray *)values
withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                         withInt:(int)value {
  int index = [self indexOfWithOrgJodaTimeDurationFieldType:field];
  if (index == -1) {
    if (value != 0 || field == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Period does not support field '%@'", field]];
    }
  }
  else {
    (*IOSIntArray_GetRef(nil_chk(values), index)) = [OrgJodaTimeFieldFieldUtils safeAddWithInt:IOSIntArray_Get(values, index) withInt:value];
  }
}

- (void)mergePeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period != nil) {
    [self setValuesWithIntArray:[self mergePeriodIntoWithIntArray:[self getValues] withOrgJodaTimeReadablePeriod:period]];
  }
}

- (IOSIntArray *)mergePeriodIntoWithIntArray:(IOSIntArray *)values
               withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (int i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    int value = [period getValueWithInt:i];
    [self checkAndUpdateWithOrgJodaTimeDurationFieldType:type withIntArray:values withInt:value];
  }
  return values;
}

- (void)addPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period != nil) {
    [self setValuesWithIntArray:[self addPeriodIntoWithIntArray:[self getValues] withOrgJodaTimeReadablePeriod:period]];
  }
}

- (IOSIntArray *)addPeriodIntoWithIntArray:(IOSIntArray *)values
             withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (int i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    int value = [period getValueWithInt:i];
    if (value != 0) {
      int index = [self indexOfWithOrgJodaTimeDurationFieldType:type];
      if (index == -1) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Period does not support field '%@'", [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getName]]];
      }
      else {
        (*IOSIntArray_GetRef(nil_chk(values), index)) = [OrgJodaTimeFieldFieldUtils safeAddWithInt:[self getValueWithInt:index] withInt:value];
      }
    }
  }
  return values;
}

- (void)setValueWithInt:(int)index
                withInt:(int)value {
  (*IOSIntArray_GetRef(nil_chk(iValues_), index)) = value;
}

- (void)setValuesWithIntArray:(IOSIntArray *)values {
  [JavaLangSystem arraycopyWithId:values withInt:0 withId:iValues_ withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(iValues_)) count]];
}

+ (void)initialize {
  if (self == [OrgJodaTimeBaseBasePeriod class]) {
    OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_ = [[OrgJodaTimeBaseBasePeriod_$1 alloc] init];
    OrgJodaTimeBaseBasePeriod_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeBaseBasePeriod *)other {
  [super copyAllFieldsTo:other];
  other->iType_ = iType_;
  other->iValues_ = iValues_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithLong:withLong:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableDuration:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithOrgJodaTimeReadableDuration:withOrgJodaTimeReadableInstant:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithLong:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithLong:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithId:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL },
    { "initWithIntArray:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL },
    { "checkPeriodTypeWithOrgJodaTimePeriodType:", "checkPeriodType", "Lorg.joda.time.PeriodType;", 0x4, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "toDurationFromWithOrgJodaTimeReadableInstant:", "toDurationFrom", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "toDurationToWithOrgJodaTimeReadableInstant:", "toDurationTo", "Lorg.joda.time.Duration;", 0x1, NULL },
    { "checkAndUpdateWithOrgJodaTimeDurationFieldType:withIntArray:withInt:", "checkAndUpdate", "V", 0x2, NULL },
    { "setPeriodWithOrgJodaTimeReadablePeriod:", "setPeriod", "V", 0x4, NULL },
    { "setPeriodInternalWithOrgJodaTimeReadablePeriod:", "setPeriodInternal", "V", 0x2, NULL },
    { "setPeriodWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setPeriod", "V", 0x4, NULL },
    { "setPeriodInternalWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setPeriodInternal", "[I", 0x2, NULL },
    { "setFieldWithOrgJodaTimeDurationFieldType:withInt:", "setField", "V", 0x4, NULL },
    { "setFieldIntoWithIntArray:withOrgJodaTimeDurationFieldType:withInt:", "setFieldInto", "V", 0x4, NULL },
    { "addFieldWithOrgJodaTimeDurationFieldType:withInt:", "addField", "V", 0x4, NULL },
    { "addFieldIntoWithIntArray:withOrgJodaTimeDurationFieldType:withInt:", "addFieldInto", "V", 0x4, NULL },
    { "mergePeriodWithOrgJodaTimeReadablePeriod:", "mergePeriod", "V", 0x4, NULL },
    { "mergePeriodIntoWithIntArray:withOrgJodaTimeReadablePeriod:", "mergePeriodInto", "[I", 0x4, NULL },
    { "addPeriodWithOrgJodaTimeReadablePeriod:", "addPeriod", "V", 0x4, NULL },
    { "addPeriodIntoWithIntArray:withOrgJodaTimeReadablePeriod:", "addPeriodInto", "[I", 0x4, NULL },
    { "setValueWithInt:withInt:", "setValue", "V", 0x4, NULL },
    { "setValuesWithIntArray:", "setValues", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeBaseBasePeriod_serialVersionUID },
    { "DUMMY_PERIOD_", NULL, 0x1a, "Lorg.joda.time.ReadablePeriod;", &OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD_,  },
    { "iType_", NULL, 0x12, "Lorg.joda.time.PeriodType;", NULL,  },
    { "iValues_", NULL, 0x12, "[I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeBaseBasePeriod = { "BasePeriod", "org.joda.time.base", NULL, 0x401, 30, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeBaseBasePeriod;
}

@end

@implementation OrgJodaTimeBaseBasePeriod_$1

- (int)getValueWithInt:(int)index {
  return 0;
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return [OrgJodaTimePeriodType time];
}

- (instancetype)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeBaseBasePeriod_$1 = { "$1", "org.joda.time.base", "BasePeriod", 0x8000, 3, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeBaseBasePeriod_$1;
}

@end
