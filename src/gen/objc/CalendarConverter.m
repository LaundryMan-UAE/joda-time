//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/convert/CalendarConverter.java
//

#include "BuddhistChronology.h"
#include "CalendarConverter.h"
#include "Chronology.h"
#include "DateTimeZone.h"
#include "GJChronology.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "JulianChronology.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/TimeZone.h"

BOOL OrgJodaTimeConvertCalendarConverter_initialized = NO;

@implementation OrgJodaTimeConvertCalendarConverter

OrgJodaTimeConvertCalendarConverter * OrgJodaTimeConvertCalendarConverter_INSTANCE_;

- (instancetype)init {
  return [super init];
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (chrono != nil) {
    return chrono;
  }
  JavaUtilCalendar *cal = (JavaUtilCalendar *) check_class_cast(object, [JavaUtilCalendar class]);
  OrgJodaTimeDateTimeZone *zone = nil;
  @try {
    zone = OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_([((JavaUtilCalendar *) nil_chk(cal)) getTimeZone]);
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  return [self getChronologyWithId:cal withOrgJodaTimeDateTimeZone:zone];
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                   withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if ([((NSString *) nil_chk([[nil_chk(object) getClass] getName])) hasSuffix:@".BuddhistCalendar"]) {
    return OrgJodaTimeChronoBuddhistChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
  }
  else if ([object isKindOfClass:[JavaUtilGregorianCalendar class]]) {
    JavaUtilGregorianCalendar *gc = (JavaUtilGregorianCalendar *) check_class_cast(object, [JavaUtilGregorianCalendar class]);
    jlong cutover = [((JavaUtilDate *) nil_chk([gc getGregorianChange])) getTime];
    if (cutover == JavaLangLong_MIN_VALUE) {
      return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
    }
    else if (cutover == JavaLangLong_MAX_VALUE) {
      return OrgJodaTimeChronoJulianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
    }
    else {
      return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withLong_withInt_(zone, cutover, 4);
    }
  }
  else {
    return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
  }
}

- (jlong)getInstantMillisWithId:(id)object
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  JavaUtilCalendar *calendar = (JavaUtilCalendar *) check_class_cast(object, [JavaUtilCalendar class]);
  return [((JavaUtilDate *) nil_chk([((JavaUtilCalendar *) nil_chk(calendar)) getTime])) getTime];
}

- (IOSClass *)getSupportedType {
  return [IOSClass classWithClass:[JavaUtilCalendar class]];
}

+ (void)initialize {
  if (self == [OrgJodaTimeConvertCalendarConverter class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeConvertCalendarConverter_INSTANCE_, nil, [[OrgJodaTimeConvertCalendarConverter alloc] init]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeConvertCalendarConverter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CalendarConverter", NULL, 0x4, NULL },
    { "getChronologyWithId:withOrgJodaTimeChronology:", "getChronology", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getChronologyWithId:withOrgJodaTimeDateTimeZone:", "getChronology", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getInstantMillisWithId:withOrgJodaTimeChronology:", "getInstantMillis", "J", 0x1, NULL },
    { "getSupportedType", NULL, "Ljava.lang.Class;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x18, "Lorg.joda.time.convert.CalendarConverter;", &OrgJodaTimeConvertCalendarConverter_INSTANCE_,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeConvertCalendarConverter = { "CalendarConverter", "org.joda.time.convert", NULL, 0x10, 5, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeConvertCalendarConverter;
}

@end
