//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
//

#include "BasicChronology.h"
#include "BasicWeekOfWeekyearDateTimeField.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "ReadablePartial.h"

@implementation OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)weeks {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekOfWeekyear() withOrgJodaTimeDurationField:weeks]) {
    OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField_set_iChronology_(self, chronology);
  }
  return self;
}

- (jint)getWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekOfWeekyearWithLong:instant];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekyears];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  return [super roundFloorWithLong:instant + 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY] - 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  return [super roundCeilingWithLong:instant + 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY] - 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jlong)remainderWithLong:(jlong)instant {
  return [super remainderWithLong:instant + 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY];
}

- (jint)getMinimumValue {
  return 1;
}

- (jint)getMaximumValue {
  return 53;
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  jint weekyear = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant];
  return [iChronology_ getWeeksInYearWithInt:weekyear];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekyear()]) {
    jint weekyear = [partial getWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekyear()];
    return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:weekyear];
  }
  return 53;
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values {
  jint size = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size];
  for (jint i = 0; i < size; i++) {
    if ([partial getFieldTypeWithInt:i] == OrgJodaTimeDateTimeFieldType_weekyear()) {
      jint weekyear = IOSIntArray_Get(nil_chk(values), i);
      return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:weekyear];
    }
  }
  return 53;
}

- (jint)getMaximumValueForSetWithLong:(jlong)instant
                              withInt:(jint)value {
  return value > 52 ? [self getMaximumValueWithLong:instant] : 52;
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekOfWeekyear];
}

- (void)dealloc {
  OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField_set_iChronology_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField_set_iChronology_(other, iChronology_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:withOrgJodaTimeDurationField:", "BasicWeekOfWeekyearDateTimeField", NULL, 0x0, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueForSetWithLong:withInt:", "getMaximumValueForSet", "I", 0x4, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.chrono.BasicChronology;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField = { "BasicWeekOfWeekyearDateTimeField", "org.joda.time.chrono", NULL, 0x10, 13, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoBasicWeekOfWeekyearDateTimeField;
}

@end
