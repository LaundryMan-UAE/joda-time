//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/format/FormatUtils.java
//

#include "FormatUtils.h"
#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"

BOOL OrgJodaTimeFormatFormatUtils_initialized = NO;

@implementation OrgJodaTimeFormatFormatUtils

double OrgJodaTimeFormatFormatUtils_LOG_10_;

- (instancetype)init {
  return [super init];
}

+ (void)appendPaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                            withInt:(int)value
                                            withInt:(int)size {
  @try {
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withInt:value withInt:size];
  }
  @catch (JavaIoIOException *e) {
  }
}

+ (void)appendPaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appenadble
                                          withInt:(int)value
                                          withInt:(int)size {
  if (value < 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithChar:'-'];
    if (value != JavaLangInteger_MIN_VALUE) {
      value = -value;
    }
    else {
      for (; size > 10; size--) {
        (void) [appenadble appendWithChar:'0'];
      }
      (void) [appenadble appendWithJavaLangCharSequence:[NSString stringWithFormat:@"%lld", -(long long int) JavaLangInteger_MIN_VALUE]];
      return;
    }
  }
  if (value < 10) {
    for (; size > 1; size--) {
      (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithChar:'0'];
    }
    (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithChar:(unichar) (value + '0')];
  }
  else if (value < 100) {
    for (; size > 2; size--) {
      (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithChar:'0'];
    }
    int d = ((value + 1) * 13421772) >> 27;
    (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithChar:(unichar) (d + '0')];
    (void) [appenadble appendWithChar:(unichar) (value - (d << 3) - (d << 1) + '0')];
  }
  else {
    int digits;
    if (value < 1000) {
      digits = 3;
    }
    else if (value < 10000) {
      digits = 4;
    }
    else {
      digits = J2ObjCFpToInt(([JavaLangMath logWithDouble:value] / OrgJodaTimeFormatFormatUtils_LOG_10_)) + 1;
    }
    for (; size > digits; size--) {
      (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithChar:'0'];
    }
    (void) [((id<JavaLangAppendable>) nil_chk(appenadble)) appendWithJavaLangCharSequence:[JavaLangInteger toStringWithInt:value]];
  }
}

+ (void)appendPaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                           withLong:(long long int)value
                                            withInt:(int)size {
  @try {
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withLong:value withInt:size];
  }
  @catch (JavaIoIOException *e) {
  }
}

+ (void)appendPaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                         withLong:(long long int)value
                                          withInt:(int)size {
  int intValue = (int) value;
  if (intValue == value) {
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangAppendable:appendable withInt:intValue withInt:size];
  }
  else if (size <= 19) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[JavaLangLong toStringWithLong:value]];
  }
  else {
    if (value < 0) {
      (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'-'];
      if (value != JavaLangLong_MIN_VALUE) {
        value = -value;
      }
      else {
        for (; size > 19; size--) {
          (void) [appendable appendWithChar:'0'];
        }
        (void) [appendable appendWithJavaLangCharSequence:@"9223372036854775808"];
        return;
      }
    }
    int digits = J2ObjCFpToInt(([JavaLangMath logWithDouble:value] / OrgJodaTimeFormatFormatUtils_LOG_10_)) + 1;
    for (; size > digits; size--) {
      (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'0'];
    }
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[JavaLangLong toStringWithLong:value]];
  }
}

+ (void)writePaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                   withInt:(int)value
                                   withInt:(int)size {
  if (value < 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'-'];
    if (value != JavaLangInteger_MIN_VALUE) {
      value = -value;
    }
    else {
      for (; size > 10; size--) {
        [outArg writeWithInt:'0'];
      }
      [outArg writeWithNSString:[NSString stringWithFormat:@"%lld", -(long long int) JavaLangInteger_MIN_VALUE]];
      return;
    }
  }
  if (value < 10) {
    for (; size > 1; size--) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'0'];
    }
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:value + '0'];
  }
  else if (value < 100) {
    for (; size > 2; size--) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'0'];
    }
    int d = ((value + 1) * 13421772) >> 27;
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:d + '0'];
    [outArg writeWithInt:value - (d << 3) - (d << 1) + '0'];
  }
  else {
    int digits;
    if (value < 1000) {
      digits = 3;
    }
    else if (value < 10000) {
      digits = 4;
    }
    else {
      digits = J2ObjCFpToInt(([JavaLangMath logWithDouble:value] / OrgJodaTimeFormatFormatUtils_LOG_10_)) + 1;
    }
    for (; size > digits; size--) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'0'];
    }
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[JavaLangInteger toStringWithInt:value]];
  }
}

+ (void)writePaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                  withLong:(long long int)value
                                   withInt:(int)size {
  int intValue = (int) value;
  if (intValue == value) {
    [OrgJodaTimeFormatFormatUtils writePaddedIntegerWithJavaIoWriter:outArg withInt:intValue withInt:size];
  }
  else if (size <= 19) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[JavaLangLong toStringWithLong:value]];
  }
  else {
    if (value < 0) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'-'];
      if (value != JavaLangLong_MIN_VALUE) {
        value = -value;
      }
      else {
        for (; size > 19; size--) {
          [outArg writeWithInt:'0'];
        }
        [outArg writeWithNSString:@"9223372036854775808"];
        return;
      }
    }
    int digits = J2ObjCFpToInt(([JavaLangMath logWithDouble:value] / OrgJodaTimeFormatFormatUtils_LOG_10_)) + 1;
    for (; size > digits; size--) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'0'];
    }
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[JavaLangLong toStringWithLong:value]];
  }
}

+ (void)appendUnpaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                              withInt:(int)value {
  @try {
    [OrgJodaTimeFormatFormatUtils appendUnpaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withInt:value];
  }
  @catch (JavaIoIOException *e) {
  }
}

+ (void)appendUnpaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                            withInt:(int)value {
  if (value < 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'-'];
    if (value != JavaLangInteger_MIN_VALUE) {
      value = -value;
    }
    else {
      (void) [appendable appendWithJavaLangCharSequence:[NSString stringWithFormat:@"%lld", -(long long int) JavaLangInteger_MIN_VALUE]];
      return;
    }
  }
  if (value < 10) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:(unichar) (value + '0')];
  }
  else if (value < 100) {
    int d = ((value + 1) * 13421772) >> 27;
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:(unichar) (d + '0')];
    (void) [appendable appendWithChar:(unichar) (value - (d << 3) - (d << 1) + '0')];
  }
  else {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[JavaLangInteger toStringWithInt:value]];
  }
}

+ (void)appendUnpaddedIntegerWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                             withLong:(long long int)value {
  @try {
    [OrgJodaTimeFormatFormatUtils appendUnpaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>) check_protocol_cast(buf, @protocol(JavaLangAppendable)) withLong:value];
  }
  @catch (JavaIoIOException *e) {
  }
}

+ (void)appendUnpaddedIntegerWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                           withLong:(long long int)value {
  int intValue = (int) value;
  if (intValue == value) {
    [OrgJodaTimeFormatFormatUtils appendUnpaddedIntegerWithJavaLangAppendable:appendable withInt:intValue];
  }
  else {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:[JavaLangLong toStringWithLong:value]];
  }
}

+ (void)writeUnpaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                     withInt:(int)value {
  if (value < 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'-'];
    if (value != JavaLangInteger_MIN_VALUE) {
      value = -value;
    }
    else {
      [outArg writeWithNSString:[NSString stringWithFormat:@"%lld", -(long long int) JavaLangInteger_MIN_VALUE]];
      return;
    }
  }
  if (value < 10) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:value + '0'];
  }
  else if (value < 100) {
    int d = ((value + 1) * 13421772) >> 27;
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:d + '0'];
    [outArg writeWithInt:value - (d << 3) - (d << 1) + '0'];
  }
  else {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[JavaLangInteger toStringWithInt:value]];
  }
}

+ (void)writeUnpaddedIntegerWithJavaIoWriter:(JavaIoWriter *)outArg
                                    withLong:(long long int)value {
  int intValue = (int) value;
  if (intValue == value) {
    [OrgJodaTimeFormatFormatUtils writeUnpaddedIntegerWithJavaIoWriter:outArg withInt:intValue];
  }
  else {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[JavaLangLong toStringWithLong:value]];
  }
}

+ (int)calculateDigitCountWithLong:(long long int)value {
  if (value < 0) {
    if (value != JavaLangLong_MIN_VALUE) {
      return [OrgJodaTimeFormatFormatUtils calculateDigitCountWithLong:-value] + 1;
    }
    else {
      return 20;
    }
  }
  return (value < 10 ? 1 : (value < 100 ? 2 : (value < 1000 ? 3 : (value < 10000 ? 4 : (J2ObjCFpToInt(([JavaLangMath logWithDouble:value] / OrgJodaTimeFormatFormatUtils_LOG_10_)) + 1)))));
}

+ (int)parseTwoDigitsWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                      withInt:(int)position {
  int value = [((id<JavaLangCharSequence>) nil_chk(text)) charAtWithInt:position] - '0';
  return ((value << 3) + (value << 1)) + [text charAtWithInt:position + 1] - '0';
}

+ (NSString *)createErrorMessageWithNSString:(NSString *)text
                                     withInt:(int)errorPos {
  int sampleLen = errorPos + 32;
  NSString *sampleText;
  if (((int) [((NSString *) nil_chk(text)) length]) <= sampleLen + 3) {
    sampleText = text;
  }
  else {
    sampleText = [((NSString *) nil_chk([text substring:0 endIndex:sampleLen])) concat:@"..."];
  }
  if (errorPos <= 0) {
    return [NSString stringWithFormat:@"Invalid format: \"%@\"", sampleText];
  }
  if (errorPos >= ((int) [text length])) {
    return [NSString stringWithFormat:@"Invalid format: \"%@\" is too short", sampleText];
  }
  return [NSString stringWithFormat:@"Invalid format: \"%@\" is malformed at \"%@\"", sampleText, [((NSString *) nil_chk(sampleText)) substring:errorPos]];
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatFormatUtils class]) {
    OrgJodaTimeFormatFormatUtils_LOG_10_ = [JavaLangMath logWithDouble:10];
    OrgJodaTimeFormatFormatUtils_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "FormatUtils", NULL, 0x2, NULL },
    { "appendPaddedIntegerWithJavaLangStringBuffer:withInt:withInt:", "appendPaddedInteger", "V", 0x9, NULL },
    { "appendPaddedIntegerWithJavaLangAppendable:withInt:withInt:", "appendPaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "appendPaddedIntegerWithJavaLangStringBuffer:withLong:withInt:", "appendPaddedInteger", "V", 0x9, NULL },
    { "appendPaddedIntegerWithJavaLangAppendable:withLong:withInt:", "appendPaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "writePaddedIntegerWithJavaIoWriter:withInt:withInt:", "writePaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "writePaddedIntegerWithJavaIoWriter:withLong:withInt:", "writePaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "appendUnpaddedIntegerWithJavaLangStringBuffer:withInt:", "appendUnpaddedInteger", "V", 0x9, NULL },
    { "appendUnpaddedIntegerWithJavaLangAppendable:withInt:", "appendUnpaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "appendUnpaddedIntegerWithJavaLangStringBuffer:withLong:", "appendUnpaddedInteger", "V", 0x9, NULL },
    { "appendUnpaddedIntegerWithJavaLangAppendable:withLong:", "appendUnpaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "writeUnpaddedIntegerWithJavaIoWriter:withInt:", "writeUnpaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "writeUnpaddedIntegerWithJavaIoWriter:withLong:", "writeUnpaddedInteger", "V", 0x9, "Ljava.io.IOException;" },
    { "calculateDigitCountWithLong:", "calculateDigitCount", "I", 0x9, NULL },
    { "parseTwoDigitsWithJavaLangCharSequence:withInt:", "parseTwoDigits", "I", 0x8, NULL },
    { "createErrorMessageWithNSString:withInt:", "createErrorMessage", "Ljava.lang.String;", 0x8, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOG_10_", NULL, 0x1a, "D", &OrgJodaTimeFormatFormatUtils_LOG_10_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatFormatUtils = { "FormatUtils", "org.joda.time.format", NULL, 0x1, 16, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFormatFormatUtils;
}

@end
