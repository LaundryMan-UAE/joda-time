//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/BaseDateTimeField.java
//

#include "BaseDateTimeField.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IllegalFieldValueException.h"
#include "ReadablePartial.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeFieldBaseDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (self = [super init]) {
    if (type == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The type must not be null"];
    }
    iType_ = type;
  }
  return self;
}

- (OrgJodaTimeDateTimeFieldType *)getType {
  return iType_;
}

- (NSString *)getName {
  return [((OrgJodaTimeDateTimeFieldType *) nil_chk(iType_)) getName];
}

- (BOOL)isSupported {
  return YES;
}

- (int)getWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getAsTextWithLong:(long long int)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsTextWithInt:[self getWithLong:instant] withJavaUtilLocale:locale];
}

- (NSString *)getAsTextWithLong:(long long int)instant {
  return [self getAsTextWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getAsTextWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                              withInt:(int)fieldValue
                                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsTextWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsTextWithOrgJodaTimeReadablePartial:partial withInt:[((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) getWithOrgJodaTimeDateTimeFieldType:[self getType]] withJavaUtilLocale:locale];
}

- (NSString *)getAsTextWithInt:(int)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaLangInteger toStringWithInt:fieldValue];
}

- (NSString *)getAsShortTextWithLong:(long long int)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsShortTextWithInt:[self getWithLong:instant] withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(long long int)instant {
  return [self getAsShortTextWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getAsShortTextWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                                   withInt:(int)fieldValue
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsShortTextWithOrgJodaTimeReadablePartial:partial withInt:[((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) getWithOrgJodaTimeDateTimeFieldType:[self getType]] withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithInt:(int)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value {
  return [((OrgJodaTimeDurationField *) nil_chk([self getDurationField])) addWithLong:instant withInt:value];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  return [((OrgJodaTimeDurationField *) nil_chk([self getDurationField])) addWithLong:instant withLong:value];
}

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                           withInt:(int)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(int)valueToAdd {
  if (valueToAdd == 0) {
    return values;
  }
  OrgJodaTimeDateTimeField *nextField = nil;
  while (valueToAdd > 0) {
    int max = [self getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
    long long int proposed = IOSIntArray_Get(nil_chk(values), fieldIndex) + valueToAdd;
    if (proposed <= max) {
      (*IOSIntArray_GetRef(values, fieldIndex)) = (int) proposed;
      break;
    }
    if (nextField == nil) {
      if (fieldIndex == 0) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Maximum value exceeded for add"];
      }
      nextField = [((id<OrgJodaTimeReadablePartial>) nil_chk(instant)) getFieldWithInt:fieldIndex - 1];
      if ([((OrgJodaTimeDurationField *) nil_chk([self getRangeDurationField])) getType] != [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(nextField)) getDurationField])) getType]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Fields invalid for add"];
      }
    }
    valueToAdd -= (max + 1) - IOSIntArray_Get(values, fieldIndex);
    values = [((OrgJodaTimeDateTimeField *) nil_chk(nextField)) addWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex - 1 withIntArray:values withInt:1];
    (*IOSIntArray_GetRef(nil_chk(values), fieldIndex)) = [self getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
  }
  while (valueToAdd < 0) {
    int min = [self getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
    long long int proposed = IOSIntArray_Get(nil_chk(values), fieldIndex) + valueToAdd;
    if (proposed >= min) {
      (*IOSIntArray_GetRef(values, fieldIndex)) = (int) proposed;
      break;
    }
    if (nextField == nil) {
      if (fieldIndex == 0) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Maximum value exceeded for add"];
      }
      nextField = [((id<OrgJodaTimeReadablePartial>) nil_chk(instant)) getFieldWithInt:fieldIndex - 1];
      if ([((OrgJodaTimeDurationField *) nil_chk([self getRangeDurationField])) getType] != [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(nextField)) getDurationField])) getType]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Fields invalid for add"];
      }
    }
    valueToAdd -= (min - 1) - IOSIntArray_Get(values, fieldIndex);
    values = [((OrgJodaTimeDateTimeField *) nil_chk(nextField)) addWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex - 1 withIntArray:values withInt:-1];
    (*IOSIntArray_GetRef(nil_chk(values), fieldIndex)) = [self getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
  }
  return [self setWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:IOSIntArray_Get(nil_chk(values), fieldIndex)];
}

- (IOSIntArray *)addWrapPartialWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                                      withInt:(int)fieldIndex
                                                 withIntArray:(IOSIntArray *)values
                                                      withInt:(int)valueToAdd {
  if (valueToAdd == 0) {
    return values;
  }
  OrgJodaTimeDateTimeField *nextField = nil;
  while (valueToAdd > 0) {
    int max = [self getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
    long long int proposed = IOSIntArray_Get(nil_chk(values), fieldIndex) + valueToAdd;
    if (proposed <= max) {
      (*IOSIntArray_GetRef(values, fieldIndex)) = (int) proposed;
      break;
    }
    if (nextField == nil) {
      if (fieldIndex == 0) {
        valueToAdd -= (max + 1) - IOSIntArray_Get(values, fieldIndex);
        (*IOSIntArray_GetRef(values, fieldIndex)) = [self getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
        continue;
      }
      nextField = [((id<OrgJodaTimeReadablePartial>) nil_chk(instant)) getFieldWithInt:fieldIndex - 1];
      if ([((OrgJodaTimeDurationField *) nil_chk([self getRangeDurationField])) getType] != [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(nextField)) getDurationField])) getType]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Fields invalid for add"];
      }
    }
    valueToAdd -= (max + 1) - IOSIntArray_Get(values, fieldIndex);
    values = [((OrgJodaTimeDateTimeField *) nil_chk(nextField)) addWrapPartialWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex - 1 withIntArray:values withInt:1];
    (*IOSIntArray_GetRef(nil_chk(values), fieldIndex)) = [self getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
  }
  while (valueToAdd < 0) {
    int min = [self getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
    long long int proposed = IOSIntArray_Get(nil_chk(values), fieldIndex) + valueToAdd;
    if (proposed >= min) {
      (*IOSIntArray_GetRef(values, fieldIndex)) = (int) proposed;
      break;
    }
    if (nextField == nil) {
      if (fieldIndex == 0) {
        valueToAdd -= (min - 1) - IOSIntArray_Get(values, fieldIndex);
        (*IOSIntArray_GetRef(values, fieldIndex)) = [self getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
        continue;
      }
      nextField = [((id<OrgJodaTimeReadablePartial>) nil_chk(instant)) getFieldWithInt:fieldIndex - 1];
      if ([((OrgJodaTimeDurationField *) nil_chk([self getRangeDurationField])) getType] != [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(nextField)) getDurationField])) getType]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Fields invalid for add"];
      }
    }
    valueToAdd -= (min - 1) - IOSIntArray_Get(values, fieldIndex);
    values = [((OrgJodaTimeDateTimeField *) nil_chk(nextField)) addWrapPartialWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex - 1 withIntArray:values withInt:-1];
    (*IOSIntArray_GetRef(nil_chk(values), fieldIndex)) = [self getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
  }
  return [self setWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:IOSIntArray_Get(nil_chk(values), fieldIndex)];
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)value {
  int current = [self getWithLong:instant];
  int wrapped = [OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:current withInt:value withInt:[self getMinimumValueWithLong:instant] withInt:[self getMaximumValueWithLong:instant]];
  return [self setWithLong:instant withInt:wrapped];
}

- (IOSIntArray *)addWrapFieldWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                                    withInt:(int)fieldIndex
                                               withIntArray:(IOSIntArray *)values
                                                    withInt:(int)valueToAdd {
  int current = IOSIntArray_Get(nil_chk(values), fieldIndex);
  int wrapped = [OrgJodaTimeFieldFieldUtils getWrappedValueWithInt:current withInt:valueToAdd withInt:[self getMinimumValueWithOrgJodaTimeReadablePartial:instant] withInt:[self getMaximumValueWithOrgJodaTimeReadablePartial:instant]];
  return [self setWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:wrapped];
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getDurationField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getDurationField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSIntArray *)setWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(int)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(int)newValue {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:newValue withInt:[self getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values] withInt:[self getMaximumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values]];
  (*IOSIntArray_GetRef(nil_chk(values), fieldIndex)) = newValue;
  for (int i = fieldIndex + 1; i < [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i++) {
    OrgJodaTimeDateTimeField *field = [partial getFieldWithInt:i];
    if (IOSIntArray_Get(values, i) > [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMaximumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values]) {
      (*IOSIntArray_GetRef(values, i)) = [field getMaximumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values];
    }
    if (IOSIntArray_Get(values, i) < [field getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values]) {
      (*IOSIntArray_GetRef(values, i)) = [field getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values];
    }
  }
  return values;
}

- (long long int)setWithLong:(long long int)instant
                withNSString:(NSString *)text
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  int value = [self convertTextWithNSString:text withJavaUtilLocale:locale];
  return [self setWithLong:instant withInt:value];
}

- (long long int)setWithLong:(long long int)instant
                withNSString:(NSString *)text {
  return [self setWithLong:instant withNSString:text withJavaUtilLocale:nil];
}

- (IOSIntArray *)setWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                           withInt:(int)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                      withNSString:(NSString *)text
                                withJavaUtilLocale:(JavaUtilLocale *)locale {
  int value = [self convertTextWithNSString:text withJavaUtilLocale:locale];
  return [self setWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:value];
}

- (int)convertTextWithNSString:(NSString *)text
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    return [JavaLangInteger parseIntWithNSString:text];
  }
  @catch (JavaLangNumberFormatException *ex) {
    @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[self getType] withNSString:text];
  }
}

- (OrgJodaTimeDurationField *)getDurationField {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isLeapWithLong:(long long int)instant {
  return NO;
}

- (int)getLeapAmountWithLong:(long long int)instant {
  return 0;
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return nil;
}

- (int)getMinimumValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMinimumValueWithLong:(long long int)instant {
  return [self getMinimumValue];
}

- (int)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [self getMinimumValue];
}

- (int)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                        withIntArray:(IOSIntArray *)values {
  return [self getMinimumValueWithOrgJodaTimeReadablePartial:instant];
}

- (int)getMaximumValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getMaximumValueWithLong:(long long int)instant {
  return [self getMaximumValue];
}

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [self getMaximumValue];
}

- (int)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                        withIntArray:(IOSIntArray *)values {
  return [self getMaximumValueWithOrgJodaTimeReadablePartial:instant];
}

- (int)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  int max = [self getMaximumValue];
  if (max >= 0) {
    if (max < 10) {
      return 1;
    }
    else if (max < 100) {
      return 2;
    }
    else if (max < 1000) {
      return 3;
    }
  }
  return ((int) [((NSString *) nil_chk([JavaLangInteger toStringWithInt:max])) length]);
}

- (int)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (long long int)roundFloorWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  long long int newInstant = [self roundFloorWithLong:instant];
  if (newInstant != instant) {
    instant = [self addWithLong:newInstant withInt:1];
  }
  return instant;
}

- (long long int)roundHalfFloorWithLong:(long long int)instant {
  long long int floor = [self roundFloorWithLong:instant];
  long long int ceiling = [self roundCeilingWithLong:instant];
  long long int diffFromFloor = instant - floor;
  long long int diffToCeiling = ceiling - instant;
  if (diffFromFloor <= diffToCeiling) {
    return floor;
  }
  else {
    return ceiling;
  }
}

- (long long int)roundHalfCeilingWithLong:(long long int)instant {
  long long int floor = [self roundFloorWithLong:instant];
  long long int ceiling = [self roundCeilingWithLong:instant];
  long long int diffFromFloor = instant - floor;
  long long int diffToCeiling = ceiling - instant;
  if (diffToCeiling <= diffFromFloor) {
    return ceiling;
  }
  else {
    return floor;
  }
}

- (long long int)roundHalfEvenWithLong:(long long int)instant {
  long long int floor = [self roundFloorWithLong:instant];
  long long int ceiling = [self roundCeilingWithLong:instant];
  long long int diffFromFloor = instant - floor;
  long long int diffToCeiling = ceiling - instant;
  if (diffFromFloor < diffToCeiling) {
    return floor;
  }
  else if (diffToCeiling < diffFromFloor) {
    return ceiling;
  }
  else {
    if (([self getWithLong:ceiling] & 1) == 0) {
      return ceiling;
    }
    return floor;
  }
}

- (long long int)remainderWithLong:(long long int)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"DateTimeField[%@]", [self getName]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldBaseDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iType_ = iType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:", "BaseDateTimeField", NULL, 0x4, NULL },
    { "getType", NULL, "Lorg.joda.time.DateTimeFieldType;", 0x11, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x11, NULL },
    { "isSupported", NULL, "Z", 0x11, NULL },
    { "getWithLong:", "get", "I", 0x401, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsTextWithLong:", "getAsText", "Ljava.lang.String;", 0x11, NULL },
    { "getAsTextWithOrgJodaTimeReadablePartial:withInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsTextWithOrgJodaTimeReadablePartial:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x11, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithLong:", "getAsShortText", "Ljava.lang.String;", 0x11, NULL },
    { "getAsShortTextWithOrgJodaTimeReadablePartial:withInt:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "getAsShortTextWithOrgJodaTimeReadablePartial:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x11, NULL },
    { "getAsShortTextWithInt:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "add", "[I", 0x1, NULL },
    { "addWrapPartialWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "addWrapPartial", "[I", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "addWrapFieldWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "addWrapField", "[I", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x401, NULL },
    { "setWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "set", "[I", 0x1, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL },
    { "setWithLong:withNSString:", "set", "J", 0x11, NULL },
    { "setWithOrgJodaTimeReadablePartial:withInt:withIntArray:withNSString:withJavaUtilLocale:", "set", "[I", 0x1, NULL },
    { "convertTextWithNSString:withJavaUtilLocale:", "convertText", "I", 0x4, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x401, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x401, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x401, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:", "getMinimumValue", "I", 0x1, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMinimumValue", "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x401, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x401, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "roundHalfFloorWithLong:", "roundHalfFloor", "J", 0x1, NULL },
    { "roundHalfCeilingWithLong:", "roundHalfCeiling", "J", 0x1, NULL },
    { "roundHalfEvenWithLong:", "roundHalfEven", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iType_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldBaseDateTimeField = { "BaseDateTimeField", "org.joda.time.field", NULL, 0x401, 51, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFieldBaseDateTimeField;
}

@end
