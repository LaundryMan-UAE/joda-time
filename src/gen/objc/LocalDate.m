//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/LocalDate.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateMidnight.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "Interval.h"
#include "LocalDate.h"
#include "LocalDateTime.h"
#include "LocalTime.h"
#include "PartialConverter.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "ToString.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

BOOL OrgJodaTimeLocalDate_initialized = NO;

@implementation OrgJodaTimeLocalDate

id<JavaUtilSet> OrgJodaTimeLocalDate_DATE_DURATION_TYPES_;

+ (OrgJodaTimeLocalDate *)now {
  return OrgJodaTimeLocalDate_now();
}

+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalDate_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalDate_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalDate_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalDate *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalDate *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(date);
}

- (instancetype)init {
  return [self initOrgJodaTimeLocalDateWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeLocalDateWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis() withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(jlong)instant {
  return [self initOrgJodaTimeLocalDateWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstance()];
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [self initOrgJodaTimeLocalDateWithLong:instant withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone)];
}

- (instancetype)initOrgJodaTimeLocalDateWithLong:(jlong)instant
                       withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withLong:instant];
    chronology = [chronology withUTC];
    iLocalMillis_ = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) dayOfMonth])) roundFloorWithLong:localMillis];
    OrgJodaTimeLocalDate_set_iChronology_(self, chronology);
  }
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [self initOrgJodaTimeLocalDateWithId:instant withOrgJodaTimeChronology:(OrgJodaTimeChronology *) check_class_cast(nil, [OrgJodaTimeChronology class])];
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
    OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    OrgJodaTimeLocalDate_set_iChronology_(self, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
    IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateParser()];
    iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:0];
  }
  return self;
}

- (instancetype)initOrgJodaTimeLocalDateWithId:(id)instant
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
    chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
    chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
    OrgJodaTimeLocalDate_set_iChronology_(self, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
    IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateParser()];
    iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:0];
  }
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateWithId:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth {
  return [self initOrgJodaTimeLocalDateWithInt:year withInt:monthOfYear withInt:dayOfMonth withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()];
}

- (instancetype)initOrgJodaTimeLocalDateWithInt:(jint)year
                                        withInt:(jint)monthOfYear
                                        withInt:(jint)dayOfMonth
                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (self = [super init]) {
    chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
    jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:0];
    OrgJodaTimeLocalDate_set_iChronology_(self, chronology);
    iLocalMillis_ = instant;
  }
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeLocalDateWithInt:year withInt:monthOfYear withInt:dayOfMonth withOrgJodaTimeChronology:chronology];
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return [[[OrgJodaTimeLocalDate alloc] initWithLong:iLocalMillis_ withOrgJodaTimeChronology:OrgJodaTimeChronoISOChronology_getInstanceUTC()] autorelease];
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_get_UTC_())) isEqual:[((OrgJodaTimeChronology *) nil_chk(iChronology_)) getZone]] == NO) {
    return [[[OrgJodaTimeLocalDate alloc] initWithLong:iLocalMillis_ withOrgJodaTimeChronology:[iChronology_ withUTC]] autorelease];
  }
  return self;
}

- (jint)size {
  return 3;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalDate_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) year];
    case OrgJodaTimeLocalDate_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeLocalDate_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalDate_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDate_MONTH_OF_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDate_DAY_OF_MONTH:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
    default:
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"Invalid index: ", index)] autorelease];
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return NO;
  }
  OrgJodaTimeDurationFieldType *durType = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getDurationType];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalDate_DATE_DURATION_TYPES_)) containsWithId:durType] || [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(durType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getUnitMillis] >= [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDateTimeField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
  }
  return NO;
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return NO;
  }
  OrgJodaTimeDurationField *field = [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalDate_DATE_DURATION_TYPES_)) containsWithId:type] || [((OrgJodaTimeDurationField *) nil_chk(field)) getUnitMillis] >= [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDurationField *) nil_chk(field)) isSupported];
  }
  return NO;
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return YES;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeLocalDate *other = (OrgJodaTimeLocalDate *) check_class_cast(partial, [OrgJodaTimeLocalDate class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDate *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (NSUInteger)hash {
  jint hash_ = iHash_;
  if (hash_ == 0) {
    hash_ = iHash_ = [super hash];
  }
  return hash_;
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  check_protocol_cast(partial, @protocol(OrgJodaTimeReadablePartial));
  if (self == partial) {
    return 0;
  }
  if ([(id) partial isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeLocalDate *other = (OrgJodaTimeLocalDate *) check_class_cast(partial, [OrgJodaTimeLocalDate class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDate *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDay {
  return [self toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong localMillis = [self getLocalMillis] + 6LL * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jlong instant = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) convertLocalToUTCWithLong:localMillis withBoolean:NO];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth])) roundFloorWithLong:instant];
  return [[[OrgJodaTimeDateTime alloc] initWithLong:instant withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnight {
  return [self toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateTime alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withInt:0 withInt:0 withInt:0 withInt:0 withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTime {
  return [self toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return [[[OrgJodaTimeDateTime alloc] initWithLong:resolved withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeDateMidnight *)toDateMidnight {
  return [self toDateMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateMidnight *)toDateMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateMidnight alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeLocalDateTime *)toLocalDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time {
  if (time == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The time must not be null"] autorelease];
  }
  if ([self getChronology] != [((OrgJodaTimeLocalTime *) nil_chk(time)) getChronology]) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The chronology of the time does not match"] autorelease];
  }
  jlong localMillis = [self getLocalMillis] + [time getLocalMillis];
  return [[[OrgJodaTimeLocalDateTime alloc] initWithLong:localMillis withOrgJodaTimeChronology:[self getChronology]] autorelease];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time {
  return [self toDateTimeWithOrgJodaTimeLocalTime:time withOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time
                                withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (time == nil) {
    return [self toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:zone];
  }
  if ([self getChronology] != [((OrgJodaTimeLocalTime *) nil_chk(time)) getChronology]) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The chronology of the time does not match"] autorelease];
  }
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeDateTime alloc] initWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withInt:[time getHourOfDay] withInt:[time getMinuteOfHour] withInt:[time getSecondOfMinute] withInt:[time getMillisOfSecond] withOrgJodaTimeChronology:chrono] autorelease];
}

- (OrgJodaTimeInterval *)toInterval {
  return [self toIntervalWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeDateTime *start = [self toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:zone];
  OrgJodaTimeDateTime *end = [((OrgJodaTimeLocalDate *) nil_chk([self plusDaysWithInt:1])) toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:zone];
  return [[[OrgJodaTimeInterval alloc] initWithOrgJodaTimeReadableInstant:start withOrgJodaTimeReadableInstant:end] autorelease];
}

- (JavaUtilDate *)toDate {
  jint dom = [self getDayOfMonth];
  JavaUtilDate *date = [[[JavaUtilDate alloc] initWithInt:[self getYear] - 1900 withInt:[self getMonthOfYear] - 1 withInt:dom] autorelease];
  OrgJodaTimeLocalDate *check = OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(date);
  if ([((OrgJodaTimeLocalDate *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self]) {
    while ([check isEqual:self] == NO) {
      [date setTimeWithLong:[date getTime] + 3600000];
      check = OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(date);
    }
    while ([date getDate] == dom) {
      [date setTimeWithLong:[date getTime] - 1000];
    }
    [date setTimeWithLong:[date getTime] + 1000];
  }
  else if ([check isEqual:self]) {
    JavaUtilDate *earlier = [[[JavaUtilDate alloc] initWithLong:[date getTime] - [((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_getDefault())) getDSTSavings]] autorelease];
    if ([earlier getDate] == dom) {
      date = earlier;
    }
  }
  return date;
}

- (OrgJodaTimeLocalDate *)withLocalMillisWithLong:(jlong)newMillis {
  newMillis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(iChronology_)) dayOfMonth])) roundFloorWithLong:newMillis];
  return (newMillis == [self getLocalMillis] ? self : [[[OrgJodaTimeLocalDate alloc] initWithLong:newMillis withOrgJodaTimeChronology:[self getChronology]] autorelease]);
}

- (OrgJodaTimeLocalDate *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [self getLocalMillis];
  OrgJodaTimeChronology *chrono = [self getChronology];
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    jlong value = OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar);
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    if ([self isSupportedWithOrgJodaTimeDurationFieldType:type]) {
      instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:chrono])) addWithLong:instant withLong:value];
    }
  }
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalDate *)plusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalDate *)minusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) subtractWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) subtractWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) subtractWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) subtractWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The DateTimeFieldType must not be null"] autorelease];
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == NO) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"Field '", fieldType, @"' is not supported")] autorelease];
  }
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]]] autorelease];
}

- (jint)getEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) getWithLong:[self getLocalMillis]];
}

- (jint)getCenturyOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfCentury {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) getWithLong:[self getLocalMillis]];
}

- (jint)getYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getMonthOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekOfWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfMonth {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfWeek {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalDate *)withEraWithInt:(jint)era {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) setWithLong:[self getLocalMillis] withInt:era]];
}

- (OrgJodaTimeLocalDate *)withCenturyOfEraWithInt:(jint)centuryOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) setWithLong:[self getLocalMillis] withInt:centuryOfEra]];
}

- (OrgJodaTimeLocalDate *)withYearOfEraWithInt:(jint)yearOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) setWithLong:[self getLocalMillis] withInt:yearOfEra]];
}

- (OrgJodaTimeLocalDate *)withYearOfCenturyWithInt:(jint)yearOfCentury {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) setWithLong:[self getLocalMillis] withInt:yearOfCentury]];
}

- (OrgJodaTimeLocalDate *)withYearWithInt:(jint)year {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getLocalMillis] withInt:year]];
}

- (OrgJodaTimeLocalDate *)withWeekyearWithInt:(jint)weekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getLocalMillis] withInt:weekyear]];
}

- (OrgJodaTimeLocalDate *)withMonthOfYearWithInt:(jint)monthOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getLocalMillis] withInt:monthOfYear]];
}

- (OrgJodaTimeLocalDate *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getLocalMillis] withInt:weekOfWeekyear]];
}

- (OrgJodaTimeLocalDate *)withDayOfYearWithInt:(jint)dayOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getLocalMillis] withInt:dayOfYear]];
}

- (OrgJodaTimeLocalDate *)withDayOfMonthWithInt:(jint)dayOfMonth {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getLocalMillis] withInt:dayOfMonth]];
}

- (OrgJodaTimeLocalDate *)withDayOfWeekWithInt:(jint)dayOfWeek {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getLocalMillis] withInt:dayOfWeek]];
}

- (OrgJodaTimeLocalDate_Property *)era {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)centuryOfEra {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)yearOfCentury {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)yearOfEra {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)year {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)weekyear {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)monthOfYear {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)weekOfWeekyear {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)dayOfYear {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)dayOfMonth {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]] autorelease];
}

- (OrgJodaTimeLocalDate_Property *)dayOfWeek {
  return [[[OrgJodaTimeLocalDate_Property alloc] initWithOrgJodaTimeLocalDate:self withOrgJodaTimeDateTimeField:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]] autorelease];
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_date())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

- (void)dealloc {
  OrgJodaTimeLocalDate_set_iChronology_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeLocalDate *)other {
  [super copyAllFieldsTo:other];
  other->iLocalMillis_ = iLocalMillis_;
  OrgJodaTimeLocalDate_set_iChronology_(other, iChronology_);
  other->iHash_ = iHash_;
}

+ (void)initialize {
  if (self == [OrgJodaTimeLocalDate class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeLocalDate_DATE_DURATION_TYPES_, nil, [[JavaUtilHashSet alloc] init]);
    {
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_days()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_weeks()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_months()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_weekyears()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_years()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_centuries()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES_ addWithId:OrgJodaTimeDurationFieldType_eras()];
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeLocalDate)
  }
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toDateTimeAtMidnight {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toDateMidnight {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_toDateMidnightWithOrgJodaTimeDateTimeZone_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.LocalDate;", 0x9, NULL },
    { "init", "LocalDate", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "LocalDate", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "LocalDate", NULL, 0x1, NULL },
    { "initWithLong:", "LocalDate", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "LocalDate", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "LocalDate", NULL, 0x1, NULL },
    { "initWithId:", "LocalDate", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "LocalDate", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "LocalDate", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:", "LocalDate", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withOrgJodaTimeChronology:", "LocalDate", NULL, 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL },
    { "getWithOrgJodaTimeDateTimeFieldType:", "get", "I", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeFieldType:", "isSupported", "Z", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDurationFieldType:", "isSupported", "Z", 0x1, NULL },
    { "getLocalMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "compareToWithOrgJodaTimeReadablePartial:", "compareTo", "I", 0x1, NULL },
    { "toDateTimeAtStartOfDay", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:", "toDateTimeAtStartOfDay", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtMidnight", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:", "toDateTimeAtMidnight", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtCurrentTime", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:", "toDateTimeAtCurrentTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateMidnight", NULL, "Lorg.joda.time.DateMidnight;", 0x1, NULL },
    { "toDateMidnightWithOrgJodaTimeDateTimeZone:", "toDateMidnight", "Lorg.joda.time.DateMidnight;", 0x1, NULL },
    { "toLocalDateTimeWithOrgJodaTimeLocalTime:", "toLocalDateTime", "Lorg.joda.time.LocalDateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeLocalTime:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeWithOrgJodaTimeLocalTime:withOrgJodaTimeDateTimeZone:", "toDateTime", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toInterval", NULL, "Lorg.joda.time.Interval;", 0x1, NULL },
    { "toIntervalWithOrgJodaTimeDateTimeZone:", "toInterval", "Lorg.joda.time.Interval;", 0x1, NULL },
    { "toDate", NULL, "Ljava.util.Date;", 0x1, NULL },
    { "withLocalMillisWithLong:", "withLocalMillis", "Lorg.joda.time.LocalDate;", 0x0, NULL },
    { "withFieldsWithOrgJodaTimeReadablePartial:", "withFields", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "plusYearsWithInt:", "plusYears", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "plusMonthsWithInt:", "plusMonths", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "plusWeeksWithInt:", "plusWeeks", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "plusDaysWithInt:", "plusDays", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "minusYearsWithInt:", "minusYears", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "minusMonthsWithInt:", "minusMonths", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "minusWeeksWithInt:", "minusWeeks", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "minusDaysWithInt:", "minusDays", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "getEra", NULL, "I", 0x1, NULL },
    { "getCenturyOfEra", NULL, "I", 0x1, NULL },
    { "getYearOfEra", NULL, "I", 0x1, NULL },
    { "getYearOfCentury", NULL, "I", 0x1, NULL },
    { "getYear", NULL, "I", 0x1, NULL },
    { "getWeekyear", NULL, "I", 0x1, NULL },
    { "getMonthOfYear", NULL, "I", 0x1, NULL },
    { "getWeekOfWeekyear", NULL, "I", 0x1, NULL },
    { "getDayOfYear", NULL, "I", 0x1, NULL },
    { "getDayOfMonth", NULL, "I", 0x1, NULL },
    { "getDayOfWeek", NULL, "I", 0x1, NULL },
    { "withEraWithInt:", "withEra", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withCenturyOfEraWithInt:", "withCenturyOfEra", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withYearOfEraWithInt:", "withYearOfEra", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withYearOfCenturyWithInt:", "withYearOfCentury", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withYearWithInt:", "withYear", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withWeekyearWithInt:", "withWeekyear", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withMonthOfYearWithInt:", "withMonthOfYear", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withWeekOfWeekyearWithInt:", "withWeekOfWeekyear", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withDayOfYearWithInt:", "withDayOfYear", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withDayOfMonthWithInt:", "withDayOfMonth", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withDayOfWeekWithInt:", "withDayOfWeek", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "era", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "year", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "weekyear", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.LocalDate$Property;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeLocalDate_serialVersionUID },
    { "YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDate_YEAR },
    { "MONTH_OF_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDate_MONTH_OF_YEAR },
    { "DAY_OF_MONTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeLocalDate_DAY_OF_MONTH },
    { "DATE_DURATION_TYPES_", NULL, 0x1a, "Ljava.util.Set;", &OrgJodaTimeLocalDate_DATE_DURATION_TYPES_,  },
    { "iLocalMillis_", NULL, 0x12, "J", NULL,  },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iHash_", NULL, 0x82, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDate = { "LocalDate", "org.joda.time", NULL, 0x11, 96, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeLocalDate;
}

@end

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_now() {
  OrgJodaTimeLocalDate_init();
  return [[[OrgJodaTimeLocalDate alloc] init] autorelease];
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDate_init();
  if (zone == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Zone must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalDate alloc] initWithOrgJodaTimeDateTimeZone:zone] autorelease];
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalDate_init();
  if (chronology == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"Chronology must not be null"] autorelease];
  }
  return [[[OrgJodaTimeLocalDate alloc] initWithOrgJodaTimeChronology:chronology] autorelease];
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalDate_init();
  return OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localDateParser());
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalDate_init();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalDateWithNSString:str];
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalDate_init();
  if (calendar == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The calendar must not be null"] autorelease];
  }
  jint era = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_ERA];
  jint yearOfEra = [calendar getWithInt:JavaUtilCalendar_YEAR];
  return [[[OrgJodaTimeLocalDate alloc] initWithInt:(era == JavaUtilGregorianCalendar_AD ? yearOfEra : 1 - yearOfEra) withInt:[calendar getWithInt:JavaUtilCalendar_MONTH] + 1 withInt:[calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]] autorelease];
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalDate_init();
  if (date == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The date must not be null"] autorelease];
  }
  if ([((JavaUtilDate *) nil_chk(date)) getTime] < 0) {
    JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] init] autorelease];
    [cal setTimeWithJavaUtilDate:date];
    return OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(cal);
  }
  return [[[OrgJodaTimeLocalDate alloc] initWithInt:[date getYear] + 1900 withInt:[date getMonth] + 1 withInt:[date getDate]] autorelease];
}

@implementation OrgJodaTimeLocalDate_Property

- (instancetype)initWithOrgJodaTimeLocalDate:(OrgJodaTimeLocalDate *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  if (self = [super init]) {
    OrgJodaTimeLocalDate_Property_set_iInstant_(self, instant);
    OrgJodaTimeLocalDate_Property_set_iField_(self, field);
  }
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  OrgJodaTimeLocalDate_Property_set_iInstant_(self, (OrgJodaTimeLocalDate *) check_class_cast([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalDate class]));
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) check_class_cast([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  OrgJodaTimeLocalDate_Property_set_iField_(self, [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getChronology]]);
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalDate *)getLocalDate {
  return iInstant_;
}

- (OrgJodaTimeLocalDate *)addToCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDate *)addWrapFieldToCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDate *)setCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalDate *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalDate *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalDate *)roundFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundHalfFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundHalfCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundHalfEvenCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (void)dealloc {
  OrgJodaTimeLocalDate_Property_set_iInstant_(self, nil);
  OrgJodaTimeLocalDate_Property_set_iField_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeLocalDate_Property *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeLocalDate_Property_set_iInstant_(other, iInstant_);
  OrgJodaTimeLocalDate_Property_set_iField_(other, iField_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeLocalDate:withOrgJodaTimeDateTimeField:", "Property", NULL, 0x0, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getMillis", NULL, "J", 0x4, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x4, NULL },
    { "getLocalDate", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "roundFloorCopy", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "roundCeilingCopy", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "roundHalfFloorCopy", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "roundHalfCeilingCopy", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "roundHalfEvenCopy", NULL, "Lorg.joda.time.LocalDate;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeLocalDate_Property_serialVersionUID },
    { "iInstant_", NULL, 0x82, "Lorg.joda.time.LocalDate;", NULL,  },
    { "iField_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDate_Property = { "Property", "org.joda.time", "LocalDate", 0x19, 19, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeLocalDate_Property;
}

@end
