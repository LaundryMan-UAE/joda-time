//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/TimeOfDay.java
//

#include "AbstractPartial.h"
#include "AbstractPartialFieldProperty.h"
#include "BasePartial.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "LocalTime.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "TimeOfDay.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

BOOL OrgJodaTimeTimeOfDay_initialized = NO;

@implementation OrgJodaTimeTimeOfDay

IOSObjectArray * OrgJodaTimeTimeOfDay_FIELD_TYPES_;
OrgJodaTimeTimeOfDay * OrgJodaTimeTimeOfDay_MIDNIGHT_;

+ (OrgJodaTimeTimeOfDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  if (calendar == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The calendar must not be null"];
  }
  return [[OrgJodaTimeTimeOfDay alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY] withInt:[calendar getWithInt:JavaUtilCalendar_MINUTE] withInt:[calendar getWithInt:JavaUtilCalendar_SECOND] withInt:[calendar getWithInt:JavaUtilCalendar_MILLISECOND]];
}

+ (OrgJodaTimeTimeOfDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The date must not be null"];
  }
  return [[OrgJodaTimeTimeOfDay alloc] initWithInt:[((JavaUtilDate *) nil_chk(date)) getHours] withInt:[date getMinutes] withInt:[date getSeconds] withInt:(((int) ([date getTime] % 1000)) + 1000) % 1000];
}

+ (OrgJodaTimeTimeOfDay *)fromMillisOfDayWithLong:(long long int)millisOfDay {
  return [OrgJodaTimeTimeOfDay fromMillisOfDayWithLong:millisOfDay withOrgJodaTimeChronology:nil];
}

+ (OrgJodaTimeTimeOfDay *)fromMillisOfDayWithLong:(long long int)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
  chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withUTC];
  return [[OrgJodaTimeTimeOfDay alloc] initWithLong:millisOfDay withOrgJodaTimeChronology:chrono];
}

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceWithOrgJodaTimeDateTimeZone:zone]];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(long long int)instant {
  return [super initWithLong:instant];
}

- (instancetype)initWithLong:(long long int)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [super initWithId:instant withOrgJodaTimeChronology:nil withOrgJodaTimeFormatDateTimeFormatter:[OrgJodaTimeFormatISODateTimeFormat timeParser]];
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithId:instant withOrgJodaTimeChronology:[OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology] withOrgJodaTimeFormatDateTimeFormatter:[OrgJodaTimeFormatISODateTimeFormat timeParser]];
}

- (instancetype)initWithInt:(int)hourOfDay
                    withInt:(int)minuteOfHour {
  return [self initOrgJodaTimeTimeOfDayWithInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0 withOrgJodaTimeChronology:nil];
}

- (instancetype)initWithInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeTimeOfDayWithInt:hourOfDay withInt:minuteOfHour withInt:0 withInt:0 withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute {
  return [self initOrgJodaTimeTimeOfDayWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0 withOrgJodaTimeChronology:nil];
}

- (instancetype)initWithInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeTimeOfDayWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:0 withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
                    withInt:(int)millisOfSecond {
  return [self initOrgJodaTimeTimeOfDayWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:nil];
}

- (instancetype)initOrgJodaTimeTimeOfDayWithInt:(int)hourOfDay
                                        withInt:(int)minuteOfHour
                                        withInt:(int)secondOfMinute
                                        withInt:(int)millisOfSecond
                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithIntArray:[IOSIntArray arrayWithInts:(int[]){ hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond } count:4] withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(int)hourOfDay
                    withInt:(int)minuteOfHour
                    withInt:(int)secondOfMinute
                    withInt:(int)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeTimeOfDayWithInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                                withIntArray:(IOSIntArray *)values {
  return [super initWithOrgJodaTimeBaseBasePartial:partial withIntArray:values];
}

- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [super initWithOrgJodaTimeBaseBasePartial:partial withOrgJodaTimeChronology:chrono];
}

- (int)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(int)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeTimeOfDay_HOUR_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay];
    case OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) minuteOfHour];
    case OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) secondOfMinute];
    case OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfSecond];
    default:
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid index: %d", index]];
  }
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(int)index {
  return IOSObjectArray_Get(nil_chk(OrgJodaTimeTimeOfDay_FIELD_TYPES_), index);
}

- (IOSObjectArray *)getFieldTypes {
  return (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(OrgJodaTimeTimeOfDay_FIELD_TYPES_)) clone], [IOSObjectArray class]);
}

- (OrgJodaTimeTimeOfDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:newChronology];
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimeTimeOfDay *newTimeOfDay = [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withOrgJodaTimeChronology:newChronology];
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newTimeOfDay withIntArray:[self getValues]];
    return newTimeOfDay;
  }
}

- (OrgJodaTimeTimeOfDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(int)value {
  int index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(int)amount {
  int index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWrapPartialWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(int)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (int i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    int index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWrapPartialWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:[OrgJodaTimeFieldFieldUtils safeMultiplyWithInt:[period getValueWithInt:i] withInt:scalar]];
    }
  }
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeTimeOfDay *)plusHoursWithInt:(int)hours {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType hours] withInt:hours];
}

- (OrgJodaTimeTimeOfDay *)plusMinutesWithInt:(int)minutes {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType minutes] withInt:minutes];
}

- (OrgJodaTimeTimeOfDay *)plusSecondsWithInt:(int)seconds {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds] withInt:seconds];
}

- (OrgJodaTimeTimeOfDay *)plusMillisWithInt:(int)millis {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis] withInt:millis];
}

- (OrgJodaTimeTimeOfDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeTimeOfDay *)minusHoursWithInt:(int)hours {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType hours] withInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:hours]];
}

- (OrgJodaTimeTimeOfDay *)minusMinutesWithInt:(int)minutes {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType minutes] withInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:minutes]];
}

- (OrgJodaTimeTimeOfDay *)minusSecondsWithInt:(int)seconds {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds] withInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:seconds]];
}

- (OrgJodaTimeTimeOfDay *)minusMillisWithInt:(int)millis {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis] withInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:millis]];
}

- (OrgJodaTimeTimeOfDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [[OrgJodaTimeTimeOfDay_Property alloc] initWithOrgJodaTimeTimeOfDay:self withInt:[self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]];
}

- (OrgJodaTimeLocalTime *)toLocalTime {
  return [[OrgJodaTimeLocalTime alloc] initWithInt:[self getHourOfDay] withInt:[self getMinuteOfHour] withInt:[self getSecondOfMinute] withInt:[self getMillisOfSecond] withOrgJodaTimeChronology:[self getChronology]];
}

- (OrgJodaTimeDateTime *)toDateTimeToday {
  return [self toDateTimeTodayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  long long int instantMillis = [OrgJodaTimeDateTimeUtils currentTimeMillis];
  long long int resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return [[OrgJodaTimeDateTime alloc] initWithLong:resolved withOrgJodaTimeChronology:chrono];
}

- (int)getHourOfDay {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_HOUR_OF_DAY];
}

- (int)getMinuteOfHour {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR];
}

- (int)getSecondOfMinute {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE];
}

- (int)getMillisOfSecond {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND];
}

- (OrgJodaTimeTimeOfDay *)withHourOfDayWithInt:(int)hour {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_HOUR_OF_DAY withIntArray:newValues withInt:hour];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)withMinuteOfHourWithInt:(int)minute {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR withIntArray:newValues withInt:minute];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)withSecondOfMinuteWithInt:(int)second {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE withIntArray:newValues withInt:second];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)withMillisOfSecondWithInt:(int)millis {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND withIntArray:newValues withInt:millis];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:self withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay_Property *)hourOfDay {
  return [[OrgJodaTimeTimeOfDay_Property alloc] initWithOrgJodaTimeTimeOfDay:self withInt:OrgJodaTimeTimeOfDay_HOUR_OF_DAY];
}

- (OrgJodaTimeTimeOfDay_Property *)minuteOfHour {
  return [[OrgJodaTimeTimeOfDay_Property alloc] initWithOrgJodaTimeTimeOfDay:self withInt:OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR];
}

- (OrgJodaTimeTimeOfDay_Property *)secondOfMinute {
  return [[OrgJodaTimeTimeOfDay_Property alloc] initWithOrgJodaTimeTimeOfDay:self withInt:OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE];
}

- (OrgJodaTimeTimeOfDay_Property *)millisOfSecond {
  return [[OrgJodaTimeTimeOfDay_Property alloc] initWithOrgJodaTimeTimeOfDay:self withInt:OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND];
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatISODateTimeFormat tTime])) printWithOrgJodaTimeReadablePartial:self];
}

+ (void)initialize {
  if (self == [OrgJodaTimeTimeOfDay class]) {
    OrgJodaTimeTimeOfDay_FIELD_TYPES_ = [IOSObjectArray arrayWithObjects:(id[]){ [OrgJodaTimeDateTimeFieldType hourOfDay], [OrgJodaTimeDateTimeFieldType minuteOfHour], [OrgJodaTimeDateTimeFieldType secondOfMinute], [OrgJodaTimeDateTimeFieldType millisOfSecond] } count:4 type:[IOSClass classWithClass:[OrgJodaTimeDateTimeFieldType class]]];
    OrgJodaTimeTimeOfDay_MIDNIGHT_ = [[OrgJodaTimeTimeOfDay alloc] initWithInt:0 withInt:0 withInt:0 withInt:0];
    OrgJodaTimeTimeOfDay_initialized = YES;
  }
}
+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.TimeOfDay;", 0x9, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.TimeOfDay;", 0x9, NULL },
    { "fromMillisOfDayWithLong:", "fromMillisOfDay", "Lorg.joda.time.TimeOfDay;", 0x9, NULL },
    { "fromMillisOfDayWithLong:withOrgJodaTimeChronology:", "fromMillisOfDay", "Lorg.joda.time.TimeOfDay;", 0x9, NULL },
    { "init", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithLong:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithId:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeTimeOfDay:withIntArray:", "TimeOfDay", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeTimeOfDay:withOrgJodaTimeChronology:", "TimeOfDay", NULL, 0x0, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL },
    { "getFieldTypeWithInt:", "getFieldType", "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "getFieldTypes", NULL, "[Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "withChronologyRetainFieldsWithOrgJodaTimeChronology:", "withChronologyRetainFields", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "plusHoursWithInt:", "plusHours", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "plusMinutesWithInt:", "plusMinutes", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "plusSecondsWithInt:", "plusSeconds", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "plusMillisWithInt:", "plusMillis", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "minusHoursWithInt:", "minusHours", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "minusMinutesWithInt:", "minusMinutes", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "minusSecondsWithInt:", "minusSeconds", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "minusMillisWithInt:", "minusMillis", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.TimeOfDay$Property;", 0x1, NULL },
    { "toLocalTime", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL },
    { "toDateTimeToday", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "toDateTimeTodayWithOrgJodaTimeDateTimeZone:", "toDateTimeToday", "Lorg.joda.time.DateTime;", 0x1, NULL },
    { "getHourOfDay", NULL, "I", 0x1, NULL },
    { "getMinuteOfHour", NULL, "I", 0x1, NULL },
    { "getSecondOfMinute", NULL, "I", 0x1, NULL },
    { "getMillisOfSecond", NULL, "I", 0x1, NULL },
    { "withHourOfDayWithInt:", "withHourOfDay", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withMinuteOfHourWithInt:", "withMinuteOfHour", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withSecondOfMinuteWithInt:", "withSecondOfMinute", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withMillisOfSecondWithInt:", "withMillisOfSecond", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.TimeOfDay$Property;", 0x1, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.TimeOfDay$Property;", 0x1, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.TimeOfDay$Property;", 0x1, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.TimeOfDay$Property;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_TimeOfDay_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeTimeOfDay_serialVersionUID },
    { "FIELD_TYPES_", NULL, 0x1a, "[Lorg.joda.time.DateTimeFieldType;", &OrgJodaTimeTimeOfDay_FIELD_TYPES_,  },
    { "MIDNIGHT_", NULL, 0x19, "Lorg.joda.time.TimeOfDay;", &OrgJodaTimeTimeOfDay_MIDNIGHT_,  },
    { "HOUR_OF_DAY_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeTimeOfDay_HOUR_OF_DAY },
    { "MINUTE_OF_HOUR_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR },
    { "SECOND_OF_MINUTE_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE },
    { "MILLIS_OF_SECOND_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND },
  };
  static J2ObjcClassInfo _OrgJodaTimeTimeOfDay = { "TimeOfDay", "org.joda.time", NULL, 0x11, 54, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeTimeOfDay;
}

@end

@implementation OrgJodaTimeTimeOfDay_Property

- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                                     withInt:(int)fieldIndex {
  if (self = [super init]) {
    iTimeOfDay_ = partial;
    iFieldIndex_ = fieldIndex;
  }
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iTimeOfDay_;
}

- (OrgJodaTimeTimeOfDay *)getTimeOfDay {
  return iTimeOfDay_;
}

- (int)get {
  return [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimeTimeOfDay *)addToCopyWithInt:(int)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapPartialWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:iTimeOfDay_ withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)addNoWrapToCopyWithInt:(int)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:iTimeOfDay_ withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)addWrapFieldToCopyWithInt:(int)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:iTimeOfDay_ withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)setCopyWithInt:(int)value {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:iTimeOfDay_ withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return [[OrgJodaTimeTimeOfDay alloc] initWithOrgJodaTimeTimeOfDay:iTimeOfDay_ withIntArray:newValues];
}

- (OrgJodaTimeTimeOfDay *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeTimeOfDay *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeTimeOfDay *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeTimeOfDay_Property *)other {
  [super copyAllFieldsTo:other];
  other->iFieldIndex_ = iFieldIndex_;
  other->iTimeOfDay_ = iTimeOfDay_;
}
+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeTimeOfDay:withInt:", "Property", NULL, 0x0, NULL },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getReadablePartial", NULL, "Lorg.joda.time.ReadablePartial;", 0x4, NULL },
    { "getTimeOfDay", NULL, "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "get", NULL, "I", 0x1, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "addNoWrapToCopyWithInt:", "addNoWrapToCopy", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.TimeOfDay;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeTimeOfDay_Property_serialVersionUID },
    { "iTimeOfDay_", NULL, 0x12, "Lorg.joda.time.TimeOfDay;", NULL,  },
    { "iFieldIndex_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeTimeOfDay_Property = { "Property", "org.joda.time", "TimeOfDay", 0x9, 13, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeTimeOfDay_Property;
}

@end
