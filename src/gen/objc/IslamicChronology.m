//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/IslamicChronology.java
//

#include "AssembledChronology.h"
#include "BasicChronology.h"
#include "BasicMonthOfYearDateTimeField.h"
#include "BasicSingleEraDateTimeField.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IslamicChronology.h"
#include "J2ObjC_source.h"
#include "LimitChronology.h"
#include "ZonedChronology.h"
#include "java/lang/ArithmeticException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface OrgJodaTimeChronoIslamicChronology () {
 @public
  /**
   @brief The leap years to use.
   */
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *iLeapYears_;
}

/**
 @brief Serialization singleton.
 */
- (id)readResolve;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoIslamicChronology, iLeapYears_, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)

@interface OrgJodaTimeChronoIslamicChronology_LeapYearPatternType () {
}

/**
 @brief Ensure a singleton is returned if possible.
 @return the singleton instance
 */
- (id)readResolve;
@end

BOOL OrgJodaTimeChronoIslamicChronology_initialized = NO;

@implementation OrgJodaTimeChronoIslamicChronology

OrgJodaTimeDateTimeField * OrgJodaTimeChronoIslamicChronology_ERA_FIELD_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoIslamicChronology_cCache_;
OrgJodaTimeChronoIslamicChronology * OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceUTC {
  return OrgJodaTimeChronoIslamicChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstance {
  return OrgJodaTimeChronoIslamicChronology_getInstance();
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears {
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(zone, leapYears);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears {
  if (self = [super initWithOrgJodaTimeChronology:base withId:param withInt:4]) {
    OrgJodaTimeChronoIslamicChronology_set_iLeapYears_(self, leapYears);
  }
  return self;
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  return base == nil ? OrgJodaTimeChronoIslamicChronology_getInstanceUTC() : OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_([base getZone]);
}

- (OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)getLeapYearPatternType {
  return iLeapYears_;
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoIslamicChronology class]]) {
    OrgJodaTimeChronoIslamicChronology *chrono = (OrgJodaTimeChronoIslamicChronology *) check_class_cast(obj, [OrgJodaTimeChronoIslamicChronology class]);
    return ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([self getLeapYearPatternType]))->index_ == ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([((OrgJodaTimeChronoIslamicChronology *) nil_chk(chrono)) getLeapYearPatternType]))->index_ && [super isEqual:obj];
  }
  return NO;
}

- (NSUInteger)hash {
  return [super hash] * 13 + ((jint) [((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([self getLeapYearPatternType])) hash]);
}

- (jint)getYearWithLong:(jlong)instant {
  jlong millisIslamic = instant - OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1;
  jlong cycles = millisIslamic / OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  jlong cycleRemainder = millisIslamic % OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  jint year = (jint) ((cycles * OrgJodaTimeChronoIslamicChronology_CYCLE) + 1LL);
  jlong yearMillis = ([self isLeapYearWithInt:year] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  while (cycleRemainder >= yearMillis) {
    cycleRemainder -= yearMillis;
    yearMillis = ([self isLeapYearWithInt:++year] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  }
  return year;
}

- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year {
  jint thisYear = [self getYearWithLong:instant];
  jint dayOfYear = [self getDayOfYearWithLong:instant withInt:thisYear];
  jint millisOfDay = [self getMillisOfDayWithLong:instant];
  if (dayOfYear > 354) {
    if (![self isLeapYearWithInt:year]) {
      dayOfYear--;
    }
  }
  instant = [self getYearMonthDayMillisWithInt:year withInt:1 withInt:dayOfYear];
  instant += millisOfDay;
  return instant;
}

- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant {
  jint minuendYear = [self getYearWithLong:minuendInstant];
  jint subtrahendYear = [self getYearWithLong:subtrahendInstant];
  jlong minuendRem = minuendInstant - [self getYearMillisWithInt:minuendYear];
  jlong subtrahendRem = subtrahendInstant - [self getYearMillisWithInt:subtrahendYear];
  jint difference = minuendYear - subtrahendYear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month {
  if (--month % 2 == 1) {
    month /= 2;
    return month * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR + OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH;
  }
  else {
    month /= 2;
    return month * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR;
  }
}

- (jint)getDayOfMonthWithLong:(jlong)millis {
  jint doy = [self getDayOfYearWithLong:millis] - 1;
  if (doy == 354) {
    return 30;
  }
  return (doy % OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH) % OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH + 1;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  return [((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(iLeapYears_)) isLeapYearWithInt:year];
}

- (jint)getDaysInYearMax {
  return 355;
}

- (jint)getDaysInYearWithInt:(jint)year {
  return [self isLeapYearWithInt:year] ? 355 : 354;
}

- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month {
  if (month == 12 && [self isLeapYearWithInt:year]) {
    return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
  }
  return (--month % 2 == 0 ? OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH : OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH);
}

- (jint)getDaysInMonthMax {
  return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
}

- (jint)getDaysInMonthMaxWithInt:(jint)month {
  if (month == 12) {
    return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
  }
  return (--month % 2 == 0 ? OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH : OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH);
}

- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year {
  jint doyZeroBased = (jint) ((millis - [self getYearMillisWithInt:year]) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  if (doyZeroBased == 354) {
    return 12;
  }
  return ((doyZeroBased * 2) / OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH) + 1;
}

- (jlong)getAverageMillisPerYear {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR / 2;
}

- (jlong)getAverageMillisPerMonth {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH;
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  if (year > OrgJodaTimeChronoIslamicChronology_MAX_YEAR) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$I$I", @"Year is too large: ", year, @" > ", OrgJodaTimeChronoIslamicChronology_MAX_YEAR)] autorelease];
  }
  if (year < OrgJodaTimeChronoIslamicChronology_MIN_YEAR) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:JreStrcat("$I$I", @"Year is too small: ", year, @" < ", OrgJodaTimeChronoIslamicChronology_MIN_YEAR)] autorelease];
  }
  year--;
  jlong cycle = year / OrgJodaTimeChronoIslamicChronology_CYCLE;
  jlong millis = OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 + cycle * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  jint cycleRemainder = (year % OrgJodaTimeChronoIslamicChronology_CYCLE) + 1;
  for (jint i = 1; i < cycleRemainder; i++) {
    millis += ([self isLeapYearWithInt:i] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  }
  return millis;
}

- (jint)getMinYear {
  return 1;
}

- (jint)getMaxYear {
  return OrgJodaTimeChronoIslamicChronology_MAX_YEAR;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  return (-OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1) / 2;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
    OrgJodaTimeChronoAssembledChronology_Fields_set_era_(nil_chk(fields), OrgJodaTimeChronoIslamicChronology_ERA_FIELD_);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_monthOfYear_(fields, [[OrgJodaTimeChronoBasicMonthOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withInt:12]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_months_(fields, [fields->monthOfYear_ getDurationField]);
  }
}

- (void)dealloc {
  RELEASE_(iLeapYears_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoIslamicChronology *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoIslamicChronology_set_iLeapYears_(other, iLeapYears_);
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoIslamicChronology class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_ERA_FIELD_, nil, [[OrgJodaTimeChronoBasicSingleEraDateTimeField alloc] initWithNSString:@"AH"]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_, nil, [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:0 withInt:623158436]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_, nil, [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:1 withInt:623191204]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_, nil, [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:2 withInt:690562340]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_, nil, [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:3 withInt:153692453]);
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_cCache_, nil, [[JavaUtilConcurrentConcurrentHashMap alloc] init]);
    {
      JreStrongAssign(&OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_, nil, OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone_get_UTC_()));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoIslamicChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:", "getInstance", "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withId:withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:", "IslamicChronology", NULL, 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "getLeapYearPatternType", NULL, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "getYearWithLong:", "getYear", "I", 0x0, NULL },
    { "setYearWithLong:withInt:", "setYear", "J", 0x0, NULL },
    { "getYearDifferenceWithLong:withLong:", "getYearDifference", "J", 0x0, NULL },
    { "getTotalMillisByYearMonthWithInt:withInt:", "getTotalMillisByYearMonth", "J", 0x0, NULL },
    { "getDayOfMonthWithLong:", "getDayOfMonth", "I", 0x0, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL },
    { "getDaysInYearMax", NULL, "I", 0x0, NULL },
    { "getDaysInYearWithInt:", "getDaysInYear", "I", 0x0, NULL },
    { "getDaysInYearMonthWithInt:withInt:", "getDaysInYearMonth", "I", 0x0, NULL },
    { "getDaysInMonthMax", NULL, "I", 0x0, NULL },
    { "getDaysInMonthMaxWithInt:", "getDaysInMonthMax", "I", 0x0, NULL },
    { "getMonthOfYearWithLong:withInt:", "getMonthOfYear", "I", 0x0, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_serialVersionUID },
    { "AH_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_AH },
    { "ERA_FIELD_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoIslamicChronology_ERA_FIELD_,  },
    { "LEAP_YEAR_15_BASED_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_,  },
    { "LEAP_YEAR_16_BASED_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_,  },
    { "LEAP_YEAR_INDIAN_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_,  },
    { "LEAP_YEAR_HABASH_AL_HASIB_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_,  },
    { "MIN_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MIN_YEAR },
    { "MAX_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MAX_YEAR },
    { "MONTH_PAIR_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH },
    { "LONG_MONTH_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH },
    { "SHORT_MONTH_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH },
    { "MILLIS_PER_MONTH_PAIR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR },
    { "MILLIS_PER_MONTH_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH },
    { "MILLIS_PER_LONG_MONTH_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH },
    { "MILLIS_PER_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_SHORT_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR },
    { "MILLIS_PER_LONG_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR },
    { "MILLIS_YEAR_1_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 },
    { "CYCLE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_CYCLE },
    { "MILLIS_PER_CYCLE_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoIslamicChronology_cCache_,  },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.IslamicChronology;", &OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_,  },
    { "iLeapYears_", NULL, 0x12, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoIslamicChronology = { 1, "IslamicChronology", "org.joda.time.chrono", NULL, 0x11, 31, methods, 24, fields, 0, NULL};
  return &_OrgJodaTimeChronoIslamicChronology;
}

@end

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceUTC() {
  OrgJodaTimeChronoIslamicChronology_init();
  return OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;
}

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstance() {
  OrgJodaTimeChronoIslamicChronology_init();
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeDateTimeZone_getDefault(), OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_);
}

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoIslamicChronology_init();
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(zone, OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_);
}

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeDateTimeZone *zone, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *leapYears) {
  OrgJodaTimeChronoIslamicChronology_init();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoIslamicChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoIslamicChronology_cCache_)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:4 type:OrgJodaTimeChronoIslamicChronology_class_()];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoIslamicChronology_cCache_ putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  chrono = IOSObjectArray_Get(nil_chk(chronos), ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(leapYears))->index_);
  if (chrono == nil) {
    @synchronized(chronos) {
      chrono = IOSObjectArray_Get(chronos, leapYears->index_);
      if (chrono == nil) {
        if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
          chrono = [[[OrgJodaTimeChronoIslamicChronology alloc] initWithOrgJodaTimeChronology:nil withId:nil withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears] autorelease];
          OrgJodaTimeDateTime *lowerLimit = [[[OrgJodaTimeDateTime alloc] initWithInt:1 withInt:1 withInt:1 withInt:0 withInt:0 withInt:0 withInt:0 withOrgJodaTimeChronology:chrono] autorelease];
          chrono = [[[OrgJodaTimeChronoIslamicChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(chrono, lowerLimit, nil) withId:nil withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears] autorelease];
        }
        else {
          chrono = OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeDateTimeZone_get_UTC_(), leapYears);
          chrono = [[[OrgJodaTimeChronoIslamicChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone) withId:nil withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears] autorelease];
        }
        IOSObjectArray_Set(chronos, leapYears->index_, chrono);
      }
    }
  }
  return chrono;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoIslamicChronology)

@implementation OrgJodaTimeChronoIslamicChronology_LeapYearPatternType

- (instancetype)initWithInt:(jint)index
                    withInt:(jint)pattern {
  if (self = [super init]) {
    self->index_ = (jbyte) index;
    self->pattern_ = pattern;
  }
  return self;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  jint key = LShift32(1, (year % 30));
  return ((pattern_ & key) > 0);
}

- (id)readResolve {
  switch (index_) {
    case 0:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_15_BASED_();
    case 1:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_16_BASED_();
    case 2:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_INDIAN_();
    case 3:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_HABASH_AL_HASIB_();
    default:
    return self;
  }
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType class]]) {
    return index_ == ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) check_class_cast(obj, [OrgJodaTimeChronoIslamicChronology_LeapYearPatternType class]))))->index_;
  }
  return NO;
}

- (NSUInteger)hash {
  return index_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)other {
  [super copyAllFieldsTo:other];
  other->index_ = index_;
  other->pattern_ = pattern_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "LeapYearPatternType", NULL, 0x0, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_serialVersionUID },
    { "index_", NULL, 0x10, "B", NULL,  },
    { "pattern_", NULL, 0x10, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoIslamicChronology_LeapYearPatternType = { 1, "LeapYearPatternType", "org.joda.time.chrono", "IslamicChronology", 0x9, 5, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType)
