//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/IslamicChronology.java
//

#include "AssembledChronology.h"
#include "BasicChronology.h"
#include "BasicMonthOfYearDateTimeField.h"
#include "BasicSingleEraDateTimeField.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IslamicChronology.h"
#include "LimitChronology.h"
#include "ZonedChronology.h"
#include "java/lang/ArithmeticException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

BOOL OrgJodaTimeChronoIslamicChronology_initialized = NO;

@implementation OrgJodaTimeChronoIslamicChronology

OrgJodaTimeDateTimeField * OrgJodaTimeChronoIslamicChronology_ERA_FIELD_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType * OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoIslamicChronology_cCache_;
OrgJodaTimeChronoIslamicChronology * OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceUTC {
  return OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstance {
  return [OrgJodaTimeChronoIslamicChronology getInstanceWithOrgJodaTimeDateTimeZone:[OrgJodaTimeDateTimeZone getDefault] withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_];
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [OrgJodaTimeChronoIslamicChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_];
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  OrgJodaTimeChronoIslamicChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoIslamicChronology_cCache_)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:4 type:[IOSClass classWithClass:[OrgJodaTimeChronoIslamicChronology class]]];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoIslamicChronology_cCache_ putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  chrono = IOSObjectArray_Get(nil_chk(chronos), ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(leapYears))->index_);
  if (chrono == nil) {
    @synchronized (chronos) {
      chrono = IOSObjectArray_Get(chronos, leapYears->index_);
      if (chrono == nil) {
        if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
          chrono = [[OrgJodaTimeChronoIslamicChronology alloc] initWithOrgJodaTimeChronology:nil withId:nil withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears];
          OrgJodaTimeDateTime *lowerLimit = [[OrgJodaTimeDateTime alloc] initWithInt:1 withInt:1 withInt:1 withInt:0 withInt:0 withInt:0 withInt:0 withOrgJodaTimeChronology:chrono];
          chrono = [[OrgJodaTimeChronoIslamicChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoLimitChronology getInstanceWithOrgJodaTimeChronology:chrono withOrgJodaTimeReadableDateTime:lowerLimit withOrgJodaTimeReadableDateTime:nil] withId:nil withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears];
        }
        else {
          chrono = [OrgJodaTimeChronoIslamicChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears];
          chrono = [[OrgJodaTimeChronoIslamicChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoZonedChronology getInstanceWithOrgJodaTimeChronology:chrono withOrgJodaTimeDateTimeZone:zone] withId:nil withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:leapYears];
        }
        (void) IOSObjectArray_Set(chronos, leapYears->index_, chrono);
      }
    }
  }
  return chrono;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears {
  if (self = [super initWithOrgJodaTimeChronology:base withId:param withInt:4]) {
    self->iLeapYears_ = leapYears;
  }
  return self;
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  return base == nil ? [OrgJodaTimeChronoIslamicChronology getInstanceUTC] : [OrgJodaTimeChronoIslamicChronology getInstanceWithOrgJodaTimeDateTimeZone:[base getZone]];
}

- (OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)getLeapYearPatternType {
  return iLeapYears_;
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return [OrgJodaTimeChronoIslamicChronology getInstanceWithOrgJodaTimeDateTimeZone:zone];
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoIslamicChronology class]]) {
    OrgJodaTimeChronoIslamicChronology *chrono = (OrgJodaTimeChronoIslamicChronology *) check_class_cast(obj, [OrgJodaTimeChronoIslamicChronology class]);
    return ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([self getLeapYearPatternType]))->index_ == ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([((OrgJodaTimeChronoIslamicChronology *) nil_chk(chrono)) getLeapYearPatternType]))->index_ && [super isEqual:obj];
  }
  return NO;
}

- (NSUInteger)hash {
  return [super hash] * 13 + ((int) [((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([self getLeapYearPatternType])) hash]);
}

- (int)getYearWithLong:(long long int)instant {
  long long int millisIslamic = instant - OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1;
  long long int cycles = millisIslamic / OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  long long int cycleRemainder = millisIslamic % OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  int year = (int) ((cycles * OrgJodaTimeChronoIslamicChronology_CYCLE) + 1LL);
  long long int yearMillis = ([self isLeapYearWithInt:year] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  while (cycleRemainder >= yearMillis) {
    cycleRemainder -= yearMillis;
    yearMillis = ([self isLeapYearWithInt:++year] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  }
  return year;
}

- (long long int)setYearWithLong:(long long int)instant
                         withInt:(int)year {
  int thisYear = [self getYearWithLong:instant];
  int dayOfYear = [self getDayOfYearWithLong:instant withInt:thisYear];
  int millisOfDay = [self getMillisOfDayWithLong:instant];
  if (dayOfYear > 354) {
    if (![self isLeapYearWithInt:year]) {
      dayOfYear--;
    }
  }
  instant = [self getYearMonthDayMillisWithInt:year withInt:1 withInt:dayOfYear];
  instant += millisOfDay;
  return instant;
}

- (long long int)getYearDifferenceWithLong:(long long int)minuendInstant
                                  withLong:(long long int)subtrahendInstant {
  int minuendYear = [self getYearWithLong:minuendInstant];
  int subtrahendYear = [self getYearWithLong:subtrahendInstant];
  long long int minuendRem = minuendInstant - [self getYearMillisWithInt:minuendYear];
  long long int subtrahendRem = subtrahendInstant - [self getYearMillisWithInt:subtrahendYear];
  int difference = minuendYear - subtrahendYear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (long long int)getTotalMillisByYearMonthWithInt:(int)year
                                          withInt:(int)month {
  if (--month % 2 == 1) {
    month /= 2;
    return month * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR + OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH;
  }
  else {
    month /= 2;
    return month * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR;
  }
}

- (int)getDayOfMonthWithLong:(long long int)millis {
  int doy = [self getDayOfYearWithLong:millis] - 1;
  if (doy == 354) {
    return 30;
  }
  return (doy % OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH) % OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH + 1;
}

- (BOOL)isLeapYearWithInt:(int)year {
  return [((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(iLeapYears_)) isLeapYearWithInt:year];
}

- (int)getDaysInYearMax {
  return 355;
}

- (int)getDaysInYearWithInt:(int)year {
  return [self isLeapYearWithInt:year] ? 355 : 354;
}

- (int)getDaysInYearMonthWithInt:(int)year
                         withInt:(int)month {
  if (month == 12 && [self isLeapYearWithInt:year]) {
    return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
  }
  return (--month % 2 == 0 ? OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH : OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH);
}

- (int)getDaysInMonthMax {
  return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
}

- (int)getDaysInMonthMaxWithInt:(int)month {
  if (month == 12) {
    return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
  }
  return (--month % 2 == 0 ? OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH : OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH);
}

- (int)getMonthOfYearWithLong:(long long int)millis
                      withInt:(int)year {
  int doyZeroBased = (int) ((millis - [self getYearMillisWithInt:year]) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  if (doyZeroBased == 354) {
    return 12;
  }
  return ((doyZeroBased * 2) / OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH) + 1;
}

- (long long int)getAverageMillisPerYear {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR;
}

- (long long int)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR / 2;
}

- (long long int)getAverageMillisPerMonth {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH;
}

- (long long int)calculateFirstDayOfYearMillisWithInt:(int)year {
  if (year > OrgJodaTimeChronoIslamicChronology_MAX_YEAR) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Year is too large: %d > 292271022", year]];
  }
  if (year < OrgJodaTimeChronoIslamicChronology_MIN_YEAR) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"Year is too small: %d < -292269337", year]];
  }
  year--;
  long long int cycle = year / OrgJodaTimeChronoIslamicChronology_CYCLE;
  long long int millis = OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 + cycle * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  int cycleRemainder = (year % OrgJodaTimeChronoIslamicChronology_CYCLE) + 1;
  for (int i = 1; i < cycleRemainder; i++) {
    millis += ([self isLeapYearWithInt:i] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  }
  return millis;
}

- (int)getMinYear {
  return 1;
}

- (int)getMaxYear {
  return OrgJodaTimeChronoIslamicChronology_MAX_YEAR;
}

- (long long int)getApproxMillisAtEpochDividedByTwo {
  return (-OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1) / 2;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
    ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->era_ = OrgJodaTimeChronoIslamicChronology_ERA_FIELD_;
    fields->monthOfYear_ = [[OrgJodaTimeChronoBasicMonthOfYearDateTimeField alloc] initWithOrgJodaTimeChronoBasicChronology:self withInt:12];
    fields->months_ = [fields->monthOfYear_ getDurationField];
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoIslamicChronology class]) {
    OrgJodaTimeChronoIslamicChronology_ERA_FIELD_ = [[OrgJodaTimeChronoBasicSingleEraDateTimeField alloc] initWithNSString:@"AH"];
    OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_ = [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:0 withInt:623158436];
    OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_ = [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:1 withInt:623191204];
    OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_ = [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:2 withInt:690562340];
    OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_ = [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] initWithInt:3 withInt:153692453];
    OrgJodaTimeChronoIslamicChronology_cCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    {
      OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_ = [OrgJodaTimeChronoIslamicChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
    }
    OrgJodaTimeChronoIslamicChronology_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoIslamicChronology *)other {
  [super copyAllFieldsTo:other];
  other->iLeapYears_ = iLeapYears_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:", "getInstance", "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withId:withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:", "IslamicChronology", NULL, 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "getLeapYearPatternType", NULL, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", 0x1, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "getYearWithLong:", "getYear", "I", 0x0, NULL },
    { "setYearWithLong:withInt:", "setYear", "J", 0x0, NULL },
    { "getYearDifferenceWithLong:withLong:", "getYearDifference", "J", 0x0, NULL },
    { "getTotalMillisByYearMonthWithInt:withInt:", "getTotalMillisByYearMonth", "J", 0x0, NULL },
    { "getDayOfMonthWithLong:", "getDayOfMonth", "I", 0x0, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL },
    { "getDaysInYearMax", NULL, "I", 0x0, NULL },
    { "getDaysInYearWithInt:", "getDaysInYear", "I", 0x0, NULL },
    { "getDaysInYearMonthWithInt:withInt:", "getDaysInYearMonth", "I", 0x0, NULL },
    { "getDaysInMonthMax", NULL, "I", 0x0, NULL },
    { "getDaysInMonthMaxWithInt:", "getDaysInMonthMax", "I", 0x0, NULL },
    { "getMonthOfYearWithLong:withInt:", "getMonthOfYear", "I", 0x0, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_IslamicChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_serialVersionUID },
    { "AH_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_AH },
    { "ERA_FIELD_", NULL, 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoIslamicChronology_ERA_FIELD_,  },
    { "LEAP_YEAR_15_BASED_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED_,  },
    { "LEAP_YEAR_16_BASED_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED_,  },
    { "LEAP_YEAR_INDIAN_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN_,  },
    { "LEAP_YEAR_HABASH_AL_HASIB_", NULL, 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB_,  },
    { "MIN_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MIN_YEAR },
    { "MAX_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MAX_YEAR },
    { "MONTH_PAIR_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH },
    { "LONG_MONTH_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH },
    { "SHORT_MONTH_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH },
    { "MILLIS_PER_MONTH_PAIR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR },
    { "MILLIS_PER_MONTH_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH },
    { "MILLIS_PER_LONG_MONTH_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH },
    { "MILLIS_PER_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_SHORT_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR },
    { "MILLIS_PER_LONG_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR },
    { "MILLIS_YEAR_1_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 },
    { "CYCLE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_CYCLE },
    { "MILLIS_PER_CYCLE_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoIslamicChronology_cCache_,  },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.IslamicChronology;", &OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC_,  },
    { "iLeapYears_", NULL, 0x12, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoIslamicChronology = { "IslamicChronology", "org.joda.time.chrono", NULL, 0x11, 31, methods, 24, fields, 0, NULL};
  return &_OrgJodaTimeChronoIslamicChronology;
}

@end

@implementation OrgJodaTimeChronoIslamicChronology_LeapYearPatternType

- (instancetype)initWithInt:(int)index
                    withInt:(int)pattern {
  if (self = [super init]) {
    self->index_ = (char) index;
    self->pattern_ = pattern;
  }
  return self;
}

- (BOOL)isLeapYearWithInt:(int)year {
  int key = 1 << (year % 30);
  return ((pattern_ & key) > 0);
}

- (id)readResolve {
  switch (index_) {
    case 0:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_15_BASED_();
    case 1:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_16_BASED_();
    case 2:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_INDIAN_();
    case 3:
    return OrgJodaTimeChronoIslamicChronology_get_LEAP_YEAR_HABASH_AL_HASIB_();
    default:
    return self;
  }
}

- (BOOL)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType class]]) {
    return index_ == ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) check_class_cast(obj, [OrgJodaTimeChronoIslamicChronology_LeapYearPatternType class]))))->index_;
  }
  return NO;
}

- (NSUInteger)hash {
  return index_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)other {
  [super copyAllFieldsTo:other];
  other->index_ = index_;
  other->pattern_ = pattern_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "LeapYearPatternType", NULL, 0x0, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_serialVersionUID },
    { "index_", NULL, 0x10, "B", NULL,  },
    { "pattern_", NULL, 0x10, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoIslamicChronology_LeapYearPatternType = { "LeapYearPatternType", "org.joda.time.chrono", "IslamicChronology", 0x9, 5, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType;
}

@end
