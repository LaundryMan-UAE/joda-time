//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/JulianChronology.java
//

#include "AssembledChronology.h"
#include "BasicChronology.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IllegalFieldValueException.h"
#include "JulianChronology.h"
#include "SkipDateTimeField.h"
#include "ZonedChronology.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

BOOL OrgJodaTimeChronoJulianChronology_initialized = NO;

@implementation OrgJodaTimeChronoJulianChronology

OrgJodaTimeChronoJulianChronology * OrgJodaTimeChronoJulianChronology_INSTANCE_UTC_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoJulianChronology_cCache_;

+ (int)adjustYearForSetWithInt:(int)year {
  if (year <= 0) {
    if (year == 0) {
      @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year] withNSNumber:[JavaLangInteger valueOfWithInt:year] withNSNumber:nil withNSNumber:nil];
    }
    year++;
  }
  return year;
}

+ (OrgJodaTimeChronoJulianChronology *)getInstanceUTC {
  return OrgJodaTimeChronoJulianChronology_INSTANCE_UTC_;
}

+ (OrgJodaTimeChronoJulianChronology *)getInstance {
  return [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:[OrgJodaTimeDateTimeZone getDefault] withInt:4];
}

+ (OrgJodaTimeChronoJulianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone withInt:4];
}

+ (OrgJodaTimeChronoJulianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                      withInt:(int)minDaysInFirstWeek {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  OrgJodaTimeChronoJulianChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoJulianChronology_cCache_)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:7 type:[IOSClass classWithClass:[OrgJodaTimeChronoJulianChronology class]]];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoJulianChronology_cCache_ putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  @try {
    chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid min days in first week: %d", minDaysInFirstWeek]];
  }
  if (chrono == nil) {
    @synchronized (chronos) {
      chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
      if (chrono == nil) {
        if (zone == OrgJodaTimeDateTimeZone_get_UTC_()) {
          chrono = [[OrgJodaTimeChronoJulianChronology alloc] initWithOrgJodaTimeChronology:nil withId:nil withInt:minDaysInFirstWeek];
        }
        else {
          chrono = [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withInt:minDaysInFirstWeek];
          chrono = [[OrgJodaTimeChronoJulianChronology alloc] initWithOrgJodaTimeChronology:[OrgJodaTimeChronoZonedChronology getInstanceWithOrgJodaTimeChronology:chrono withOrgJodaTimeDateTimeZone:zone] withId:nil withInt:minDaysInFirstWeek];
        }
        (void) IOSObjectArray_Set(chronos, minDaysInFirstWeek - 1, chrono);
      }
    }
  }
  return chrono;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(int)minDaysInFirstWeek {
  return [super initWithOrgJodaTimeChronology:base withId:param withInt:minDaysInFirstWeek];
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  int minDays = [self getMinimumDaysInFirstWeek];
  minDays = (minDays == 0 ? 4 : minDays);
  return base == nil ? [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_() withInt:minDays] : [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:[base getZone] withInt:minDays];
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoJulianChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = [OrgJodaTimeDateTimeZone getDefault];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:zone];
}

- (long long int)getDateMidnightMillisWithInt:(int)year
                                      withInt:(int)monthOfYear
                                      withInt:(int)dayOfMonth {
  return [super getDateMidnightMillisWithInt:[OrgJodaTimeChronoJulianChronology adjustYearForSetWithInt:year] withInt:monthOfYear withInt:dayOfMonth];
}

- (BOOL)isLeapYearWithInt:(int)year {
  return (year & 3) == 0;
}

- (long long int)calculateFirstDayOfYearMillisWithInt:(int)year {
  int relativeYear = year - 1968;
  int leapYears;
  if (relativeYear <= 0) {
    leapYears = (relativeYear + 3) >> 2;
  }
  else {
    leapYears = relativeYear >> 2;
    if (![self isLeapYearWithInt:year]) {
      leapYears++;
    }
  }
  long long int millis = (relativeYear * 365LL + leapYears) * (long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  return millis - (366LL + 352) * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (int)getMinYear {
  return OrgJodaTimeChronoJulianChronology_MIN_YEAR;
}

- (int)getMaxYear {
  return OrgJodaTimeChronoJulianChronology_MAX_YEAR;
}

- (long long int)getAverageMillisPerYear {
  return OrgJodaTimeChronoJulianChronology_MILLIS_PER_YEAR;
}

- (long long int)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoJulianChronology_MILLIS_PER_YEAR / 2;
}

- (long long int)getAverageMillisPerMonth {
  return OrgJodaTimeChronoJulianChronology_MILLIS_PER_MONTH;
}

- (long long int)getApproxMillisAtEpochDividedByTwo {
  return (1969LL * OrgJodaTimeChronoJulianChronology_MILLIS_PER_YEAR + 352LL * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) / 2;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
    ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->year_ = [[OrgJodaTimeFieldSkipDateTimeField alloc] initWithOrgJodaTimeChronology:self withOrgJodaTimeDateTimeField:fields->year_];
    fields->weekyear_ = [[OrgJodaTimeFieldSkipDateTimeField alloc] initWithOrgJodaTimeChronology:self withOrgJodaTimeDateTimeField:fields->weekyear_];
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoJulianChronology class]) {
    OrgJodaTimeChronoJulianChronology_cCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    {
      OrgJodaTimeChronoJulianChronology_INSTANCE_UTC_ = [OrgJodaTimeChronoJulianChronology getInstanceWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_get_UTC_()];
    }
    OrgJodaTimeChronoJulianChronology_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "adjustYearForSetWithInt:", "adjustYearForSet", "I", 0x8, NULL },
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.JulianChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.JulianChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.JulianChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withInt:", "getInstance", "Lorg.joda.time.chrono.JulianChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:withId:withInt:", "JulianChronology", NULL, 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getDateMidnightMillisWithInt:withInt:withInt:", "getDateMidnightMillis", "J", 0x0, "Ljava.lang.IllegalArgumentException;" },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_JulianChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoJulianChronology_serialVersionUID },
    { "MILLIS_PER_YEAR_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoJulianChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_MONTH_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoJulianChronology_MILLIS_PER_MONTH },
    { "MIN_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoJulianChronology_MIN_YEAR },
    { "MAX_YEAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeChronoJulianChronology_MAX_YEAR },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.JulianChronology;", &OrgJodaTimeChronoJulianChronology_INSTANCE_UTC_,  },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoJulianChronology_cCache_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoJulianChronology = { "JulianChronology", "org.joda.time.chrono", NULL, 0x11, 19, methods, 7, fields, 0, NULL};
  return &_OrgJodaTimeChronoJulianChronology;
}

@end
