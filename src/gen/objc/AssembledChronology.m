//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/AssembledChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"

@implementation OrgJodaTimeChronoAssembledChronology

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param {
  if (self = [super init]) {
    iBase_ = base;
    iParam_ = param;
    [self setFields];
  }
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return nil;
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 6) == 6) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  return [super getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
}

- (long long int)getDateTimeMillisWithInt:(int)year
                                  withInt:(int)monthOfYear
                                  withInt:(int)dayOfMonth
                                  withInt:(int)hourOfDay
                                  withInt:(int)minuteOfHour
                                  withInt:(int)secondOfMinute
                                  withInt:(int)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 5) == 5) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  return [super getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (long long int)getDateTimeMillisWithLong:(long long int)instant
                                   withInt:(int)hourOfDay
                                   withInt:(int)minuteOfHour
                                   withInt:(int)secondOfMinute
                                   withInt:(int)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 1) == 1) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  return [super getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (OrgJodaTimeDurationField *)millis {
  return iMillis_;
}

- (OrgJodaTimeDateTimeField *)millisOfSecond {
  return iMillisOfSecond_;
}

- (OrgJodaTimeDateTimeField *)millisOfDay {
  return iMillisOfDay_;
}

- (OrgJodaTimeDurationField *)seconds {
  return iSeconds_;
}

- (OrgJodaTimeDateTimeField *)secondOfMinute {
  return iSecondOfMinute_;
}

- (OrgJodaTimeDateTimeField *)secondOfDay {
  return iSecondOfDay_;
}

- (OrgJodaTimeDurationField *)minutes {
  return iMinutes_;
}

- (OrgJodaTimeDateTimeField *)minuteOfHour {
  return iMinuteOfHour_;
}

- (OrgJodaTimeDateTimeField *)minuteOfDay {
  return iMinuteOfDay_;
}

- (OrgJodaTimeDurationField *)hours {
  return iHours_;
}

- (OrgJodaTimeDateTimeField *)hourOfDay {
  return iHourOfDay_;
}

- (OrgJodaTimeDateTimeField *)clockhourOfDay {
  return iClockhourOfDay_;
}

- (OrgJodaTimeDurationField *)halfdays {
  return iHalfdays_;
}

- (OrgJodaTimeDateTimeField *)hourOfHalfday {
  return iHourOfHalfday_;
}

- (OrgJodaTimeDateTimeField *)clockhourOfHalfday {
  return iClockhourOfHalfday_;
}

- (OrgJodaTimeDateTimeField *)halfdayOfDay {
  return iHalfdayOfDay_;
}

- (OrgJodaTimeDurationField *)days {
  return iDays_;
}

- (OrgJodaTimeDateTimeField *)dayOfWeek {
  return iDayOfWeek_;
}

- (OrgJodaTimeDateTimeField *)dayOfMonth {
  return iDayOfMonth_;
}

- (OrgJodaTimeDateTimeField *)dayOfYear {
  return iDayOfYear_;
}

- (OrgJodaTimeDurationField *)weeks {
  return iWeeks_;
}

- (OrgJodaTimeDateTimeField *)weekOfWeekyear {
  return iWeekOfWeekyear_;
}

- (OrgJodaTimeDurationField *)weekyears {
  return iWeekyears_;
}

- (OrgJodaTimeDateTimeField *)weekyear {
  return iWeekyear_;
}

- (OrgJodaTimeDateTimeField *)weekyearOfCentury {
  return iWeekyearOfCentury_;
}

- (OrgJodaTimeDurationField *)months {
  return iMonths_;
}

- (OrgJodaTimeDateTimeField *)monthOfYear {
  return iMonthOfYear_;
}

- (OrgJodaTimeDurationField *)years {
  return iYears_;
}

- (OrgJodaTimeDateTimeField *)year {
  return iYear_;
}

- (OrgJodaTimeDateTimeField *)yearOfEra {
  return iYearOfEra_;
}

- (OrgJodaTimeDateTimeField *)yearOfCentury {
  return iYearOfCentury_;
}

- (OrgJodaTimeDurationField *)centuries {
  return iCenturies_;
}

- (OrgJodaTimeDateTimeField *)centuryOfEra {
  return iCenturyOfEra_;
}

- (OrgJodaTimeDurationField *)eras {
  return iEras_;
}

- (OrgJodaTimeDateTimeField *)era {
  return iEra_;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgJodaTimeChronology *)getBase {
  return iBase_;
}

- (id)getParam {
  return iParam_;
}

- (void)setFields {
  OrgJodaTimeChronoAssembledChronology_Fields *fields = [[OrgJodaTimeChronoAssembledChronology_Fields alloc] init];
  if (iBase_ != nil) {
    [fields copyFieldsFromWithOrgJodaTimeChronology:iBase_];
  }
  [self assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
  {
    OrgJodaTimeDurationField *f;
    iMillis_ = (f = fields->millis_) != nil ? f : [super millis];
    iSeconds_ = (f = fields->seconds_) != nil ? f : [super seconds];
    iMinutes_ = (f = fields->minutes_) != nil ? f : [super minutes];
    iHours_ = (f = fields->hours_) != nil ? f : [super hours];
    iHalfdays_ = (f = fields->halfdays_) != nil ? f : [super halfdays];
    iDays_ = (f = fields->days_) != nil ? f : [super days];
    iWeeks_ = (f = fields->weeks_) != nil ? f : [super weeks];
    iWeekyears_ = (f = fields->weekyears_) != nil ? f : [super weekyears];
    iMonths_ = (f = fields->months_) != nil ? f : [super months];
    iYears_ = (f = fields->years_) != nil ? f : [super years];
    iCenturies_ = (f = fields->centuries_) != nil ? f : [super centuries];
    iEras_ = (f = fields->eras_) != nil ? f : [super eras];
  }
  {
    OrgJodaTimeDateTimeField *f;
    iMillisOfSecond_ = (f = fields->millisOfSecond_) != nil ? f : [super millisOfSecond];
    iMillisOfDay_ = (f = fields->millisOfDay_) != nil ? f : [super millisOfDay];
    iSecondOfMinute_ = (f = fields->secondOfMinute_) != nil ? f : [super secondOfMinute];
    iSecondOfDay_ = (f = fields->secondOfDay_) != nil ? f : [super secondOfDay];
    iMinuteOfHour_ = (f = fields->minuteOfHour_) != nil ? f : [super minuteOfHour];
    iMinuteOfDay_ = (f = fields->minuteOfDay_) != nil ? f : [super minuteOfDay];
    iHourOfDay_ = (f = fields->hourOfDay_) != nil ? f : [super hourOfDay];
    iClockhourOfDay_ = (f = fields->clockhourOfDay_) != nil ? f : [super clockhourOfDay];
    iHourOfHalfday_ = (f = fields->hourOfHalfday_) != nil ? f : [super hourOfHalfday];
    iClockhourOfHalfday_ = (f = fields->clockhourOfHalfday_) != nil ? f : [super clockhourOfHalfday];
    iHalfdayOfDay_ = (f = fields->halfdayOfDay_) != nil ? f : [super halfdayOfDay];
    iDayOfWeek_ = (f = fields->dayOfWeek_) != nil ? f : [super dayOfWeek];
    iDayOfMonth_ = (f = fields->dayOfMonth_) != nil ? f : [super dayOfMonth];
    iDayOfYear_ = (f = fields->dayOfYear_) != nil ? f : [super dayOfYear];
    iWeekOfWeekyear_ = (f = fields->weekOfWeekyear_) != nil ? f : [super weekOfWeekyear];
    iWeekyear_ = (f = fields->weekyear_) != nil ? f : [super weekyear];
    iWeekyearOfCentury_ = (f = fields->weekyearOfCentury_) != nil ? f : [super weekyearOfCentury];
    iMonthOfYear_ = (f = fields->monthOfYear_) != nil ? f : [super monthOfYear];
    iYear_ = (f = fields->year_) != nil ? f : [super year];
    iYearOfEra_ = (f = fields->yearOfEra_) != nil ? f : [super yearOfEra];
    iYearOfCentury_ = (f = fields->yearOfCentury_) != nil ? f : [super yearOfCentury];
    iCenturyOfEra_ = (f = fields->centuryOfEra_) != nil ? f : [super centuryOfEra];
    iEra_ = (f = fields->era_) != nil ? f : [super era];
  }
  int flags;
  if (iBase_ == nil) {
    flags = 0;
  }
  else {
    flags = ((iHourOfDay_ == [iBase_ hourOfDay] && iMinuteOfHour_ == [iBase_ minuteOfHour] && iSecondOfMinute_ == [iBase_ secondOfMinute] && iMillisOfSecond_ == [iBase_ millisOfSecond]) ? 1 : 0) | ((iMillisOfDay_ == [iBase_ millisOfDay]) ? 2 : 0) | ((iYear_ == [iBase_ year] && iMonthOfYear_ == [iBase_ monthOfYear] && iDayOfMonth_ == [iBase_ dayOfMonth]) ? 4 : 0);
  }
  iBaseFlags_ = flags;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  [self setFields];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoAssembledChronology *)other {
  [super copyAllFieldsTo:other];
  other->iBase_ = iBase_;
  other->iBaseFlags_ = iBaseFlags_;
  other->iCenturies_ = iCenturies_;
  other->iCenturyOfEra_ = iCenturyOfEra_;
  other->iClockhourOfDay_ = iClockhourOfDay_;
  other->iClockhourOfHalfday_ = iClockhourOfHalfday_;
  other->iDayOfMonth_ = iDayOfMonth_;
  other->iDayOfWeek_ = iDayOfWeek_;
  other->iDayOfYear_ = iDayOfYear_;
  other->iDays_ = iDays_;
  other->iEra_ = iEra_;
  other->iEras_ = iEras_;
  other->iHalfdayOfDay_ = iHalfdayOfDay_;
  other->iHalfdays_ = iHalfdays_;
  other->iHourOfDay_ = iHourOfDay_;
  other->iHourOfHalfday_ = iHourOfHalfday_;
  other->iHours_ = iHours_;
  other->iMillis_ = iMillis_;
  other->iMillisOfDay_ = iMillisOfDay_;
  other->iMillisOfSecond_ = iMillisOfSecond_;
  other->iMinuteOfDay_ = iMinuteOfDay_;
  other->iMinuteOfHour_ = iMinuteOfHour_;
  other->iMinutes_ = iMinutes_;
  other->iMonthOfYear_ = iMonthOfYear_;
  other->iMonths_ = iMonths_;
  other->iParam_ = iParam_;
  other->iSecondOfDay_ = iSecondOfDay_;
  other->iSecondOfMinute_ = iSecondOfMinute_;
  other->iSeconds_ = iSeconds_;
  other->iWeekOfWeekyear_ = iWeekOfWeekyear_;
  other->iWeeks_ = iWeeks_;
  other->iWeekyear_ = iWeekyear_;
  other->iWeekyearOfCentury_ = iWeekyearOfCentury_;
  other->iWeekyears_ = iWeekyears_;
  other->iYear_ = iYear_;
  other->iYearOfCentury_ = iYearOfCentury_;
  other->iYearOfEra_ = iYearOfEra_;
  other->iYears_ = iYears_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withId:", "AssembledChronology", NULL, 0x4, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "millis", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "seconds", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "secondOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "minutes", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "minuteOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "hours", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "clockhourOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "halfdays", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "hourOfHalfday", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "clockhourOfHalfday", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "halfdayOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "days", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "weeks", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "weekyears", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "weekyear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "weekyearOfCentury", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "months", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "years", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "year", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "centuries", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "eras", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "era", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x404, NULL },
    { "getBase", NULL, "Lorg.joda.time.Chronology;", 0x14, NULL },
    { "getParam", NULL, "Ljava.lang.Object;", 0x14, NULL },
    { "setFields", NULL, "V", 0x2, NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_AssembledChronology_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoAssembledChronology_serialVersionUID },
    { "iBase_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iParam_", NULL, 0x12, "Ljava.lang.Object;", NULL,  },
    { "iMillis_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iSeconds_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iMinutes_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iHours_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iHalfdays_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iDays_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iWeeks_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iWeekyears_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iMonths_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iYears_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iCenturies_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iEras_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iMillisOfSecond_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMillisOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iSecondOfMinute_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iSecondOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMinuteOfHour_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMinuteOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iHourOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iClockhourOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iHourOfHalfday_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iClockhourOfHalfday_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iHalfdayOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iDayOfWeek_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iDayOfMonth_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iDayOfYear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iWeekOfWeekyear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iWeekyear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iWeekyearOfCentury_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMonthOfYear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iYear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iYearOfEra_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iYearOfCentury_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iCenturyOfEra_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iEra_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iBaseFlags_", NULL, 0x82, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoAssembledChronology = { "AssembledChronology", "org.joda.time.chrono", NULL, 0x401, 45, methods, 39, fields, 0, NULL};
  return &_OrgJodaTimeChronoAssembledChronology;
}

@end

@implementation OrgJodaTimeChronoAssembledChronology_Fields

- (instancetype)init {
  return [super init];
}

- (void)copyFieldsFromWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  {
    OrgJodaTimeDurationField *f;
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [((OrgJodaTimeChronology *) nil_chk(chrono)) millis]]) {
      millis_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono seconds]]) {
      seconds_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono minutes]]) {
      minutes_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono hours]]) {
      hours_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono halfdays]]) {
      halfdays_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono days]]) {
      days_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono weeks]]) {
      weeks_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono weekyears]]) {
      weekyears_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono months]]) {
      months_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono years]]) {
      years_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono centuries]]) {
      centuries_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDurationField:f = [chrono eras]]) {
      eras_ = f;
    }
  }
  {
    OrgJodaTimeDateTimeField *f;
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono millisOfSecond]]) {
      millisOfSecond_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono millisOfDay]]) {
      millisOfDay_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono secondOfMinute]]) {
      secondOfMinute_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono secondOfDay]]) {
      secondOfDay_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono minuteOfHour]]) {
      minuteOfHour_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono minuteOfDay]]) {
      minuteOfDay_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono hourOfDay]]) {
      hourOfDay_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono clockhourOfDay]]) {
      clockhourOfDay_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono hourOfHalfday]]) {
      hourOfHalfday_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono clockhourOfHalfday]]) {
      clockhourOfHalfday_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono halfdayOfDay]]) {
      halfdayOfDay_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono dayOfWeek]]) {
      dayOfWeek_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono dayOfMonth]]) {
      dayOfMonth_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono dayOfYear]]) {
      dayOfYear_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono weekOfWeekyear]]) {
      weekOfWeekyear_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono weekyear]]) {
      weekyear_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono weekyearOfCentury]]) {
      weekyearOfCentury_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono monthOfYear]]) {
      monthOfYear_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono year]]) {
      year_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono yearOfEra]]) {
      yearOfEra_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono yearOfCentury]]) {
      yearOfCentury_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono centuryOfEra]]) {
      centuryOfEra_ = f;
    }
    if ([OrgJodaTimeChronoAssembledChronology_Fields isSupportedWithOrgJodaTimeDateTimeField:f = [chrono era]]) {
      era_ = f;
    }
  }
}

+ (BOOL)isSupportedWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  return field == nil ? NO : [field isSupported];
}

+ (BOOL)isSupportedWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return field == nil ? NO : [field isSupported];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoAssembledChronology_Fields *)other {
  [super copyAllFieldsTo:other];
  other->centuries_ = centuries_;
  other->centuryOfEra_ = centuryOfEra_;
  other->clockhourOfDay_ = clockhourOfDay_;
  other->clockhourOfHalfday_ = clockhourOfHalfday_;
  other->dayOfMonth_ = dayOfMonth_;
  other->dayOfWeek_ = dayOfWeek_;
  other->dayOfYear_ = dayOfYear_;
  other->days_ = days_;
  other->era_ = era_;
  other->eras_ = eras_;
  other->halfdayOfDay_ = halfdayOfDay_;
  other->halfdays_ = halfdays_;
  other->hourOfDay_ = hourOfDay_;
  other->hourOfHalfday_ = hourOfHalfday_;
  other->hours_ = hours_;
  other->millis_ = millis_;
  other->millisOfDay_ = millisOfDay_;
  other->millisOfSecond_ = millisOfSecond_;
  other->minuteOfDay_ = minuteOfDay_;
  other->minuteOfHour_ = minuteOfHour_;
  other->minutes_ = minutes_;
  other->monthOfYear_ = monthOfYear_;
  other->months_ = months_;
  other->secondOfDay_ = secondOfDay_;
  other->secondOfMinute_ = secondOfMinute_;
  other->seconds_ = seconds_;
  other->weekOfWeekyear_ = weekOfWeekyear_;
  other->weeks_ = weeks_;
  other->weekyear_ = weekyear_;
  other->weekyearOfCentury_ = weekyearOfCentury_;
  other->weekyears_ = weekyears_;
  other->year_ = year_;
  other->yearOfCentury_ = yearOfCentury_;
  other->yearOfEra_ = yearOfEra_;
  other->years_ = years_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "Fields", NULL, 0x0, NULL },
    { "copyFieldsFromWithOrgJodaTimeChronology:", "copyFieldsFrom", "V", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDurationField:", "isSupported", "Z", 0xa, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeField:", "isSupported", "Z", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "millis_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "seconds_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "minutes_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "hours_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "halfdays_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "days_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "weeks_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "weekyears_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "months_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "years_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "centuries_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "eras_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "millisOfSecond_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "millisOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "secondOfMinute_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "secondOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "minuteOfHour_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "minuteOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "hourOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "clockhourOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "hourOfHalfday_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "clockhourOfHalfday_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "halfdayOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "dayOfWeek_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "dayOfMonth_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "dayOfYear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "weekOfWeekyear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "weekyear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "weekyearOfCentury_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "monthOfYear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "year_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "yearOfEra_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "yearOfCentury_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "centuryOfEra_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "era_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoAssembledChronology_Fields = { "Fields", "org.joda.time.chrono", "AssembledChronology", 0x19, 4, methods, 35, fields, 0, NULL};
  return &_OrgJodaTimeChronoAssembledChronology_Fields;
}

@end
