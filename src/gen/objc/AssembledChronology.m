//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/AssembledChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field);
__attribute__((unused)) static jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(OrgJodaTimeDateTimeField *field);

@implementation OrgJodaTimeChronoAssembledChronology

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param {
  if (self = [super init]) {
    OrgJodaTimeChronoAssembledChronology_set_iBase_(self, base);
    OrgJodaTimeChronoAssembledChronology_set_iParam_(self, param);
    [self setFields];
  }
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return nil;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 6) == 6) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  return [super getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 5) == 5) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  return [super getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = iBase_) != nil && (iBaseFlags_ & 1) == 1) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  return [super getDateTimeMillisWithLong:instant withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
}

- (OrgJodaTimeDurationField *)millis {
  return iMillis_;
}

- (OrgJodaTimeDateTimeField *)millisOfSecond {
  return iMillisOfSecond_;
}

- (OrgJodaTimeDateTimeField *)millisOfDay {
  return iMillisOfDay_;
}

- (OrgJodaTimeDurationField *)seconds {
  return iSeconds_;
}

- (OrgJodaTimeDateTimeField *)secondOfMinute {
  return iSecondOfMinute_;
}

- (OrgJodaTimeDateTimeField *)secondOfDay {
  return iSecondOfDay_;
}

- (OrgJodaTimeDurationField *)minutes {
  return iMinutes_;
}

- (OrgJodaTimeDateTimeField *)minuteOfHour {
  return iMinuteOfHour_;
}

- (OrgJodaTimeDateTimeField *)minuteOfDay {
  return iMinuteOfDay_;
}

- (OrgJodaTimeDurationField *)hours {
  return iHours_;
}

- (OrgJodaTimeDateTimeField *)hourOfDay {
  return iHourOfDay_;
}

- (OrgJodaTimeDateTimeField *)clockhourOfDay {
  return iClockhourOfDay_;
}

- (OrgJodaTimeDurationField *)halfdays {
  return iHalfdays_;
}

- (OrgJodaTimeDateTimeField *)hourOfHalfday {
  return iHourOfHalfday_;
}

- (OrgJodaTimeDateTimeField *)clockhourOfHalfday {
  return iClockhourOfHalfday_;
}

- (OrgJodaTimeDateTimeField *)halfdayOfDay {
  return iHalfdayOfDay_;
}

- (OrgJodaTimeDurationField *)days {
  return iDays_;
}

- (OrgJodaTimeDateTimeField *)dayOfWeek {
  return iDayOfWeek_;
}

- (OrgJodaTimeDateTimeField *)dayOfMonth {
  return iDayOfMonth_;
}

- (OrgJodaTimeDateTimeField *)dayOfYear {
  return iDayOfYear_;
}

- (OrgJodaTimeDurationField *)weeks {
  return iWeeks_;
}

- (OrgJodaTimeDateTimeField *)weekOfWeekyear {
  return iWeekOfWeekyear_;
}

- (OrgJodaTimeDurationField *)weekyears {
  return iWeekyears_;
}

- (OrgJodaTimeDateTimeField *)weekyear {
  return iWeekyear_;
}

- (OrgJodaTimeDateTimeField *)weekyearOfCentury {
  return iWeekyearOfCentury_;
}

- (OrgJodaTimeDurationField *)months {
  return iMonths_;
}

- (OrgJodaTimeDateTimeField *)monthOfYear {
  return iMonthOfYear_;
}

- (OrgJodaTimeDurationField *)years {
  return iYears_;
}

- (OrgJodaTimeDateTimeField *)year {
  return iYear_;
}

- (OrgJodaTimeDateTimeField *)yearOfEra {
  return iYearOfEra_;
}

- (OrgJodaTimeDateTimeField *)yearOfCentury {
  return iYearOfCentury_;
}

- (OrgJodaTimeDurationField *)centuries {
  return iCenturies_;
}

- (OrgJodaTimeDateTimeField *)centuryOfEra {
  return iCenturyOfEra_;
}

- (OrgJodaTimeDurationField *)eras {
  return iEras_;
}

- (OrgJodaTimeDateTimeField *)era {
  return iEra_;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgJodaTimeChronology *)getBase {
  return iBase_;
}

- (id)getParam {
  return iParam_;
}

- (void)setFields {
  OrgJodaTimeChronoAssembledChronology_Fields *fields = [[[OrgJodaTimeChronoAssembledChronology_Fields alloc] init] autorelease];
  if (iBase_ != nil) {
    [fields copyFieldsFromWithOrgJodaTimeChronology:iBase_];
  }
  [self assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
  {
    OrgJodaTimeDurationField *f;
    OrgJodaTimeChronoAssembledChronology_set_iMillis_(self, (f = fields->millis_) != nil ? f : [super millis]);
    OrgJodaTimeChronoAssembledChronology_set_iSeconds_(self, (f = fields->seconds_) != nil ? f : [super seconds]);
    OrgJodaTimeChronoAssembledChronology_set_iMinutes_(self, (f = fields->minutes_) != nil ? f : [super minutes]);
    OrgJodaTimeChronoAssembledChronology_set_iHours_(self, (f = fields->hours_) != nil ? f : [super hours]);
    OrgJodaTimeChronoAssembledChronology_set_iHalfdays_(self, (f = fields->halfdays_) != nil ? f : [super halfdays]);
    OrgJodaTimeChronoAssembledChronology_set_iDays_(self, (f = fields->days_) != nil ? f : [super days]);
    OrgJodaTimeChronoAssembledChronology_set_iWeeks_(self, (f = fields->weeks_) != nil ? f : [super weeks]);
    OrgJodaTimeChronoAssembledChronology_set_iWeekyears_(self, (f = fields->weekyears_) != nil ? f : [super weekyears]);
    OrgJodaTimeChronoAssembledChronology_set_iMonths_(self, (f = fields->months_) != nil ? f : [super months]);
    OrgJodaTimeChronoAssembledChronology_set_iYears_(self, (f = fields->years_) != nil ? f : [super years]);
    OrgJodaTimeChronoAssembledChronology_set_iCenturies_(self, (f = fields->centuries_) != nil ? f : [super centuries]);
    OrgJodaTimeChronoAssembledChronology_set_iEras_(self, (f = fields->eras_) != nil ? f : [super eras]);
  }
  {
    OrgJodaTimeDateTimeField *f;
    OrgJodaTimeChronoAssembledChronology_set_iMillisOfSecond_(self, (f = fields->millisOfSecond_) != nil ? f : [super millisOfSecond]);
    OrgJodaTimeChronoAssembledChronology_set_iMillisOfDay_(self, (f = fields->millisOfDay_) != nil ? f : [super millisOfDay]);
    OrgJodaTimeChronoAssembledChronology_set_iSecondOfMinute_(self, (f = fields->secondOfMinute_) != nil ? f : [super secondOfMinute]);
    OrgJodaTimeChronoAssembledChronology_set_iSecondOfDay_(self, (f = fields->secondOfDay_) != nil ? f : [super secondOfDay]);
    OrgJodaTimeChronoAssembledChronology_set_iMinuteOfHour_(self, (f = fields->minuteOfHour_) != nil ? f : [super minuteOfHour]);
    OrgJodaTimeChronoAssembledChronology_set_iMinuteOfDay_(self, (f = fields->minuteOfDay_) != nil ? f : [super minuteOfDay]);
    OrgJodaTimeChronoAssembledChronology_set_iHourOfDay_(self, (f = fields->hourOfDay_) != nil ? f : [super hourOfDay]);
    OrgJodaTimeChronoAssembledChronology_set_iClockhourOfDay_(self, (f = fields->clockhourOfDay_) != nil ? f : [super clockhourOfDay]);
    OrgJodaTimeChronoAssembledChronology_set_iHourOfHalfday_(self, (f = fields->hourOfHalfday_) != nil ? f : [super hourOfHalfday]);
    OrgJodaTimeChronoAssembledChronology_set_iClockhourOfHalfday_(self, (f = fields->clockhourOfHalfday_) != nil ? f : [super clockhourOfHalfday]);
    OrgJodaTimeChronoAssembledChronology_set_iHalfdayOfDay_(self, (f = fields->halfdayOfDay_) != nil ? f : [super halfdayOfDay]);
    OrgJodaTimeChronoAssembledChronology_set_iDayOfWeek_(self, (f = fields->dayOfWeek_) != nil ? f : [super dayOfWeek]);
    OrgJodaTimeChronoAssembledChronology_set_iDayOfMonth_(self, (f = fields->dayOfMonth_) != nil ? f : [super dayOfMonth]);
    OrgJodaTimeChronoAssembledChronology_set_iDayOfYear_(self, (f = fields->dayOfYear_) != nil ? f : [super dayOfYear]);
    OrgJodaTimeChronoAssembledChronology_set_iWeekOfWeekyear_(self, (f = fields->weekOfWeekyear_) != nil ? f : [super weekOfWeekyear]);
    OrgJodaTimeChronoAssembledChronology_set_iWeekyear_(self, (f = fields->weekyear_) != nil ? f : [super weekyear]);
    OrgJodaTimeChronoAssembledChronology_set_iWeekyearOfCentury_(self, (f = fields->weekyearOfCentury_) != nil ? f : [super weekyearOfCentury]);
    OrgJodaTimeChronoAssembledChronology_set_iMonthOfYear_(self, (f = fields->monthOfYear_) != nil ? f : [super monthOfYear]);
    OrgJodaTimeChronoAssembledChronology_set_iYear_(self, (f = fields->year_) != nil ? f : [super year]);
    OrgJodaTimeChronoAssembledChronology_set_iYearOfEra_(self, (f = fields->yearOfEra_) != nil ? f : [super yearOfEra]);
    OrgJodaTimeChronoAssembledChronology_set_iYearOfCentury_(self, (f = fields->yearOfCentury_) != nil ? f : [super yearOfCentury]);
    OrgJodaTimeChronoAssembledChronology_set_iCenturyOfEra_(self, (f = fields->centuryOfEra_) != nil ? f : [super centuryOfEra]);
    OrgJodaTimeChronoAssembledChronology_set_iEra_(self, (f = fields->era_) != nil ? f : [super era]);
  }
  jint flags;
  if (iBase_ == nil) {
    flags = 0;
  }
  else {
    flags = ((iHourOfDay_ == [iBase_ hourOfDay] && iMinuteOfHour_ == [iBase_ minuteOfHour] && iSecondOfMinute_ == [iBase_ secondOfMinute] && iMillisOfSecond_ == [iBase_ millisOfSecond]) ? 1 : 0) | ((iMillisOfDay_ == [iBase_ millisOfDay]) ? 2 : 0) | ((iYear_ == [iBase_ year] && iMonthOfYear_ == [iBase_ monthOfYear] && iDayOfMonth_ == [iBase_ dayOfMonth]) ? 4 : 0);
  }
  iBaseFlags_ = flags;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  [self setFields];
}

- (void)dealloc {
  OrgJodaTimeChronoAssembledChronology_set_iBase_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iParam_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMillis_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iSeconds_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMinutes_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iHours_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iHalfdays_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iDays_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iWeeks_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iWeekyears_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMonths_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iYears_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iCenturies_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iEras_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMillisOfSecond_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMillisOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iSecondOfMinute_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iSecondOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMinuteOfHour_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMinuteOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iHourOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iClockhourOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iHourOfHalfday_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iClockhourOfHalfday_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iHalfdayOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iDayOfWeek_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iDayOfMonth_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iDayOfYear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iWeekOfWeekyear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iWeekyear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iWeekyearOfCentury_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iMonthOfYear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iYear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iYearOfEra_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iYearOfCentury_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iCenturyOfEra_(self, nil);
  OrgJodaTimeChronoAssembledChronology_set_iEra_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoAssembledChronology *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoAssembledChronology_set_iBase_(other, iBase_);
  OrgJodaTimeChronoAssembledChronology_set_iParam_(other, iParam_);
  OrgJodaTimeChronoAssembledChronology_set_iMillis_(other, iMillis_);
  OrgJodaTimeChronoAssembledChronology_set_iSeconds_(other, iSeconds_);
  OrgJodaTimeChronoAssembledChronology_set_iMinutes_(other, iMinutes_);
  OrgJodaTimeChronoAssembledChronology_set_iHours_(other, iHours_);
  OrgJodaTimeChronoAssembledChronology_set_iHalfdays_(other, iHalfdays_);
  OrgJodaTimeChronoAssembledChronology_set_iDays_(other, iDays_);
  OrgJodaTimeChronoAssembledChronology_set_iWeeks_(other, iWeeks_);
  OrgJodaTimeChronoAssembledChronology_set_iWeekyears_(other, iWeekyears_);
  OrgJodaTimeChronoAssembledChronology_set_iMonths_(other, iMonths_);
  OrgJodaTimeChronoAssembledChronology_set_iYears_(other, iYears_);
  OrgJodaTimeChronoAssembledChronology_set_iCenturies_(other, iCenturies_);
  OrgJodaTimeChronoAssembledChronology_set_iEras_(other, iEras_);
  OrgJodaTimeChronoAssembledChronology_set_iMillisOfSecond_(other, iMillisOfSecond_);
  OrgJodaTimeChronoAssembledChronology_set_iMillisOfDay_(other, iMillisOfDay_);
  OrgJodaTimeChronoAssembledChronology_set_iSecondOfMinute_(other, iSecondOfMinute_);
  OrgJodaTimeChronoAssembledChronology_set_iSecondOfDay_(other, iSecondOfDay_);
  OrgJodaTimeChronoAssembledChronology_set_iMinuteOfHour_(other, iMinuteOfHour_);
  OrgJodaTimeChronoAssembledChronology_set_iMinuteOfDay_(other, iMinuteOfDay_);
  OrgJodaTimeChronoAssembledChronology_set_iHourOfDay_(other, iHourOfDay_);
  OrgJodaTimeChronoAssembledChronology_set_iClockhourOfDay_(other, iClockhourOfDay_);
  OrgJodaTimeChronoAssembledChronology_set_iHourOfHalfday_(other, iHourOfHalfday_);
  OrgJodaTimeChronoAssembledChronology_set_iClockhourOfHalfday_(other, iClockhourOfHalfday_);
  OrgJodaTimeChronoAssembledChronology_set_iHalfdayOfDay_(other, iHalfdayOfDay_);
  OrgJodaTimeChronoAssembledChronology_set_iDayOfWeek_(other, iDayOfWeek_);
  OrgJodaTimeChronoAssembledChronology_set_iDayOfMonth_(other, iDayOfMonth_);
  OrgJodaTimeChronoAssembledChronology_set_iDayOfYear_(other, iDayOfYear_);
  OrgJodaTimeChronoAssembledChronology_set_iWeekOfWeekyear_(other, iWeekOfWeekyear_);
  OrgJodaTimeChronoAssembledChronology_set_iWeekyear_(other, iWeekyear_);
  OrgJodaTimeChronoAssembledChronology_set_iWeekyearOfCentury_(other, iWeekyearOfCentury_);
  OrgJodaTimeChronoAssembledChronology_set_iMonthOfYear_(other, iMonthOfYear_);
  OrgJodaTimeChronoAssembledChronology_set_iYear_(other, iYear_);
  OrgJodaTimeChronoAssembledChronology_set_iYearOfEra_(other, iYearOfEra_);
  OrgJodaTimeChronoAssembledChronology_set_iYearOfCentury_(other, iYearOfCentury_);
  OrgJodaTimeChronoAssembledChronology_set_iCenturyOfEra_(other, iCenturyOfEra_);
  OrgJodaTimeChronoAssembledChronology_set_iEra_(other, iEra_);
  other->iBaseFlags_ = iBaseFlags_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withId:", "AssembledChronology", NULL, 0x4, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;" },
    { "millis", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "seconds", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "secondOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "minutes", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "minuteOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "hours", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "clockhourOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "halfdays", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "hourOfHalfday", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "clockhourOfHalfday", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "halfdayOfDay", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "days", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "dayOfWeek", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "dayOfYear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "weeks", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "weekOfWeekyear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "weekyears", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "weekyear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "weekyearOfCentury", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "months", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "years", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "year", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "yearOfEra", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "yearOfCentury", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "centuries", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "centuryOfEra", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "eras", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "era", NULL, "Lorg.joda.time.DateTimeField;", 0x11, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x404, NULL },
    { "getBase", NULL, "Lorg.joda.time.Chronology;", 0x14, NULL },
    { "getParam", NULL, "Ljava.lang.Object;", 0x14, NULL },
    { "setFields", NULL, "V", 0x2, NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoAssembledChronology_serialVersionUID },
    { "iBase_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iParam_", NULL, 0x12, "Ljava.lang.Object;", NULL,  },
    { "iMillis_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iSeconds_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iMinutes_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iHours_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iHalfdays_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iDays_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iWeeks_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iWeekyears_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iMonths_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iYears_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iCenturies_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iEras_", NULL, 0x82, "Lorg.joda.time.DurationField;", NULL,  },
    { "iMillisOfSecond_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMillisOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iSecondOfMinute_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iSecondOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMinuteOfHour_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMinuteOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iHourOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iClockhourOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iHourOfHalfday_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iClockhourOfHalfday_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iHalfdayOfDay_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iDayOfWeek_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iDayOfMonth_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iDayOfYear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iWeekOfWeekyear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iWeekyear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iWeekyearOfCentury_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iMonthOfYear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iYear_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iYearOfEra_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iYearOfCentury_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iCenturyOfEra_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iEra_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iBaseFlags_", NULL, 0x82, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoAssembledChronology = { "AssembledChronology", "org.joda.time.chrono", NULL, 0x401, 45, methods, 39, fields, 0, NULL};
  return &_OrgJodaTimeChronoAssembledChronology;
}

@end

@implementation OrgJodaTimeChronoAssembledChronology_Fields

- (instancetype)init {
  return [super init];
}

- (void)copyFieldsFromWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  {
    OrgJodaTimeDurationField *f;
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [((OrgJodaTimeChronology *) nil_chk(chrono)) millis])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_millis_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono seconds])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_seconds_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono minutes])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_minutes_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono hours])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_hours_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono halfdays])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_halfdays_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono days])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_days_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono weeks])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_weeks_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono weekyears])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono months])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_months_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono years])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_years_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono centuries])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(f = [chrono eras])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_eras_(self, f);
    }
  }
  {
    OrgJodaTimeDateTimeField *f;
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono millisOfSecond])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono millisOfDay])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono secondOfMinute])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono secondOfDay])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono minuteOfHour])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono minuteOfDay])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono hourOfDay])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono clockhourOfDay])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono hourOfHalfday])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono clockhourOfHalfday])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono halfdayOfDay])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono dayOfWeek])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfWeek_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono dayOfMonth])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono dayOfYear])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfYear_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono weekOfWeekyear])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_weekOfWeekyear_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono weekyear])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_weekyear_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono weekyearOfCentury])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_weekyearOfCentury_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono monthOfYear])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_monthOfYear_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono year])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_year_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono yearOfEra])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfEra_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono yearOfCentury])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfCentury_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono centuryOfEra])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_centuryOfEra_(self, f);
    }
    if (OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(f = [chrono era])) {
      OrgJodaTimeChronoAssembledChronology_Fields_set_era_(self, f);
    }
  }
}

+ (jboolean)isSupportedWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  return OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(field);
}

+ (jboolean)isSupportedWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(field);
}

- (void)dealloc {
  OrgJodaTimeChronoAssembledChronology_Fields_set_millis_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_seconds_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minutes_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hours_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdays_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_days_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weeks_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_months_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_years_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_eras_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfWeek_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfYear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekOfWeekyear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyearOfCentury_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_monthOfYear_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_year_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfEra_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfCentury_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuryOfEra_(self, nil);
  OrgJodaTimeChronoAssembledChronology_Fields_set_era_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoAssembledChronology_Fields *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoAssembledChronology_Fields_set_millis_(other, millis_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_seconds_(other, seconds_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minutes_(other, minutes_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hours_(other, hours_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdays_(other, halfdays_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_days_(other, days_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weeks_(other, weeks_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyears_(other, weekyears_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_months_(other, months_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_years_(other, years_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(other, centuries_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_eras_(other, eras_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfSecond_(other, millisOfSecond_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_millisOfDay_(other, millisOfDay_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfMinute_(other, secondOfMinute_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_secondOfDay_(other, secondOfDay_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfHour_(other, minuteOfHour_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_minuteOfDay_(other, minuteOfDay_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfDay_(other, hourOfDay_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfDay_(other, clockhourOfDay_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_hourOfHalfday_(other, hourOfHalfday_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_clockhourOfHalfday_(other, clockhourOfHalfday_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_halfdayOfDay_(other, halfdayOfDay_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfWeek_(other, dayOfWeek_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfMonth_(other, dayOfMonth_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_dayOfYear_(other, dayOfYear_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekOfWeekyear_(other, weekOfWeekyear_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyear_(other, weekyear_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_weekyearOfCentury_(other, weekyearOfCentury_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_monthOfYear_(other, monthOfYear_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_year_(other, year_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfEra_(other, yearOfEra_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_yearOfCentury_(other, yearOfCentury_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_centuryOfEra_(other, centuryOfEra_);
  OrgJodaTimeChronoAssembledChronology_Fields_set_era_(other, era_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Fields", NULL, 0x0, NULL },
    { "copyFieldsFromWithOrgJodaTimeChronology:", "copyFieldsFrom", "V", 0x1, NULL },
    { "isSupportedWithOrgJodaTimeDurationField:", "isSupported", "Z", 0xa, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeField:", "isSupported", "Z", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "millis_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "seconds_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "minutes_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "hours_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "halfdays_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "days_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "weeks_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "weekyears_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "months_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "years_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "centuries_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "eras_", NULL, 0x1, "Lorg.joda.time.DurationField;", NULL,  },
    { "millisOfSecond_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "millisOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "secondOfMinute_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "secondOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "minuteOfHour_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "minuteOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "hourOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "clockhourOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "hourOfHalfday_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "clockhourOfHalfday_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "halfdayOfDay_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "dayOfWeek_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "dayOfMonth_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "dayOfYear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "weekOfWeekyear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "weekyear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "weekyearOfCentury_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "monthOfYear_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "year_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "yearOfEra_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "yearOfCentury_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "centuryOfEra_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "era_", NULL, 0x1, "Lorg.joda.time.DateTimeField;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoAssembledChronology_Fields = { "Fields", "org.joda.time.chrono", "AssembledChronology", 0x19, 4, methods, 35, fields, 0, NULL};
  return &_OrgJodaTimeChronoAssembledChronology_Fields;
}

@end

jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field) {
  OrgJodaTimeChronoAssembledChronology_Fields_init();
  return field == nil ? NO : [field isSupported];
}

jboolean OrgJodaTimeChronoAssembledChronology_Fields_isSupportedWithOrgJodaTimeDateTimeField_(OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeChronoAssembledChronology_Fields_init();
  return field == nil ? NO : [field isSupported];
}
