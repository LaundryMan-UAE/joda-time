//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/DividedDateTimeField.java
//

#ifndef _OrgJodaTimeFieldDividedDateTimeField_H_
#define _OrgJodaTimeFieldDividedDateTimeField_H_

@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDurationField;
@class OrgJodaTimeFieldRemainderDateTimeField;

#import "JreEmulation.h"
#include "DecoratedDateTimeField.h"

#define OrgJodaTimeFieldDividedDateTimeField_serialVersionUID 8318475124230605365LL

/**
 @brief Divides a DateTimeField such that the retrieved values are reduced by a fixed divisor.
 The field's unit duration is scaled accordingly, but the range duration is unchanged. <p> DividedDateTimeField is thread-safe and immutable.
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFieldDividedDateTimeField : OrgJodaTimeFieldDecoratedDateTimeField {
 @public
  int iDivisor_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
  int iMin_;
  int iMax_;
}

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param type the field type this field will actually use
 @param divisor divisor, such as 100 years in a century
 @throws IllegalArgumentException if divisor is less than two
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)divisor;

/**
 @brief Constructor.
 @param field the field to wrap, like "year()".
 @param rangeField the range field, null to derive
 @param type the field type this field will actually use
 @param divisor divisor, such as 100 years in a century
 @throws IllegalArgumentException if divisor is less than two
 */
- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(int)divisor;

/**
 @brief Construct a DividedDateTimeField that compliments the given RemainderDateTimeField.
 @param remainderField complimentary remainder field, like "yearOfCentury()".
 @param type the field type this field will actually use
 */
- (instancetype)initWithOrgJodaTimeFieldRemainderDateTimeField:(OrgJodaTimeFieldRemainderDateTimeField *)remainderField
                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

/**
 @brief Construct a DividedDateTimeField that compliments the given RemainderDateTimeField.
 @param remainderField complimentary remainder field, like "yearOfCentury()".
 @param rangeField the range field, null to derive
 @param type the field type this field will actually use
 */
- (instancetype)initWithOrgJodaTimeFieldRemainderDateTimeField:(OrgJodaTimeFieldRemainderDateTimeField *)remainderField
                                  withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

- (OrgJodaTimeDurationField *)getRangeDurationField;

/**
 @brief Get the amount of scaled units from the specified time instant.
 @param instant the time instant in millis to query.
 @return the amount of scaled units extracted from the input.
 */
- (int)getWithLong:(long long int)instant;

/**
 @brief Add the specified amount of scaled units to the specified time instant.
 The amount added may be negative.
 @param instant the time instant in millis to update.
 @param amount the amount of scaled units to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWithLong:(long long int)instant
                     withInt:(int)amount;

/**
 @brief Add the specified amount of scaled units to the specified time instant.
 The amount added may be negative.
 @param instant the time instant in millis to update.
 @param amount the amount of scaled units to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)amount;

/**
 @brief Add to the scaled component of the specified time instant, wrapping around within that component if necessary.
 @param instant the time instant in millis to update.
 @param amount the amount of scaled units to add (can be negative).
 @return the updated time instant.
 */
- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)amount;

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant;

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant;

/**
 @brief Set the specified amount of scaled units to the specified time instant.
 @param instant the time instant in millis to update.
 @param value value of scaled units to set.
 @return the updated time instant.
 @throws IllegalArgumentException if value is too large or too small.
 */
- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value;

/**
 @brief Returns a scaled version of the wrapped field's unit duration field.
 */
- (OrgJodaTimeDurationField *)getDurationField;

/**
 @brief Get the minimum value for the field.
 @return the minimum value
 */
- (int)getMinimumValue;

/**
 @brief Get the maximum value for the field.
 @return the maximum value
 */
- (int)getMaximumValue;

- (long long int)roundFloorWithLong:(long long int)instant;

- (long long int)remainderWithLong:(long long int)instant;

/**
 @brief Returns the divisor applied, in the field's units.
 @return the divisor
 */
- (int)getDivisor;

- (int)getRemainderWithInt:(int)value;

- (void)copyAllFieldsTo:(OrgJodaTimeFieldDividedDateTimeField *)other;

@end

__attribute__((always_inline)) inline void OrgJodaTimeFieldDividedDateTimeField_init() {}

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldDividedDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFieldDividedDateTimeField, iRangeDurationField_, OrgJodaTimeDurationField *)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFieldDividedDateTimeField, serialVersionUID, long long int)

#endif // _OrgJodaTimeFieldDividedDateTimeField_H_
