//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DecoratedDateTimeField.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "GregorianChronology.h"
#include "IOSPrimitiveArray.h"
#include "ISOYearOfEraDateTimeField.h"
#include "ReadablePartial.h"

BOOL OrgJodaTimeChronoISOYearOfEraDateTimeField_initialized = NO;

@implementation OrgJodaTimeChronoISOYearOfEraDateTimeField

OrgJodaTimeDateTimeField * OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE_;

- (instancetype)init {
  return [super initWithOrgJodaTimeDateTimeField:[((OrgJodaTimeChronoGregorianChronology *) nil_chk([OrgJodaTimeChronoGregorianChronology getInstanceUTC])) year] withOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType yearOfEra]];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeChronoGregorianChronology *) nil_chk([OrgJodaTimeChronoGregorianChronology getInstanceUTC])) eras];
}

- (int)getWithLong:(long long int)instant {
  int year = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
  return year < 0 ? -year : year;
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:years];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:years];
}

- (long long int)addWrapFieldWithLong:(long long int)instant
                              withInt:(int)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithLong:instant withInt:years];
}

- (IOSIntArray *)addWrapFieldWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                                    withInt:(int)fieldIndex
                                               withIntArray:(IOSIntArray *)values
                                                    withInt:(int)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:years];
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)year {
  [OrgJodaTimeFieldFieldUtils verifyValueBoundsWithOrgJodaTimeDateTimeField:self withInt:year withInt:0 withInt:[self getMaximumValue]];
  if ([((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant] < 0) {
    year = -year;
  }
  return [super setWithLong:instant withInt:year];
}

- (int)getMinimumValue {
  return 0;
}

- (int)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumValue];
}

- (long long int)roundFloorWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
}

- (long long int)roundCeilingWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
}

- (long long int)remainderWithLong:(long long int)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
}

- (id)readResolve {
  return OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE_;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoISOYearOfEraDateTimeField class]) {
    OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE_ = [[OrgJodaTimeChronoISOYearOfEraDateTimeField alloc] init];
    OrgJodaTimeChronoISOYearOfEraDateTimeField_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "ISOYearOfEraDateTimeField", NULL, 0x2, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL },
    { "addWrapFieldWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "addWrapField", "[I", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_ISOYearOfEraDateTimeField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoISOYearOfEraDateTimeField_serialVersionUID },
    { "INSTANCE_", NULL, 0x18, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE_,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoISOYearOfEraDateTimeField = { "ISOYearOfEraDateTimeField", "org.joda.time.chrono", NULL, 0x0, 16, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoISOYearOfEraDateTimeField;
}

@end
