//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/GregorianChronology.java
//

#ifndef _OrgJodaTimeChronoGregorianChronology_H_
#define _OrgJodaTimeChronoGregorianChronology_H_

@class JavaUtilConcurrentConcurrentHashMap;
@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

#include "BasicGJChronology.h"
#include "J2ObjC_header.h"

#define OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970 719527
#define OrgJodaTimeChronoGregorianChronology_MAX_YEAR 292278993
#define OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH 2629746000LL
#define OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR 31556952000LL
#define OrgJodaTimeChronoGregorianChronology_MIN_YEAR -292275054
#define OrgJodaTimeChronoGregorianChronology_serialVersionUID -861407383323710522LL

/**
 @brief Implements a pure proleptic Gregorian calendar system, which defines every fourth year as leap, unless the year is divisible by 100 and not by 400.
 This improves upon the Julian calendar leap year rule. <p> Although the Gregorian calendar did not exist before 1582 CE, this chronology assumes it did, thus it is proleptic. This implementation also fixes the start of the year at January 1, and defines the year zero. <p> GregorianChronology is thread-safe and immutable.
 @author Guy Allard
 @author Stephen Colebourne
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeChronoGregorianChronology : OrgJodaTimeChronoBasicGJChronology {
}

/**
 @brief Gets an instance of the GregorianChronology.
 The time zone of the returned instance is UTC.
 @return a singleton UTC instance of the chronology
 */
+ (OrgJodaTimeChronoGregorianChronology *)getInstanceUTC;

/**
 @brief Gets an instance of the GregorianChronology in the default time zone.
 @return a chronology in the default time zone
 */
+ (OrgJodaTimeChronoGregorianChronology *)getInstance;

/**
 @brief Gets an instance of the GregorianChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

/**
 @brief Gets an instance of the GregorianChronology in the given time zone.
 @param zone the time zone to get the chronology in, null is default
 @param minDaysInFirstWeek minimum number of days in first week of the year; default is 4
 @return a chronology in the specified time zone
 */
+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                         withInt:(jint)minDaysInFirstWeek;

/**
 @brief Gets the Chronology in the UTC time zone.
 @return the chronology in UTC
 */
- (OrgJodaTimeChronology *)withUTC;

/**
 @brief Gets the Chronology in a specific time zone.
 @param zone the zone to get the chronology in, null is default
 @return the chronology
 */
- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

- (jboolean)isLeapYearWithInt:(jint)year;

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jint)getMinYear;

- (jint)getMaxYear;

- (jlong)getAverageMillisPerYear;

- (jlong)getAverageMillisPerYearDividedByTwo;

- (jlong)getAverageMillisPerMonth;

- (jlong)getApproxMillisAtEpochDividedByTwo;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeChronoGregorianChronology_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeChronoGregorianChronology)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek);

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, MILLIS_PER_YEAR, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, MILLIS_PER_MONTH, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, DAYS_0000_TO_1970, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, MIN_YEAR, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, MAX_YEAR, jint)

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, INSTANCE_UTC_, OrgJodaTimeChronoGregorianChronology *)

FOUNDATION_EXPORT JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGregorianChronology_cCache_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeChronoGregorianChronology, cCache_, JavaUtilConcurrentConcurrentHashMap *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoGregorianChronology)

#endif // _OrgJodaTimeChronoGregorianChronology_H_
