//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/format/DateTimeParserBucket.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeParser.h"
#include "DateTimeParserBucket.h"
#include "DateTimeParserInternalParser.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FormatUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IllegalFieldValueException.h"
#include "IllegalInstantException.h"
#include "InternalParser.h"
#include "java/lang/CharSequence.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeFormatDateTimeParserBucket

- (instancetype)initWithLong:(long long int)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initOrgJodaTimeFormatDateTimeParserBucketWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale withJavaLangInteger:nil withInt:2000];
}

- (instancetype)initWithLong:(long long int)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear {
  return [self initOrgJodaTimeFormatDateTimeParserBucketWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale withJavaLangInteger:pivotYear withInt:2000];
}

- (instancetype)initOrgJodaTimeFormatDateTimeParserBucketWithLong:(long long int)instantLocal
                                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                               withJavaUtilLocale:(JavaUtilLocale *)locale
                                              withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                          withInt:(int)defaultYear {
  if (self = [super init]) {
    chrono = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chrono];
    iMillis_ = instantLocal;
    iDefaultZone_ = [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone];
    iChrono_ = [chrono withUTC];
    iLocale_ = (locale == nil ? [JavaUtilLocale getDefault] : locale);
    iDefaultYear_ = defaultYear;
    iDefaultPivotYear_ = pivotYear;
    iZone_ = iDefaultZone_;
    iPivotYear_ = iDefaultPivotYear_;
    iSavedFields_ = [IOSObjectArray arrayWithLength:8 type:[IOSClass classWithClass:[OrgJodaTimeFormatDateTimeParserBucket_SavedField class]]];
  }
  return self;
}

- (instancetype)initWithLong:(long long int)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear
                     withInt:(int)defaultYear {
  return [self initOrgJodaTimeFormatDateTimeParserBucketWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale withJavaLangInteger:pivotYear withInt:defaultYear];
}

- (void)reset {
  iZone_ = iDefaultZone_;
  iOffset_ = nil;
  iPivotYear_ = iDefaultPivotYear_;
  iSavedFieldsCount_ = 0;
  iSavedFieldsShared_ = NO;
  iSavedState_ = nil;
}

- (long long int)parseMillisWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser
                                       withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  [self reset];
  return [self doParseMillisWithOrgJodaTimeFormatInternalParser:[OrgJodaTimeFormatDateTimeParserInternalParser ofWithOrgJodaTimeFormatDateTimeParser:parser] withJavaLangCharSequence:text];
}

- (long long int)doParseMillisWithOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                         withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  int newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:self withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= [((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength]) {
      return [self computeMillisWithBoolean:YES withJavaLangCharSequence:text];
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[OrgJodaTimeFormatFormatUtils createErrorMessageWithNSString:[((id<JavaLangCharSequence>) nil_chk(text)) description] withInt:newPos]];
}

- (OrgJodaTimeChronology *)getChronology {
  return iChrono_;
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return iZone_;
}

- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  iSavedState_ = nil;
  iZone_ = zone;
}

- (int)getOffset {
  return (iOffset_ != nil ? [iOffset_ intValue] : 0);
}

- (JavaLangInteger *)getOffsetInteger {
  return iOffset_;
}

- (void)setOffsetWithInt:(int)offset {
  iSavedState_ = nil;
  iOffset_ = [JavaLangInteger valueOfWithInt:offset];
}

- (void)setOffsetWithJavaLangInteger:(JavaLangInteger *)offset {
  iSavedState_ = nil;
  iOffset_ = offset;
}

- (JavaLangInteger *)getPivotYear {
  return iPivotYear_;
}

- (void)setPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear {
  iPivotYear_ = pivotYear;
}

- (void)saveFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(int)value {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk([self obtainSaveField])) init__WithOrgJodaTimeDateTimeField:field withInt:value];
}

- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                          withInt:(int)value {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk([self obtainSaveField])) init__WithOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:iChrono_] withInt:value];
}

- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                     withNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk([self obtainSaveField])) init__WithOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:iChrono_] withNSString:text withJavaUtilLocale:locale];
}

- (OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obtainSaveField {
  IOSObjectArray *savedFields = iSavedFields_;
  int savedFieldsCount = iSavedFieldsCount_;
  if (savedFieldsCount == (int) [((IOSObjectArray *) nil_chk(savedFields)) count] || iSavedFieldsShared_) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:savedFieldsCount == (int) [savedFields count] ? savedFieldsCount * 2 : (int) [savedFields count] type:[IOSClass classWithClass:[OrgJodaTimeFormatDateTimeParserBucket_SavedField class]]];
    [JavaLangSystem arraycopyWithId:savedFields withInt:0 withId:newArray withInt:0 withInt:savedFieldsCount];
    iSavedFields_ = savedFields = newArray;
    iSavedFieldsShared_ = NO;
  }
  iSavedState_ = nil;
  OrgJodaTimeFormatDateTimeParserBucket_SavedField *saved = IOSObjectArray_Get(savedFields, savedFieldsCount);
  if (saved == nil) {
    saved = IOSObjectArray_Set(savedFields, savedFieldsCount, [[OrgJodaTimeFormatDateTimeParserBucket_SavedField alloc] init]);
  }
  iSavedFieldsCount_ = savedFieldsCount + 1;
  return saved;
}

- (id)saveState {
  if (iSavedState_ == nil) {
    iSavedState_ = [[OrgJodaTimeFormatDateTimeParserBucket_SavedState alloc] initWithOrgJodaTimeFormatDateTimeParserBucket:self];
  }
  return iSavedState_;
}

- (BOOL)restoreStateWithId:(id)savedState {
  if ([savedState isKindOfClass:[OrgJodaTimeFormatDateTimeParserBucket_SavedState class]]) {
    if ([((OrgJodaTimeFormatDateTimeParserBucket_SavedState *) nil_chk(((OrgJodaTimeFormatDateTimeParserBucket_SavedState *) check_class_cast(savedState, [OrgJodaTimeFormatDateTimeParserBucket_SavedState class])))) restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:self]) {
      iSavedState_ = savedState;
      return YES;
    }
  }
  return NO;
}

- (long long int)computeMillis {
  return [self computeMillisWithBoolean:NO withJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(nil, @protocol(JavaLangCharSequence))];
}

- (long long int)computeMillisWithBoolean:(BOOL)resetFields {
  return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(nil, @protocol(JavaLangCharSequence))];
}

- (long long int)computeMillisWithBoolean:(BOOL)resetFields
                             withNSString:(NSString *)text {
  return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(text, @protocol(JavaLangCharSequence))];
}

- (long long int)computeMillisWithBoolean:(BOOL)resetFields
                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  IOSObjectArray *savedFields = iSavedFields_;
  int count = iSavedFieldsCount_;
  if (iSavedFieldsShared_) {
    iSavedFields_ = savedFields = (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(iSavedFields_)) clone], [IOSObjectArray class]);
    iSavedFieldsShared_ = NO;
  }
  [OrgJodaTimeFormatDateTimeParserBucket sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:savedFields withInt:count];
  if (count > 0) {
    OrgJodaTimeDurationField *months = [((OrgJodaTimeDurationFieldType *) nil_chk([OrgJodaTimeDurationFieldType months])) getFieldWithOrgJodaTimeChronology:iChrono_];
    OrgJodaTimeDurationField *days = [((OrgJodaTimeDurationFieldType *) nil_chk([OrgJodaTimeDurationFieldType days])) getFieldWithOrgJodaTimeChronology:iChrono_];
    OrgJodaTimeDurationField *first = [((OrgJodaTimeDateTimeField *) nil_chk(((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), 0)))->iField_)) getDurationField];
    if ([OrgJodaTimeFormatDateTimeParserBucket compareReverseWithOrgJodaTimeDurationField:first withOrgJodaTimeDurationField:months] >= 0 && [OrgJodaTimeFormatDateTimeParserBucket compareReverseWithOrgJodaTimeDurationField:first withOrgJodaTimeDurationField:days] <= 0) {
      [self saveFieldWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType year] withInt:iDefaultYear_];
      return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:text];
    }
  }
  long long int millis = iMillis_;
  @try {
    for (int i = 0; i < count; i++) {
      millis = [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), i))) setWithLong:millis withBoolean:resetFields];
    }
    if (resetFields) {
      for (int i = 0; i < count; i++) {
        millis = [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), i))) setWithLong:millis withBoolean:i == (count - 1)];
      }
    }
  }
  @catch (OrgJodaTimeIllegalFieldValueException *e) {
    if (text != nil) {
      [((OrgJodaTimeIllegalFieldValueException *) nil_chk(e)) prependMessageWithNSString:[NSString stringWithFormat:@"Cannot parse \"%@\"", text]];
    }
    @throw e;
  }
  if (iOffset_ != nil) {
    millis -= [iOffset_ intValue];
  }
  else if (iZone_ != nil) {
    int offset = [iZone_ getOffsetFromLocalWithLong:millis];
    millis -= offset;
    if (offset != [iZone_ getOffsetWithLong:millis]) {
      NSString *message = [NSString stringWithFormat:@"Illegal instant due to time zone offset transition (%@)", iZone_];
      if (text != nil) {
        message = [NSString stringWithFormat:@"Cannot parse \"%@\": %@", text, message];
      }
      @throw [[OrgJodaTimeIllegalInstantException alloc] initWithNSString:message];
    }
  }
  return millis;
}

+ (void)sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:(IOSObjectArray *)array
                                                              withInt:(int)high {
  if (high > 10) {
    [JavaUtilArrays sortWithNSObjectArray:array withInt:0 withInt:high];
  }
  else {
    for (int i = 0; i < high; i++) {
      for (int j = i; j > 0 && [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk((IOSObjectArray_Get(nil_chk(array), j - 1)))) compareToWithId:IOSObjectArray_Get(array, j)] > 0; j--) {
        OrgJodaTimeFormatDateTimeParserBucket_SavedField *t = IOSObjectArray_Get(nil_chk(array), j);
        (void) IOSObjectArray_Set(array, j, IOSObjectArray_Get(array, j - 1));
        (void) IOSObjectArray_Set(array, j - 1, t);
      }
    }
  }
}

+ (int)compareReverseWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)a
                     withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)b {
  if (a == nil || ![a isSupported]) {
    if (b == nil || ![b isSupported]) {
      return 0;
    }
    return -1;
  }
  if (b == nil || ![b isSupported]) {
    return 1;
  }
  return -[((OrgJodaTimeDurationField *) nil_chk(a)) compareToWithId:b];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket *)other {
  [super copyAllFieldsTo:other];
  other->iChrono_ = iChrono_;
  other->iDefaultPivotYear_ = iDefaultPivotYear_;
  other->iDefaultYear_ = iDefaultYear_;
  other->iDefaultZone_ = iDefaultZone_;
  other->iLocale_ = iLocale_;
  other->iMillis_ = iMillis_;
  other->iOffset_ = iOffset_;
  other->iPivotYear_ = iPivotYear_;
  other->iSavedFields_ = iSavedFields_;
  other->iSavedFieldsCount_ = iSavedFieldsCount_;
  other->iSavedFieldsShared_ = iSavedFieldsShared_;
  other->iSavedState_ = iSavedState_;
  other->iZone_ = iZone_;
}
+ (IOSObjectArray *)__annotations_OrgJodaTimeFormatDateTimeParserBucketWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_OrgJodaTimeFormatDateTimeParserBucketWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_getOffset {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_setOffsetWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_setPivotYearWithJavaLangInteger_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:", "DateTimeParserBucket", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:withJavaLangInteger:", "DateTimeParserBucket", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:withJavaLangInteger:withInt:", "DateTimeParserBucket", NULL, 0x1, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "parseMillisWithOrgJodaTimeFormatDateTimeParser:withJavaLangCharSequence:", "parseMillis", "J", 0x1, NULL },
    { "doParseMillisWithOrgJodaTimeFormatInternalParser:withJavaLangCharSequence:", "doParseMillis", "J", 0x0, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "setZoneWithOrgJodaTimeDateTimeZone:", "setZone", "V", 0x1, NULL },
    { "getOffset", NULL, "I", 0x1, NULL },
    { "getOffsetInteger", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "setOffsetWithInt:", "setOffset", "V", 0x1, NULL },
    { "setOffsetWithJavaLangInteger:", "setOffset", "V", 0x1, NULL },
    { "getPivotYear", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "setPivotYearWithJavaLangInteger:", "setPivotYear", "V", 0x1, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeField:withInt:", "saveField", "V", 0x1, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "saveField", "V", 0x1, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeFieldType:withNSString:withJavaUtilLocale:", "saveField", "V", 0x1, NULL },
    { "obtainSaveField", NULL, "Lorg.joda.time.format.DateTimeParserBucket$SavedField;", 0x2, NULL },
    { "saveState", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "restoreStateWithId:", "restoreState", "Z", 0x1, NULL },
    { "computeMillis", NULL, "J", 0x1, NULL },
    { "computeMillisWithBoolean:", "computeMillis", "J", 0x1, NULL },
    { "computeMillisWithBoolean:withNSString:", "computeMillis", "J", 0x1, NULL },
    { "computeMillisWithBoolean:withJavaLangCharSequence:", "computeMillis", "J", 0x1, NULL },
    { "sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:withInt:", "sort", "V", 0xa, NULL },
    { "compareReverseWithOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "compareReverse", "I", 0x8, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iChrono_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iMillis_", NULL, 0x12, "J", NULL,  },
    { "iLocale_", NULL, 0x12, "Ljava.util.Locale;", NULL,  },
    { "iDefaultYear_", NULL, 0x12, "I", NULL,  },
    { "iDefaultZone_", NULL, 0x12, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iDefaultPivotYear_", NULL, 0x12, "Ljava.lang.Integer;", NULL,  },
    { "iZone_", NULL, 0x2, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iOffset_", NULL, 0x2, "Ljava.lang.Integer;", NULL,  },
    { "iPivotYear_", NULL, 0x2, "Ljava.lang.Integer;", NULL,  },
    { "iSavedFields_", NULL, 0x2, "[Lorg.joda.time.format.DateTimeParserBucket$SavedField;", NULL,  },
    { "iSavedFieldsCount_", NULL, 0x2, "I", NULL,  },
    { "iSavedFieldsShared_", NULL, 0x2, "Z", NULL,  },
    { "iSavedState_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket = { "DateTimeParserBucket", "org.joda.time.format", NULL, 0x1, 28, methods, 13, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeParserBucket;
}

@end

@implementation OrgJodaTimeFormatDateTimeParserBucket_SavedState

- (instancetype)initWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)outer$ {
  this$0_ = outer$;
  if (self = [super init]) {
    self->iZone_ = outer$->iZone_;
    self->iOffset_ = outer$->iOffset_;
    self->iSavedFields_ = outer$->iSavedFields_;
    self->iSavedFieldsCount_ = outer$->iSavedFieldsCount_;
  }
  return self;
}

- (BOOL)restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)enclosing {
  if (enclosing != this$0_) {
    return NO;
  }
  ((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(enclosing))->iZone_ = self->iZone_;
  enclosing->iOffset_ = self->iOffset_;
  enclosing->iSavedFields_ = self->iSavedFields_;
  if (self->iSavedFieldsCount_ < enclosing->iSavedFieldsCount_) {
    enclosing->iSavedFieldsShared_ = YES;
  }
  enclosing->iSavedFieldsCount_ = self->iSavedFieldsCount_;
  return YES;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket_SavedState *)other {
  [super copyAllFieldsTo:other];
  other->iOffset_ = iOffset_;
  other->iSavedFields_ = iSavedFields_;
  other->iSavedFieldsCount_ = iSavedFieldsCount_;
  other->iZone_ = iZone_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatDateTimeParserBucket:", "SavedState", NULL, 0x0, NULL },
    { "restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:", "restoreState", "Z", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.format.DateTimeParserBucket;", NULL,  },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iOffset_", NULL, 0x10, "Ljava.lang.Integer;", NULL,  },
    { "iSavedFields_", NULL, 0x10, "[Lorg.joda.time.format.DateTimeParserBucket$SavedField;", NULL,  },
    { "iSavedFieldsCount_", NULL, 0x10, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket_SavedState = { "SavedState", "org.joda.time.format", "DateTimeParserBucket", 0x0, 2, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeParserBucket_SavedState;
}

@end

@implementation OrgJodaTimeFormatDateTimeParserBucket_SavedField

- (instancetype)init {
  return [super init];
}

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                   withInt:(int)value {
  iField_ = field;
  iValue_ = value;
  iText_ = nil;
  iLocale_ = nil;
}

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                              withNSString:(NSString *)text
                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  iField_ = field;
  iValue_ = 0;
  iText_ = text;
  iLocale_ = locale;
}

- (long long int)setWithLong:(long long int)millis
                 withBoolean:(BOOL)reset {
  if (iText_ == nil) {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:millis withInt:iValue_];
  }
  else {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:millis withNSString:iText_ withJavaUtilLocale:iLocale_];
  }
  if (reset) {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:millis];
  }
  return millis;
}

- (int)compareToWithId:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obj {
  if (obj != nil && ![obj isKindOfClass:[OrgJodaTimeFormatDateTimeParserBucket_SavedField class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  OrgJodaTimeDateTimeField *other = ((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(obj))->iField_;
  int result = [OrgJodaTimeFormatDateTimeParserBucket compareReverseWithOrgJodaTimeDurationField:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getRangeDurationField] withOrgJodaTimeDurationField:[((OrgJodaTimeDateTimeField *) nil_chk(other)) getRangeDurationField]];
  if (result != 0) {
    return result;
  }
  return [OrgJodaTimeFormatDateTimeParserBucket compareReverseWithOrgJodaTimeDurationField:[iField_ getDurationField] withOrgJodaTimeDurationField:[other getDurationField]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)other {
  [super copyAllFieldsTo:other];
  other->iField_ = iField_;
  other->iLocale_ = iLocale_;
  other->iText_ = iText_;
  other->iValue_ = iValue_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "SavedField", NULL, 0x0, NULL },
    { "init__WithOrgJodaTimeDateTimeField:withInt:", "init", "V", 0x0, NULL },
    { "init__WithOrgJodaTimeDateTimeField:withNSString:withJavaUtilLocale:", "init", "V", 0x0, NULL },
    { "setWithLong:withBoolean:", "set", "J", 0x0, NULL },
    { "compareToWithOrgJodaTimeFormatDateTimeParserBucket_SavedField:", "compareTo", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iField_", NULL, 0x0, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iValue_", NULL, 0x0, "I", NULL,  },
    { "iText_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "iLocale_", NULL, 0x0, "Ljava.util.Locale;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket_SavedField = { "SavedField", "org.joda.time.format", "DateTimeParserBucket", 0x8, 5, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeParserBucket_SavedField;
}

@end
