//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/format/DateTimeParserBucket.java
//

#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeParser.h"
#include "DateTimeParserBucket.h"
#include "DateTimeParserInternalParser.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FormatUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IllegalFieldValueException.h"
#include "IllegalInstantException.h"
#include "InternalParser.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"

__attribute__((unused)) static OrgJodaTimeFormatDateTimeParserBucket_SavedField *OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(OrgJodaTimeFormatDateTimeParserBucket *self);
__attribute__((unused)) static void OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(IOSObjectArray *array, jint high);

@interface OrgJodaTimeFormatDateTimeParserBucket () {
 @public
  /**
   @brief The chronology to use for parsing.
   */
  OrgJodaTimeChronology *iChrono_;
  /**
   @brief The initial millis.
   */
  jlong iMillis_;
  /**
   @brief The locale to use for parsing.
   */
  JavaUtilLocale *iLocale_;
  /**
   @brief Used for parsing month/day without year.
   */
  jint iDefaultYear_;
  /**
   @brief The default zone from the constructor.
   */
  OrgJodaTimeDateTimeZone *iDefaultZone_;
  /**
   @brief The default pivot year from the constructor.
   */
  JavaLangInteger *iDefaultPivotYear_;
  /**
   @brief The parsed zone, initialised to formatter zone.
   */
  OrgJodaTimeDateTimeZone *iZone_;
  /**
   @brief The parsed offset.
   */
  JavaLangInteger *iOffset_;
  /**
   @brief Used for parsing two-digit years.
   */
  JavaLangInteger *iPivotYear_;
  IOSObjectArray *iSavedFields_;
  jint iSavedFieldsCount_;
  jboolean iSavedFieldsShared_;
  id iSavedState_;
}

- (OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obtainSaveField;

/**
 @brief Sorts elements [0,high).
 Calling java.util.Arrays isn't always the right choice since it always creates an internal copy of the array, even if it doesn't need to. If the array slice is small enough, an insertion sort is chosen instead, but it doesn't need a copy! <p> This method has a modified version of that insertion sort, except it doesn't create an unnecessary array copy. If high is over 10, then java.util.Arrays is called, which will perform a merge sort, which is faster than insertion sort on large lists. <p> The end result is much greater performance when computeMillis is called. Since the amount of saved fields is small, the insertion sort is a better choice. Additional performance is gained since there is no extra array allocation and copying. Also, the insertion sort here does not perform any casting operations. The version in java.util.Arrays performs casts within the insertion sort loop.
 */
+ (void)sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:(IOSObjectArray *)array
                                                              withInt:(jint)high;
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iChrono_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iDefaultZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iDefaultPivotYear_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iOffset_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iPivotYear_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iSavedFields_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iSavedState_, id)

@interface OrgJodaTimeFormatDateTimeParserBucket_SavedState () {
 @public
  OrgJodaTimeFormatDateTimeParserBucket *this$0_;
}
@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedState, this$0_, OrgJodaTimeFormatDateTimeParserBucket *)

@implementation OrgJodaTimeFormatDateTimeParserBucket

- (instancetype)initWithLong:(jlong)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initOrgJodaTimeFormatDateTimeParserBucketWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale withJavaLangInteger:nil withInt:2000];
}

- (instancetype)initWithLong:(jlong)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear {
  return [self initOrgJodaTimeFormatDateTimeParserBucketWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale withJavaLangInteger:pivotYear withInt:2000];
}

- (instancetype)initOrgJodaTimeFormatDateTimeParserBucketWithLong:(jlong)instantLocal
                                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                                               withJavaUtilLocale:(JavaUtilLocale *)locale
                                              withJavaLangInteger:(JavaLangInteger *)pivotYear
                                                          withInt:(jint)defaultYear {
  if (self = [super init]) {
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
    iMillis_ = instantLocal;
    OrgJodaTimeFormatDateTimeParserBucket_set_iDefaultZone_(self, [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone]);
    OrgJodaTimeFormatDateTimeParserBucket_set_iChrono_(self, [chrono withUTC]);
    OrgJodaTimeFormatDateTimeParserBucket_set_iLocale_(self, (locale == nil ? JavaUtilLocale_getDefault() : locale));
    iDefaultYear_ = defaultYear;
    OrgJodaTimeFormatDateTimeParserBucket_set_iDefaultPivotYear_(self, pivotYear);
    OrgJodaTimeFormatDateTimeParserBucket_set_iZone_(self, iDefaultZone_);
    OrgJodaTimeFormatDateTimeParserBucket_set_iPivotYear_(self, iDefaultPivotYear_);
    OrgJodaTimeFormatDateTimeParserBucket_setAndConsume_iSavedFields_(self, [IOSObjectArray newArrayWithLength:8 type:OrgJodaTimeFormatDateTimeParserBucket_SavedField_class_()]);
  }
  return self;
}

- (instancetype)initWithLong:(jlong)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear
                     withInt:(jint)defaultYear {
  return [self initOrgJodaTimeFormatDateTimeParserBucketWithLong:instantLocal withOrgJodaTimeChronology:chrono withJavaUtilLocale:locale withJavaLangInteger:pivotYear withInt:defaultYear];
}

- (void)reset {
  OrgJodaTimeFormatDateTimeParserBucket_set_iZone_(self, iDefaultZone_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iOffset_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket_set_iPivotYear_(self, iDefaultPivotYear_);
  iSavedFieldsCount_ = 0;
  iSavedFieldsShared_ = NO;
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(self, nil);
}

- (jlong)parseMillisWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  [self reset];
  return [self doParseMillisWithOrgJodaTimeFormatInternalParser:OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser) withJavaLangCharSequence:text];
}

- (jlong)doParseMillisWithOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:self withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= [((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength]) {
      return [self computeMillisWithBoolean:YES withJavaLangCharSequence:text];
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_([((id<JavaLangCharSequence>) nil_chk(text)) description], newPos)] autorelease];
}

- (OrgJodaTimeChronology *)getChronology {
  return iChrono_;
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return iZone_;
}

- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket_set_iZone_(self, zone);
}

- (jint)getOffset {
  return (iOffset_ != nil ? [iOffset_ intValue] : 0);
}

- (JavaLangInteger *)getOffsetInteger {
  return iOffset_;
}

- (void)setOffsetWithInt:(jint)offset {
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket_set_iOffset_(self, JavaLangInteger_valueOfWithInt_(offset));
}

- (void)setOffsetWithJavaLangInteger:(JavaLangInteger *)offset {
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket_set_iOffset_(self, offset);
}

- (JavaLangInteger *)getPivotYear {
  return iPivotYear_;
}

- (void)setPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear {
  OrgJodaTimeFormatDateTimeParserBucket_set_iPivotYear_(self, pivotYear);
}

- (void)saveFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(jint)value {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self))) init__WithOrgJodaTimeDateTimeField:field withInt:value];
}

- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                          withInt:(jint)value {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self))) init__WithOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:iChrono_] withInt:value];
}

- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                     withNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self))) init__WithOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:iChrono_] withNSString:text withJavaUtilLocale:locale];
}

- (OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obtainSaveField {
  return OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self);
}

- (id)saveState {
  if (iSavedState_ == nil) {
    OrgJodaTimeFormatDateTimeParserBucket_setAndConsume_iSavedState_(self, [[OrgJodaTimeFormatDateTimeParserBucket_SavedState alloc] initWithOrgJodaTimeFormatDateTimeParserBucket:self]);
  }
  return iSavedState_;
}

- (jboolean)restoreStateWithId:(id)savedState {
  if ([savedState isKindOfClass:[OrgJodaTimeFormatDateTimeParserBucket_SavedState class]]) {
    if ([((OrgJodaTimeFormatDateTimeParserBucket_SavedState *) nil_chk(((OrgJodaTimeFormatDateTimeParserBucket_SavedState *) check_class_cast(savedState, [OrgJodaTimeFormatDateTimeParserBucket_SavedState class])))) restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:self]) {
      OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(self, savedState);
      return YES;
    }
  }
  return NO;
}

- (jlong)computeMillis {
  return [self computeMillisWithBoolean:NO withJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(nil, @protocol(JavaLangCharSequence))];
}

- (jlong)computeMillisWithBoolean:(jboolean)resetFields {
  return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(nil, @protocol(JavaLangCharSequence))];
}

- (jlong)computeMillisWithBoolean:(jboolean)resetFields
                     withNSString:(NSString *)text {
  return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:(id<JavaLangCharSequence>) check_protocol_cast(text, @protocol(JavaLangCharSequence))];
}

- (jlong)computeMillisWithBoolean:(jboolean)resetFields
         withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  IOSObjectArray *savedFields = iSavedFields_;
  jint count = iSavedFieldsCount_;
  if (iSavedFieldsShared_) {
    OrgJodaTimeFormatDateTimeParserBucket_set_iSavedFields_(self, savedFields = (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(iSavedFields_)) clone], [IOSObjectArray class]));
    iSavedFieldsShared_ = NO;
  }
  OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(savedFields, count);
  if (count > 0) {
    OrgJodaTimeDurationField *months = [((OrgJodaTimeDurationFieldType *) nil_chk(OrgJodaTimeDurationFieldType_months())) getFieldWithOrgJodaTimeChronology:iChrono_];
    OrgJodaTimeDurationField *days = [((OrgJodaTimeDurationFieldType *) nil_chk(OrgJodaTimeDurationFieldType_days())) getFieldWithOrgJodaTimeChronology:iChrono_];
    OrgJodaTimeDurationField *first = [((OrgJodaTimeDateTimeField *) nil_chk(((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), 0)))->iField_)) getDurationField];
    if (OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(first, months) >= 0 && OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(first, days) <= 0) {
      [self saveFieldWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_year() withInt:iDefaultYear_];
      return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:text];
    }
  }
  jlong millis = iMillis_;
  @try {
    for (jint i = 0; i < count; i++) {
      millis = [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), i))) setWithLong:millis withBoolean:resetFields];
    }
    if (resetFields) {
      for (jint i = 0; i < count; i++) {
        millis = [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), i))) setWithLong:millis withBoolean:i == (count - 1)];
      }
    }
  }
  @catch (OrgJodaTimeIllegalFieldValueException *e) {
    if (text != nil) {
      [((OrgJodaTimeIllegalFieldValueException *) nil_chk(e)) prependMessageWithNSString:JreStrcat("$@C", @"Cannot parse \"", text, '"')];
    }
    @throw e;
  }
  if (iOffset_ != nil) {
    millis -= [iOffset_ intValue];
  }
  else if (iZone_ != nil) {
    jint offset = [iZone_ getOffsetFromLocalWithLong:millis];
    millis -= offset;
    if (offset != [iZone_ getOffsetWithLong:millis]) {
      NSString *message = JreStrcat("$@C", @"Illegal instant due to time zone offset transition (", iZone_, ')');
      if (text != nil) {
        message = JreStrcat("$@$$", @"Cannot parse \"", text, @"\": ", message);
      }
      @throw [[[OrgJodaTimeIllegalInstantException alloc] initWithNSString:message] autorelease];
    }
  }
  return millis;
}

+ (void)sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:(IOSObjectArray *)array
                                                              withInt:(jint)high {
  OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(array, high);
}

+ (jint)compareReverseWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)a
                      withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)b {
  return OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(a, b);
}

- (void)dealloc {
  RELEASE_(iChrono_);
  RELEASE_(iLocale_);
  RELEASE_(iDefaultZone_);
  RELEASE_(iDefaultPivotYear_);
  RELEASE_(iZone_);
  RELEASE_(iOffset_);
  RELEASE_(iPivotYear_);
  RELEASE_(iSavedFields_);
  RELEASE_(iSavedState_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFormatDateTimeParserBucket_set_iChrono_(other, iChrono_);
  other->iMillis_ = iMillis_;
  OrgJodaTimeFormatDateTimeParserBucket_set_iLocale_(other, iLocale_);
  other->iDefaultYear_ = iDefaultYear_;
  OrgJodaTimeFormatDateTimeParserBucket_set_iDefaultZone_(other, iDefaultZone_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iDefaultPivotYear_(other, iDefaultPivotYear_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iZone_(other, iZone_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iOffset_(other, iOffset_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iPivotYear_(other, iPivotYear_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedFields_(other, iSavedFields_);
  other->iSavedFieldsCount_ = iSavedFieldsCount_;
  other->iSavedFieldsShared_ = iSavedFieldsShared_;
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(other, iSavedState_);
}

+ (IOSObjectArray *)__annotations_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getOffset {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setOffsetWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setPivotYearWithJavaLangInteger_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:", "DateTimeParserBucket", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:withJavaLangInteger:", "DateTimeParserBucket", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:withJavaLangInteger:withInt:", "DateTimeParserBucket", NULL, 0x1, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "parseMillisWithOrgJodaTimeFormatDateTimeParser:withJavaLangCharSequence:", "parseMillis", "J", 0x1, NULL },
    { "doParseMillisWithOrgJodaTimeFormatInternalParser:withJavaLangCharSequence:", "doParseMillis", "J", 0x0, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL },
    { "setZoneWithOrgJodaTimeDateTimeZone:", "setZone", "V", 0x1, NULL },
    { "getOffset", NULL, "I", 0x1, NULL },
    { "getOffsetInteger", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "setOffsetWithInt:", "setOffset", "V", 0x1, NULL },
    { "setOffsetWithJavaLangInteger:", "setOffset", "V", 0x1, NULL },
    { "getPivotYear", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "setPivotYearWithJavaLangInteger:", "setPivotYear", "V", 0x1, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeField:withInt:", "saveField", "V", 0x1, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "saveField", "V", 0x1, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeFieldType:withNSString:withJavaUtilLocale:", "saveField", "V", 0x1, NULL },
    { "obtainSaveField", NULL, "Lorg.joda.time.format.DateTimeParserBucket$SavedField;", 0x2, NULL },
    { "saveState", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "restoreStateWithId:", "restoreState", "Z", 0x1, NULL },
    { "computeMillis", NULL, "J", 0x1, NULL },
    { "computeMillisWithBoolean:", "computeMillis", "J", 0x1, NULL },
    { "computeMillisWithBoolean:withNSString:", "computeMillis", "J", 0x1, NULL },
    { "computeMillisWithBoolean:withJavaLangCharSequence:", "computeMillis", "J", 0x1, NULL },
    { "sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:withInt:", "sort", "V", 0xa, NULL },
    { "compareReverseWithOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "compareReverse", "I", 0x8, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iChrono_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL,  },
    { "iMillis_", NULL, 0x12, "J", NULL,  },
    { "iLocale_", NULL, 0x12, "Ljava.util.Locale;", NULL,  },
    { "iDefaultYear_", NULL, 0x12, "I", NULL,  },
    { "iDefaultZone_", NULL, 0x12, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iDefaultPivotYear_", NULL, 0x12, "Ljava.lang.Integer;", NULL,  },
    { "iZone_", NULL, 0x2, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iOffset_", NULL, 0x2, "Ljava.lang.Integer;", NULL,  },
    { "iPivotYear_", NULL, 0x2, "Ljava.lang.Integer;", NULL,  },
    { "iSavedFields_", NULL, 0x2, "[Lorg.joda.time.format.DateTimeParserBucket$SavedField;", NULL,  },
    { "iSavedFieldsCount_", NULL, 0x2, "I", NULL,  },
    { "iSavedFieldsShared_", NULL, 0x2, "Z", NULL,  },
    { "iSavedState_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket = { 1, "DateTimeParserBucket", "org.joda.time.format", NULL, 0x1, 28, methods, 13, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeParserBucket;
}

@end

OrgJodaTimeFormatDateTimeParserBucket_SavedField *OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(OrgJodaTimeFormatDateTimeParserBucket *self) {
  IOSObjectArray *savedFields = self->iSavedFields_;
  jint savedFieldsCount = self->iSavedFieldsCount_;
  if (savedFieldsCount == ((IOSObjectArray *) nil_chk(savedFields))->size_ || self->iSavedFieldsShared_) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:savedFieldsCount == savedFields->size_ ? savedFieldsCount * 2 : savedFields->size_ type:OrgJodaTimeFormatDateTimeParserBucket_SavedField_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(savedFields, 0, newArray, 0, savedFieldsCount);
    OrgJodaTimeFormatDateTimeParserBucket_set_iSavedFields_(self, savedFields = newArray);
    self->iSavedFieldsShared_ = NO;
  }
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedState_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket_SavedField *saved = IOSObjectArray_Get(savedFields, savedFieldsCount);
  if (saved == nil) {
    saved = IOSObjectArray_SetAndConsume(savedFields, savedFieldsCount, [[OrgJodaTimeFormatDateTimeParserBucket_SavedField alloc] init]);
  }
  self->iSavedFieldsCount_ = savedFieldsCount + 1;
  return saved;
}

void OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(IOSObjectArray *array, jint high) {
  OrgJodaTimeFormatDateTimeParserBucket_init();
  if (high > 10) {
    JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_(array, 0, high);
  }
  else {
    for (jint i = 0; i < high; i++) {
      for (jint j = i; j > 0 && [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk((IOSObjectArray_Get(nil_chk(array), j - 1)))) compareToWithId:IOSObjectArray_Get(array, j)] > 0; j--) {
        OrgJodaTimeFormatDateTimeParserBucket_SavedField *t = IOSObjectArray_Get(nil_chk(array), j);
        IOSObjectArray_Set(array, j, IOSObjectArray_Get(array, j - 1));
        IOSObjectArray_Set(array, j - 1, t);
      }
    }
  }
}

jint OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDurationField *a, OrgJodaTimeDurationField *b) {
  OrgJodaTimeFormatDateTimeParserBucket_init();
  if (a == nil || ![a isSupported]) {
    if (b == nil || ![b isSupported]) {
      return 0;
    }
    return -1;
  }
  if (b == nil || ![b isSupported]) {
    return 1;
  }
  return -[((OrgJodaTimeDurationField *) nil_chk(a)) compareToWithId:b];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeParserBucket)

@implementation OrgJodaTimeFormatDateTimeParserBucket_SavedState

- (instancetype)initWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)outer$ {
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_this$0_(self, outer$);
  if (self = [super init]) {
    OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_iZone_(self, outer$->iZone_);
    OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_iOffset_(self, outer$->iOffset_);
    OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_iSavedFields_(self, outer$->iSavedFields_);
    self->iSavedFieldsCount_ = outer$->iSavedFieldsCount_;
  }
  return self;
}

- (jboolean)restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)enclosing {
  if (enclosing != this$0_) {
    return NO;
  }
  OrgJodaTimeFormatDateTimeParserBucket_set_iZone_(nil_chk(enclosing), self->iZone_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iOffset_(enclosing, self->iOffset_);
  OrgJodaTimeFormatDateTimeParserBucket_set_iSavedFields_(enclosing, self->iSavedFields_);
  if (self->iSavedFieldsCount_ < enclosing->iSavedFieldsCount_) {
    enclosing->iSavedFieldsShared_ = YES;
  }
  enclosing->iSavedFieldsCount_ = self->iSavedFieldsCount_;
  return YES;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(iZone_);
  RELEASE_(iOffset_);
  RELEASE_(iSavedFields_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket_SavedState *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_this$0_(other, this$0_);
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_iZone_(other, iZone_);
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_iOffset_(other, iOffset_);
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_set_iSavedFields_(other, iSavedFields_);
  other->iSavedFieldsCount_ = iSavedFieldsCount_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatDateTimeParserBucket:", "SavedState", NULL, 0x0, NULL },
    { "restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:", "restoreState", "Z", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.format.DateTimeParserBucket;", NULL,  },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL,  },
    { "iOffset_", NULL, 0x10, "Ljava.lang.Integer;", NULL,  },
    { "iSavedFields_", NULL, 0x10, "[Lorg.joda.time.format.DateTimeParserBucket$SavedField;", NULL,  },
    { "iSavedFieldsCount_", NULL, 0x10, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket_SavedState = { 1, "SavedState", "org.joda.time.format", "DateTimeParserBucket", 0x0, 2, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeParserBucket_SavedState;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeParserBucket_SavedState)

@implementation OrgJodaTimeFormatDateTimeParserBucket_SavedField

- (instancetype)init {
  return [super init];
}

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                   withInt:(jint)value {
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iField_(self, field);
  iValue_ = value;
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iText_(self, nil);
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iLocale_(self, nil);
}

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                              withNSString:(NSString *)text
                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iField_(self, field);
  iValue_ = 0;
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iText_(self, text);
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iLocale_(self, locale);
}

- (jlong)setWithLong:(jlong)millis
         withBoolean:(jboolean)reset {
  if (iText_ == nil) {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:millis withInt:iValue_];
  }
  else {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:millis withNSString:iText_ withJavaUtilLocale:iLocale_];
  }
  if (reset) {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:millis];
  }
  return millis;
}

- (jint)compareToWithId:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obj {
  check_class_cast(obj, [OrgJodaTimeFormatDateTimeParserBucket_SavedField class]);
  OrgJodaTimeDateTimeField *other = ((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(obj))->iField_;
  jint result = OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_([((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getRangeDurationField], [((OrgJodaTimeDateTimeField *) nil_chk(other)) getRangeDurationField]);
  if (result != 0) {
    return result;
  }
  return OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_([iField_ getDurationField], [other getDurationField]);
}

- (void)dealloc {
  RELEASE_(iField_);
  RELEASE_(iText_);
  RELEASE_(iLocale_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iField_(other, iField_);
  other->iValue_ = iValue_;
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iText_(other, iText_);
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_set_iLocale_(other, iLocale_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SavedField", NULL, 0x0, NULL },
    { "init__WithOrgJodaTimeDateTimeField:withInt:", "init", "V", 0x0, NULL },
    { "init__WithOrgJodaTimeDateTimeField:withNSString:withJavaUtilLocale:", "init", "V", 0x0, NULL },
    { "setWithLong:withBoolean:", "set", "J", 0x0, NULL },
    { "compareToWithOrgJodaTimeFormatDateTimeParserBucket_SavedField:", "compareTo", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iField_", NULL, 0x0, "Lorg.joda.time.DateTimeField;", NULL,  },
    { "iValue_", NULL, 0x0, "I", NULL,  },
    { "iText_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "iLocale_", NULL, 0x0, "Ljava.util.Locale;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket_SavedField = { 1, "SavedField", "org.joda.time.format", "DateTimeParserBucket", 0x8, 5, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFormatDateTimeParserBucket_SavedField;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeParserBucket_SavedField)
