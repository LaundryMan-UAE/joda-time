//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/format/PeriodFormatter.java
//

#include "FormatUtils.h"
#include "IOSClass.h"
#include "MutablePeriod.h"
#include "Period.h"
#include "PeriodFormatter.h"
#include "PeriodParser.h"
#include "PeriodPrinter.h"
#include "PeriodType.h"
#include "ReadWritablePeriod.h"
#include "ReadablePeriod.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeFormatPeriodFormatter

- (instancetype)initWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)printer
                     withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)parser {
  if (self = [super init]) {
    OrgJodaTimeFormatPeriodFormatter_set_iPrinter_(self, printer);
    OrgJodaTimeFormatPeriodFormatter_set_iParser_(self, parser);
    OrgJodaTimeFormatPeriodFormatter_set_iLocale_(self, nil);
    OrgJodaTimeFormatPeriodFormatter_set_iParseType_(self, nil);
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)printer
                     withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)parser
                                    withJavaUtilLocale:(JavaUtilLocale *)locale
                             withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (self = [super init]) {
    OrgJodaTimeFormatPeriodFormatter_set_iPrinter_(self, printer);
    OrgJodaTimeFormatPeriodFormatter_set_iParser_(self, parser);
    OrgJodaTimeFormatPeriodFormatter_set_iLocale_(self, locale);
    OrgJodaTimeFormatPeriodFormatter_set_iParseType_(self, type);
  }
  return self;
}

- (jboolean)isPrinter {
  return (iPrinter_ != nil);
}

- (id<OrgJodaTimeFormatPeriodPrinter>)getPrinter {
  return iPrinter_;
}

- (jboolean)isParser {
  return (iParser_ != nil);
}

- (id<OrgJodaTimeFormatPeriodParser>)getParser {
  return iParser_;
}

- (OrgJodaTimeFormatPeriodFormatter *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == [self getLocale] || (locale != nil && [locale isEqual:[self getLocale]])) {
    return self;
  }
  return [[[OrgJodaTimeFormatPeriodFormatter alloc] initWithOrgJodaTimeFormatPeriodPrinter:iPrinter_ withOrgJodaTimeFormatPeriodParser:iParser_ withJavaUtilLocale:locale withOrgJodaTimePeriodType:iParseType_] autorelease];
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeFormatPeriodFormatter *)withParseTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  if (type == iParseType_) {
    return self;
  }
  return [[[OrgJodaTimeFormatPeriodFormatter alloc] initWithOrgJodaTimeFormatPeriodPrinter:iPrinter_ withOrgJodaTimeFormatPeriodParser:iParser_ withJavaUtilLocale:iLocale_ withOrgJodaTimePeriodType:type] autorelease];
}

- (OrgJodaTimePeriodType *)getParseType {
  return iParseType_;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  [self checkPrinter];
  [self checkPeriodWithOrgJodaTimeReadablePeriod:period];
  [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk([self getPrinter])) printToWithJavaLangStringBuffer:buf withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:iLocale_];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  [self checkPrinter];
  [self checkPeriodWithOrgJodaTimeReadablePeriod:period];
  [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk([self getPrinter])) printToWithJavaIoWriter:outArg withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:iLocale_];
}

- (NSString *)printWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  [self checkPrinter];
  [self checkPeriodWithOrgJodaTimeReadablePeriod:period];
  id<OrgJodaTimeFormatPeriodPrinter> printer = [self getPrinter];
  JavaLangStringBuffer *buf = [[[JavaLangStringBuffer alloc] initWithInt:[((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(printer)) calculatePrintedLengthWithOrgJodaTimeReadablePeriod:period withJavaUtilLocale:iLocale_]] autorelease];
  [printer printToWithJavaLangStringBuffer:buf withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:iLocale_];
  return [buf description];
}

- (void)checkPrinter {
  if (iPrinter_ == nil) {
    @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Printing not supported"] autorelease];
  }
}

- (void)checkPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Period must not be null"] autorelease];
  }
}

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)text
                                           withInt:(jint)position {
  [self checkParser];
  [self checkPeriodWithOrgJodaTimeReadablePeriod:period];
  return [((id<OrgJodaTimeFormatPeriodParser>) nil_chk([self getParser])) parseIntoWithOrgJodaTimeReadWritablePeriod:period withNSString:text withInt:position withJavaUtilLocale:iLocale_];
}

- (OrgJodaTimePeriod *)parsePeriodWithNSString:(NSString *)text {
  [self checkParser];
  return [((OrgJodaTimeMutablePeriod *) nil_chk([self parseMutablePeriodWithNSString:text])) toPeriod];
}

- (OrgJodaTimeMutablePeriod *)parseMutablePeriodWithNSString:(NSString *)text {
  [self checkParser];
  OrgJodaTimeMutablePeriod *period = [[[OrgJodaTimeMutablePeriod alloc] initWithLong:0 withOrgJodaTimePeriodType:iParseType_] autorelease];
  jint newPos = [((id<OrgJodaTimeFormatPeriodParser>) nil_chk([self getParser])) parseIntoWithOrgJodaTimeReadWritablePeriod:period withNSString:text withInt:0 withJavaUtilLocale:iLocale_];
  if (newPos >= 0) {
    if (newPos >= ((jint) [((NSString *) nil_chk(text)) length])) {
      return period;
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_(text, newPos)] autorelease];
}

- (void)checkParser {
  if (iParser_ == nil) {
    @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Parsing not supported"] autorelease];
  }
}

- (void)dealloc {
  OrgJodaTimeFormatPeriodFormatter_set_iPrinter_(self, nil);
  OrgJodaTimeFormatPeriodFormatter_set_iParser_(self, nil);
  OrgJodaTimeFormatPeriodFormatter_set_iLocale_(self, nil);
  OrgJodaTimeFormatPeriodFormatter_set_iParseType_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatter *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeFormatPeriodFormatter_set_iPrinter_(other, iPrinter_);
  OrgJodaTimeFormatPeriodFormatter_set_iParser_(other, iParser_);
  OrgJodaTimeFormatPeriodFormatter_set_iLocale_(other, iLocale_);
  OrgJodaTimeFormatPeriodFormatter_set_iParseType_(other, iParseType_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatPeriodPrinter:withOrgJodaTimeFormatPeriodParser:", "PeriodFormatter", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeFormatPeriodPrinter:withOrgJodaTimeFormatPeriodParser:withJavaUtilLocale:withOrgJodaTimePeriodType:", "PeriodFormatter", NULL, 0x2, NULL },
    { "isPrinter", NULL, "Z", 0x1, NULL },
    { "getPrinter", NULL, "Lorg.joda.time.format.PeriodPrinter;", 0x1, NULL },
    { "isParser", NULL, "Z", 0x1, NULL },
    { "getParser", NULL, "Lorg.joda.time.format.PeriodParser;", 0x1, NULL },
    { "withLocaleWithJavaUtilLocale:", "withLocale", "Lorg.joda.time.format.PeriodFormatter;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "withParseTypeWithOrgJodaTimePeriodType:", "withParseType", "Lorg.joda.time.format.PeriodFormatter;", 0x1, NULL },
    { "getParseType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePeriod:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePeriod:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "printWithOrgJodaTimeReadablePeriod:", "print", "Ljava.lang.String;", 0x1, NULL },
    { "checkPrinter", NULL, "V", 0x2, NULL },
    { "checkPeriodWithOrgJodaTimeReadablePeriod:", "checkPeriod", "V", 0x2, NULL },
    { "parseIntoWithOrgJodaTimeReadWritablePeriod:withNSString:withInt:", "parseInto", "I", 0x1, NULL },
    { "parsePeriodWithNSString:", "parsePeriod", "Lorg.joda.time.Period;", 0x1, NULL },
    { "parseMutablePeriodWithNSString:", "parseMutablePeriod", "Lorg.joda.time.MutablePeriod;", 0x1, NULL },
    { "checkParser", NULL, "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iPrinter_", NULL, 0x12, "Lorg.joda.time.format.PeriodPrinter;", NULL,  },
    { "iParser_", NULL, 0x12, "Lorg.joda.time.format.PeriodParser;", NULL,  },
    { "iLocale_", NULL, 0x12, "Ljava.util.Locale;", NULL,  },
    { "iParseType_", NULL, 0x12, "Lorg.joda.time.PeriodType;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatter = { "PeriodFormatter", "org.joda.time.format", NULL, 0x1, 19, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatter;
}

@end
