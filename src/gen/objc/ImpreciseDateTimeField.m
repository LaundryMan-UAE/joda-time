//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java
//

#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "ImpreciseDateTimeField.h"

@implementation OrgJodaTimeFieldImpreciseDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                            withLong:(long long int)unitMillis {
  if (self = [super initWithOrgJodaTimeDateTimeFieldType:type]) {
    iUnitMillis_ = unitMillis;
    iDurationField_ = [[OrgJodaTimeFieldImpreciseDateTimeField_LinkedDurationField alloc] initWithOrgJodaTimeFieldImpreciseDateTimeField:self withOrgJodaTimeDurationFieldType:[((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getDurationType]];
  }
  return self;
}

- (int)getWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)setWithLong:(long long int)instant
                     withInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [OrgJodaTimeFieldFieldUtils safeToIntWithLong:[self getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant]];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[self getDifferenceAsLongWithLong:subtrahendInstant withLong:minuendInstant];
  }
  long long int difference = (minuendInstant - subtrahendInstant) / iUnitMillis_;
  if ([self addWithLong:subtrahendInstant withLong:difference] < minuendInstant) {
    do {
      difference++;
    }
    while ([self addWithLong:subtrahendInstant withLong:difference] <= minuendInstant);
    difference--;
  }
  else if ([self addWithLong:subtrahendInstant withLong:difference] > minuendInstant) {
    do {
      difference--;
    }
    while ([self addWithLong:subtrahendInstant withLong:difference] > minuendInstant);
  }
  return difference;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)roundFloorWithLong:(long long int)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (long long int)getDurationUnitMillis {
  return iUnitMillis_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFieldImpreciseDateTimeField *)other {
  [super copyAllFieldsTo:other];
  other->iDurationField_ = iDurationField_;
  other->iUnitMillis_ = iUnitMillis_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withLong:", "ImpreciseDateTimeField", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x401, NULL },
    { "setWithLong:withInt:", "set", "J", 0x401, NULL },
    { "addWithLong:withInt:", "add", "J", 0x401, NULL },
    { "addWithLong:withLong:", "add", "J", 0x401, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x401, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x401, NULL },
    { "getDurationUnitMillis", NULL, "J", 0x14, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldImpreciseDateTimeField_serialVersionUID },
    { "iUnitMillis_", NULL, 0x10, "J", NULL,  },
    { "iDurationField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldImpreciseDateTimeField = { "ImpreciseDateTimeField", "org.joda.time.field", NULL, 0x401, 11, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFieldImpreciseDateTimeField;
}

@end

@implementation OrgJodaTimeFieldImpreciseDateTimeField_LinkedDurationField

- (instancetype)initWithOrgJodaTimeFieldImpreciseDateTimeField:(OrgJodaTimeFieldImpreciseDateTimeField *)outer$
                              withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  this$0_ = outer$;
  return [super initWithOrgJodaTimeDurationFieldType:type];
}

- (BOOL)isPrecise {
  return NO;
}

- (long long int)getUnitMillis {
  return this$0_->iUnitMillis_;
}

- (int)getValueWithLong:(long long int)duration
               withLong:(long long int)instant {
  return [this$0_ getDifferenceWithLong:instant + duration withLong:instant];
}

- (long long int)getValueAsLongWithLong:(long long int)duration
                               withLong:(long long int)instant {
  return [this$0_ getDifferenceAsLongWithLong:instant + duration withLong:instant];
}

- (long long int)getMillisWithInt:(int)value
                         withLong:(long long int)instant {
  return [this$0_ addWithLong:instant withInt:value] - instant;
}

- (long long int)getMillisWithLong:(long long int)value
                          withLong:(long long int)instant {
  return [this$0_ addWithLong:instant withLong:value] - instant;
}

- (long long int)addWithLong:(long long int)instant
                     withInt:(int)value {
  return [this$0_ addWithLong:instant withInt:value];
}

- (long long int)addWithLong:(long long int)instant
                    withLong:(long long int)value {
  return [this$0_ addWithLong:instant withLong:value];
}

- (int)getDifferenceWithLong:(long long int)minuendInstant
                    withLong:(long long int)subtrahendInstant {
  return [this$0_ getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (long long int)getDifferenceAsLongWithLong:(long long int)minuendInstant
                                    withLong:(long long int)subtrahendInstant {
  return [this$0_ getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFieldImpreciseDateTimeField:withOrgJodaTimeDurationFieldType:", "LinkedDurationField", NULL, 0x0, NULL },
    { "isPrecise", NULL, "Z", 0x1, NULL },
    { "getUnitMillis", NULL, "J", 0x1, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL },
    { "getValueAsLongWithLong:withLong:", "getValueAsLong", "J", 0x1, NULL },
    { "getMillisWithInt:withLong:", "getMillis", "J", 0x1, NULL },
    { "getMillisWithLong:withLong:", "getMillis", "J", 0x1, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.field.ImpreciseDateTimeField;", NULL,  },
    { "serialVersionUID_LinkedDurationField_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeFieldImpreciseDateTimeField_LinkedDurationField_serialVersionUID },
  };
  static J2ObjcClassInfo _OrgJodaTimeFieldImpreciseDateTimeField_LinkedDurationField = { "LinkedDurationField", "org.joda.time.field", "ImpreciseDateTimeField", 0x12, 11, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFieldImpreciseDateTimeField_LinkedDurationField;
}

@end
