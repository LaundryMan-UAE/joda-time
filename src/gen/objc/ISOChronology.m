//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/ISOChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DividedDateTimeField.h"
#include "DurationField.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "ISOYearOfEraDateTimeField.h"
#include "RemainderDateTimeField.h"
#include "ZonedChronology.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

BOOL OrgJodaTimeChronoISOChronology_initialized = NO;

@implementation OrgJodaTimeChronoISOChronology

OrgJodaTimeChronoISOChronology * OrgJodaTimeChronoISOChronology_INSTANCE_UTC_;
JavaUtilConcurrentConcurrentHashMap * OrgJodaTimeChronoISOChronology_cCache_;

+ (OrgJodaTimeChronoISOChronology *)getInstanceUTC {
  return OrgJodaTimeChronoISOChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoISOChronology *)getInstance {
  return OrgJodaTimeChronoISOChronology_getInstance();
}

+ (OrgJodaTimeChronoISOChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  return [super initWithOrgJodaTimeChronology:base withId:nil];
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoISOChronology_INSTANCE_UTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (NSString *)description {
  NSString *str = @"ISOChronology";
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  if (zone != nil) {
    str = JreStrcat("$C$C", str, '[', [zone getID], ']');
  }
  return str;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([((OrgJodaTimeChronology *) nil_chk([self getBase])) getZone] == OrgJodaTimeDateTimeZone_get_UTC_()) {
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_centuryOfEra_(nil_chk(fields), [[OrgJodaTimeFieldDividedDateTimeField alloc] initWithOrgJodaTimeDateTimeField:OrgJodaTimeChronoISOYearOfEraDateTimeField_get_INSTANCE_() withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_centuryOfEra() withInt:100]);
    OrgJodaTimeChronoAssembledChronology_Fields_set_centuries_(fields, [fields->centuryOfEra_ getDurationField]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_yearOfCentury_(fields, [[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *) check_class_cast(fields->centuryOfEra_, [OrgJodaTimeFieldDividedDateTimeField class]) withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_yearOfCentury()]);
    OrgJodaTimeChronoAssembledChronology_Fields_setAndConsume_weekyearOfCentury_(fields, [[OrgJodaTimeFieldRemainderDateTimeField alloc] initWithOrgJodaTimeFieldDividedDateTimeField:(OrgJodaTimeFieldDividedDateTimeField *) check_class_cast(fields->centuryOfEra_, [OrgJodaTimeFieldDividedDateTimeField class]) withOrgJodaTimeDurationField:fields->weekyears_ withOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekyearOfCentury()]);
  }
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoISOChronology class]]) {
    OrgJodaTimeChronoISOChronology *chrono = (OrgJodaTimeChronoISOChronology *) check_class_cast(obj, [OrgJodaTimeChronoISOChronology class]);
    return [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[((OrgJodaTimeChronoISOChronology *) nil_chk(chrono)) getZone]];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [@"ISO" hash]) * 11 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]);
}

- (id)writeReplace {
  return [[[OrgJodaTimeChronoISOChronology_Stub alloc] initWithOrgJodaTimeDateTimeZone:[self getZone]] autorelease];
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoISOChronology class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoISOChronology_cCache_, nil, [[JavaUtilConcurrentConcurrentHashMap alloc] init]);
    {
      JreStrongAssignAndConsume(&OrgJodaTimeChronoISOChronology_INSTANCE_UTC_, nil, [[OrgJodaTimeChronoISOChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoGregorianChronology_getInstanceUTC()]);
      [OrgJodaTimeChronoISOChronology_cCache_ putWithId:OrgJodaTimeDateTimeZone_get_UTC_() withId:OrgJodaTimeChronoISOChronology_INSTANCE_UTC_];
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoISOChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.ISOChronology;", 0x9, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.ISOChronology;", 0x9, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.ISOChronology;", 0x9, NULL },
    { "initWithOrgJodaTimeChronology:", "ISOChronology", NULL, 0x2, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "writeReplace", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoISOChronology_serialVersionUID },
    { "INSTANCE_UTC_", NULL, 0x1a, "Lorg.joda.time.chrono.ISOChronology;", &OrgJodaTimeChronoISOChronology_INSTANCE_UTC_,  },
    { "cCache_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoISOChronology_cCache_,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoISOChronology = { "ISOChronology", "org.joda.time.chrono", NULL, 0x11, 11, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeChronoISOChronology;
}

@end

OrgJodaTimeChronoISOChronology *OrgJodaTimeChronoISOChronology_getInstanceUTC() {
  OrgJodaTimeChronoISOChronology_init();
  return OrgJodaTimeChronoISOChronology_INSTANCE_UTC_;
}

OrgJodaTimeChronoISOChronology *OrgJodaTimeChronoISOChronology_getInstance() {
  OrgJodaTimeChronoISOChronology_init();
  return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone_getDefault());
}

OrgJodaTimeChronoISOChronology *OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoISOChronology_init();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoISOChronology *chrono = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoISOChronology_cCache_)) getWithId:zone];
  if (chrono == nil) {
    chrono = [[[OrgJodaTimeChronoISOChronology alloc] initWithOrgJodaTimeChronology:OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoISOChronology_INSTANCE_UTC_, zone)] autorelease];
    OrgJodaTimeChronoISOChronology *oldChrono = [OrgJodaTimeChronoISOChronology_cCache_ putIfAbsentWithId:zone withId:chrono];
    if (oldChrono != nil) {
      chrono = oldChrono;
    }
  }
  return chrono;
}

@implementation OrgJodaTimeChronoISOChronology_Stub

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (self = [super init]) {
    OrgJodaTimeChronoISOChronology_Stub_set_iZone_(self, zone);
  }
  return self;
}

- (id)readResolve {
  return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(iZone_);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:iZone_];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgJodaTimeChronoISOChronology_Stub_set_iZone_(self, (OrgJodaTimeDateTimeZone *) check_class_cast([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], [OrgJodaTimeDateTimeZone class]));
}

- (void)dealloc {
  OrgJodaTimeChronoISOChronology_Stub_set_iZone_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoISOChronology_Stub *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoISOChronology_Stub_set_iZone_(other, iZone_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeZone:", "Stub", NULL, 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeChronoISOChronology_Stub_serialVersionUID },
    { "iZone_", NULL, 0x82, "Lorg.joda.time.DateTimeZone;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoISOChronology_Stub = { "Stub", "org.joda.time.chrono", "ISOChronology", 0x1a, 4, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeChronoISOChronology_Stub;
}

@end
