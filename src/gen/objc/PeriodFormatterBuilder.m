//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
//

#include "DateTimeConstants.h"
#include "DurationFieldType.h"
#include "FormatUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "PeriodFormatter.h"
#include "PeriodFormatterBuilder.h"
#include "PeriodParser.h"
#include "PeriodPrinter.h"
#include "PeriodType.h"
#include "ReadWritablePeriod.h"
#include "ReadablePeriod.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

BOOL OrgJodaTimeFormatPeriodFormatterBuilder_initialized = NO;

@implementation OrgJodaTimeFormatPeriodFormatterBuilder

id<JavaUtilConcurrentConcurrentMap> OrgJodaTimeFormatPeriodFormatterBuilder_PATTERNS_;

- (instancetype)init {
  if (self = [super init]) {
    [self clear];
  }
  return self;
}

- (OrgJodaTimeFormatPeriodFormatter *)toFormatter {
  OrgJodaTimeFormatPeriodFormatter *formatter = [OrgJodaTimeFormatPeriodFormatterBuilder toFormatterWithJavaUtilList:iElementPairs_ withBoolean:iNotPrinter_ withBoolean:iNotParser_];
  {
    IOSObjectArray *a__ = iFieldFormatters_;
    OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *fieldFormatter = (*b__++);
      if (fieldFormatter != nil) {
        [fieldFormatter finishWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:iFieldFormatters_];
      }
    }
  }
  iFieldFormatters_ = (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(iFieldFormatters_)) clone], [IOSObjectArray class]);
  return formatter;
}

- (id<OrgJodaTimeFormatPeriodPrinter>)toPrinter {
  if (iNotPrinter_) {
    return nil;
  }
  return [((OrgJodaTimeFormatPeriodFormatter *) nil_chk([self toFormatter])) getPrinter];
}

- (id<OrgJodaTimeFormatPeriodParser>)toParser {
  if (iNotParser_) {
    return nil;
  }
  return [((OrgJodaTimeFormatPeriodFormatter *) nil_chk([self toFormatter])) getParser];
}

- (void)clear {
  iMinPrintedDigits_ = 1;
  iPrintZeroSetting_ = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_LAST;
  iMaxParsedDigits_ = 10;
  iRejectSignedValues_ = NO;
  iPrefix_ = nil;
  if (iElementPairs_ == nil) {
    iElementPairs_ = [[JavaUtilArrayList alloc] init];
  }
  else {
    [iElementPairs_ clear];
  }
  iNotPrinter_ = NO;
  iNotParser_ = NO;
  iFieldFormatters_ = [IOSObjectArray arrayWithLength:10 type:[IOSClass classWithClass:[OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter class]]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWithOrgJodaTimeFormatPeriodFormatter:(OrgJodaTimeFormatPeriodFormatter *)formatter {
  if (formatter == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No formatter supplied"];
  }
  [self clearPrefix];
  (void) [self append0WithOrgJodaTimeFormatPeriodPrinter:[((OrgJodaTimeFormatPeriodFormatter *) nil_chk(formatter)) getPrinter] withOrgJodaTimeFormatPeriodParser:[formatter getParser]];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)printer
                                                    withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)parser {
  if (printer == nil && parser == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No printer or parser supplied"];
  }
  [self clearPrefix];
  (void) [self append0WithOrgJodaTimeFormatPeriodPrinter:printer withOrgJodaTimeFormatPeriodParser:parser];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendLiteralWithNSString:(NSString *)text {
  if (text == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Literal must not be null"];
  }
  [self clearPrefix];
  OrgJodaTimeFormatPeriodFormatterBuilder_Literal *literal = [[OrgJodaTimeFormatPeriodFormatterBuilder_Literal alloc] initWithNSString:text];
  (void) [self append0WithOrgJodaTimeFormatPeriodPrinter:literal withOrgJodaTimeFormatPeriodParser:literal];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)minimumPrintedDigitsWithInt:(int)minDigits {
  iMinPrintedDigits_ = minDigits;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)maximumParsedDigitsWithInt:(int)maxDigits {
  iMaxParsedDigits_ = maxDigits;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)rejectSignedValuesWithBoolean:(BOOL)v {
  iRejectSignedValues_ = v;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroRarelyLast {
  iPrintZeroSetting_ = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_LAST;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroRarelyFirst {
  iPrintZeroSetting_ = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_FIRST;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroIfSupported {
  iPrintZeroSetting_ = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_IF_SUPPORTED;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroAlways {
  iPrintZeroSetting_ = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_ALWAYS;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroNever {
  iPrintZeroSetting_ = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_NEVER;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSString:(NSString *)text {
  if (text == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self appendPrefixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:[[OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix alloc] initWithNSString:text]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSString:(NSString *)singularText
                                                         withNSString:(NSString *)pluralText {
  if (singularText == nil || pluralText == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self appendPrefixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:[[OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix alloc] initWithNSString:singularText withNSString:pluralText]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSStringArray:(IOSObjectArray *)regularExpressions
                                                         withNSStringArray:(IOSObjectArray *)prefixes {
  if (regularExpressions == nil || prefixes == nil || (int) [regularExpressions count] < 1 || (int) [regularExpressions count] != (int) [prefixes count]) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self appendPrefixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:[[OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix alloc] initWithNSStringArray:regularExpressions withNSStringArray:prefixes]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)prefix {
  if (prefix == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  if (iPrefix_ != nil) {
    prefix = [[OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix alloc] initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:iPrefix_ withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:prefix];
  }
  iPrefix_ = prefix;
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendYears {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_YEARS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMonths {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_MONTHS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWeeks {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_WEEKS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendDays {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_DAYS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendHours {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_HOURS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMinutes {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_MINUTES];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeconds {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSecondsWithMillis {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSecondsWithOptionalMillis {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMillis {
  [self appendFieldWithInt:OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS];
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMillis3Digit {
  [self appendFieldWithInt:7 withInt:3];
  return self;
}

- (void)appendFieldWithInt:(int)type {
  [self appendFieldWithInt:type withInt:iMinPrintedDigits_];
}

- (void)appendFieldWithInt:(int)type
                   withInt:(int)minPrinted {
  OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *field = [[OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter alloc] initWithInt:minPrinted withInt:iPrintZeroSetting_ withInt:iMaxParsedDigits_ withBoolean:iRejectSignedValues_ withInt:type withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:iFieldFormatters_ withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:iPrefix_ withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:nil];
  (void) [self append0WithOrgJodaTimeFormatPeriodPrinter:field withOrgJodaTimeFormatPeriodParser:field];
  (void) IOSObjectArray_Set(nil_chk(iFieldFormatters_), type, field);
  iPrefix_ = nil;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSString:(NSString *)text {
  if (text == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self appendSuffixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:[[OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix alloc] initWithNSString:text]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSString:(NSString *)singularText
                                                         withNSString:(NSString *)pluralText {
  if (singularText == nil || pluralText == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self appendSuffixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:[[OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix alloc] initWithNSString:singularText withNSString:pluralText]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSStringArray:(IOSObjectArray *)regularExpressions
                                                         withNSStringArray:(IOSObjectArray *)suffixes {
  if (regularExpressions == nil || suffixes == nil || (int) [regularExpressions count] < 1 || (int) [regularExpressions count] != (int) [suffixes count]) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  return [self appendSuffixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:[[OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix alloc] initWithNSStringArray:regularExpressions withNSStringArray:suffixes]];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix {
  id originalPrinter;
  id originalParser;
  if ([((id<JavaUtilList>) nil_chk(iElementPairs_)) size] > 0) {
    originalPrinter = [iElementPairs_ getWithInt:[iElementPairs_ size] - 2];
    originalParser = [iElementPairs_ getWithInt:[iElementPairs_ size] - 1];
  }
  else {
    originalPrinter = nil;
    originalParser = nil;
  }
  if (originalPrinter == nil || originalParser == nil || originalPrinter != originalParser || !([originalPrinter isKindOfClass:[OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter class]])) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"No field to apply suffix to"];
  }
  [self clearPrefix];
  OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *newField = [[OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter alloc] initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter:(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *) check_class_cast(originalPrinter, [OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter class]) withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:suffix];
  (void) [iElementPairs_ setWithInt:[iElementPairs_ size] - 2 withId:newField];
  (void) [iElementPairs_ setWithInt:[iElementPairs_ size] - 1 withId:newField];
  (void) IOSObjectArray_Set(nil_chk(iFieldFormatters_), [newField getFieldType], newField);
  return self;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text {
  return [self appendSeparatorWithNSString:text withNSString:text withNSStringArray:nil withBoolean:YES withBoolean:YES];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorIfFieldsAfterWithNSString:(NSString *)text {
  return [self appendSeparatorWithNSString:text withNSString:text withNSStringArray:nil withBoolean:NO withBoolean:YES];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorIfFieldsBeforeWithNSString:(NSString *)text {
  return [self appendSeparatorWithNSString:text withNSString:text withNSStringArray:nil withBoolean:YES withBoolean:NO];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText {
  return [self appendSeparatorWithNSString:text withNSString:finalText withNSStringArray:nil withBoolean:YES withBoolean:YES];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText
                                                       withNSStringArray:(IOSObjectArray *)variants {
  return [self appendSeparatorWithNSString:text withNSString:finalText withNSStringArray:variants withBoolean:YES withBoolean:YES];
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText
                                                       withNSStringArray:(IOSObjectArray *)variants
                                                             withBoolean:(BOOL)useBefore
                                                             withBoolean:(BOOL)useAfter {
  if (text == nil || finalText == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  [self clearPrefix];
  id<JavaUtilList> pairs = iElementPairs_;
  if ([((id<JavaUtilList>) nil_chk(pairs)) size] == 0) {
    if (useAfter && useBefore == NO) {
      OrgJodaTimeFormatPeriodFormatterBuilder_Separator *separator = [[OrgJodaTimeFormatPeriodFormatterBuilder_Separator alloc] initWithNSString:text withNSString:finalText withNSStringArray:variants withOrgJodaTimeFormatPeriodPrinter:OrgJodaTimeFormatPeriodFormatterBuilder_Literal_get_EMPTY_() withOrgJodaTimeFormatPeriodParser:OrgJodaTimeFormatPeriodFormatterBuilder_Literal_get_EMPTY_() withBoolean:useBefore withBoolean:useAfter];
      (void) [self append0WithOrgJodaTimeFormatPeriodPrinter:separator withOrgJodaTimeFormatPeriodParser:separator];
    }
    return self;
  }
  int i;
  OrgJodaTimeFormatPeriodFormatterBuilder_Separator *lastSeparator = nil;
  for (i = [pairs size]; --i >= 0; ) {
    if ([[pairs getWithInt:i] isKindOfClass:[OrgJodaTimeFormatPeriodFormatterBuilder_Separator class]]) {
      lastSeparator = (OrgJodaTimeFormatPeriodFormatterBuilder_Separator *) check_class_cast([pairs getWithInt:i], [OrgJodaTimeFormatPeriodFormatterBuilder_Separator class]);
      pairs = [pairs subListWithInt:i + 1 withInt:[pairs size]];
      break;
    }
    i--;
  }
  if (lastSeparator != nil && [((id<JavaUtilList>) nil_chk(pairs)) size] == 0) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot have two adjacent separators"];
  }
  else {
    IOSObjectArray *comp = [OrgJodaTimeFormatPeriodFormatterBuilder createCompositeWithJavaUtilList:pairs];
    [((id<JavaUtilList>) nil_chk(pairs)) clear];
    OrgJodaTimeFormatPeriodFormatterBuilder_Separator *separator = [[OrgJodaTimeFormatPeriodFormatterBuilder_Separator alloc] initWithNSString:text withNSString:finalText withNSStringArray:variants withOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>) check_protocol_cast(IOSObjectArray_Get(nil_chk(comp), 0), @protocol(OrgJodaTimeFormatPeriodPrinter)) withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>) check_protocol_cast(IOSObjectArray_Get(comp, 1), @protocol(OrgJodaTimeFormatPeriodParser)) withBoolean:useBefore withBoolean:useAfter];
    [pairs addWithId:separator];
    [pairs addWithId:separator];
  }
  return self;
}

- (void)clearPrefix {
  if (iPrefix_ != nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Prefix not followed by field"];
  }
  iPrefix_ = nil;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder *)append0WithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)printer
                                                     withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)parser {
  [((id<JavaUtilList>) nil_chk(iElementPairs_)) addWithId:printer];
  [iElementPairs_ addWithId:parser];
  iNotPrinter_ |= (printer == nil);
  iNotParser_ |= (parser == nil);
  return self;
}

+ (OrgJodaTimeFormatPeriodFormatter *)toFormatterWithJavaUtilList:(id<JavaUtilList>)elementPairs
                                                      withBoolean:(BOOL)notPrinter
                                                      withBoolean:(BOOL)notParser {
  if (notPrinter && notParser) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Builder has created neither a printer nor a parser"];
  }
  int size = [((id<JavaUtilList>) nil_chk(elementPairs)) size];
  if (size >= 2 && [[elementPairs getWithInt:0] isKindOfClass:[OrgJodaTimeFormatPeriodFormatterBuilder_Separator class]]) {
    OrgJodaTimeFormatPeriodFormatterBuilder_Separator *sep = (OrgJodaTimeFormatPeriodFormatterBuilder_Separator *) check_class_cast([elementPairs getWithInt:0], [OrgJodaTimeFormatPeriodFormatterBuilder_Separator class]);
    if (((OrgJodaTimeFormatPeriodFormatterBuilder_Separator *) nil_chk(sep))->iAfterParser_ == nil && sep->iAfterPrinter_ == nil) {
      OrgJodaTimeFormatPeriodFormatter *f = [OrgJodaTimeFormatPeriodFormatterBuilder toFormatterWithJavaUtilList:[elementPairs subListWithInt:2 withInt:size] withBoolean:notPrinter withBoolean:notParser];
      sep = [sep finishWithOrgJodaTimeFormatPeriodPrinter:[((OrgJodaTimeFormatPeriodFormatter *) nil_chk(f)) getPrinter] withOrgJodaTimeFormatPeriodParser:[f getParser]];
      return [[OrgJodaTimeFormatPeriodFormatter alloc] initWithOrgJodaTimeFormatPeriodPrinter:sep withOrgJodaTimeFormatPeriodParser:sep];
    }
  }
  IOSObjectArray *comp = [OrgJodaTimeFormatPeriodFormatterBuilder createCompositeWithJavaUtilList:elementPairs];
  if (notPrinter) {
    return [[OrgJodaTimeFormatPeriodFormatter alloc] initWithOrgJodaTimeFormatPeriodPrinter:nil withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>) check_protocol_cast(IOSObjectArray_Get(nil_chk(comp), 1), @protocol(OrgJodaTimeFormatPeriodParser))];
  }
  else if (notParser) {
    return [[OrgJodaTimeFormatPeriodFormatter alloc] initWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>) check_protocol_cast(IOSObjectArray_Get(nil_chk(comp), 0), @protocol(OrgJodaTimeFormatPeriodPrinter)) withOrgJodaTimeFormatPeriodParser:nil];
  }
  else {
    return [[OrgJodaTimeFormatPeriodFormatter alloc] initWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>) check_protocol_cast(IOSObjectArray_Get(nil_chk(comp), 0), @protocol(OrgJodaTimeFormatPeriodPrinter)) withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>) check_protocol_cast(IOSObjectArray_Get(comp, 1), @protocol(OrgJodaTimeFormatPeriodParser))];
  }
}

+ (IOSObjectArray *)createCompositeWithJavaUtilList:(id<JavaUtilList>)elementPairs {
  {
    OrgJodaTimeFormatPeriodFormatterBuilder_Composite *comp;
    switch ([((id<JavaUtilList>) nil_chk(elementPairs)) size]) {
      case 0:
      return [IOSObjectArray arrayWithObjects:(id[]){ OrgJodaTimeFormatPeriodFormatterBuilder_Literal_get_EMPTY_(), OrgJodaTimeFormatPeriodFormatterBuilder_Literal_get_EMPTY_() } count:2 type:[IOSClass classWithClass:[NSObject class]]];
      case 1:
      return [IOSObjectArray arrayWithObjects:(id[]){ [elementPairs getWithInt:0], [elementPairs getWithInt:1] } count:2 type:[IOSClass classWithClass:[NSObject class]]];
      default:
      comp = [[OrgJodaTimeFormatPeriodFormatterBuilder_Composite alloc] initWithJavaUtilList:elementPairs];
      return [IOSObjectArray arrayWithObjects:(id[]){ comp, comp } count:2 type:[IOSClass classWithClass:[NSObject class]]];
    }
  }
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatPeriodFormatterBuilder class]) {
    OrgJodaTimeFormatPeriodFormatterBuilder_PATTERNS_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    OrgJodaTimeFormatPeriodFormatterBuilder_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder *)other {
  [super copyAllFieldsTo:other];
  other->iElementPairs_ = iElementPairs_;
  other->iFieldFormatters_ = iFieldFormatters_;
  other->iMaxParsedDigits_ = iMaxParsedDigits_;
  other->iMinPrintedDigits_ = iMinPrintedDigits_;
  other->iNotParser_ = iNotParser_;
  other->iNotPrinter_ = iNotPrinter_;
  other->iPrefix_ = iPrefix_;
  other->iPrintZeroSetting_ = iPrintZeroSetting_;
  other->iRejectSignedValues_ = iRejectSignedValues_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "PeriodFormatterBuilder", NULL, 0x1, NULL },
    { "toFormatter", NULL, "Lorg.joda.time.format.PeriodFormatter;", 0x1, NULL },
    { "toPrinter", NULL, "Lorg.joda.time.format.PeriodPrinter;", 0x1, NULL },
    { "toParser", NULL, "Lorg.joda.time.format.PeriodParser;", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatPeriodFormatter:", "append", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendWithOrgJodaTimeFormatPeriodPrinter:withOrgJodaTimeFormatPeriodParser:", "append", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendLiteralWithNSString:", "appendLiteral", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "minimumPrintedDigitsWithInt:", "minimumPrintedDigits", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "maximumParsedDigitsWithInt:", "maximumParsedDigits", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "rejectSignedValuesWithBoolean:", "rejectSignedValues", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "printZeroRarelyLast", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "printZeroRarelyFirst", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "printZeroIfSupported", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "printZeroAlways", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "printZeroNever", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendPrefixWithNSString:", "appendPrefix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendPrefixWithNSString:withNSString:", "appendPrefix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendPrefixWithNSStringArray:withNSStringArray:", "appendPrefix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendPrefixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:", "appendPrefix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x2, NULL },
    { "appendYears", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendMonths", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendWeeks", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendDays", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendHours", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendMinutes", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSeconds", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSecondsWithMillis", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSecondsWithOptionalMillis", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendMillis", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendMillis3Digit", NULL, "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendFieldWithInt:", "appendField", "V", 0x2, NULL },
    { "appendFieldWithInt:withInt:", "appendField", "V", 0x2, NULL },
    { "appendSuffixWithNSString:", "appendSuffix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSuffixWithNSString:withNSString:", "appendSuffix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSuffixWithNSStringArray:withNSStringArray:", "appendSuffix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSuffixWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:", "appendSuffix", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x2, NULL },
    { "appendSeparatorWithNSString:", "appendSeparator", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSeparatorIfFieldsAfterWithNSString:", "appendSeparatorIfFieldsAfter", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSeparatorIfFieldsBeforeWithNSString:", "appendSeparatorIfFieldsBefore", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSeparatorWithNSString:withNSString:", "appendSeparator", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSeparatorWithNSString:withNSString:withNSStringArray:", "appendSeparator", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x1, NULL },
    { "appendSeparatorWithNSString:withNSString:withNSStringArray:withBoolean:withBoolean:", "appendSeparator", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x2, NULL },
    { "clearPrefix", NULL, "V", 0x2, "Ljava.lang.IllegalStateException;" },
    { "append0WithOrgJodaTimeFormatPeriodPrinter:withOrgJodaTimeFormatPeriodParser:", "append0", "Lorg.joda.time.format.PeriodFormatterBuilder;", 0x2, NULL },
    { "toFormatterWithJavaUtilList:withBoolean:withBoolean:", "toFormatter", "Lorg.joda.time.format.PeriodFormatter;", 0xa, NULL },
    { "createCompositeWithJavaUtilList:", "createComposite", "[Ljava.lang.Object;", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "PRINT_ZERO_RARELY_FIRST_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_FIRST },
    { "PRINT_ZERO_RARELY_LAST_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_LAST },
    { "PRINT_ZERO_IF_SUPPORTED_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_IF_SUPPORTED },
    { "PRINT_ZERO_ALWAYS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_ALWAYS },
    { "PRINT_ZERO_NEVER_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_NEVER },
    { "YEARS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_YEARS },
    { "MONTHS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_MONTHS },
    { "WEEKS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_WEEKS },
    { "DAYS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_DAYS },
    { "HOURS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_HOURS },
    { "MINUTES_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_MINUTES },
    { "SECONDS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS },
    { "MILLIS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS },
    { "SECONDS_MILLIS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS },
    { "SECONDS_OPTIONAL_MILLIS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS },
    { "MAX_FIELD_", NULL, 0x1a, "I", NULL, .constantValue.asInt = OrgJodaTimeFormatPeriodFormatterBuilder_MAX_FIELD },
    { "PATTERNS_", NULL, 0x1a, "Ljava.util.concurrent.ConcurrentMap;", &OrgJodaTimeFormatPeriodFormatterBuilder_PATTERNS_,  },
    { "iMinPrintedDigits_", NULL, 0x2, "I", NULL,  },
    { "iPrintZeroSetting_", NULL, 0x2, "I", NULL,  },
    { "iMaxParsedDigits_", NULL, 0x2, "I", NULL,  },
    { "iRejectSignedValues_", NULL, 0x2, "Z", NULL,  },
    { "iPrefix_", NULL, 0x2, "Lorg.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix;", NULL,  },
    { "iElementPairs_", NULL, 0x2, "Ljava.util.List;", NULL,  },
    { "iNotPrinter_", NULL, 0x2, "Z", NULL,  },
    { "iNotParser_", NULL, 0x2, "Z", NULL,  },
    { "iFieldFormatters_", NULL, 0x2, "[Lorg.joda.time.format.PeriodFormatterBuilder$FieldFormatter;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder = { "PeriodFormatterBuilder", "org.joda.time.format", NULL, 0x1, 47, methods, 26, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder;
}

@end

@interface OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix : NSObject
@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "calculatePrintedLengthWithInt:", "calculatePrintedLength", "I", 0x401, NULL },
    { "printToWithJavaLangStringBuffer:withInt:", "printTo", "V", 0x401, NULL },
    { "printToWithJavaIoWriter:withInt:", "printTo", "V", 0x401, "Ljava.io.IOException;" },
    { "parseWithNSString:withInt:", "parse", "I", 0x401, NULL },
    { "scanWithNSString:withInt:", "scan", "I", 0x401, NULL },
    { "getAffixes", NULL, "[Ljava.lang.String;", 0x401, NULL },
    { "finishWithJavaUtilSet:", "finish", "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix = { "PeriodFieldAffix", "org.joda.time.format", "PeriodFormatterBuilder", 0x208, 7, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix

- (void)finishWithJavaUtilSet:(id<JavaUtilSet>)periodFieldAffixesToIgnore {
  if (iOtherAffixes_ == nil) {
    int shortestAffixLength = JavaLangInteger_MAX_VALUE;
    {
      IOSObjectArray *a__ = [self getAffixes];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *affix = (*b__++);
        if (((int) [((NSString *) nil_chk(affix)) length]) < shortestAffixLength) {
          shortestAffixLength = ((int) [affix length]);
        }
      }
    }
    id<JavaUtilSet> affixesToIgnore = [[JavaUtilHashSet alloc] init];
    for (id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix> __strong periodFieldAffixToIgnore in nil_chk(periodFieldAffixesToIgnore)) {
      if (periodFieldAffixToIgnore != nil) {
        {
          IOSObjectArray *a__ = [periodFieldAffixToIgnore getAffixes];
          NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          NSString * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            NSString *affixToIgnore = (*b__++);
            if (((int) [((NSString *) nil_chk(affixToIgnore)) length]) > shortestAffixLength) {
              [affixesToIgnore addWithId:affixToIgnore];
            }
          }
        }
      }
    }
    iOtherAffixes_ = [affixesToIgnore toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[affixesToIgnore size] type:[IOSClass classWithClass:[NSString class]]]];
  }
}

- (BOOL)matchesOtherAffixWithInt:(int)textLength
                    withNSString:(NSString *)periodStr
                         withInt:(int)position {
  if (iOtherAffixes_ != nil) {
    {
      IOSObjectArray *a__ = iOtherAffixes_;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *affixToIgnore = (*b__++);
        int textToIgnoreLength = ((int) [((NSString *) nil_chk(affixToIgnore)) length]);
        if (textLength < textToIgnoreLength && [((NSString *) nil_chk(periodStr)) regionMatches:YES thisOffset:position aString:affixToIgnore otherOffset:0 count:textToIgnoreLength]) {
          return YES;
        }
      }
    }
  }
  return NO;
}

- (int)calculatePrintedLengthWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getAffixes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)parseWithNSString:(NSString *)param0
                 withInt:(int)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)param0
                                withInt:(int)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)param0
                        withInt:(int)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)scanWithNSString:(NSString *)param0
                withInt:(int)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix *)other {
  [super copyAllFieldsTo:other];
  other->iOtherAffixes_ = iOtherAffixes_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "finishWithJavaUtilSet:", "finish", "V", 0x1, NULL },
    { "matchesOtherAffixWithInt:withNSString:withInt:", "matchesOtherAffix", "Z", 0x4, NULL },
    { "calculatePrintedLengthWithInt:", "calculatePrintedLength", "I", 0x401, NULL },
    { "getAffixes", NULL, "[Ljava.lang.String;", 0x401, NULL },
    { "parseWithNSString:withInt:", "parse", "I", 0x401, NULL },
    { "printToWithJavaLangStringBuffer:withInt:", "printTo", "V", 0x401, NULL },
    { "printToWithJavaIoWriter:withInt:", "printTo", "V", 0x401, NULL },
    { "scanWithNSString:withInt:", "scan", "I", 0x401, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iOtherAffixes_", NULL, 0x42, "[Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix = { "IgnorableAffix", "org.joda.time.format", "PeriodFormatterBuilder", 0x408, 9, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix

- (instancetype)initWithNSString:(NSString *)text {
  if (self = [super init]) {
    iText_ = text;
  }
  return self;
}

- (int)calculatePrintedLengthWithInt:(int)value {
  return ((int) [((NSString *) nil_chk(iText_)) length]);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(int)value {
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:iText_];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(int)value {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:iText_];
}

- (int)parseWithNSString:(NSString *)periodStr
                 withInt:(int)position {
  NSString *text = iText_;
  int textLength = ((int) [((NSString *) nil_chk(text)) length]);
  if ([((NSString *) nil_chk(periodStr)) regionMatches:YES thisOffset:position aString:text otherOffset:0 count:textLength]) {
    if (![self matchesOtherAffixWithInt:textLength withNSString:periodStr withInt:position]) {
      return position + textLength;
    }
  }
  return ~position;
}

- (int)scanWithNSString:(NSString *)periodStr
                withInt:(int)position {
  NSString *text = iText_;
  int textLength = ((int) [((NSString *) nil_chk(text)) length]);
  int sourceLength = ((int) [((NSString *) nil_chk(periodStr)) length]);
  for (int pos = position; pos < sourceLength; pos++) {
    if ([periodStr regionMatches:YES thisOffset:pos aString:text otherOffset:0 count:textLength]) {
      if (![self matchesOtherAffixWithInt:textLength withNSString:periodStr withInt:pos]) {
        return pos;
      }
    }
    switch ([periodStr charAtWithInt:pos]) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '.':
      case ',':
      case '+':
      case '-':
      break;
      default:
      goto break_search;
    }
  }
  break_search: ;
  return ~position;
}

- (IOSObjectArray *)getAffixes {
  return [IOSObjectArray arrayWithObjects:(id[]){ iText_ } count:1 type:[IOSClass classWithClass:[NSString class]]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix *)other {
  [super copyAllFieldsTo:other];
  other->iText_ = iText_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "SimpleAffix", NULL, 0x0, NULL },
    { "calculatePrintedLengthWithInt:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withInt:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withInt:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseWithNSString:withInt:", "parse", "I", 0x1, NULL },
    { "scanWithNSString:withInt:", "scan", "I", 0x1, NULL },
    { "getAffixes", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix = { "SimpleAffix", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 7, methods, 1, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix

- (instancetype)initWithNSString:(NSString *)singularText
                    withNSString:(NSString *)pluralText {
  if (self = [super init]) {
    iSingularText_ = singularText;
    iPluralText_ = pluralText;
  }
  return self;
}

- (int)calculatePrintedLengthWithInt:(int)value {
  return ((int) [(value == 1 ? iSingularText_ : iPluralText_) length]);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(int)value {
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:value == 1 ? iSingularText_ : iPluralText_];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(int)value {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:value == 1 ? iSingularText_ : iPluralText_];
}

- (int)parseWithNSString:(NSString *)periodStr
                 withInt:(int)position {
  NSString *text1 = iPluralText_;
  NSString *text2 = iSingularText_;
  if (((int) [((NSString *) nil_chk(text1)) length]) < ((int) [((NSString *) nil_chk(text2)) length])) {
    NSString *temp = text1;
    text1 = text2;
    text2 = temp;
  }
  if ([((NSString *) nil_chk(periodStr)) regionMatches:YES thisOffset:position aString:text1 otherOffset:0 count:((int) [text1 length])]) {
    if (![self matchesOtherAffixWithInt:((int) [text1 length]) withNSString:periodStr withInt:position]) {
      return position + ((int) [text1 length]);
    }
  }
  if ([periodStr regionMatches:YES thisOffset:position aString:text2 otherOffset:0 count:((int) [text2 length])]) {
    if (![self matchesOtherAffixWithInt:((int) [text2 length]) withNSString:periodStr withInt:position]) {
      return position + ((int) [text2 length]);
    }
  }
  return ~position;
}

- (int)scanWithNSString:(NSString *)periodStr
                withInt:(int)position {
  NSString *text1 = iPluralText_;
  NSString *text2 = iSingularText_;
  if (((int) [((NSString *) nil_chk(text1)) length]) < ((int) [((NSString *) nil_chk(text2)) length])) {
    NSString *temp = text1;
    text1 = text2;
    text2 = temp;
  }
  int textLength1 = ((int) [text1 length]);
  int textLength2 = ((int) [text2 length]);
  int sourceLength = ((int) [((NSString *) nil_chk(periodStr)) length]);
  for (int pos = position; pos < sourceLength; pos++) {
    if ([periodStr regionMatches:YES thisOffset:pos aString:text1 otherOffset:0 count:textLength1]) {
      if (![self matchesOtherAffixWithInt:((int) [text1 length]) withNSString:periodStr withInt:pos]) {
        return pos;
      }
    }
    if ([periodStr regionMatches:YES thisOffset:pos aString:text2 otherOffset:0 count:textLength2]) {
      if (![self matchesOtherAffixWithInt:((int) [text2 length]) withNSString:periodStr withInt:pos]) {
        return pos;
      }
    }
  }
  return ~position;
}

- (IOSObjectArray *)getAffixes {
  return [IOSObjectArray arrayWithObjects:(id[]){ iSingularText_, iPluralText_ } count:2 type:[IOSClass classWithClass:[NSString class]]];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix *)other {
  [super copyAllFieldsTo:other];
  other->iPluralText_ = iPluralText_;
  other->iSingularText_ = iSingularText_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "PluralAffix", NULL, 0x0, NULL },
    { "calculatePrintedLengthWithInt:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withInt:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withInt:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseWithNSString:withInt:", "parse", "I", 0x1, NULL },
    { "scanWithNSString:withInt:", "scan", "I", 0x1, NULL },
    { "getAffixes", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iSingularText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iPluralText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix = { "PluralAffix", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 7, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix;
}

@end

BOOL OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_initialized = NO;

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix

id<JavaUtilComparator> OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_LENGTH_DESC_COMPARATOR_;

- (instancetype)initWithNSStringArray:(IOSObjectArray *)regExes
                    withNSStringArray:(IOSObjectArray *)texts {
  if (self = [super init]) {
    iSuffixes_ = [((IOSObjectArray *) nil_chk(texts)) clone];
    iPatterns_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(regExes)) count] type:[IOSClass classWithClass:[JavaUtilRegexPattern class]]];
    for (int i = 0; i < (int) [regExes count]; i++) {
      JavaUtilRegexPattern *pattern = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgJodaTimeFormatPeriodFormatterBuilder_get_PATTERNS_())) getWithId:IOSObjectArray_Get(regExes, i)];
      if (pattern == nil) {
        pattern = [JavaUtilRegexPattern compileWithNSString:IOSObjectArray_Get(regExes, i)];
        (void) [OrgJodaTimeFormatPeriodFormatterBuilder_get_PATTERNS_() putIfAbsentWithId:IOSObjectArray_Get(regExes, i) withId:pattern];
      }
      (void) IOSObjectArray_Set(iPatterns_, i, pattern);
    }
    iSuffixesSortedDescByLength_ = [((IOSObjectArray *) nil_chk(iSuffixes_)) clone];
    [JavaUtilArrays sortWithNSObjectArray:iSuffixesSortedDescByLength_ withJavaUtilComparator:OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_LENGTH_DESC_COMPARATOR_];
  }
  return self;
}

- (int)selectSuffixIndexWithInt:(int)value {
  NSString *valueString = [NSString valueOfInt:value];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(iPatterns_)) count]; i++) {
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(IOSObjectArray_Get(iPatterns_, i))) matcherWithJavaLangCharSequence:valueString])) matches]) {
      return i;
    }
  }
  return (int) [iPatterns_ count] - 1;
}

- (int)calculatePrintedLengthWithInt:(int)value {
  return ((int) [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(iSuffixes_), [self selectSuffixIndexWithInt:value]))) length]);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(int)value {
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:IOSObjectArray_Get(nil_chk(iSuffixes_), [self selectSuffixIndexWithInt:value])];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(int)value {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:IOSObjectArray_Get(nil_chk(iSuffixes_), [self selectSuffixIndexWithInt:value])];
}

- (int)parseWithNSString:(NSString *)periodStr
                 withInt:(int)position {
  {
    IOSObjectArray *a__ = iSuffixesSortedDescByLength_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *text = (*b__++);
      if ([((NSString *) nil_chk(periodStr)) regionMatches:YES thisOffset:position aString:text otherOffset:0 count:((int) [((NSString *) nil_chk(text)) length])]) {
        if (![self matchesOtherAffixWithInt:((int) [text length]) withNSString:periodStr withInt:position]) {
          return position + ((int) [text length]);
        }
      }
    }
  }
  return ~position;
}

- (int)scanWithNSString:(NSString *)periodStr
                withInt:(int)position {
  int sourceLength = ((int) [((NSString *) nil_chk(periodStr)) length]);
  for (int pos = position; pos < sourceLength; pos++) {
    {
      IOSObjectArray *a__ = iSuffixesSortedDescByLength_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *text = (*b__++);
        if ([periodStr regionMatches:YES thisOffset:pos aString:text otherOffset:0 count:((int) [((NSString *) nil_chk(text)) length])]) {
          if (![self matchesOtherAffixWithInt:((int) [text length]) withNSString:periodStr withInt:pos]) {
            return pos;
          }
        }
      }
    }
  }
  return ~position;
}

- (IOSObjectArray *)getAffixes {
  return [((IOSObjectArray *) nil_chk(iSuffixes_)) clone];
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix class]) {
    OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_LENGTH_DESC_COMPARATOR_ = [[OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1 alloc] init];
    OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix *)other {
  [super copyAllFieldsTo:other];
  other->iPatterns_ = iPatterns_;
  other->iSuffixes_ = iSuffixes_;
  other->iSuffixesSortedDescByLength_ = iSuffixesSortedDescByLength_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:withNSStringArray:", "RegExAffix", NULL, 0x0, NULL },
    { "selectSuffixIndexWithInt:", "selectSuffixIndex", "I", 0x2, NULL },
    { "calculatePrintedLengthWithInt:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withInt:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withInt:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseWithNSString:withInt:", "parse", "I", 0x1, NULL },
    { "scanWithNSString:withInt:", "scan", "I", 0x1, NULL },
    { "getAffixes", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LENGTH_DESC_COMPARATOR_", NULL, 0x1a, "Ljava.util.Comparator;", &OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_LENGTH_DESC_COMPARATOR_,  },
    { "iSuffixes_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iPatterns_", NULL, 0x12, "[Ljava.util.regex.Pattern;", NULL,  },
    { "iSuffixesSortedDescByLength_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix = { "RegExAffix", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 8, methods, 4, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1

- (int)compareWithId:(NSString *)o1
              withId:(NSString *)o2 {
  return ((int) [((NSString *) nil_chk(o2)) length]) - ((int) [((NSString *) nil_chk(o1)) length]);
}

- (instancetype)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compareWithNSString:withNSString:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1 = { "$1", "org.joda.time.format", "PeriodFormatterBuilder$RegExAffix", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix

- (instancetype)initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)left
                    withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)right {
  if (self = [super init]) {
    iLeft_ = left;
    iRight_ = right;
    id<JavaUtilSet> result = [[JavaUtilHashSet alloc] init];
    {
      IOSObjectArray *a__ = [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iLeft_)) getAffixes];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *leftText = (*b__++);
        {
          IOSObjectArray *a__ = [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iRight_)) getAffixes];
          NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          NSString * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            NSString *rightText = (*b__++);
            [result addWithId:[NSString stringWithFormat:@"%@%@", leftText, rightText]];
          }
        }
      }
    }
    iLeftRightCombinations_ = [result toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[result size] type:[IOSClass classWithClass:[NSString class]]]];
  }
  return self;
}

- (int)calculatePrintedLengthWithInt:(int)value {
  return [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iLeft_)) calculatePrintedLengthWithInt:value] + [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iRight_)) calculatePrintedLengthWithInt:value];
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(int)value {
  [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iLeft_)) printToWithJavaLangStringBuffer:buf withInt:value];
  [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iRight_)) printToWithJavaLangStringBuffer:buf withInt:value];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(int)value {
  [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iLeft_)) printToWithJavaIoWriter:outArg withInt:value];
  [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iRight_)) printToWithJavaIoWriter:outArg withInt:value];
}

- (int)parseWithNSString:(NSString *)periodStr
                 withInt:(int)position {
  int pos = [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iLeft_)) parseWithNSString:periodStr withInt:position];
  if (pos >= 0) {
    pos = [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iRight_)) parseWithNSString:periodStr withInt:pos];
    if (pos >= 0 && [self matchesOtherAffixWithInt:[self parseWithNSString:periodStr withInt:pos] - pos withNSString:periodStr withInt:position]) {
      return ~position;
    }
  }
  return pos;
}

- (int)scanWithNSString:(NSString *)periodStr
                withInt:(int)position {
  int leftPosition = [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iLeft_)) scanWithNSString:periodStr withInt:position];
  if (leftPosition >= 0) {
    int rightPosition = [((id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>) nil_chk(iRight_)) scanWithNSString:periodStr withInt:[iLeft_ parseWithNSString:periodStr withInt:leftPosition]];
    if (!(rightPosition >= 0 && [self matchesOtherAffixWithInt:[iRight_ parseWithNSString:periodStr withInt:rightPosition] - leftPosition withNSString:periodStr withInt:position])) {
      if (leftPosition > 0) {
        return leftPosition;
      }
      else {
        return rightPosition;
      }
    }
  }
  return ~position;
}

- (IOSObjectArray *)getAffixes {
  return [((IOSObjectArray *) nil_chk(iLeftRightCombinations_)) clone];
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix *)other {
  [super copyAllFieldsTo:other];
  other->iLeft_ = iLeft_;
  other->iLeftRightCombinations_ = iLeftRightCombinations_;
  other->iRight_ = iRight_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:", "CompositeAffix", NULL, 0x0, NULL },
    { "calculatePrintedLengthWithInt:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withInt:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withInt:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseWithNSString:withInt:", "parse", "I", 0x1, NULL },
    { "scanWithNSString:withInt:", "scan", "I", 0x1, NULL },
    { "getAffixes", NULL, "[Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iLeft_", NULL, 0x12, "Lorg.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix;", NULL,  },
    { "iRight_", NULL, 0x12, "Lorg.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix;", NULL,  },
    { "iLeftRightCombinations_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix = { "CompositeAffix", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 7, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter

- (instancetype)initWithInt:(int)minPrintedDigits
                    withInt:(int)printZeroSetting
                    withInt:(int)maxParsedDigits
                withBoolean:(BOOL)rejectSignedValues
                    withInt:(int)fieldType
withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:(IOSObjectArray *)fieldFormatters
withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)prefix
withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix {
  if (self = [super init]) {
    iMinPrintedDigits_ = minPrintedDigits;
    iPrintZeroSetting_ = printZeroSetting;
    iMaxParsedDigits_ = maxParsedDigits;
    iRejectSignedValues_ = rejectSignedValues;
    iFieldType_ = fieldType;
    iFieldFormatters_ = fieldFormatters;
    iPrefix_ = prefix;
    iSuffix_ = suffix;
  }
  return self;
}

- (instancetype)initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter:(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *)field
                  withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix {
  if (self = [super init]) {
    iMinPrintedDigits_ = ((OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *) nil_chk(field))->iMinPrintedDigits_;
    iPrintZeroSetting_ = field->iPrintZeroSetting_;
    iMaxParsedDigits_ = field->iMaxParsedDigits_;
    iRejectSignedValues_ = field->iRejectSignedValues_;
    iFieldType_ = field->iFieldType_;
    iFieldFormatters_ = field->iFieldFormatters_;
    iPrefix_ = field->iPrefix_;
    if (field->iSuffix_ != nil) {
      suffix = [[OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix alloc] initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:field->iSuffix_ withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:suffix];
    }
    iSuffix_ = suffix;
  }
  return self;
}

- (void)finishWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:(IOSObjectArray *)fieldFormatters {
  id<JavaUtilSet> prefixesToIgnore = [[JavaUtilHashSet alloc] init];
  id<JavaUtilSet> suffixesToIgnore = [[JavaUtilHashSet alloc] init];
  {
    IOSObjectArray *a__ = fieldFormatters;
    OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *fieldFormatter = (*b__++);
      if (fieldFormatter != nil && ![self isEqual:fieldFormatter]) {
        [prefixesToIgnore addWithId:fieldFormatter->iPrefix_];
        [suffixesToIgnore addWithId:fieldFormatter->iSuffix_];
      }
    }
  }
  if (iPrefix_ != nil) {
    [iPrefix_ finishWithJavaUtilSet:prefixesToIgnore];
  }
  if (iSuffix_ != nil) {
    [iSuffix_ finishWithJavaUtilSet:suffixesToIgnore];
  }
}

- (int)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                               withInt:(int)stopAt
                                    withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (stopAt <= 0) {
    return 0;
  }
  if (iPrintZeroSetting_ == OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_ALWAYS || [self getFieldValueWithOrgJodaTimeReadablePeriod:period] != JavaLangLong_MAX_VALUE) {
    return 1;
  }
  return 0;
}

- (int)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  long long int valueLong = [self getFieldValueWithOrgJodaTimeReadablePeriod:period];
  if (valueLong == JavaLangLong_MAX_VALUE) {
    return 0;
  }
  int sum = [JavaLangMath maxWithInt:[OrgJodaTimeFormatFormatUtils calculateDigitCountWithLong:valueLong] withInt:iMinPrintedDigits_];
  if (iFieldType_ >= OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS) {
    sum = (valueLong < 0 ? [JavaLangMath maxWithInt:sum withInt:5] : [JavaLangMath maxWithInt:sum withInt:4]);
    sum++;
    if (iFieldType_ == OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS && ([JavaLangMath absWithLong:valueLong] % OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND) == 0) {
      sum -= 4;
    }
    valueLong = valueLong / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  }
  int value = (int) valueLong;
  if (iPrefix_ != nil) {
    sum += [iPrefix_ calculatePrintedLengthWithInt:value];
  }
  if (iSuffix_ != nil) {
    sum += [iSuffix_ calculatePrintedLengthWithInt:value];
  }
  return sum;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  long long int valueLong = [self getFieldValueWithOrgJodaTimeReadablePeriod:period];
  if (valueLong == JavaLangLong_MAX_VALUE) {
    return;
  }
  int value = (int) valueLong;
  if (iFieldType_ >= OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS) {
    value = (int) (valueLong / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND);
  }
  if (iPrefix_ != nil) {
    [iPrefix_ printToWithJavaLangStringBuffer:buf withInt:value];
  }
  int bufLen = [((JavaLangStringBuffer *) nil_chk(buf)) sequenceLength];
  int minDigits = iMinPrintedDigits_;
  if (minDigits <= 1) {
    [OrgJodaTimeFormatFormatUtils appendUnpaddedIntegerWithJavaLangStringBuffer:buf withInt:value];
  }
  else {
    [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangStringBuffer:buf withInt:value withInt:minDigits];
  }
  if (iFieldType_ >= OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS) {
    int dp = (int) ([JavaLangMath absWithLong:valueLong] % OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND);
    if (iFieldType_ == OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS || dp > 0) {
      if (valueLong < 0 && valueLong > -OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND) {
        (void) [buf insertWithInt:bufLen withChar:'-'];
      }
      (void) [buf appendWithChar:'.'];
      [OrgJodaTimeFormatFormatUtils appendPaddedIntegerWithJavaLangStringBuffer:buf withInt:dp withInt:3];
    }
  }
  if (iSuffix_ != nil) {
    [iSuffix_ printToWithJavaLangStringBuffer:buf withInt:value];
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  long long int valueLong = [self getFieldValueWithOrgJodaTimeReadablePeriod:period];
  if (valueLong == JavaLangLong_MAX_VALUE) {
    return;
  }
  int value = (int) valueLong;
  if (iFieldType_ >= OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS) {
    value = (int) (valueLong / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND);
  }
  if (iPrefix_ != nil) {
    [iPrefix_ printToWithJavaIoWriter:outArg withInt:value];
  }
  int minDigits = iMinPrintedDigits_;
  if (minDigits <= 1) {
    [OrgJodaTimeFormatFormatUtils writeUnpaddedIntegerWithJavaIoWriter:outArg withInt:value];
  }
  else {
    [OrgJodaTimeFormatFormatUtils writePaddedIntegerWithJavaIoWriter:outArg withInt:value withInt:minDigits];
  }
  if (iFieldType_ >= OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS) {
    int dp = (int) ([JavaLangMath absWithLong:valueLong] % OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND);
    if (iFieldType_ == OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS || dp > 0) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'.'];
      [OrgJodaTimeFormatFormatUtils writePaddedIntegerWithJavaIoWriter:outArg withInt:dp withInt:3];
    }
  }
  if (iSuffix_ != nil) {
    [iSuffix_ printToWithJavaIoWriter:outArg withInt:value];
  }
}

- (int)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                     withNSString:(NSString *)text
                                          withInt:(int)position
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  BOOL mustParse = (iPrintZeroSetting_ == OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_ALWAYS);
  if (position >= ((int) [((NSString *) nil_chk(text)) length])) {
    return mustParse ? ~position : position;
  }
  if (iPrefix_ != nil) {
    position = [iPrefix_ parseWithNSString:text withInt:position];
    if (position >= 0) {
      mustParse = YES;
    }
    else {
      if (!mustParse) {
        return ~position;
      }
      return position;
    }
  }
  int suffixPos = -1;
  if (iSuffix_ != nil && !mustParse) {
    suffixPos = [iSuffix_ scanWithNSString:text withInt:position];
    if (suffixPos >= 0) {
      mustParse = YES;
    }
    else {
      if (!mustParse) {
        return ~suffixPos;
      }
      return suffixPos;
    }
  }
  if (!mustParse && ![self isSupportedWithOrgJodaTimePeriodType:[((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) getPeriodType] withInt:iFieldType_]) {
    return position;
  }
  int limit;
  if (suffixPos > 0) {
    limit = [JavaLangMath minWithInt:iMaxParsedDigits_ withInt:suffixPos - position];
  }
  else {
    limit = [JavaLangMath minWithInt:iMaxParsedDigits_ withInt:((int) [text length]) - position];
  }
  int length = 0;
  int fractPos = -1;
  BOOL hasDigits = NO;
  while (length < limit) {
    unichar c = [text charAtWithInt:position + length];
    if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues_) {
      BOOL negative = c == '-';
      if (length + 1 >= limit || (c = [text charAtWithInt:position + length + 1]) < '0' || c > '9') {
        break;
      }
      if (negative) {
        length++;
      }
      else {
        position++;
      }
      limit = [JavaLangMath minWithInt:limit + 1 withInt:((int) [text length]) - position];
      continue;
    }
    if (c >= '0' && c <= '9') {
      hasDigits = YES;
    }
    else {
      if ((c == '.' || c == ',') && (iFieldType_ == OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS || iFieldType_ == OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS)) {
        if (fractPos >= 0) {
          break;
        }
        fractPos = position + length + 1;
        limit = [JavaLangMath minWithInt:limit + 1 withInt:((int) [text length]) - position];
      }
      else {
        break;
      }
    }
    length++;
  }
  if (!hasDigits) {
    return ~position;
  }
  if (suffixPos >= 0 && position + length != suffixPos) {
    return position;
  }
  if (iFieldType_ != OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS && iFieldType_ != OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS) {
    [self setFieldValueWithOrgJodaTimeReadWritablePeriod:period withInt:iFieldType_ withInt:[self parseIntWithNSString:text withInt:position withInt:length]];
  }
  else if (fractPos < 0) {
    [self setFieldValueWithOrgJodaTimeReadWritablePeriod:period withInt:OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS withInt:[self parseIntWithNSString:text withInt:position withInt:length]];
    [self setFieldValueWithOrgJodaTimeReadWritablePeriod:period withInt:OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS withInt:0];
  }
  else {
    int wholeValue = [self parseIntWithNSString:text withInt:position withInt:fractPos - position - 1];
    [self setFieldValueWithOrgJodaTimeReadWritablePeriod:period withInt:OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS withInt:wholeValue];
    int fractLen = position + length - fractPos;
    int fractValue;
    if (fractLen <= 0) {
      fractValue = 0;
    }
    else {
      if (fractLen >= 3) {
        fractValue = [self parseIntWithNSString:text withInt:fractPos withInt:3];
      }
      else {
        fractValue = [self parseIntWithNSString:text withInt:fractPos withInt:fractLen];
        if (fractLen == 1) {
          fractValue *= 100;
        }
        else {
          fractValue *= 10;
        }
      }
      if (wholeValue < 0) {
        fractValue = -fractValue;
      }
    }
    [self setFieldValueWithOrgJodaTimeReadWritablePeriod:period withInt:OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS withInt:fractValue];
  }
  position += length;
  if (position >= 0 && iSuffix_ != nil) {
    position = [iSuffix_ parseWithNSString:text withInt:position];
  }
  return position;
}

- (int)parseIntWithNSString:(NSString *)text
                    withInt:(int)position
                    withInt:(int)length {
  if (length >= 10) {
    return [JavaLangInteger parseIntWithNSString:[((NSString *) nil_chk(text)) substring:position endIndex:position + length]];
  }
  if (length <= 0) {
    return 0;
  }
  int value = [((NSString *) nil_chk(text)) charAtWithInt:position++];
  length--;
  BOOL negative;
  if (value == '-') {
    if (--length < 0) {
      return 0;
    }
    negative = YES;
    value = [text charAtWithInt:position++];
  }
  else {
    negative = NO;
  }
  value -= '0';
  while (length-- > 0) {
    value = ((value << 3) + (value << 1)) + [text charAtWithInt:position++] - '0';
  }
  return negative ? -value : value;
}

- (long long int)getFieldValueWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  OrgJodaTimePeriodType *type;
  if (iPrintZeroSetting_ == OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_ALWAYS) {
    type = nil;
  }
  else {
    type = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getPeriodType];
  }
  if (type != nil && [self isSupportedWithOrgJodaTimePeriodType:type withInt:iFieldType_] == NO) {
    return JavaLangLong_MAX_VALUE;
  }
  long long int value;
  {
    int seconds;
    int millis;
    switch (iFieldType_) {
      default:
      return JavaLangLong_MAX_VALUE;
      case OrgJodaTimeFormatPeriodFormatterBuilder_YEARS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType years]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_MONTHS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType months]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_WEEKS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType weeks]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_DAYS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType days]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_HOURS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType hours]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_MINUTES:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType minutes]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS:
      value = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis]];
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS:
      case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS:
      seconds = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds]];
      millis = [period getWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis]];
      value = (seconds * (long long int) OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND) + millis;
      break;
    }
  }
  if (value == 0) {
    switch (iPrintZeroSetting_) {
      case OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_NEVER:
      return JavaLangLong_MAX_VALUE;
      case OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_LAST:
      if ([self isZeroWithOrgJodaTimeReadablePeriod:period] && IOSObjectArray_Get(nil_chk(iFieldFormatters_), iFieldType_) == self) {
        for (int i = iFieldType_ + 1; i <= OrgJodaTimeFormatPeriodFormatterBuilder_MAX_FIELD; i++) {
          if ([self isSupportedWithOrgJodaTimePeriodType:type withInt:i] && IOSObjectArray_Get(iFieldFormatters_, i) != nil) {
            return JavaLangLong_MAX_VALUE;
          }
        }
      }
      else {
        return JavaLangLong_MAX_VALUE;
      }
      break;
      case OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_FIRST:
      if ([self isZeroWithOrgJodaTimeReadablePeriod:period] && IOSObjectArray_Get(nil_chk(iFieldFormatters_), iFieldType_) == self) {
        int i = [JavaLangMath minWithInt:iFieldType_ withInt:8];
        i--;
        for (; i >= 0 && i <= OrgJodaTimeFormatPeriodFormatterBuilder_MAX_FIELD; i--) {
          if ([self isSupportedWithOrgJodaTimePeriodType:type withInt:i] && IOSObjectArray_Get(iFieldFormatters_, i) != nil) {
            return JavaLangLong_MAX_VALUE;
          }
        }
      }
      else {
        return JavaLangLong_MAX_VALUE;
      }
      break;
    }
  }
  return value;
}

- (BOOL)isZeroWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (int i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    if ([period getValueWithInt:i] != 0) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isSupportedWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
                                     withInt:(int)field {
  switch (field) {
    default:
    return NO;
    case OrgJodaTimeFormatPeriodFormatterBuilder_YEARS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType years]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_MONTHS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType months]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_WEEKS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType weeks]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_DAYS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType days]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_HOURS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType hours]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_MINUTES:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType minutes]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis]];
    case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS:
    case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS:
    return [((OrgJodaTimePeriodType *) nil_chk(type)) isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType seconds]] || [type isSupportedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType millis]];
  }
}

- (void)setFieldValueWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                               withInt:(int)field
                                               withInt:(int)value {
  switch (field) {
    default:
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_YEARS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setYearsWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_MONTHS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setMonthsWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_WEEKS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setWeeksWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_DAYS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setDaysWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_HOURS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setHoursWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_MINUTES:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setMinutesWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setSecondsWithInt:value];
    break;
    case OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS:
    [((id<OrgJodaTimeReadWritablePeriod>) nil_chk(period)) setMillisWithInt:value];
    break;
  }
}

- (int)getFieldType {
  return iFieldType_;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *)other {
  [super copyAllFieldsTo:other];
  other->iFieldFormatters_ = iFieldFormatters_;
  other->iFieldType_ = iFieldType_;
  other->iMaxParsedDigits_ = iMaxParsedDigits_;
  other->iMinPrintedDigits_ = iMinPrintedDigits_;
  other->iPrefix_ = iPrefix_;
  other->iPrintZeroSetting_ = iPrintZeroSetting_;
  other->iRejectSignedValues_ = iRejectSignedValues_;
  other->iSuffix_ = iSuffix_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withBoolean:withInt:withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:", "FieldFormatter", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter:withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:", "FieldFormatter", NULL, 0x0, NULL },
    { "finishWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:", "finish", "V", 0x1, NULL },
    { "countFieldsToPrintWithOrgJodaTimeReadablePeriod:withInt:withJavaUtilLocale:", "countFieldsToPrint", "I", 0x1, NULL },
    { "calculatePrintedLengthWithOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseIntoWithOrgJodaTimeReadWritablePeriod:withNSString:withInt:withJavaUtilLocale:", "parseInto", "I", 0x1, NULL },
    { "parseIntWithNSString:withInt:withInt:", "parseInt", "I", 0x2, NULL },
    { "getFieldValueWithOrgJodaTimeReadablePeriod:", "getFieldValue", "J", 0x0, NULL },
    { "isZeroWithOrgJodaTimeReadablePeriod:", "isZero", "Z", 0x0, NULL },
    { "isSupportedWithOrgJodaTimePeriodType:withInt:", "isSupported", "Z", 0x0, NULL },
    { "setFieldValueWithOrgJodaTimeReadWritablePeriod:withInt:withInt:", "setFieldValue", "V", 0x0, NULL },
    { "getFieldType", NULL, "I", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iMinPrintedDigits_", NULL, 0x12, "I", NULL,  },
    { "iPrintZeroSetting_", NULL, 0x12, "I", NULL,  },
    { "iMaxParsedDigits_", NULL, 0x12, "I", NULL,  },
    { "iRejectSignedValues_", NULL, 0x12, "Z", NULL,  },
    { "iFieldType_", NULL, 0x12, "I", NULL,  },
    { "iFieldFormatters_", NULL, 0x12, "[Lorg.joda.time.format.PeriodFormatterBuilder$FieldFormatter;", NULL,  },
    { "iPrefix_", NULL, 0x12, "Lorg.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix;", NULL,  },
    { "iSuffix_", NULL, 0x12, "Lorg.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter = { "FieldFormatter", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 14, methods, 8, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter;
}

@end

BOOL OrgJodaTimeFormatPeriodFormatterBuilder_Literal_initialized = NO;

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_Literal

OrgJodaTimeFormatPeriodFormatterBuilder_Literal * OrgJodaTimeFormatPeriodFormatterBuilder_Literal_EMPTY_;

- (instancetype)initWithNSString:(NSString *)text {
  if (self = [super init]) {
    iText_ = text;
  }
  return self;
}

- (int)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                               withInt:(int)stopAt
                                    withJavaUtilLocale:(JavaUtilLocale *)locale {
  return 0;
}

- (int)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  return ((int) [((NSString *) nil_chk(iText_)) length]);
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:iText_];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:iText_];
}

- (int)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                     withNSString:(NSString *)periodStr
                                          withInt:(int)position
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((NSString *) nil_chk(periodStr)) regionMatches:YES thisOffset:position aString:iText_ otherOffset:0 count:((int) [((NSString *) nil_chk(iText_)) length])]) {
    return position + ((int) [iText_ length]);
  }
  return ~position;
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatPeriodFormatterBuilder_Literal class]) {
    OrgJodaTimeFormatPeriodFormatterBuilder_Literal_EMPTY_ = [[OrgJodaTimeFormatPeriodFormatterBuilder_Literal alloc] initWithNSString:@""];
    OrgJodaTimeFormatPeriodFormatterBuilder_Literal_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_Literal *)other {
  [super copyAllFieldsTo:other];
  other->iText_ = iText_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Literal", NULL, 0x0, NULL },
    { "countFieldsToPrintWithOrgJodaTimeReadablePeriod:withInt:withJavaUtilLocale:", "countFieldsToPrint", "I", 0x1, NULL },
    { "calculatePrintedLengthWithOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseIntoWithOrgJodaTimeReadWritablePeriod:withNSString:withInt:withJavaUtilLocale:", "parseInto", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_", NULL, 0x18, "Lorg.joda.time.format.PeriodFormatterBuilder$Literal;", &OrgJodaTimeFormatPeriodFormatterBuilder_Literal_EMPTY_,  },
    { "iText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_Literal = { "Literal", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 6, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_Literal;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_Separator

- (instancetype)initWithNSString:(NSString *)text
                    withNSString:(NSString *)finalText
               withNSStringArray:(IOSObjectArray *)variants
withOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)beforePrinter
withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)beforeParser
                     withBoolean:(BOOL)useBefore
                     withBoolean:(BOOL)useAfter {
  if (self = [super init]) {
    iText_ = text;
    iFinalText_ = finalText;
    if ((finalText == nil || [((NSString *) nil_chk(text)) isEqual:finalText]) && (variants == nil || (int) [variants count] == 0)) {
      iParsedForms_ = [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:[IOSClass classWithClass:[NSString class]]];
    }
    else {
      JavaUtilTreeSet *parsedSet = [[JavaUtilTreeSet alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()];
      [parsedSet addWithId:text];
      [parsedSet addWithId:finalText];
      if (variants != nil) {
        for (int i = (int) [variants count]; --i >= 0; ) {
          [parsedSet addWithId:IOSObjectArray_Get(variants, i)];
        }
      }
      JavaUtilArrayList *parsedList = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:parsedSet];
      [JavaUtilCollections reverseWithJavaUtilList:parsedList];
      iParsedForms_ = [parsedList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[parsedList size] type:[IOSClass classWithClass:[NSString class]]]];
    }
    iBeforePrinter_ = beforePrinter;
    iBeforeParser_ = beforeParser;
    iUseBefore_ = useBefore;
    iUseAfter_ = useAfter;
  }
  return self;
}

- (int)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                               withInt:(int)stopAt
                                    withJavaUtilLocale:(JavaUtilLocale *)locale {
  int sum = [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(iBeforePrinter_)) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:stopAt withJavaUtilLocale:locale];
  if (sum < stopAt) {
    sum += [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(iAfterPrinter_)) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:stopAt withJavaUtilLocale:locale];
  }
  return sum;
}

- (int)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatPeriodPrinter> before = iBeforePrinter_;
  id<OrgJodaTimeFormatPeriodPrinter> after = iAfterPrinter_;
  int sum = [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(before)) calculatePrintedLengthWithOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale] + [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) calculatePrintedLengthWithOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
  if (iUseBefore_) {
    if ([before countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:1 withJavaUtilLocale:locale] > 0) {
      if (iUseAfter_) {
        int afterCount = [after countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:2 withJavaUtilLocale:locale];
        if (afterCount > 0) {
          sum += ((int) [(afterCount > 1 ? iText_ : iFinalText_) length]);
        }
      }
      else {
        sum += ((int) [((NSString *) nil_chk(iText_)) length]);
      }
    }
  }
  else if (iUseAfter_ && [after countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:1 withJavaUtilLocale:locale] > 0) {
    sum += ((int) [((NSString *) nil_chk(iText_)) length]);
  }
  return sum;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatPeriodPrinter> before = iBeforePrinter_;
  id<OrgJodaTimeFormatPeriodPrinter> after = iAfterPrinter_;
  [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(before)) printToWithJavaLangStringBuffer:buf withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
  if (iUseBefore_) {
    if ([before countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:1 withJavaUtilLocale:locale] > 0) {
      if (iUseAfter_) {
        int afterCount = [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:2 withJavaUtilLocale:locale];
        if (afterCount > 0) {
          (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:afterCount > 1 ? iText_ : iFinalText_];
        }
      }
      else {
        (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:iText_];
      }
    }
  }
  else if (iUseAfter_ && [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:1 withJavaUtilLocale:locale] > 0) {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:iText_];
  }
  [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) printToWithJavaLangStringBuffer:buf withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatPeriodPrinter> before = iBeforePrinter_;
  id<OrgJodaTimeFormatPeriodPrinter> after = iAfterPrinter_;
  [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(before)) printToWithJavaIoWriter:outArg withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
  if (iUseBefore_) {
    if ([before countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:1 withJavaUtilLocale:locale] > 0) {
      if (iUseAfter_) {
        int afterCount = [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:2 withJavaUtilLocale:locale];
        if (afterCount > 0) {
          [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:afterCount > 1 ? iText_ : iFinalText_];
        }
      }
      else {
        [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:iText_];
      }
    }
  }
  else if (iUseAfter_ && [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:1 withJavaUtilLocale:locale] > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:iText_];
  }
  [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(after)) printToWithJavaIoWriter:outArg withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
}

- (int)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                     withNSString:(NSString *)periodStr
                                          withInt:(int)position
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  int oldPos = position;
  position = [((id<OrgJodaTimeFormatPeriodParser>) nil_chk(iBeforeParser_)) parseIntoWithOrgJodaTimeReadWritablePeriod:period withNSString:periodStr withInt:position withJavaUtilLocale:locale];
  if (position < 0) {
    return position;
  }
  BOOL found = NO;
  int parsedFormLength = -1;
  if (position > oldPos) {
    IOSObjectArray *parsedForms = iParsedForms_;
    int length = (int) [((IOSObjectArray *) nil_chk(parsedForms)) count];
    for (int i = 0; i < length; i++) {
      NSString *parsedForm = IOSObjectArray_Get(parsedForms, i);
      if ((parsedForm == nil || ((int) [parsedForm length]) == 0) || [((NSString *) nil_chk(periodStr)) regionMatches:YES thisOffset:position aString:parsedForm otherOffset:0 count:((int) [parsedForm length])]) {
        parsedFormLength = (parsedForm == nil ? 0 : ((int) [parsedForm length]));
        position += parsedFormLength;
        found = YES;
        break;
      }
    }
  }
  oldPos = position;
  position = [((id<OrgJodaTimeFormatPeriodParser>) nil_chk(iAfterParser_)) parseIntoWithOrgJodaTimeReadWritablePeriod:period withNSString:periodStr withInt:position withJavaUtilLocale:locale];
  if (position < 0) {
    return position;
  }
  if (found && position == oldPos && parsedFormLength > 0) {
    return ~oldPos;
  }
  if (position > oldPos && !found && !iUseBefore_) {
    return ~oldPos;
  }
  return position;
}

- (OrgJodaTimeFormatPeriodFormatterBuilder_Separator *)finishWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)afterPrinter
                                                              withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)afterParser {
  iAfterPrinter_ = afterPrinter;
  iAfterParser_ = afterParser;
  return self;
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_Separator *)other {
  [super copyAllFieldsTo:other];
  other->iAfterParser_ = iAfterParser_;
  other->iAfterPrinter_ = iAfterPrinter_;
  other->iBeforeParser_ = iBeforeParser_;
  other->iBeforePrinter_ = iBeforePrinter_;
  other->iFinalText_ = iFinalText_;
  other->iParsedForms_ = iParsedForms_;
  other->iText_ = iText_;
  other->iUseAfter_ = iUseAfter_;
  other->iUseBefore_ = iUseBefore_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSStringArray:withOrgJodaTimeFormatPeriodPrinter:withOrgJodaTimeFormatPeriodParser:withBoolean:withBoolean:", "Separator", NULL, 0x0, NULL },
    { "countFieldsToPrintWithOrgJodaTimeReadablePeriod:withInt:withJavaUtilLocale:", "countFieldsToPrint", "I", 0x1, NULL },
    { "calculatePrintedLengthWithOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseIntoWithOrgJodaTimeReadWritablePeriod:withNSString:withInt:withJavaUtilLocale:", "parseInto", "I", 0x1, NULL },
    { "finishWithOrgJodaTimeFormatPeriodPrinter:withOrgJodaTimeFormatPeriodParser:", "finish", "Lorg.joda.time.format.PeriodFormatterBuilder$Separator;", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iFinalText_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "iParsedForms_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iUseBefore_", NULL, 0x12, "Z", NULL,  },
    { "iUseAfter_", NULL, 0x12, "Z", NULL,  },
    { "iBeforePrinter_", NULL, 0x12, "Lorg.joda.time.format.PeriodPrinter;", NULL,  },
    { "iAfterPrinter_", NULL, 0x42, "Lorg.joda.time.format.PeriodPrinter;", NULL,  },
    { "iBeforeParser_", NULL, 0x12, "Lorg.joda.time.format.PeriodParser;", NULL,  },
    { "iAfterParser_", NULL, 0x42, "Lorg.joda.time.format.PeriodParser;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_Separator = { "Separator", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 7, methods, 9, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_Separator;
}

@end

@implementation OrgJodaTimeFormatPeriodFormatterBuilder_Composite

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)elementPairs {
  if (self = [super init]) {
    id<JavaUtilList> printerList = [[JavaUtilArrayList alloc] init];
    id<JavaUtilList> parserList = [[JavaUtilArrayList alloc] init];
    [self decomposeWithJavaUtilList:elementPairs withJavaUtilList:printerList withJavaUtilList:parserList];
    if ([printerList size] <= 0) {
      iPrinters_ = nil;
    }
    else {
      iPrinters_ = [printerList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[printerList size] type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeFormatPeriodPrinter)]]];
    }
    if ([parserList size] <= 0) {
      iParsers_ = nil;
    }
    else {
      iParsers_ = [parserList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[parserList size] type:[IOSClass classWithProtocol:@protocol(OrgJodaTimeFormatPeriodParser)]]];
    }
  }
  return self;
}

- (int)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                               withInt:(int)stopAt
                                    withJavaUtilLocale:(JavaUtilLocale *)locale {
  int sum = 0;
  IOSObjectArray *printers = iPrinters_;
  for (int i = (int) [((IOSObjectArray *) nil_chk(printers)) count]; sum < stopAt && --i >= 0; ) {
    sum += [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(IOSObjectArray_Get(printers, i))) countFieldsToPrintWithOrgJodaTimeReadablePeriod:period withInt:JavaLangInteger_MAX_VALUE withJavaUtilLocale:locale];
  }
  return sum;
}

- (int)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  int sum = 0;
  IOSObjectArray *printers = iPrinters_;
  for (int i = (int) [((IOSObjectArray *) nil_chk(printers)) count]; --i >= 0; ) {
    sum += [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(IOSObjectArray_Get(printers, i))) calculatePrintedLengthWithOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
  }
  return sum;
}

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *printers = iPrinters_;
  int len = (int) [((IOSObjectArray *) nil_chk(printers)) count];
  for (int i = 0; i < len; i++) {
    [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(IOSObjectArray_Get(printers, i))) printToWithJavaLangStringBuffer:buf withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
  }
}

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *printers = iPrinters_;
  int len = (int) [((IOSObjectArray *) nil_chk(printers)) count];
  for (int i = 0; i < len; i++) {
    [((id<OrgJodaTimeFormatPeriodPrinter>) nil_chk(IOSObjectArray_Get(printers, i))) printToWithJavaIoWriter:outArg withOrgJodaTimeReadablePeriod:period withJavaUtilLocale:locale];
  }
}

- (int)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                     withNSString:(NSString *)periodStr
                                          withInt:(int)position
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *parsers = iParsers_;
  if (parsers == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
  int len = (int) [((IOSObjectArray *) nil_chk(parsers)) count];
  for (int i = 0; i < len && position >= 0; i++) {
    position = [((id<OrgJodaTimeFormatPeriodParser>) nil_chk(IOSObjectArray_Get(parsers, i))) parseIntoWithOrgJodaTimeReadWritablePeriod:period withNSString:periodStr withInt:position withJavaUtilLocale:locale];
  }
  return position;
}

- (void)decomposeWithJavaUtilList:(id<JavaUtilList>)elementPairs
                 withJavaUtilList:(id<JavaUtilList>)printerList
                 withJavaUtilList:(id<JavaUtilList>)parserList {
  int size = [((id<JavaUtilList>) nil_chk(elementPairs)) size];
  for (int i = 0; i < size; i += 2) {
    id element = [elementPairs getWithInt:i];
    if ([element conformsToProtocol: @protocol(OrgJodaTimeFormatPeriodPrinter)]) {
      if ([element isKindOfClass:[OrgJodaTimeFormatPeriodFormatterBuilder_Composite class]]) {
        [self addArrayToListWithJavaUtilList:printerList withNSObjectArray:((OrgJodaTimeFormatPeriodFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatPeriodFormatterBuilder_Composite *) check_class_cast(element, [OrgJodaTimeFormatPeriodFormatterBuilder_Composite class]))))->iPrinters_];
      }
      else {
        [((id<JavaUtilList>) nil_chk(printerList)) addWithId:element];
      }
    }
    element = [elementPairs getWithInt:i + 1];
    if ([element conformsToProtocol: @protocol(OrgJodaTimeFormatPeriodParser)]) {
      if ([element isKindOfClass:[OrgJodaTimeFormatPeriodFormatterBuilder_Composite class]]) {
        [self addArrayToListWithJavaUtilList:parserList withNSObjectArray:((OrgJodaTimeFormatPeriodFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatPeriodFormatterBuilder_Composite *) check_class_cast(element, [OrgJodaTimeFormatPeriodFormatterBuilder_Composite class]))))->iParsers_];
      }
      else {
        [((id<JavaUtilList>) nil_chk(parserList)) addWithId:element];
      }
    }
  }
}

- (void)addArrayToListWithJavaUtilList:(id<JavaUtilList>)list
                     withNSObjectArray:(IOSObjectArray *)array {
  if (array != nil) {
    for (int i = 0; i < (int) [array count]; i++) {
      [((id<JavaUtilList>) nil_chk(list)) addWithId:IOSObjectArray_Get(array, i)];
    }
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeFormatPeriodFormatterBuilder_Composite *)other {
  [super copyAllFieldsTo:other];
  other->iParsers_ = iParsers_;
  other->iPrinters_ = iPrinters_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "Composite", NULL, 0x0, NULL },
    { "countFieldsToPrintWithOrgJodaTimeReadablePeriod:withInt:withJavaUtilLocale:", "countFieldsToPrint", "I", 0x1, NULL },
    { "calculatePrintedLengthWithOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "calculatePrintedLength", "I", 0x1, NULL },
    { "printToWithJavaLangStringBuffer:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, NULL },
    { "printToWithJavaIoWriter:withOrgJodaTimeReadablePeriod:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;" },
    { "parseIntoWithOrgJodaTimeReadWritablePeriod:withNSString:withInt:withJavaUtilLocale:", "parseInto", "I", 0x1, NULL },
    { "decomposeWithJavaUtilList:withJavaUtilList:withJavaUtilList:", "decompose", "V", 0x2, NULL },
    { "addArrayToListWithJavaUtilList:withNSObjectArray:", "addArrayToList", "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iPrinters_", NULL, 0x12, "[Lorg.joda.time.format.PeriodPrinter;", NULL,  },
    { "iParsers_", NULL, 0x12, "[Lorg.joda.time.format.PeriodParser;", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeFormatPeriodFormatterBuilder_Composite = { "Composite", "org.joda.time.format", "PeriodFormatterBuilder", 0x8, 8, methods, 2, fields, 0, NULL};
  return &_OrgJodaTimeFormatPeriodFormatterBuilder_Composite;
}

@end
