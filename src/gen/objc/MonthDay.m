//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/MonthDay.java
//

#include "AbstractPartial.h"
#include "BasePartial.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeFormatterBuilder.h"
#include "DateTimeParser.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "LocalDate.h"
#include "MonthDay.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "ToString.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

BOOL OrgJodaTimeMonthDay_initialized = NO;

@implementation OrgJodaTimeMonthDay

IOSObjectArray * OrgJodaTimeMonthDay_FIELD_TYPES_;
OrgJodaTimeFormatDateTimeFormatter * OrgJodaTimeMonthDay_PARSER_;

+ (OrgJodaTimeMonthDay *)now {
  return [[OrgJodaTimeMonthDay alloc] init];
}

+ (OrgJodaTimeMonthDay *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Zone must not be null"];
  }
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeDateTimeZone:zone];
}

+ (OrgJodaTimeMonthDay *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  if (chronology == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Chronology must not be null"];
  }
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeChronology:chronology];
}

+ (OrgJodaTimeMonthDay *)parseWithNSString:(NSString *)str {
  return [OrgJodaTimeMonthDay parseWithNSString:str withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeMonthDay_PARSER_];
}

+ (OrgJodaTimeMonthDay *)parseWithNSString:(NSString *)str
    withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  OrgJodaTimeLocalDate *date = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalDateWithNSString:str];
  return [[OrgJodaTimeMonthDay alloc] initWithInt:[((OrgJodaTimeLocalDate *) nil_chk(date)) getMonthOfYear] withInt:[date getDayOfMonth]];
}

+ (OrgJodaTimeMonthDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  if (calendar == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The calendar must not be null"];
  }
  return [[OrgJodaTimeMonthDay alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MONTH] + 1 withInt:[calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]];
}

+ (OrgJodaTimeMonthDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The date must not be null"];
  }
  return [[OrgJodaTimeMonthDay alloc] initWithInt:[((JavaUtilDate *) nil_chk(date)) getMonth] + 1 withInt:[date getDate]];
}

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [super initWithOrgJodaTimeChronology:[OrgJodaTimeChronoISOChronology getInstanceWithOrgJodaTimeDateTimeZone:zone]];
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithLong:(long long int)instant {
  return [super initWithLong:instant];
}

- (instancetype)initWithLong:(long long int)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithLong:instant withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithId:(id)instant {
  return [super initWithId:instant withOrgJodaTimeChronology:nil withOrgJodaTimeFormatDateTimeFormatter:[OrgJodaTimeFormatISODateTimeFormat localDateParser]];
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithId:instant withOrgJodaTimeChronology:[OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:chronology] withOrgJodaTimeFormatDateTimeFormatter:[OrgJodaTimeFormatISODateTimeFormat localDateParser]];
}

- (instancetype)initWithInt:(int)monthOfYear
                    withInt:(int)dayOfMonth {
  return [self initOrgJodaTimeMonthDayWithInt:monthOfYear withInt:dayOfMonth withOrgJodaTimeChronology:nil];
}

- (instancetype)initOrgJodaTimeMonthDayWithInt:(int)monthOfYear
                                       withInt:(int)dayOfMonth
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [super initWithIntArray:[IOSIntArray arrayWithInts:(int[]){ monthOfYear, dayOfMonth } count:2] withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithInt:(int)monthOfYear
                    withInt:(int)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return [self initOrgJodaTimeMonthDayWithInt:monthOfYear withInt:dayOfMonth withOrgJodaTimeChronology:chronology];
}

- (instancetype)initWithOrgJodaTimeMonthDay:(OrgJodaTimeMonthDay *)partial
                               withIntArray:(IOSIntArray *)values {
  return [super initWithOrgJodaTimeBaseBasePartial:partial withIntArray:values];
}

- (instancetype)initWithOrgJodaTimeMonthDay:(OrgJodaTimeMonthDay *)partial
                  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [super initWithOrgJodaTimeBaseBasePartial:partial withOrgJodaTimeChronology:chrono];
}

- (id)readResolve {
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_get_UTC_())) isEqual:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone]] == NO) {
    return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) withUTC]];
  }
  return self;
}

- (int)size {
  return 2;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(int)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeMonthDay_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeMonthDay_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    default:
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid index: %d", index]];
  }
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(int)index {
  return IOSObjectArray_Get(nil_chk(OrgJodaTimeMonthDay_FIELD_TYPES_), index);
}

- (IOSObjectArray *)getFieldTypes {
  return (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(OrgJodaTimeMonthDay_FIELD_TYPES_)) clone], [IOSObjectArray class]);
}

- (OrgJodaTimeMonthDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = [OrgJodaTimeDateTimeUtils getChronologyWithOrgJodaTimeChronology:newChronology];
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimeMonthDay *newMonthDay = [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withOrgJodaTimeChronology:newChronology];
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newMonthDay withIntArray:[self getValues]];
    return newMonthDay;
  }
}

- (OrgJodaTimeMonthDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                           withInt:(int)value {
  int index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                withInt:(int)amount {
  int index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                              withInt:(int)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (int i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    int index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:[OrgJodaTimeFieldFieldUtils safeMultiplyWithInt:[period getValueWithInt:i] withInt:scalar]];
    }
  }
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeMonthDay *)plusMonthsWithInt:(int)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType months] withInt:months];
}

- (OrgJodaTimeMonthDay *)plusDaysWithInt:(int)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType days] withInt:days];
}

- (OrgJodaTimeMonthDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeMonthDay *)minusMonthsWithInt:(int)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType months] withInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:months]];
}

- (OrgJodaTimeMonthDay *)minusDaysWithInt:(int)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:[OrgJodaTimeDurationFieldType days] withInt:[OrgJodaTimeFieldFieldUtils safeNegateWithInt:days]];
}

- (OrgJodaTimeLocalDate *)toLocalDateWithInt:(int)year {
  return [[OrgJodaTimeLocalDate alloc] initWithInt:year withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withOrgJodaTimeChronology:[self getChronology]];
}

- (int)getMonthOfYear {
  return [self getValueWithInt:OrgJodaTimeMonthDay_MONTH_OF_YEAR];
}

- (int)getDayOfMonth {
  return [self getValueWithInt:OrgJodaTimeMonthDay_DAY_OF_MONTH];
}

- (OrgJodaTimeMonthDay *)withMonthOfYearWithInt:(int)monthOfYear {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeMonthDay_MONTH_OF_YEAR withIntArray:newValues withInt:monthOfYear];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)withDayOfMonthWithInt:(int)dayOfMonth {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeMonthDay_DAY_OF_MONTH withIntArray:newValues withInt:dayOfMonth];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:self withIntArray:newValues];
}

- (OrgJodaTimeMonthDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return [[OrgJodaTimeMonthDay_Property alloc] initWithOrgJodaTimeMonthDay:self withInt:[self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]];
}

- (OrgJodaTimeMonthDay_Property *)monthOfYear {
  return [[OrgJodaTimeMonthDay_Property alloc] initWithOrgJodaTimeMonthDay:self withInt:OrgJodaTimeMonthDay_MONTH_OF_YEAR];
}

- (OrgJodaTimeMonthDay_Property *)dayOfMonth {
  return [[OrgJodaTimeMonthDay_Property alloc] initWithOrgJodaTimeMonthDay:self withInt:OrgJodaTimeMonthDay_DAY_OF_MONTH];
}

- (NSString *)description {
  id<JavaUtilList> fields = [[JavaUtilArrayList alloc] init];
  [fields addWithId:[OrgJodaTimeDateTimeFieldType monthOfYear]];
  [fields addWithId:[OrgJodaTimeDateTimeFieldType dayOfMonth]];
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatISODateTimeFormat forFieldsWithJavaUtilCollection:fields withBoolean:YES withBoolean:YES])) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatDateTimeFormat forPatternWithNSString:pattern])) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatDateTimeFormat forPatternWithNSString:pattern])) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

+ (void)initialize {
  if (self == [OrgJodaTimeMonthDay class]) {
    OrgJodaTimeMonthDay_FIELD_TYPES_ = [IOSObjectArray arrayWithObjects:(id[]){ [OrgJodaTimeDateTimeFieldType monthOfYear], [OrgJodaTimeDateTimeFieldType dayOfMonth] } count:2 type:[IOSClass classWithClass:[OrgJodaTimeDateTimeFieldType class]]];
    OrgJodaTimeMonthDay_PARSER_ = [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([((OrgJodaTimeFormatDateTimeFormatterBuilder *) [[OrgJodaTimeFormatDateTimeFormatterBuilder alloc] init]) appendOptionalWithOrgJodaTimeFormatDateTimeParser:[((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatISODateTimeFormat localDateParser])) getParser]])) appendOptionalWithOrgJodaTimeFormatDateTimeParser:[((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([OrgJodaTimeFormatDateTimeFormat forPatternWithNSString:@"--MM-dd"])) getParser]])) toFormatter];
    OrgJodaTimeMonthDay_initialized = YES;
  }
}
+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertFromString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_description {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJodaConvertToString alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.MonthDay;", 0x9, NULL },
    { "init", "MonthDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "MonthDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL },
    { "initWithLong:", "MonthDay", NULL, 0x1, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL },
    { "initWithId:", "MonthDay", NULL, 0x1, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "MonthDay", NULL, 0x1, NULL },
    { "initWithInt:withInt:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x1, NULL },
    { "initWithOrgJodaTimeMonthDay:withIntArray:", "MonthDay", NULL, 0x0, NULL },
    { "initWithOrgJodaTimeMonthDay:withOrgJodaTimeChronology:", "MonthDay", NULL, 0x0, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL },
    { "getFieldTypeWithInt:", "getFieldType", "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "getFieldTypes", NULL, "[Lorg.joda.time.DateTimeFieldType;", 0x1, NULL },
    { "withChronologyRetainFieldsWithOrgJodaTimeChronology:", "withChronologyRetainFields", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "plusMonthsWithInt:", "plusMonths", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "plusDaysWithInt:", "plusDays", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "minusMonthsWithInt:", "minusMonths", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "minusDaysWithInt:", "minusDays", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "toLocalDateWithInt:", "toLocalDate", "Lorg.joda.time.LocalDate;", 0x1, NULL },
    { "getMonthOfYear", NULL, "I", 0x1, NULL },
    { "getDayOfMonth", NULL, "I", 0x1, NULL },
    { "withMonthOfYearWithInt:", "withMonthOfYear", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "withDayOfMonthWithInt:", "withDayOfMonth", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.MonthDay$Property;", 0x1, NULL },
    { "monthOfYear", NULL, "Lorg.joda.time.MonthDay$Property;", 0x1, NULL },
    { "dayOfMonth", NULL, "Lorg.joda.time.MonthDay$Property;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_MonthDay_", "serialVersionUID", 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeMonthDay_serialVersionUID },
    { "FIELD_TYPES_", NULL, 0x1a, "[Lorg.joda.time.DateTimeFieldType;", &OrgJodaTimeMonthDay_FIELD_TYPES_,  },
    { "PARSER_", NULL, 0x1a, "Lorg.joda.time.format.DateTimeFormatter;", &OrgJodaTimeMonthDay_PARSER_,  },
    { "MONTH_OF_YEAR_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMonthDay_MONTH_OF_YEAR },
    { "DAY_OF_MONTH_", NULL, 0x19, "I", NULL, .constantValue.asInt = OrgJodaTimeMonthDay_DAY_OF_MONTH },
  };
  static J2ObjcClassInfo _OrgJodaTimeMonthDay = { "MonthDay", "org.joda.time", NULL, 0x11, 44, methods, 5, fields, 0, NULL};
  return &_OrgJodaTimeMonthDay;
}

@end

@implementation OrgJodaTimeMonthDay_Property

- (instancetype)initWithOrgJodaTimeMonthDay:(OrgJodaTimeMonthDay *)partial
                                    withInt:(int)fieldIndex {
  if (self = [super init]) {
    iBase_ = partial;
    iFieldIndex_ = fieldIndex;
  }
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iBase_;
}

- (OrgJodaTimeMonthDay *)getMonthDay {
  return iBase_;
}

- (int)get {
  return [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimeMonthDay *)addToCopyWithInt:(int)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:iBase_ withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)addWrapFieldToCopyWithInt:(int)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:iBase_ withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)setCopyWithInt:(int)value {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:iBase_ withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)setCopyWithNSString:(NSString *)text
                          withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimeMonthDay *) nil_chk(iBase_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iBase_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return [[OrgJodaTimeMonthDay alloc] initWithOrgJodaTimeMonthDay:iBase_ withIntArray:newValues];
}

- (OrgJodaTimeMonthDay *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (void)copyAllFieldsTo:(OrgJodaTimeMonthDay_Property *)other {
  [super copyAllFieldsTo:other];
  other->iBase_ = iBase_;
  other->iFieldIndex_ = iFieldIndex_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeMonthDay:withInt:", "Property", NULL, 0x0, NULL },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL },
    { "getReadablePartial", NULL, "Lorg.joda.time.ReadablePartial;", 0x4, NULL },
    { "getMonthDay", NULL, "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "get", NULL, "I", 0x1, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.MonthDay;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = OrgJodaTimeMonthDay_Property_serialVersionUID },
    { "iBase_", NULL, 0x12, "Lorg.joda.time.MonthDay;", NULL,  },
    { "iFieldIndex_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeMonthDay_Property = { "Property", "org.joda.time", "MonthDay", 0x9, 10, methods, 3, fields, 0, NULL};
  return &_OrgJodaTimeMonthDay_Property;
}

@end
