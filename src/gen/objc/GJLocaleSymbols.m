//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrewebling/Laundrapp/Joda-time-Project/joda-time/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java
//

#include "DateTimeFieldType.h"
#include "DateTimeUtils.h"
#include "GJLocaleSymbols.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IllegalFieldValueException.h"
#include "java/lang/Integer.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/Comparator.h"
#include "java/util/Locale.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"

BOOL OrgJodaTimeChronoGJLocaleSymbols_initialized = NO;

@implementation OrgJodaTimeChronoGJLocaleSymbols

id<JavaUtilConcurrentConcurrentMap> OrgJodaTimeChronoGJLocaleSymbols_cCache_;

+ (OrgJodaTimeChronoGJLocaleSymbols *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  OrgJodaTimeChronoGJLocaleSymbols *symbols = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_cCache_)) getWithId:locale];
  if (symbols == nil) {
    symbols = [[OrgJodaTimeChronoGJLocaleSymbols alloc] initWithJavaUtilLocale:locale];
    OrgJodaTimeChronoGJLocaleSymbols *oldSymbols = [OrgJodaTimeChronoGJLocaleSymbols_cCache_ putIfAbsentWithId:locale withId:symbols];
    if (oldSymbols != nil) {
      symbols = oldSymbols;
    }
  }
  return symbols;
}

+ (IOSObjectArray *)realignMonthsWithNSStringArray:(IOSObjectArray *)months {
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:13 type:[IOSClass classWithClass:[NSString class]]];
  for (int i = 1; i < 13; i++) {
    (void) IOSObjectArray_Set(a, i, IOSObjectArray_Get(nil_chk(months), i - 1));
  }
  return a;
}

+ (IOSObjectArray *)realignDaysOfWeekWithNSStringArray:(IOSObjectArray *)daysOfWeek {
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:8 type:[IOSClass classWithClass:[NSString class]]];
  for (int i = 1; i < 8; i++) {
    (void) IOSObjectArray_Set(a, i, IOSObjectArray_Get(nil_chk(daysOfWeek), (i < 7) ? i + 1 : 1));
  }
  return a;
}

+ (void)addSymbolsWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                    withNSStringArray:(IOSObjectArray *)symbols
             withJavaLangIntegerArray:(IOSObjectArray *)integers {
  for (int i = (int) [((IOSObjectArray *) nil_chk(symbols)) count]; --i >= 0; ) {
    NSString *symbol = IOSObjectArray_Get(symbols, i);
    if (symbol != nil) {
      (void) [((JavaUtilTreeMap *) nil_chk(map)) putWithId:symbol withId:IOSObjectArray_Get(nil_chk(integers), i)];
    }
  }
}

+ (void)addNumeralsWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                               withInt:(int)start
                               withInt:(int)end
              withJavaLangIntegerArray:(IOSObjectArray *)integers {
  for (int i = start; i <= end; i++) {
    (void) [((JavaUtilTreeMap *) nil_chk(map)) putWithId:[((NSString *) nil_chk([NSString valueOfInt:i])) intern] withId:IOSObjectArray_Get(nil_chk(integers), i)];
  }
}

+ (int)maxLengthWithNSStringArray:(IOSObjectArray *)a {
  int max = 0;
  for (int i = (int) [((IOSObjectArray *) nil_chk(a)) count]; --i >= 0; ) {
    NSString *s = IOSObjectArray_Get(a, i);
    if (s != nil) {
      int len = ((int) [s length]);
      if (len > max) {
        max = len;
      }
    }
  }
  return max;
}

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    JavaTextDateFormatSymbols *dfs = [OrgJodaTimeDateTimeUtils getDateFormatSymbolsWithJavaUtilLocale:locale];
    iEras_ = [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getEras];
    iDaysOfWeek_ = [OrgJodaTimeChronoGJLocaleSymbols realignDaysOfWeekWithNSStringArray:[dfs getWeekdays]];
    iShortDaysOfWeek_ = [OrgJodaTimeChronoGJLocaleSymbols realignDaysOfWeekWithNSStringArray:[dfs getShortWeekdays]];
    iMonths_ = [OrgJodaTimeChronoGJLocaleSymbols realignMonthsWithNSStringArray:[dfs getMonths]];
    iShortMonths_ = [OrgJodaTimeChronoGJLocaleSymbols realignMonthsWithNSStringArray:[dfs getShortMonths]];
    iHalfday_ = [dfs getAmPmStrings];
    IOSObjectArray *integers = [IOSObjectArray arrayWithLength:13 type:[IOSClass classWithClass:[JavaLangInteger class]]];
    for (int i = 0; i < 13; i++) {
      (void) IOSObjectArray_Set(integers, i, [JavaLangInteger valueOfWithInt:i]);
    }
    iParseEras_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()];
    [OrgJodaTimeChronoGJLocaleSymbols addSymbolsWithJavaUtilTreeMap:iParseEras_ withNSStringArray:iEras_ withJavaLangIntegerArray:integers];
    if ([@"en" isEqual:[((JavaUtilLocale *) nil_chk(locale)) getLanguage]]) {
      (void) [iParseEras_ putWithId:@"BCE" withId:IOSObjectArray_Get(integers, 0)];
      (void) [iParseEras_ putWithId:@"CE" withId:IOSObjectArray_Get(integers, 1)];
    }
    iParseDaysOfWeek_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()];
    [OrgJodaTimeChronoGJLocaleSymbols addSymbolsWithJavaUtilTreeMap:iParseDaysOfWeek_ withNSStringArray:iDaysOfWeek_ withJavaLangIntegerArray:integers];
    [OrgJodaTimeChronoGJLocaleSymbols addSymbolsWithJavaUtilTreeMap:iParseDaysOfWeek_ withNSStringArray:iShortDaysOfWeek_ withJavaLangIntegerArray:integers];
    [OrgJodaTimeChronoGJLocaleSymbols addNumeralsWithJavaUtilTreeMap:iParseDaysOfWeek_ withInt:1 withInt:7 withJavaLangIntegerArray:integers];
    iParseMonths_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()];
    [OrgJodaTimeChronoGJLocaleSymbols addSymbolsWithJavaUtilTreeMap:iParseMonths_ withNSStringArray:iMonths_ withJavaLangIntegerArray:integers];
    [OrgJodaTimeChronoGJLocaleSymbols addSymbolsWithJavaUtilTreeMap:iParseMonths_ withNSStringArray:iShortMonths_ withJavaLangIntegerArray:integers];
    [OrgJodaTimeChronoGJLocaleSymbols addNumeralsWithJavaUtilTreeMap:iParseMonths_ withInt:1 withInt:12 withJavaLangIntegerArray:integers];
    iMaxEraLength_ = [OrgJodaTimeChronoGJLocaleSymbols maxLengthWithNSStringArray:iEras_];
    iMaxDayOfWeekLength_ = [OrgJodaTimeChronoGJLocaleSymbols maxLengthWithNSStringArray:iDaysOfWeek_];
    iMaxShortDayOfWeekLength_ = [OrgJodaTimeChronoGJLocaleSymbols maxLengthWithNSStringArray:iShortDaysOfWeek_];
    iMaxMonthLength_ = [OrgJodaTimeChronoGJLocaleSymbols maxLengthWithNSStringArray:iMonths_];
    iMaxShortMonthLength_ = [OrgJodaTimeChronoGJLocaleSymbols maxLengthWithNSStringArray:iShortMonths_];
    iMaxHalfdayLength_ = [OrgJodaTimeChronoGJLocaleSymbols maxLengthWithNSStringArray:iHalfday_];
  }
  return self;
}

- (NSString *)eraValueToTextWithInt:(int)value {
  return IOSObjectArray_Get(nil_chk(iEras_), value);
}

- (int)eraTextToValueWithNSString:(NSString *)text {
  JavaLangInteger *era = [((JavaUtilTreeMap *) nil_chk(iParseEras_)) getWithId:text];
  if (era != nil) {
    return [era intValue];
  }
  @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType era] withNSString:text];
}

- (int)getEraMaxTextLength {
  return iMaxEraLength_;
}

- (NSString *)monthOfYearValueToTextWithInt:(int)value {
  return IOSObjectArray_Get(nil_chk(iMonths_), value);
}

- (NSString *)monthOfYearValueToShortTextWithInt:(int)value {
  return IOSObjectArray_Get(nil_chk(iShortMonths_), value);
}

- (int)monthOfYearTextToValueWithNSString:(NSString *)text {
  JavaLangInteger *month = [((JavaUtilTreeMap *) nil_chk(iParseMonths_)) getWithId:text];
  if (month != nil) {
    return [month intValue];
  }
  @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType monthOfYear] withNSString:text];
}

- (int)getMonthMaxTextLength {
  return iMaxMonthLength_;
}

- (int)getMonthMaxShortTextLength {
  return iMaxShortMonthLength_;
}

- (NSString *)dayOfWeekValueToTextWithInt:(int)value {
  return IOSObjectArray_Get(nil_chk(iDaysOfWeek_), value);
}

- (NSString *)dayOfWeekValueToShortTextWithInt:(int)value {
  return IOSObjectArray_Get(nil_chk(iShortDaysOfWeek_), value);
}

- (int)dayOfWeekTextToValueWithNSString:(NSString *)text {
  JavaLangInteger *day = [((JavaUtilTreeMap *) nil_chk(iParseDaysOfWeek_)) getWithId:text];
  if (day != nil) {
    return [day intValue];
  }
  @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType dayOfWeek] withNSString:text];
}

- (int)getDayOfWeekMaxTextLength {
  return iMaxDayOfWeekLength_;
}

- (int)getDayOfWeekMaxShortTextLength {
  return iMaxShortDayOfWeekLength_;
}

- (NSString *)halfdayValueToTextWithInt:(int)value {
  return IOSObjectArray_Get(nil_chk(iHalfday_), value);
}

- (int)halfdayTextToValueWithNSString:(NSString *)text {
  IOSObjectArray *halfday = iHalfday_;
  for (int i = (int) [((IOSObjectArray *) nil_chk(halfday)) count]; --i >= 0; ) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(halfday, i))) equalsIgnoreCase:text]) {
      return i;
    }
  }
  @throw [[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:[OrgJodaTimeDateTimeFieldType halfdayOfDay] withNSString:text];
}

- (int)getHalfdayMaxTextLength {
  return iMaxHalfdayLength_;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGJLocaleSymbols class]) {
    OrgJodaTimeChronoGJLocaleSymbols_cCache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    OrgJodaTimeChronoGJLocaleSymbols_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJLocaleSymbols *)other {
  [super copyAllFieldsTo:other];
  other->iDaysOfWeek_ = iDaysOfWeek_;
  other->iEras_ = iEras_;
  other->iHalfday_ = iHalfday_;
  other->iMaxDayOfWeekLength_ = iMaxDayOfWeekLength_;
  other->iMaxEraLength_ = iMaxEraLength_;
  other->iMaxHalfdayLength_ = iMaxHalfdayLength_;
  other->iMaxMonthLength_ = iMaxMonthLength_;
  other->iMaxShortDayOfWeekLength_ = iMaxShortDayOfWeekLength_;
  other->iMaxShortMonthLength_ = iMaxShortMonthLength_;
  other->iMonths_ = iMonths_;
  other->iParseDaysOfWeek_ = iParseDaysOfWeek_;
  other->iParseEras_ = iParseEras_;
  other->iParseMonths_ = iParseMonths_;
  other->iShortDaysOfWeek_ = iShortDaysOfWeek_;
  other->iShortMonths_ = iShortMonths_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "forLocaleWithJavaUtilLocale:", "forLocale", "Lorg.joda.time.chrono.GJLocaleSymbols;", 0x8, NULL },
    { "realignMonthsWithNSStringArray:", "realignMonths", "[Ljava.lang.String;", 0xa, NULL },
    { "realignDaysOfWeekWithNSStringArray:", "realignDaysOfWeek", "[Ljava.lang.String;", 0xa, NULL },
    { "addSymbolsWithJavaUtilTreeMap:withNSStringArray:withJavaLangIntegerArray:", "addSymbols", "V", 0xa, NULL },
    { "addNumeralsWithJavaUtilTreeMap:withInt:withInt:withJavaLangIntegerArray:", "addNumerals", "V", 0xa, NULL },
    { "maxLengthWithNSStringArray:", "maxLength", "I", 0xa, NULL },
    { "initWithJavaUtilLocale:", "GJLocaleSymbols", NULL, 0x2, NULL },
    { "eraValueToTextWithInt:", "eraValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "eraTextToValueWithNSString:", "eraTextToValue", "I", 0x1, NULL },
    { "getEraMaxTextLength", NULL, "I", 0x1, NULL },
    { "monthOfYearValueToTextWithInt:", "monthOfYearValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "monthOfYearValueToShortTextWithInt:", "monthOfYearValueToShortText", "Ljava.lang.String;", 0x1, NULL },
    { "monthOfYearTextToValueWithNSString:", "monthOfYearTextToValue", "I", 0x1, NULL },
    { "getMonthMaxTextLength", NULL, "I", 0x1, NULL },
    { "getMonthMaxShortTextLength", NULL, "I", 0x1, NULL },
    { "dayOfWeekValueToTextWithInt:", "dayOfWeekValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "dayOfWeekValueToShortTextWithInt:", "dayOfWeekValueToShortText", "Ljava.lang.String;", 0x1, NULL },
    { "dayOfWeekTextToValueWithNSString:", "dayOfWeekTextToValue", "I", 0x1, NULL },
    { "getDayOfWeekMaxTextLength", NULL, "I", 0x1, NULL },
    { "getDayOfWeekMaxShortTextLength", NULL, "I", 0x1, NULL },
    { "halfdayValueToTextWithInt:", "halfdayValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "halfdayTextToValueWithNSString:", "halfdayTextToValue", "I", 0x1, NULL },
    { "getHalfdayMaxTextLength", NULL, "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cCache_", NULL, 0xa, "Ljava.util.concurrent.ConcurrentMap;", &OrgJodaTimeChronoGJLocaleSymbols_cCache_,  },
    { "iEras_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iDaysOfWeek_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iShortDaysOfWeek_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iMonths_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iShortMonths_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iHalfday_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iParseEras_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "iParseDaysOfWeek_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "iParseMonths_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "iMaxEraLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxDayOfWeekLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxShortDayOfWeekLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxMonthLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxShortMonthLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxHalfdayLength_", NULL, 0x12, "I", NULL,  },
  };
  static J2ObjcClassInfo _OrgJodaTimeChronoGJLocaleSymbols = { "GJLocaleSymbols", "org.joda.time.chrono", NULL, 0x0, 23, methods, 16, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJLocaleSymbols;
}

@end
