//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java
//

#include "DateTimeFieldType.h"
#include "DateTimeUtils.h"
#include "GJLocaleSymbols.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IllegalFieldValueException.h"
#include "java/lang/Integer.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/Comparator.h"
#include "java/util/Locale.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeChronoGJLocaleSymbols_realignMonthsWithNSStringArray_(IOSObjectArray *months);
__attribute__((unused)) static IOSObjectArray *OrgJodaTimeChronoGJLocaleSymbols_realignDaysOfWeekWithNSStringArray_(IOSObjectArray *daysOfWeek);
__attribute__((unused)) static void OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(JavaUtilTreeMap *map, IOSObjectArray *symbols, IOSObjectArray *integers);
__attribute__((unused)) static void OrgJodaTimeChronoGJLocaleSymbols_addNumeralsWithJavaUtilTreeMap_withInt_withInt_withJavaLangIntegerArray_(JavaUtilTreeMap *map, jint start, jint end, IOSObjectArray *integers);
__attribute__((unused)) static jint OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(IOSObjectArray *a);

BOOL OrgJodaTimeChronoGJLocaleSymbols_initialized = NO;

@implementation OrgJodaTimeChronoGJLocaleSymbols

id<JavaUtilConcurrentConcurrentMap> OrgJodaTimeChronoGJLocaleSymbols_cCache_;

+ (OrgJodaTimeChronoGJLocaleSymbols *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale);
}

+ (IOSObjectArray *)realignMonthsWithNSStringArray:(IOSObjectArray *)months {
  return OrgJodaTimeChronoGJLocaleSymbols_realignMonthsWithNSStringArray_(months);
}

+ (IOSObjectArray *)realignDaysOfWeekWithNSStringArray:(IOSObjectArray *)daysOfWeek {
  return OrgJodaTimeChronoGJLocaleSymbols_realignDaysOfWeekWithNSStringArray_(daysOfWeek);
}

+ (void)addSymbolsWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                    withNSStringArray:(IOSObjectArray *)symbols
             withJavaLangIntegerArray:(IOSObjectArray *)integers {
  OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(map, symbols, integers);
}

+ (void)addNumeralsWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                               withInt:(jint)start
                               withInt:(jint)end
              withJavaLangIntegerArray:(IOSObjectArray *)integers {
  OrgJodaTimeChronoGJLocaleSymbols_addNumeralsWithJavaUtilTreeMap_withInt_withInt_withJavaLangIntegerArray_(map, start, end, integers);
}

+ (jint)maxLengthWithNSStringArray:(IOSObjectArray *)a {
  return OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(a);
}

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    JavaTextDateFormatSymbols *dfs = OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(locale);
    OrgJodaTimeChronoGJLocaleSymbols_set_iEras_(self, [((JavaTextDateFormatSymbols *) nil_chk(dfs)) getEras]);
    OrgJodaTimeChronoGJLocaleSymbols_set_iDaysOfWeek_(self, OrgJodaTimeChronoGJLocaleSymbols_realignDaysOfWeekWithNSStringArray_([dfs getWeekdays]));
    OrgJodaTimeChronoGJLocaleSymbols_set_iShortDaysOfWeek_(self, OrgJodaTimeChronoGJLocaleSymbols_realignDaysOfWeekWithNSStringArray_([dfs getShortWeekdays]));
    OrgJodaTimeChronoGJLocaleSymbols_set_iMonths_(self, OrgJodaTimeChronoGJLocaleSymbols_realignMonthsWithNSStringArray_([dfs getMonths]));
    OrgJodaTimeChronoGJLocaleSymbols_set_iShortMonths_(self, OrgJodaTimeChronoGJLocaleSymbols_realignMonthsWithNSStringArray_([dfs getShortMonths]));
    OrgJodaTimeChronoGJLocaleSymbols_set_iHalfday_(self, [dfs getAmPmStrings]);
    IOSObjectArray *integers = [IOSObjectArray arrayWithLength:13 type:[IOSClass classWithClass:[JavaLangInteger class]]];
    for (jint i = 0; i < 13; i++) {
      IOSObjectArray_Set(integers, i, JavaLangInteger_valueOfWithInt_(i));
    }
    OrgJodaTimeChronoGJLocaleSymbols_setAndConsume_iParseEras_(self, [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()]);
    OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(iParseEras_, iEras_, integers);
    if ([@"en" isEqual:[((JavaUtilLocale *) nil_chk(locale)) getLanguage]]) {
      [iParseEras_ putWithId:@"BCE" withId:IOSObjectArray_Get(integers, 0)];
      [iParseEras_ putWithId:@"CE" withId:IOSObjectArray_Get(integers, 1)];
    }
    OrgJodaTimeChronoGJLocaleSymbols_setAndConsume_iParseDaysOfWeek_(self, [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()]);
    OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(iParseDaysOfWeek_, iDaysOfWeek_, integers);
    OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(iParseDaysOfWeek_, iShortDaysOfWeek_, integers);
    OrgJodaTimeChronoGJLocaleSymbols_addNumeralsWithJavaUtilTreeMap_withInt_withInt_withJavaLangIntegerArray_(iParseDaysOfWeek_, 1, 7, integers);
    OrgJodaTimeChronoGJLocaleSymbols_setAndConsume_iParseMonths_(self, [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:NSString_get_CASE_INSENSITIVE_ORDER_()]);
    OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(iParseMonths_, iMonths_, integers);
    OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(iParseMonths_, iShortMonths_, integers);
    OrgJodaTimeChronoGJLocaleSymbols_addNumeralsWithJavaUtilTreeMap_withInt_withInt_withJavaLangIntegerArray_(iParseMonths_, 1, 12, integers);
    iMaxEraLength_ = OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(iEras_);
    iMaxDayOfWeekLength_ = OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(iDaysOfWeek_);
    iMaxShortDayOfWeekLength_ = OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(iShortDaysOfWeek_);
    iMaxMonthLength_ = OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(iMonths_);
    iMaxShortMonthLength_ = OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(iShortMonths_);
    iMaxHalfdayLength_ = OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(iHalfday_);
  }
  return self;
}

- (NSString *)eraValueToTextWithInt:(jint)value {
  return IOSObjectArray_Get(nil_chk(iEras_), value);
}

- (jint)eraTextToValueWithNSString:(NSString *)text {
  JavaLangInteger *era = [((JavaUtilTreeMap *) nil_chk(iParseEras_)) getWithId:text];
  if (era != nil) {
    return [era intValue];
  }
  @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_era() withNSString:text] autorelease];
}

- (jint)getEraMaxTextLength {
  return iMaxEraLength_;
}

- (NSString *)monthOfYearValueToTextWithInt:(jint)value {
  return IOSObjectArray_Get(nil_chk(iMonths_), value);
}

- (NSString *)monthOfYearValueToShortTextWithInt:(jint)value {
  return IOSObjectArray_Get(nil_chk(iShortMonths_), value);
}

- (jint)monthOfYearTextToValueWithNSString:(NSString *)text {
  JavaLangInteger *month = [((JavaUtilTreeMap *) nil_chk(iParseMonths_)) getWithId:text];
  if (month != nil) {
    return [month intValue];
  }
  @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_monthOfYear() withNSString:text] autorelease];
}

- (jint)getMonthMaxTextLength {
  return iMaxMonthLength_;
}

- (jint)getMonthMaxShortTextLength {
  return iMaxShortMonthLength_;
}

- (NSString *)dayOfWeekValueToTextWithInt:(jint)value {
  return IOSObjectArray_Get(nil_chk(iDaysOfWeek_), value);
}

- (NSString *)dayOfWeekValueToShortTextWithInt:(jint)value {
  return IOSObjectArray_Get(nil_chk(iShortDaysOfWeek_), value);
}

- (jint)dayOfWeekTextToValueWithNSString:(NSString *)text {
  JavaLangInteger *day = [((JavaUtilTreeMap *) nil_chk(iParseDaysOfWeek_)) getWithId:text];
  if (day != nil) {
    return [day intValue];
  }
  @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfWeek() withNSString:text] autorelease];
}

- (jint)getDayOfWeekMaxTextLength {
  return iMaxDayOfWeekLength_;
}

- (jint)getDayOfWeekMaxShortTextLength {
  return iMaxShortDayOfWeekLength_;
}

- (NSString *)halfdayValueToTextWithInt:(jint)value {
  return IOSObjectArray_Get(nil_chk(iHalfday_), value);
}

- (jint)halfdayTextToValueWithNSString:(NSString *)text {
  IOSObjectArray *halfday = iHalfday_;
  for (jint i = ((IOSObjectArray *) nil_chk(halfday))->size_; --i >= 0; ) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(halfday, i))) equalsIgnoreCase:text]) {
      return i;
    }
  }
  @throw [[[OrgJodaTimeIllegalFieldValueException alloc] initWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_halfdayOfDay() withNSString:text] autorelease];
}

- (jint)getHalfdayMaxTextLength {
  return iMaxHalfdayLength_;
}

- (void)dealloc {
  OrgJodaTimeChronoGJLocaleSymbols_set_iEras_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iDaysOfWeek_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iShortDaysOfWeek_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iMonths_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iShortMonths_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iHalfday_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iParseEras_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iParseDaysOfWeek_(self, nil);
  OrgJodaTimeChronoGJLocaleSymbols_set_iParseMonths_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(OrgJodaTimeChronoGJLocaleSymbols *)other {
  [super copyAllFieldsTo:other];
  OrgJodaTimeChronoGJLocaleSymbols_set_iEras_(other, iEras_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iDaysOfWeek_(other, iDaysOfWeek_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iShortDaysOfWeek_(other, iShortDaysOfWeek_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iMonths_(other, iMonths_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iShortMonths_(other, iShortMonths_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iHalfday_(other, iHalfday_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iParseEras_(other, iParseEras_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iParseDaysOfWeek_(other, iParseDaysOfWeek_);
  OrgJodaTimeChronoGJLocaleSymbols_set_iParseMonths_(other, iParseMonths_);
  other->iMaxEraLength_ = iMaxEraLength_;
  other->iMaxDayOfWeekLength_ = iMaxDayOfWeekLength_;
  other->iMaxShortDayOfWeekLength_ = iMaxShortDayOfWeekLength_;
  other->iMaxMonthLength_ = iMaxMonthLength_;
  other->iMaxShortMonthLength_ = iMaxShortMonthLength_;
  other->iMaxHalfdayLength_ = iMaxHalfdayLength_;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGJLocaleSymbols class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoGJLocaleSymbols_cCache_, nil, [[JavaUtilConcurrentConcurrentHashMap alloc] init]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoGJLocaleSymbols)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "forLocaleWithJavaUtilLocale:", "forLocale", "Lorg.joda.time.chrono.GJLocaleSymbols;", 0x8, NULL },
    { "realignMonthsWithNSStringArray:", "realignMonths", "[Ljava.lang.String;", 0xa, NULL },
    { "realignDaysOfWeekWithNSStringArray:", "realignDaysOfWeek", "[Ljava.lang.String;", 0xa, NULL },
    { "addSymbolsWithJavaUtilTreeMap:withNSStringArray:withJavaLangIntegerArray:", "addSymbols", "V", 0xa, NULL },
    { "addNumeralsWithJavaUtilTreeMap:withInt:withInt:withJavaLangIntegerArray:", "addNumerals", "V", 0xa, NULL },
    { "maxLengthWithNSStringArray:", "maxLength", "I", 0xa, NULL },
    { "initWithJavaUtilLocale:", "GJLocaleSymbols", NULL, 0x2, NULL },
    { "eraValueToTextWithInt:", "eraValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "eraTextToValueWithNSString:", "eraTextToValue", "I", 0x1, NULL },
    { "getEraMaxTextLength", NULL, "I", 0x1, NULL },
    { "monthOfYearValueToTextWithInt:", "monthOfYearValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "monthOfYearValueToShortTextWithInt:", "monthOfYearValueToShortText", "Ljava.lang.String;", 0x1, NULL },
    { "monthOfYearTextToValueWithNSString:", "monthOfYearTextToValue", "I", 0x1, NULL },
    { "getMonthMaxTextLength", NULL, "I", 0x1, NULL },
    { "getMonthMaxShortTextLength", NULL, "I", 0x1, NULL },
    { "dayOfWeekValueToTextWithInt:", "dayOfWeekValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "dayOfWeekValueToShortTextWithInt:", "dayOfWeekValueToShortText", "Ljava.lang.String;", 0x1, NULL },
    { "dayOfWeekTextToValueWithNSString:", "dayOfWeekTextToValue", "I", 0x1, NULL },
    { "getDayOfWeekMaxTextLength", NULL, "I", 0x1, NULL },
    { "getDayOfWeekMaxShortTextLength", NULL, "I", 0x1, NULL },
    { "halfdayValueToTextWithInt:", "halfdayValueToText", "Ljava.lang.String;", 0x1, NULL },
    { "halfdayTextToValueWithNSString:", "halfdayTextToValue", "I", 0x1, NULL },
    { "getHalfdayMaxTextLength", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cCache_", NULL, 0xa, "Ljava.util.concurrent.ConcurrentMap;", &OrgJodaTimeChronoGJLocaleSymbols_cCache_,  },
    { "iEras_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iDaysOfWeek_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iShortDaysOfWeek_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iMonths_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iShortMonths_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iHalfday_", NULL, 0x12, "[Ljava.lang.String;", NULL,  },
    { "iParseEras_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "iParseDaysOfWeek_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "iParseMonths_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "iMaxEraLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxDayOfWeekLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxShortDayOfWeekLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxMonthLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxShortMonthLength_", NULL, 0x12, "I", NULL,  },
    { "iMaxHalfdayLength_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJLocaleSymbols = { "GJLocaleSymbols", "org.joda.time.chrono", NULL, 0x0, 23, methods, 16, fields, 0, NULL};
  return &_OrgJodaTimeChronoGJLocaleSymbols;
}

@end

OrgJodaTimeChronoGJLocaleSymbols *OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgJodaTimeChronoGJLocaleSymbols_init();
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  OrgJodaTimeChronoGJLocaleSymbols *symbols = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_cCache_)) getWithId:locale];
  if (symbols == nil) {
    symbols = [[[OrgJodaTimeChronoGJLocaleSymbols alloc] initWithJavaUtilLocale:locale] autorelease];
    OrgJodaTimeChronoGJLocaleSymbols *oldSymbols = [OrgJodaTimeChronoGJLocaleSymbols_cCache_ putIfAbsentWithId:locale withId:symbols];
    if (oldSymbols != nil) {
      symbols = oldSymbols;
    }
  }
  return symbols;
}

IOSObjectArray *OrgJodaTimeChronoGJLocaleSymbols_realignMonthsWithNSStringArray_(IOSObjectArray *months) {
  OrgJodaTimeChronoGJLocaleSymbols_init();
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:13 type:[IOSClass classWithClass:[NSString class]]];
  for (jint i = 1; i < 13; i++) {
    IOSObjectArray_Set(a, i, IOSObjectArray_Get(nil_chk(months), i - 1));
  }
  return a;
}

IOSObjectArray *OrgJodaTimeChronoGJLocaleSymbols_realignDaysOfWeekWithNSStringArray_(IOSObjectArray *daysOfWeek) {
  OrgJodaTimeChronoGJLocaleSymbols_init();
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:8 type:[IOSClass classWithClass:[NSString class]]];
  for (jint i = 1; i < 8; i++) {
    IOSObjectArray_Set(a, i, IOSObjectArray_Get(nil_chk(daysOfWeek), (i < 7) ? i + 1 : 1));
  }
  return a;
}

void OrgJodaTimeChronoGJLocaleSymbols_addSymbolsWithJavaUtilTreeMap_withNSStringArray_withJavaLangIntegerArray_(JavaUtilTreeMap *map, IOSObjectArray *symbols, IOSObjectArray *integers) {
  OrgJodaTimeChronoGJLocaleSymbols_init();
  for (jint i = ((IOSObjectArray *) nil_chk(symbols))->size_; --i >= 0; ) {
    NSString *symbol = IOSObjectArray_Get(symbols, i);
    if (symbol != nil) {
      [((JavaUtilTreeMap *) nil_chk(map)) putWithId:symbol withId:IOSObjectArray_Get(nil_chk(integers), i)];
    }
  }
}

void OrgJodaTimeChronoGJLocaleSymbols_addNumeralsWithJavaUtilTreeMap_withInt_withInt_withJavaLangIntegerArray_(JavaUtilTreeMap *map, jint start, jint end, IOSObjectArray *integers) {
  OrgJodaTimeChronoGJLocaleSymbols_init();
  for (jint i = start; i <= end; i++) {
    [((JavaUtilTreeMap *) nil_chk(map)) putWithId:[((NSString *) nil_chk(NSString_valueOfWithInt_(i))) intern] withId:IOSObjectArray_Get(nil_chk(integers), i)];
  }
}

jint OrgJodaTimeChronoGJLocaleSymbols_maxLengthWithNSStringArray_(IOSObjectArray *a) {
  OrgJodaTimeChronoGJLocaleSymbols_init();
  jint max = 0;
  for (jint i = ((IOSObjectArray *) nil_chk(a))->size_; --i >= 0; ) {
    NSString *s = IOSObjectArray_Get(a, i);
    if (s != nil) {
      jint len = ((jint) [s length]);
      if (len > max) {
        max = len;
      }
    }
  }
  return max;
}
