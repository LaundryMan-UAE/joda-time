//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/joda-time/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java
//

#ifndef _OrgJodaTimeFormatPeriodFormatterBuilder_H_
#define _OrgJodaTimeFormatPeriodFormatterBuilder_H_

@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@class JavaUtilLocale;
@class OrgJodaTimeFormatPeriodFormatter;
@class OrgJodaTimePeriodType;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix;
@protocol OrgJodaTimeReadWritablePeriod;
@protocol OrgJodaTimeReadablePeriod;

#include "J2ObjC_header.h"
#include "PeriodParser.h"
#include "PeriodPrinter.h"
#include "java/util/Comparator.h"

#define OrgJodaTimeFormatPeriodFormatterBuilder_DAYS 3
#define OrgJodaTimeFormatPeriodFormatterBuilder_HOURS 4
#define OrgJodaTimeFormatPeriodFormatterBuilder_MAX_FIELD 9
#define OrgJodaTimeFormatPeriodFormatterBuilder_MILLIS 7
#define OrgJodaTimeFormatPeriodFormatterBuilder_MINUTES 5
#define OrgJodaTimeFormatPeriodFormatterBuilder_MONTHS 1
#define OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_ALWAYS 4
#define OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_IF_SUPPORTED 3
#define OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_NEVER 5
#define OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_FIRST 1
#define OrgJodaTimeFormatPeriodFormatterBuilder_PRINT_ZERO_RARELY_LAST 2
#define OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS 6
#define OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_MILLIS 8
#define OrgJodaTimeFormatPeriodFormatterBuilder_SECONDS_OPTIONAL_MILLIS 9
#define OrgJodaTimeFormatPeriodFormatterBuilder_WEEKS 2
#define OrgJodaTimeFormatPeriodFormatterBuilder_YEARS 0

/**
 @brief Factory that creates complex instances of PeriodFormatter via method calls.
 <p> Period formatting is performed by the PeriodFormatter class. Three classes provide factory methods to create formatters, and this is one. The others are PeriodFormat and ISOPeriodFormat . <p> PeriodFormatterBuilder is used for constructing formatters which are then used to print or parse. The formatters are built by appending specific fields or other formatters to an instance of this builder. <p> For example, a formatter that prints years and months, like "15 years and 8 months", can be constructed as follows: <p> <pre> PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder() .printZeroAlways() .appendYears() .appendSuffix(" year", " years") .appendSeparator(" and ") .printZeroRarelyLast() .appendMonths() .appendSuffix(" month", " months") .toFormatter(); </pre> <p> PeriodFormatterBuilder itself is mutable and not thread-safe, but the formatters that it builds are thread-safe and immutable.
 @author Brian S O'Neill
 @since 1.0
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder : NSObject {
}

- (instancetype)init;

/**
 @brief Constructs a PeriodFormatter using all the appended elements.
 <p> This is the main method used by applications at the end of the build process to create a usable formatter. <p> Subsequent changes to this builder do not affect the returned formatter. <p> The returned formatter may not support both printing and parsing. The methods PeriodFormatter#isPrinter() and PeriodFormatter#isParser() will help you determine the state of the formatter.
 @return the newly created formatter
 @throws IllegalStateException if the builder can produce neither a printer nor a parser
 */
- (OrgJodaTimeFormatPeriodFormatter *)toFormatter;

/**
 @brief Internal method to create a PeriodPrinter instance using all the appended elements.
 <p> Most applications will not use this method. If you want a printer in an application, call #toFormatter() and just use the printing API. <p> Subsequent changes to this builder do not affect the returned printer.
 @return the newly created printer, null if builder cannot create a printer
 */
- (id<OrgJodaTimeFormatPeriodPrinter>)toPrinter;

/**
 @brief Internal method to create a PeriodParser instance using all the appended elements.
 <p> Most applications will not use this method. If you want a printer in an application, call #toFormatter() and just use the printing API. <p> Subsequent changes to this builder do not affect the returned parser.
 @return the newly created parser, null if builder cannot create a parser
 */
- (id<OrgJodaTimeFormatPeriodParser>)toParser;

/**
 @brief Clears out all the appended elements, allowing this builder to be reused.
 */
- (void)clear;

/**
 @brief Appends another formatter.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWithOrgJodaTimeFormatPeriodFormatter:(OrgJodaTimeFormatPeriodFormatter *)formatter;

/**
 @brief Appends a printer parser pair.
 <p> Either the printer or the parser may be null, in which case the builder will be unable to produce a parser or printer repectively.
 @param printer appends a printer to the builder, null if printing is not supported
 @param parser appends a parser to the builder, null if parsing is not supported
 @return this PeriodFormatterBuilder
 @throws IllegalArgumentException if both the printer and parser are null
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)printer
                                                    withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)parser;

/**
 @brief Instructs the printer to emit specific text, and the parser to expect it.
 The parser is case-insensitive.
 @return this PeriodFormatterBuilder
 @throws IllegalArgumentException if text is null
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendLiteralWithNSString:(NSString *)text;

/**
 @brief Set the minimum digits printed for the next and following appended fields.
 By default, the minimum digits printed is one. If the field value is zero, it is not printed unless a printZero rule is applied.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)minimumPrintedDigitsWithInt:(jint)minDigits;

/**
 @brief Set the maximum digits parsed for the next and following appended fields.
 By default, the maximum digits parsed is ten.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)maximumParsedDigitsWithInt:(jint)maxDigits;

/**
 @brief Reject signed values when parsing the next and following appended fields.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)rejectSignedValuesWithBoolean:(jboolean)v;

/**
 @brief Never print zero values for the next and following appended fields, unless no fields would be printed.
 If no fields are printed, the printer forces the last "printZeroRarely" field to print a zero. <p> This field setting is the default.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroRarelyLast;

/**
 @brief Never print zero values for the next and following appended fields, unless no fields would be printed.
 If no fields are printed, the printer forces the first "printZeroRarely" field to print a zero.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroRarelyFirst;

/**
 @brief Print zero values for the next and following appened fields only if the period supports it.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroIfSupported;

/**
 @brief Always print zero values for the next and following appended fields, even if the period doesn't support it.
 The parser requires values for fields that always print zero.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroAlways;

/**
 @brief Never print zero values for the next and following appended fields, unless no fields would be printed.
 If no fields are printed, the printer forces the last "printZeroRarely" field to print a zero. <p> This field setting is the default.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)printZeroNever;

/**
 @brief Append a field prefix which applies only to the next appended field.
 If the field is not printed, neither is the prefix.
 @param text text to print before field only if field is printed
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSString:(NSString *)text;

/**
 @brief Append a field prefix which applies only to the next appended field.
 If the field is not printed, neither is the prefix. <p> During parsing, the singular and plural versions are accepted whether or not the actual value matches plurality.
 @param singularText text to print if field value is one
 @param pluralText text to print if field value is not one
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSString:(NSString *)singularText
                                                         withNSString:(NSString *)pluralText;

/**
 @brief Append a field prefix which applies only to the next appended field.
 If the field is not printed, neither is the prefix. <p> The value is converted to String. During parsing, the prefix is selected based on the match with the regular expression. The index of the first regular expression that matches value converted to String nominates the prefix. If none of the regular expressions match the value converted to String then the last prefix is selected. <p> An example usage for English might look like this: <pre> appendPrefix(new String[] { &quot;&circ;1$&quot;, &quot;.*&quot; }, new String[] { &quot; year&quot;, &quot; years&quot; }) </pre> <p> Please note that for languages with simple mapping (singular and plural prefix only - like the one above) the #appendPrefix(String,String) method will produce in a slightly faster formatter and that #appendPrefix(String[],String[]) method should be only used when the mapping between values and prefixes is more complicated than the difference between singular and plural.
 @param regularExpressions an array of regular expressions, at least one element, length has to match the length of prefixes parameter
 @param prefixes an array of prefixes, at least one element, length has to match the length of regularExpressions parameter
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if no field exists to append to
 @since 2.5
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendPrefixWithNSStringArray:(IOSObjectArray *)regularExpressions
                                                         withNSStringArray:(IOSObjectArray *)prefixes;

/**
 @brief Instruct the printer to emit an integer years field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendYears;

/**
 @brief Instruct the printer to emit an integer months field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMonths;

/**
 @brief Instruct the printer to emit an integer weeks field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendWeeks;

/**
 @brief Instruct the printer to emit an integer days field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendDays;

/**
 @brief Instruct the printer to emit an integer hours field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendHours;

/**
 @brief Instruct the printer to emit an integer minutes field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMinutes;

/**
 @brief Instruct the printer to emit an integer seconds field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeconds;

/**
 @brief Instruct the printer to emit a combined seconds and millis field, if supported.
 The millis will overflow into the seconds if necessary. The millis are always output.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSecondsWithMillis;

/**
 @brief Instruct the printer to emit a combined seconds and millis field, if supported.
 The millis will overflow into the seconds if necessary. The millis are only output if non-zero.
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSecondsWithOptionalMillis;

/**
 @brief Instruct the printer to emit an integer millis field, if supported.
 <p> The number of printed and parsed digits can be controlled using #minimumPrintedDigits(int) and #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMillis;

/**
 @brief Instruct the printer to emit an integer millis field, if supported.
 <p> The number of arsed digits can be controlled using #maximumParsedDigits(int) .
 @return this PeriodFormatterBuilder
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendMillis3Digit;

/**
 @brief Append a field suffix which applies only to the last appended field.
 If the field is not printed, neither is the suffix.
 @param text text to print after field only if field is printed
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if no field exists to append to
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSString:(NSString *)text;

/**
 @brief Append a field suffix which applies only to the last appended field.
 If the field is not printed, neither is the suffix. <p> During parsing, the singular and plural versions are accepted whether or not the actual value matches plurality.
 @param singularText text to print if field value is one
 @param pluralText text to print if field value is not one
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if no field exists to append to
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSString:(NSString *)singularText
                                                         withNSString:(NSString *)pluralText;

/**
 @brief Append a field suffix which applies only to the last appended field.
 If the field is not printed, neither is the suffix. <p> The value is converted to String. During parsing, the suffix is selected based on the match with the regular expression. The index of the first regular expression that matches value converted to String nominates the suffix. If none of the regular expressions match the value converted to String then the last suffix is selected. <p> An example usage for English might look like this: <pre> appendSuffix(new String[] { &quot;&circ;1$&quot;, &quot;.*&quot; }, new String[] { &quot; year&quot;, &quot; years&quot; }) </pre> <p> Please note that for languages with simple mapping (singular and plural suffix only - like the one above) the #appendSuffix(String,String) method will result in a slightly faster formatter and that #appendSuffix(String[],String[]) method should be only used when the mapping between values and prefixes is more complicated than the difference between singular and plural.
 @param regularExpressions an array of regular expressions, at least one element, length has to match the length of suffixes parameter
 @param suffixes an array of suffixes, at least one element, length has to match the length of regularExpressions parameter
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if no field exists to append to
 @since 2.5
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSuffixWithNSStringArray:(IOSObjectArray *)regularExpressions
                                                         withNSStringArray:(IOSObjectArray *)suffixes;

/**
 @brief Append a separator, which is output if fields are printed both before and after the separator.
 <p> For example, <code>builder.appendDays().appendSeparator(",").appendHours()</code> will only output the comma if both the days and hours fields are output. <p> The text will be parsed case-insensitively. <p> Note: appending a separator discontinues any further work on the latest appended field.
 @param text the text to use as a separator
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text;

/**
 @brief Append a separator, which is output only if fields are printed after the separator.
 <p> For example, <code>builder.appendDays().appendSeparatorIfFieldsAfter(",").appendHours()</code> will only output the comma if the hours fields is output. <p> The text will be parsed case-insensitively. <p> Note: appending a separator discontinues any further work on the latest appended field.
 @param text the text to use as a separator
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorIfFieldsAfterWithNSString:(NSString *)text;

/**
 @brief Append a separator, which is output only if fields are printed before the separator.
 <p> For example, <code>builder.appendDays().appendSeparatorIfFieldsBefore(",").appendHours()</code> will only output the comma if the days fields is output. <p> The text will be parsed case-insensitively. <p> Note: appending a separator discontinues any further work on the latest appended field.
 @param text the text to use as a separator
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorIfFieldsBeforeWithNSString:(NSString *)text;

/**
 @brief Append a separator, which is output if fields are printed both before and after the separator.
 <p> This method changes the separator depending on whether it is the last separator to be output. <p> For example, <code>builder.appendDays().appendSeparator(",", "&").appendHours().appendSeparator(",", "&").appendMinutes()</code> will output '1,2&3' if all three fields are output, '1&2' if two fields are output and '1' if just one field is output. <p> The text will be parsed case-insensitively. <p> Note: appending a separator discontinues any further work on the latest appended field.
 @param text the text to use as a separator
 @param finalText the text used used if this is the final separator to be printed
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText;

/**
 @brief Append a separator, which is output if fields are printed both before and after the separator.
 <p> This method changes the separator depending on whether it is the last separator to be output. <p> For example, <code>builder.appendDays().appendSeparator(",", "&").appendHours().appendSeparator(",", "&").appendMinutes()</code> will output '1,2&3' if all three fields are output, '1&2' if two fields are output and '1' if just one field is output. <p> The text will be parsed case-insensitively. <p> Note: appending a separator discontinues any further work on the latest appended field.
 @param text the text to use as a separator
 @param finalText the text used used if this is the final separator to be printed
 @param variants set of text values which are also acceptable when parsed
 @return this PeriodFormatterBuilder
 @throws IllegalStateException if this separator follows a previous one
 */
- (OrgJodaTimeFormatPeriodFormatterBuilder *)appendSeparatorWithNSString:(NSString *)text
                                                            withNSString:(NSString *)finalText
                                                       withNSStringArray:(IOSObjectArray *)variants;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeFormatPeriodFormatterBuilder_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, PRINT_ZERO_RARELY_FIRST, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, PRINT_ZERO_RARELY_LAST, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, PRINT_ZERO_IF_SUPPORTED, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, PRINT_ZERO_ALWAYS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, PRINT_ZERO_NEVER, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, YEARS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, MONTHS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, WEEKS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, DAYS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, HOURS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, MINUTES, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, SECONDS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, MILLIS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, SECONDS_MILLIS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, SECONDS_OPTIONAL_MILLIS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, MAX_FIELD, jint)

FOUNDATION_EXPORT id<JavaUtilConcurrentConcurrentMap> OrgJodaTimeFormatPeriodFormatterBuilder_PATTERNS_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder, PATTERNS_, id<JavaUtilConcurrentConcurrentMap>)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder)

/**
 @brief Defines a formatted field's prefix or suffix text.
 This can be used for fields such as 'n hours' or 'nH' or 'Hour:n'.
 */
@protocol OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix < NSObject, JavaObject >

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

/**
 @return new position after parsing affix, or ~position of failure
 */
- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

/**
 @return position where affix starts, or original ~position if not found
 */
- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

/**
 @return a copy of array of affixes
 */
- (IOSObjectArray *)getAffixes;

/**
 @brief This method should be called only once.
 After first call consecutive calls to this methods will have no effect. Causes this affix to ignore a match (parse and scan methods) if there is an affix in the passed list that holds affix text which satisfy both following conditions: - the affix text is also a match - the affix text is longer than the match from this object
 @param affixesToIgnore
 */
- (void)finishWithJavaUtilSet:(id<JavaUtilSet>)affixesToIgnore;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix)

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix)

/**
 @brief An affix that can be ignored.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix : NSObject < OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix > {
}

- (void)finishWithJavaUtilSet:(id<JavaUtilSet>)periodFieldAffixesToIgnore;

/**
 @brief Checks if there is a match among the other affixes (stored internally) that is longer than the passed value (textLength).
 @param textLength the length of the match
 @param periodStr the Period string that will be parsed
 @param position the position in the Period string at which the parsing should be started.
 @return true if the other affixes (stored internally) contain a match that is longer than the textLength parameter, false otherwise
 */
- (jboolean)matchesOtherAffixWithInt:(jint)textLength
                        withNSString:(NSString *)periodStr
                             withInt:(jint)position;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix)

/**
 @brief Implements an affix where the text does not vary by the amount.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix {
}

- (instancetype)initWithNSString:(NSString *)text;

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

- (IOSObjectArray *)getAffixes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_SimpleAffix)

/**
 @brief Implements an affix where the text varies by the amount of the field.
 Only singular (1) and plural (not 1) are supported.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix {
}

- (instancetype)initWithNSString:(NSString *)singularText
                    withNSString:(NSString *)pluralText;

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

- (IOSObjectArray *)getAffixes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_PluralAffix)

/**
 @brief Implements an affix where the text varies by the amount of the field.
 Different amounts are supported based on the provided parameters.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix {
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)regExes
                    withNSStringArray:(IOSObjectArray *)texts;

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

- (IOSObjectArray *)getAffixes;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT id<JavaUtilComparator> OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_LENGTH_DESC_COMPARATOR_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix, LENGTH_DESC_COMPARATOR_, id<JavaUtilComparator>)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix)

@interface OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1 : NSObject < JavaUtilComparator > {
}

- (jint)compareWithId:(NSString *)o1
               withId:(NSString *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_RegExAffix_$1)

/**
 @brief Builds a composite affix by merging two other affix implementations.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix : OrgJodaTimeFormatPeriodFormatterBuilder_IgnorableAffix {
}

- (instancetype)initWithOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)left
                    withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)right;

- (jint)calculatePrintedLengthWithInt:(jint)value;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
                                withInt:(jint)value;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
                        withInt:(jint)value;

- (jint)parseWithNSString:(NSString *)periodStr
                  withInt:(jint)position;

- (jint)scanWithNSString:(NSString *)periodStr
                 withInt:(jint)position;

- (IOSObjectArray *)getAffixes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_CompositeAffix)

/**
 @brief Formats the numeric value of a field, potentially with prefix/suffix.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser > {
}

- (instancetype)initWithInt:(jint)minPrintedDigits
                    withInt:(jint)printZeroSetting
                    withInt:(jint)maxParsedDigits
                withBoolean:(jboolean)rejectSignedValues
                    withInt:(jint)fieldType
withOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:(IOSObjectArray *)fieldFormatters
withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)prefix
withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix;

- (instancetype)initWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter:(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter *)field
                  withOrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix:(id<OrgJodaTimeFormatPeriodFormatterBuilder_PeriodFieldAffix>)suffix;

- (void)finishWithOrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatterArray:(IOSObjectArray *)fieldFormatters;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)text
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

/**
 @return Long.MAX_VALUE if nothing to print, otherwise value
 */
- (jlong)getFieldValueWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (jboolean)isZeroWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (jboolean)isSupportedWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
                                         withInt:(jint)field;

- (void)setFieldValueWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                               withInt:(jint)field
                                               withInt:(jint)value;

- (jint)getFieldType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_FieldFormatter)

/**
 @brief Handles a simple literal piece of text.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_Literal : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser > {
}

- (instancetype)initWithNSString:(NSString *)text;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)periodStr
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

FOUNDATION_EXPORT BOOL OrgJodaTimeFormatPeriodFormatterBuilder_Literal_initialized;
J2OBJC_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_Literal)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT OrgJodaTimeFormatPeriodFormatterBuilder_Literal *OrgJodaTimeFormatPeriodFormatterBuilder_Literal_EMPTY_;
J2OBJC_STATIC_FIELD_GETTER(OrgJodaTimeFormatPeriodFormatterBuilder_Literal, EMPTY_, OrgJodaTimeFormatPeriodFormatterBuilder_Literal *)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_Literal)

/**
 @brief Handles a separator, that splits the fields into multiple parts.
 For example, the 'T' in the ISO8601 standard.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_Separator : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser > {
}

- (instancetype)initWithNSString:(NSString *)text
                    withNSString:(NSString *)finalText
               withNSStringArray:(IOSObjectArray *)variants
withOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)beforePrinter
withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)beforeParser
                     withBoolean:(jboolean)useBefore
                     withBoolean:(jboolean)useAfter;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)periodStr
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeFormatPeriodFormatterBuilder_Separator *)finishWithOrgJodaTimeFormatPeriodPrinter:(id<OrgJodaTimeFormatPeriodPrinter>)afterPrinter
                                                              withOrgJodaTimeFormatPeriodParser:(id<OrgJodaTimeFormatPeriodParser>)afterParser;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_Separator)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_Separator)

/**
 @brief Composite implementation that merges other fields to create a full pattern.
 */
@interface OrgJodaTimeFormatPeriodFormatterBuilder_Composite : NSObject < OrgJodaTimeFormatPeriodPrinter, OrgJodaTimeFormatPeriodParser > {
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)elementPairs;

- (jint)countFieldsToPrintWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                withInt:(jint)stopAt
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)calculatePrintedLengthWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
          withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)printToWithJavaIoWriter:(JavaIoWriter *)outArg
  withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)parseIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>)period
                                      withNSString:(NSString *)periodStr
                                           withInt:(jint)position
                                withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeFormatPeriodFormatterBuilder_Composite)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFormatPeriodFormatterBuilder_Composite)

#endif // _OrgJodaTimeFormatPeriodFormatterBuilder_H_
